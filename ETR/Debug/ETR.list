
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08015ac8  08015ac8  00016ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016370  08016370  0001834c  2**0
                  CONTENTS
  4 .ARM          00000008  08016370  08016370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016378  08016378  0001834c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016378  08016378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801637c  0801637c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  08016380  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004690  2000034c  080166cc  0001834c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049dc  080166cc  000189dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001834c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d6f  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6b  00000000  00000000  0003c0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  00040d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168c  00000000  00000000  00042aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d603  00000000  00000000  00044134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025271  00000000  00000000  00071737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c3f1  00000000  00000000  000969a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b2d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009308  00000000  00000000  001b2ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001bc0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015ab0 	.word	0x08015ab0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	08015ab0 	.word	0x08015ab0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <fft_hanning_f32>:
#include "fft_windows.h"
void fft_hanning_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001048:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800104c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001050:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e031      	b.n	80010be <fft_hanning_f32+0x8a>
   {
     w = PI * i * k;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80010d0 <fft_hanning_f32+0x9c>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8001078:	ed97 0a03 	vldr	s0, [r7, #12]
 800107c:	f013 ff9a 	bl	8014fb4 <cosf>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w*pDst[i];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	ed93 7a00 	vldr	s14, [r3]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b4:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3c9      	bcc.n	800105a <fft_hanning_f32+0x26>
   }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40490fdb 	.word	0x40490fdb

080010d4 <fft_hamming_f32>:


void fft_hamming_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80010ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f0:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e02f      	b.n	800115a <fft_hamming_f32+0x86>
   {
     w = 0.54f - 0.46f * cosf (PI * i * k);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001104:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800116c <fft_hamming_f32+0x98>
 8001108:	ee27 7a87 	vmul.f32	s14, s15, s14
 800110c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	eeb0 0a67 	vmov.f32	s0, s15
 8001118:	f013 ff4c 	bl	8014fb4 <cosf>
 800111c:	eef0 7a40 	vmov.f32	s15, s0
 8001120:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001170 <fft_hamming_f32+0x9c>
 8001124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001128:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001174 <fft_hamming_f32+0xa0>
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w*pDst[i];
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d3cb      	bcc.n	80010fa <fft_hamming_f32+0x26>
   }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40490fdb 	.word	0x40490fdb
 8001170:	3eeb851f 	.word	0x3eeb851f
 8001174:	3f0a3d71 	.word	0x3f0a3d71

08001178 <fft_bartlett_f32>:


void fft_bartlett_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800118c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	edc7 7a03 	vstr	s15, [r7, #12]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	e035      	b.n	800120a <fft_bartlett_f32+0x92>
   {
     w = i * k ;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a05 	vstr	s15, [r7, #20]
     if (i * k > 1.0f)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011be:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	dd07      	ble.n	80011e4 <fft_bartlett_f32+0x6c>
     {
       w = 2.0f - w;
 80011d4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80011d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	edc7 7a05 	vstr	s15, [r7, #20]
     }
     pDst[i] = w*pDst[i];
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	3301      	adds	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3c5      	bcc.n	800119e <fft_bartlett_f32+0x26>
   }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <fft_blackman_harris_92db_f32>:


void fft_blackman_harris_92db_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	ed2d 8b02 	vpush	{d8}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001238:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800123c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001240:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e053      	b.n	80012f2 <fft_blackman_harris_92db_f32+0xd2>
   {
     w = PI * i * k;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001254:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001308 <fft_blackman_harris_92db_f32+0xe8>
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a03 	vstr	s15, [r7, #12]
        w = 0.35875f - 0.48829f * cosf (w) +
 8001268:	ed97 0a03 	vldr	s0, [r7, #12]
 800126c:	f013 fea2 	bl	8014fb4 <cosf>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800130c <fft_blackman_harris_92db_f32+0xec>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001310 <fft_blackman_harris_92db_f32+0xf0>
 8001280:	ee37 8a67 	vsub.f32	s16, s14, s15
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 8001284:	edd7 7a03 	vldr	s15, [r7, #12]
 8001288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f013 fe90 	bl	8014fb4 <cosf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001314 <fft_blackman_harris_92db_f32+0xf4>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
        w = 0.35875f - 0.48829f * cosf (w) +
 80012a0:	ee38 8a27 	vadd.f32	s16, s16, s15
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 80012a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	f013 fe7e 	bl	8014fb4 <cosf>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001318 <fft_blackman_harris_92db_f32+0xf8>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        w = 0.35875f - 0.48829f * cosf (w) +
 80012c4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]

        pDst[i] = w*pDst[i];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3a7      	bcc.n	800124a <fft_blackman_harris_92db_f32+0x2a>
   }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	ecbd 8b02 	vpop	{d8}
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40490fdb 	.word	0x40490fdb
 800130c:	3efa0126 	.word	0x3efa0126
 8001310:	3eb7ae14 	.word	0x3eb7ae14
 8001314:	3e10abb4 	.word	0x3e10abb4
 8001318:	3c3f5d79 	.word	0x3c3f5d79

0800131c <SysTick_GetValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SysTick_GetValue(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
    return SysTick->VAL;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <SysTick_GetValue+0x14>)
 8001322:	689b      	ldr	r3, [r3, #8]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <ConvertToVoltage>:




float ConvertToVoltage(uint32_t adcValue)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    return (adcValue / ADC_RESOLUTION) * VREF_VOLTAGE -VREF_VOLTAGE/2;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001346:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001368 <ConvertToVoltage+0x34>
 800134a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001356:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	457ff000 	.word	0x457ff000

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b08f      	sub	sp, #60	@ 0x3c
 8001370:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f001 fe60 	bl	8003036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f8f9 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 fe41 	bl	8002000 <MX_GPIO_Init>
  MX_DMA_Init();
 800137e:	f000 fdfd 	bl	8001f7c <MX_DMA_Init>
  MX_TIM2_Init();
 8001382:	f000 fc0b 	bl	8001b9c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001386:	f000 fd0b 	bl	8001da0 <MX_TIM4_Init>
  MX_USB_Device_Init();
 800138a:	f00e fdc7 	bl	800ff1c <MX_USB_Device_Init>
  MX_TIM3_Init();
 800138e:	f000 fc91 	bl	8001cb4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001392:	f000 f937 	bl	8001604 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001396:	f000 f9af 	bl	80016f8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800139a:	f000 fa15 	bl	80017c8 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 800139e:	f000 fad7 	bl	8001950 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80013a2:	f000 fafb 	bl	800199c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80013a6:	f000 fb1f 	bl	80019e8 <MX_TIM1_Init>
  MX_TIM15_Init();
 80013aa:	f000 fd49 	bl	8001e40 <MX_TIM15_Init>
  MX_LPUART1_UART_Init();
 80013ae:	f000 fa85 	bl	80018bc <MX_LPUART1_UART_Init>

//  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);



  HAL_OPAMP_Start(&hopamp1);
 80013b2:	485a      	ldr	r0, [pc, #360]	@ (800151c <main+0x1b0>)
 80013b4:	f004 fb50 	bl	8005a58 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80013b8:	4859      	ldr	r0, [pc, #356]	@ (8001520 <main+0x1b4>)
 80013ba:	f004 fb4d 	bl	8005a58 <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 80013be:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80013c2:	4958      	ldr	r1, [pc, #352]	@ (8001524 <main+0x1b8>)
 80013c4:	4858      	ldr	r0, [pc, #352]	@ (8001528 <main+0x1bc>)
 80013c6:	f002 fb25 	bl	8003a14 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 80013ca:	4858      	ldr	r0, [pc, #352]	@ (800152c <main+0x1c0>)
 80013cc:	f007 f930 	bl	8008630 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 80013d0:	4857      	ldr	r0, [pc, #348]	@ (8001530 <main+0x1c4>)
 80013d2:	f007 f92d 	bl	8008630 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80013d6:	4857      	ldr	r0, [pc, #348]	@ (8001534 <main+0x1c8>)
 80013d8:	f007 f92a 	bl	8008630 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80013dc:	4856      	ldr	r0, [pc, #344]	@ (8001538 <main+0x1cc>)
 80013de:	f007 f997 	bl	8008710 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013e2:	210c      	movs	r1, #12
 80013e4:	4852      	ldr	r0, [pc, #328]	@ (8001530 <main+0x1c4>)
 80013e6:	f007 fbe1 	bl	8008bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013ea:	2108      	movs	r1, #8
 80013ec:	4850      	ldr	r0, [pc, #320]	@ (8001530 <main+0x1c4>)
 80013ee:	f007 fbdd 	bl	8008bac <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80013f2:	2100      	movs	r1, #0
 80013f4:	484d      	ldr	r0, [pc, #308]	@ (800152c <main+0x1c0>)
 80013f6:	f007 fa65 	bl	80088c4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 80013fa:	2104      	movs	r1, #4
 80013fc:	484b      	ldr	r0, [pc, #300]	@ (800152c <main+0x1c0>)
 80013fe:	f007 fa61 	bl	80088c4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8001402:	2108      	movs	r1, #8
 8001404:	4849      	ldr	r0, [pc, #292]	@ (800152c <main+0x1c0>)
 8001406:	f007 fa5d 	bl	80088c4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800140a:	210c      	movs	r1, #12
 800140c:	4847      	ldr	r0, [pc, #284]	@ (800152c <main+0x1c0>)
 800140e:	f007 fa59 	bl	80088c4 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4849      	ldr	r0, [pc, #292]	@ (800153c <main+0x1d0>)
 8001416:	f007 ff69 	bl	80092ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 800141a:	2104      	movs	r1, #4
 800141c:	4847      	ldr	r0, [pc, #284]	@ (800153c <main+0x1d0>)
 800141e:	f007 ff65 	bl	80092ec <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best when 120Mhz 4 is best
//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <main+0x1d4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d1fb      	bne.n	8001422 <main+0xb6>
//		 ws2812_set_all(rgb_to_color(0x0f, 0x00, 0x00));
//		 ws2812_gradient(100, 10);



			rainbow_effect(255, 10);
 800142a:	210a      	movs	r1, #10
 800142c:	20ff      	movs	r0, #255	@ 0xff
 800142e:	f001 fd99 	bl	8002f64 <rainbow_effect>

			  switch (BOOT0_BTN_COUNT%5) {
 8001432:	4b44      	ldr	r3, [pc, #272]	@ (8001544 <main+0x1d8>)
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	4b44      	ldr	r3, [pc, #272]	@ (8001548 <main+0x1dc>)
 8001438:	fba3 2301 	umull	r2, r3, r3, r1
 800143c:	089a      	lsrs	r2, r3, #2
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	1aca      	subs	r2, r1, r3
 8001446:	1e53      	subs	r3, r2, #1
 8001448:	2b03      	cmp	r3, #3
 800144a:	d823      	bhi.n	8001494 <main+0x128>
 800144c:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <main+0xe8>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001465 	.word	0x08001465
 8001458:	08001471 	.word	0x08001471
 800145c:	0800147d 	.word	0x0800147d
 8001460:	08001489 	.word	0x08001489
				case 1:
					fft_bartlett_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001464:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001468:	4838      	ldr	r0, [pc, #224]	@ (800154c <main+0x1e0>)
 800146a:	f7ff fe85 	bl	8001178 <fft_bartlett_f32>
					break;
 800146e:	e012      	b.n	8001496 <main+0x12a>
				case 2:
					fft_blackman_harris_92db_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001470:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001474:	4835      	ldr	r0, [pc, #212]	@ (800154c <main+0x1e0>)
 8001476:	f7ff fed3 	bl	8001220 <fft_blackman_harris_92db_f32>
					break;
 800147a:	e00c      	b.n	8001496 <main+0x12a>
				case 3:
					fft_hamming_f32(WHILE_BUFFER, BUFFER_SIZE);
 800147c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001480:	4832      	ldr	r0, [pc, #200]	@ (800154c <main+0x1e0>)
 8001482:	f7ff fe27 	bl	80010d4 <fft_hamming_f32>
					break;
 8001486:	e006      	b.n	8001496 <main+0x12a>
				case 4:
					fft_hanning_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001488:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800148c:	482f      	ldr	r0, [pc, #188]	@ (800154c <main+0x1e0>)
 800148e:	f7ff fdd1 	bl	8001034 <fft_hanning_f32>
					break;
 8001492:	e000      	b.n	8001496 <main+0x12a>
				default:
					break;
 8001494:	bf00      	nop
			}
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e037      	b.n	800150c <main+0x1a0>
//		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
		ws2812_update_force();
 800149c:	f001 fc04 	bl	8002ca8 <ws2812_update_force>
		  sprintf(CDC_BUFFER,"Val:%.16f,%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT,SysTick_GetValue());
 80014a0:	4a2a      	ldr	r2, [pc, #168]	@ (800154c <main+0x1e0>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f874 	bl	8000598 <__aeabi_f2d>
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <main+0x1e4>)
 80014b6:	681e      	ldr	r6, [r3, #0]
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <main+0x1e8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <main+0x1ec>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <main+0x1f0>)
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	6079      	str	r1, [r7, #4]
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <main+0x1d8>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	6038      	str	r0, [r7, #0]
 80014d0:	f7ff ff24 	bl	800131c <SysTick_GetValue>
 80014d4:	4603      	mov	r3, r0
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	9005      	str	r0, [sp, #20]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	9104      	str	r1, [sp, #16]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	9203      	str	r2, [sp, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	9601      	str	r6, [sp, #4]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	4622      	mov	r2, r4
 80014f0:	462b      	mov	r3, r5
 80014f2:	491b      	ldr	r1, [pc, #108]	@ (8001560 <main+0x1f4>)
 80014f4:	481b      	ldr	r0, [pc, #108]	@ (8001564 <main+0x1f8>)
 80014f6:	f010 f923 	bl	8011740 <siprintf>
//		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
		  	 HAL_UART_Transmit(&hlpuart1, CDC_BUFFER, CDC_BUFFER_SIZE, 100);
 80014fa:	2364      	movs	r3, #100	@ 0x64
 80014fc:	2264      	movs	r2, #100	@ 0x64
 80014fe:	4919      	ldr	r1, [pc, #100]	@ (8001564 <main+0x1f8>)
 8001500:	4819      	ldr	r0, [pc, #100]	@ (8001568 <main+0x1fc>)
 8001502:	f009 fed1 	bl	800b2a8 <HAL_UART_Transmit>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001512:	dbc3      	blt.n	800149c <main+0x130>


		}

//		HAL_Delay(10);
		  WHILE_FLAG=0;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <main+0x1d4>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==2) {
 800151a:	e782      	b.n	8001422 <main+0xb6>
 800151c:	20000660 	.word	0x20000660
 8001520:	2000069c 	.word	0x2000069c
 8001524:	200008c4 	.word	0x200008c4
 8001528:	200003d4 	.word	0x200003d4
 800152c:	200006d8 	.word	0x200006d8
 8001530:	20000724 	.word	0x20000724
 8001534:	20000770 	.word	0x20000770
 8001538:	200007bc 	.word	0x200007bc
 800153c:	20000808 	.word	0x20000808
 8001540:	20001be8 	.word	0x20001be8
 8001544:	20001bec 	.word	0x20001bec
 8001548:	cccccccd 	.word	0xcccccccd
 800154c:	20001224 	.word	0x20001224
 8001550:	200008c0 	.word	0x200008c0
 8001554:	200008b8 	.word	0x200008b8
 8001558:	200008bc 	.word	0x200008bc
 800155c:	200008b4 	.word	0x200008b4
 8001560:	08015ac8 	.word	0x08015ac8
 8001564:	20001b84 	.word	0x20001b84
 8001568:	200005cc 	.word	0x200005cc

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2238      	movs	r2, #56	@ 0x38
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f010 f943 	bl	8011806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001592:	f005 ffc5 	bl	8007520 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001596:	2321      	movs	r3, #33	@ 0x21
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a8:	2303      	movs	r3, #3
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80015b0:	233c      	movs	r3, #60	@ 0x3c
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015bc:	2302      	movs	r3, #2
 80015be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 f85f 	bl	8007688 <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80015d0:	f000 fe2e 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2303      	movs	r3, #3
 80015da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2103      	movs	r1, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 fb5d 	bl	8007cac <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015f8:	f000 fe1a 	bl	8002230 <Error_Handler>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3750      	adds	r7, #80	@ 0x50
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	@ 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2220      	movs	r2, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f010 f8f2 	bl	8011806 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001622:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001624:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001628:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800162a:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800162c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001632:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001638:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800163e:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164a:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800164c:	2204      	movs	r2, #4
 800164e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800165e:	2201      	movs	r2, #1
 8001660:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800166c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <MX_ADC1_Init+0xec>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001690:	4817      	ldr	r0, [pc, #92]	@ (80016f0 <MX_ADC1_Init+0xec>)
 8001692:	f002 f803 	bl	800369c <HAL_ADC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800169c:	f000 fdc8 	bl	8002230 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <MX_ADC1_Init+0xec>)
 80016ac:	f003 fabc 	bl	8004c28 <HAL_ADCEx_MultiModeConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80016b6:	f000 fdbb 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_ADC1_Init+0xf0>)
 80016bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016be:	2306      	movs	r3, #6
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c6:	237f      	movs	r3, #127	@ 0x7f
 80016c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016ca:	2304      	movs	r3, #4
 80016cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <MX_ADC1_Init+0xec>)
 80016d8:	f002 fce4 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80016e2:	f000 fda5 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000368 	.word	0x20000368
 80016f4:	b6902000 	.word	0xb6902000

080016f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2220      	movs	r2, #32
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f010 f87e 	bl	8011806 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800170a:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800170c:	4a2c      	ldr	r2, [pc, #176]	@ (80017c0 <MX_ADC2_Init+0xc8>)
 800170e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001712:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001716:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800171e:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001732:	2204      	movs	r2, #4
 8001734:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001738:	2200      	movs	r2, #0
 800173a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800173e:	2200      	movs	r2, #0
 8001740:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001744:	2201      	movs	r2, #1
 8001746:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001748:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001752:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800175a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_ADC2_Init+0xc4>)
 800176a:	2200      	movs	r2, #0
 800176c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001776:	4811      	ldr	r0, [pc, #68]	@ (80017bc <MX_ADC2_Init+0xc4>)
 8001778:	f001 ff90 	bl	800369c <HAL_ADC_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001782:	f000 fd55 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_ADC2_Init+0xcc>)
 8001788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178a:	2306      	movs	r3, #6
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001792:	237f      	movs	r3, #127	@ 0x7f
 8001794:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001796:	2304      	movs	r3, #4
 8001798:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	@ (80017bc <MX_ADC2_Init+0xc4>)
 80017a4:	f002 fc7e 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80017ae:	f000 fd3f 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200003d4 	.word	0x200003d4
 80017c0:	50000100 	.word	0x50000100
 80017c4:	cb8c0000 	.word	0xcb8c0000

080017c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	@ 0x30
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2220      	movs	r2, #32
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f010 f810 	bl	8011806 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017e6:	4b32      	ldr	r3, [pc, #200]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 80017e8:	4a32      	ldr	r2, [pc, #200]	@ (80018b4 <MX_ADC3_Init+0xec>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 80017ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001806:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180c:	4b28      	ldr	r3, [pc, #160]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800180e:	2204      	movs	r2, #4
 8001810:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001812:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800181a:	2200      	movs	r2, #0
 800181c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001820:	2201      	movs	r2, #1
 8001822:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 800182c:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800182e:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800183c:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001846:	2200      	movs	r2, #0
 8001848:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001852:	4817      	ldr	r0, [pc, #92]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 8001854:	f001 ff22 	bl	800369c <HAL_ADC_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800185e:	f000 fce7 	bl	8002230 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4810      	ldr	r0, [pc, #64]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800186e:	f003 f9db 	bl	8004c28 <HAL_ADCEx_MultiModeConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001878:	f000 fcda 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_ADC3_Init+0xf0>)
 800187e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001880:	2306      	movs	r3, #6
 8001882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001888:	237f      	movs	r3, #127	@ 0x7f
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800188c:	2304      	movs	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_ADC3_Init+0xe8>)
 800189a:	f002 fc03 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80018a4:	f000 fcc4 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3730      	adds	r7, #48	@ 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000440 	.word	0x20000440
 80018b4:	50000400 	.word	0x50000400
 80018b8:	b6982000 	.word	0xb6982000

080018bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018c2:	4a22      	ldr	r2, [pc, #136]	@ (800194c <MX_LPUART1_UART_Init+0x90>)
 80018c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018fe:	4812      	ldr	r0, [pc, #72]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 8001900:	f009 fc82 	bl	800b208 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800190a:	f000 fc91 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190e:	2100      	movs	r1, #0
 8001910:	480d      	ldr	r0, [pc, #52]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 8001912:	f00a faab 	bl	800be6c <HAL_UARTEx_SetTxFifoThreshold>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800191c:	f000 fc88 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	4809      	ldr	r0, [pc, #36]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 8001924:	f00a fae0 	bl	800bee8 <HAL_UARTEx_SetRxFifoThreshold>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800192e:	f000 fc7f 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_LPUART1_UART_Init+0x8c>)
 8001934:	f00a fa61 	bl	800bdfa <HAL_UARTEx_DisableFifoMode>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800193e:	f000 fc77 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200005cc 	.word	0x200005cc
 800194c:	40008000 	.word	0x40008000

08001950 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <MX_OPAMP1_Init+0x48>)
 8001958:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 8001962:	2260      	movs	r2, #96	@ 0x60
 8001964:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 800196e:	2201      	movs	r2, #1
 8001970:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 800197a:	2200      	movs	r2, #0
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_OPAMP1_Init+0x44>)
 8001980:	f003 ff9a 	bl	80058b8 <HAL_OPAMP_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800198a:	f000 fc51 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000660 	.word	0x20000660
 8001998:	40010300 	.word	0x40010300

0800199c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019a2:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <MX_OPAMP3_Init+0x48>)
 80019a4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019ae:	2260      	movs	r2, #96	@ 0x60
 80019b0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019b4:	2208      	movs	r2, #8
 80019b6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_OPAMP3_Init+0x44>)
 80019cc:	f003 ff74 	bl	80058b8 <HAL_OPAMP_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80019d6:	f000 fc2b 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000069c 	.word	0x2000069c
 80019e4:	40010308 	.word	0x40010308

080019e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b09c      	sub	sp, #112	@ 0x70
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2234      	movs	r2, #52	@ 0x34
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00f feef 	bl	8011806 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a28:	4b5a      	ldr	r3, [pc, #360]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b98 <MX_TIM1_Init+0x1b0>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8001a2e:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a30:	2204      	movs	r2, #4
 8001a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b57      	ldr	r3, [pc, #348]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 8001a3a:	4b56      	ldr	r3, [pc, #344]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b54      	ldr	r3, [pc, #336]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a46:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b51      	ldr	r3, [pc, #324]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a52:	4850      	ldr	r0, [pc, #320]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a54:	f006 fd94 	bl	8008580 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a5e:	f000 fbe7 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4849      	ldr	r0, [pc, #292]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a70:	f008 f906 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a7a:	f000 fbd9 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001a7e:	4845      	ldr	r0, [pc, #276]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001a80:	f006 febe 	bl	8008800 <HAL_TIM_OC_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a8a:	f000 fbd1 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	483c      	ldr	r0, [pc, #240]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001aa2:	f009 fa41 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001aac:	f000 fbc0 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001ab0:	2330      	movs	r3, #48	@ 0x30
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	482f      	ldr	r0, [pc, #188]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001ad6:	f007 fea9 	bl	800982c <HAL_TIM_OC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ae0:	f000 fba6 	bl	8002230 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aec:	2204      	movs	r2, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4828      	ldr	r0, [pc, #160]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001af2:	f007 fe9b 	bl	800982c <HAL_TIM_OC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001afc:	f000 fb98 	bl	8002230 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4821      	ldr	r0, [pc, #132]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001b0e:	f007 fe8d 	bl	800982c <HAL_TIM_OC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001b18:	f000 fb8a 	bl	8002230 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b24:	220c      	movs	r2, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	481a      	ldr	r0, [pc, #104]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001b2a:	f007 fe7f 	bl	800982c <HAL_TIM_OC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001b34:	f000 fb7c 	bl	8002230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001b76:	f009 fa6d 	bl	800b054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001b80:	f000 fb56 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <MX_TIM1_Init+0x1ac>)
 8001b86:	f000 fe77 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8001b8a:	bf00      	nop
 8001b8c:	3770      	adds	r7, #112	@ 0x70
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200006d8 	.word	0x200006d8
 8001b98:	40012c00 	.word	0x40012c00

08001b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	@ 0x38
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf6:	482d      	ldr	r0, [pc, #180]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001bf8:	f006 fcc2 	bl	8008580 <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c02:	f000 fb15 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4823      	ldr	r0, [pc, #140]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001c20:	f008 f82e 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001c2a:	f000 fb01 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c2e:	481f      	ldr	r0, [pc, #124]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001c30:	f006 ff5a 	bl	8008ae8 <HAL_TIM_PWM_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001c3a:	f000 faf9 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001c4e:	f009 f96b 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001c58:	f000 faea 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5c:	2360      	movs	r3, #96	@ 0x60
 8001c5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001c60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2208      	movs	r2, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001c76:	f007 feef 	bl	8009a58 <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001c80:	f000 fad6 	bl	8002230 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <MX_TIM2_Init+0x114>)
 8001c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001c90:	f007 fee2 	bl	8009a58 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001c9a:	f000 fac9 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c9e:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM2_Init+0x110>)
 8001ca0:	f000 fdea 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	@ 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000724 	.word	0x20000724
 8001cb0:	000f4240 	.word	0x000f4240

08001cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	@ 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	615a      	str	r2, [r3, #20]
 8001ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <MX_TIM3_Init+0xe8>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001cfa:	2296      	movs	r2, #150	@ 0x96
 8001cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d0a:	4823      	ldr	r0, [pc, #140]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d0c:	f006 fc38 	bl	8008580 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d16:	f000 fa8b 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d24:	4619      	mov	r1, r3
 8001d26:	481c      	ldr	r0, [pc, #112]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d28:	f007 ffaa 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d32:	f000 fa7d 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d36:	4818      	ldr	r0, [pc, #96]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d38:	f006 fed6 	bl	8008ae8 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d42:	f000 fa75 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d56:	f009 f8e7 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d60:	f000 fa66 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	@ 0x60
 8001d66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	220c      	movs	r2, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d7c:	f007 fe6c 	bl	8009a58 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d86:	f000 fa53 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <MX_TIM3_Init+0xe4>)
 8001d8c:	f000 fd74 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8001d90:	bf00      	nop
 8001d92:	3738      	adds	r7, #56	@ 0x38
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000770 	.word	0x20000770
 8001d9c:	40000400 	.word	0x40000400

08001da0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <MX_TIM4_Init+0x9c>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000-1;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001dc6:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001dca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001dd4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001dd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001de2:	2280      	movs	r2, #128	@ 0x80
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001de6:	4814      	ldr	r0, [pc, #80]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001de8:	f006 fbca 	bl	8008580 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001df2:	f000 fa1d 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4619      	mov	r1, r3
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001e04:	f007 ff3c 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001e0e:	f000 fa0f 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <MX_TIM4_Init+0x98>)
 8001e20:	f009 f882 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001e2a:	f000 fa01 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200007bc 	.word	0x200007bc
 8001e3c:	40000800 	.word	0x40000800

08001e40 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	@ 0x40
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e70:	463b      	mov	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <MX_TIM15_Init+0x138>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001e82:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001e8e:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ea8:	4832      	ldr	r0, [pc, #200]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001eaa:	f006 fb69 	bl	8008580 <HAL_TIM_Base_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001eb4:	f000 f9bc 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ebe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	482b      	ldr	r0, [pc, #172]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001ec6:	f007 fedb 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001ed0:	f000 f9ae 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001ed4:	4827      	ldr	r0, [pc, #156]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001ed6:	f007 f9a7 	bl	8009228 <HAL_TIM_IC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001ee0:	f000 f9a6 	bl	8002230 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ee8:	2350      	movs	r3, #80	@ 0x50
 8001eea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001eec:	2302      	movs	r3, #2
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481e      	ldr	r0, [pc, #120]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001efc:	f007 ffd6 	bl	8009eac <HAL_TIM_SlaveConfigSynchro>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8001f06:	f000 f993 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	4816      	ldr	r0, [pc, #88]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001f1a:	f009 f805 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001f24:	f000 f984 	bl	8002230 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001f40:	f007 fcee 	bl	8009920 <HAL_TIM_IC_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001f4a:	f000 f971 	bl	8002230 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f52:	2302      	movs	r3, #2
 8001f54:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_TIM15_Init+0x134>)
 8001f5e:	f007 fcdf 	bl	8009920 <HAL_TIM_IC_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001f68:	f000 f962 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	3740      	adds	r7, #64	@ 0x40
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000808 	.word	0x20000808
 8001f78:	40014000 	.word	0x40014000

08001f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <MX_DMA_Init+0x80>)
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	200b      	movs	r0, #11
 8001fb8:	f003 f819 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fbc:	200b      	movs	r0, #11
 8001fbe:	f003 f830 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	200c      	movs	r0, #12
 8001fc8:	f003 f811 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fcc:	200c      	movs	r0, #12
 8001fce:	f003 f828 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	200d      	movs	r0, #13
 8001fd8:	f003 f809 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fdc:	200d      	movs	r0, #13
 8001fde:	f003 f820 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	200e      	movs	r0, #14
 8001fe8:	f003 f801 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fec:	200e      	movs	r0, #14
 8001fee:	f003 f818 	bl	8005022 <HAL_NVIC_EnableIRQ>

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002016:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a32      	ldr	r2, [pc, #200]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	4a2c      	ldr	r2, [pc, #176]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	4a20      	ldr	r2, [pc, #128]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <MX_GPIO_Init+0xe4>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800207c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002080:	f003 fbde 	bl	8005840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8002084:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8002088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a0:	f003 fa4c 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <MX_GPIO_Init+0xe8>)
 80020bc:	f003 fa3e 	bl	800553c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2017      	movs	r0, #23
 80020c6:	f002 ff92 	bl	8004fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ca:	2017      	movs	r0, #23
 80020cc:	f002 ffa9 	bl	8005022 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2110      	movs	r1, #16
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d8:	f003 fbb2 	bl	8005840 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	@ 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11b      	bne.n	8002134 <HAL_ADC_ConvHalfCpltCallback+0x48>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e011      	b.n	8002126 <HAL_ADC_ConvHalfCpltCallback+0x3a>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);	}
 8002102:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f912 	bl	8001334 <ConvertToVoltage>
 8002110:	eef0 7a40 	vmov.f32	s15, s0
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800212c:	d3e9      	bcc.n	8002102 <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 800212e:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]


#endif


}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20001be8 	.word	0x20001be8
 8002140:	200008c4 	.word	0x200008c4
 8002144:	20001224 	.word	0x20001224

08002148 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_ADC_ConvCpltCallback+0x54>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d11c      	bne.n	8002192 <HAL_ADC_ConvCpltCallback+0x4a>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8002158:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e011      	b.n	8002184 <HAL_ADC_ConvCpltCallback+0x3c>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);		}
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_ADC_ConvCpltCallback+0x58>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f8e3 	bl	8001334 <ConvertToVoltage>
 800216e:	eef0 7a40 	vmov.f32	s15, s0
 8002172:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800218a:	d3e9      	bcc.n	8002160 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_ADC_ConvCpltCallback+0x54>)
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20001be8 	.word	0x20001be8
 80021a0:	200008c4 	.word	0x200008c4
 80021a4:	20001224 	.word	0x20001224

080021a8 <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <HAL_TIM_IC_CaptureCallback+0x78>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12e      	bne.n	8002218 <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7f1b      	ldrb	r3, [r3, #28]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d12a      	bne.n	8002218 <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f007 feb3 	bl	8009f30 <HAL_TIM_ReadCapturedValue>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80021ce:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d019      	beq.n	800220c <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 100-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 100) / uwIC2Value;
 80021d8:	2104      	movs	r1, #4
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f007 fea8 	bl	8009f30 <HAL_TIM_ReadCapturedValue>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2264      	movs	r2, #100	@ 0x64
 80021e4:	fb03 f202 	mul.w	r2, r3, r2
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80021f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <HAL_TIM_IC_CaptureCallback+0x80>)
 80021f6:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 80021f8:	f005 fe94 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <HAL_TIM_IC_CaptureCallback+0x84>)
 8002208:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 800220a:	e005      	b.n	8002218 <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_TIM_IC_CaptureCallback+0x80>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_TIM_IC_CaptureCallback+0x84>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 }
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40014000 	.word	0x40014000
 8002224:	200008b4 	.word	0x200008b4
 8002228:	200008b8 	.word	0x200008b8
 800222c:	200008bc 	.word	0x200008bc

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2110      	movs	r1, #16
 8002238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223c:	f003 fb00 	bl	8005840 <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <HAL_MspInit+0x58>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	4a13      	ldr	r2, [pc, #76]	@ (800229c <HAL_MspInit+0x58>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6613      	str	r3, [r2, #96]	@ 0x60
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_MspInit+0x58>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_MspInit+0x58>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_MspInit+0x58>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_MspInit+0x58>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 800227a:	2000      	movs	r0, #0
 800227c:	f000 ff96 	bl	80031ac <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002280:	2000      	movs	r0, #0
 8002282:	f000 ff6b 	bl	800315c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002286:	f000 ffa5 	bl	80031d4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800228a:	2000      	movs	r0, #0
 800228c:	f000 ff7a 	bl	8003184 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002290:	f005 f9ea 	bl	8007668 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a0      	sub	sp, #128	@ 0x80
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b8:	f107 0318 	add.w	r3, r7, #24
 80022bc:	2254      	movs	r2, #84	@ 0x54
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f00f faa0 	bl	8011806 <memset>
  if(hadc->Instance==ADC1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ce:	d158      	bne.n	8002382 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f005 feff 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80022ec:	f7ff ffa0 	bl	8002230 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022f0:	4b87      	ldr	r3, [pc, #540]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	4a86      	ldr	r2, [pc, #536]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80022f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022fa:	4b85      	ldr	r3, [pc, #532]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10b      	bne.n	800231a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002302:	4b84      	ldr	r3, [pc, #528]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	4a83      	ldr	r2, [pc, #524]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 8002308:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800230c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230e:	4b81      	ldr	r3, [pc, #516]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800231a:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 800231c:	4a7f      	ldr	r2, [pc, #508]	@ (800251c <HAL_ADC_MspInit+0x27c>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002320:	4b7d      	ldr	r3, [pc, #500]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002322:	2205      	movs	r2, #5
 8002324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002326:	4b7c      	ldr	r3, [pc, #496]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800232c:	4b7a      	ldr	r3, [pc, #488]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002332:	4b79      	ldr	r3, [pc, #484]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002338:	4b77      	ldr	r3, [pc, #476]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 800233a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800233e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002340:	4b75      	ldr	r3, [pc, #468]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002346:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002348:	4b73      	ldr	r3, [pc, #460]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 800234a:	2220      	movs	r2, #32
 800234c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800234e:	4b72      	ldr	r3, [pc, #456]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002354:	4870      	ldr	r0, [pc, #448]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002356:	f002 fe7f 	bl	8005058 <HAL_DMA_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002360:	f7ff ff66 	bl	8002230 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a6c      	ldr	r2, [pc, #432]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
 800236a:	4a6b      	ldr	r2, [pc, #428]	@ (8002518 <HAL_ADC_MspInit+0x278>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	2012      	movs	r0, #18
 8002376:	f002 fe3a 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800237a:	2012      	movs	r0, #18
 800237c:	f002 fe51 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002380:	e0c2      	b.n	8002508 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a66      	ldr	r2, [pc, #408]	@ (8002520 <HAL_ADC_MspInit+0x280>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d171      	bne.n	8002470 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800238c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002390:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002392:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002396:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fea1 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 80023a8:	f7ff ff42 	bl	8002230 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023ac:	4b58      	ldr	r3, [pc, #352]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a57      	ldr	r2, [pc, #348]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80023b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023b6:	4b56      	ldr	r3, [pc, #344]	@ (8002510 <HAL_ADC_MspInit+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10b      	bne.n	80023d6 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023be:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	4a54      	ldr	r2, [pc, #336]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ca:	4b52      	ldr	r3, [pc, #328]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023ee:	2302      	movs	r3, #2
 80023f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f2:	2303      	movs	r3, #3
 80023f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002404:	f003 f89a 	bl	800553c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8002408:	4b46      	ldr	r3, [pc, #280]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 800240a:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <HAL_ADC_MspInit+0x288>)
 800240c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800240e:	4b45      	ldr	r3, [pc, #276]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002410:	2224      	movs	r2, #36	@ 0x24
 8002412:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b43      	ldr	r3, [pc, #268]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b40      	ldr	r3, [pc, #256]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002426:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800242e:	4b3d      	ldr	r3, [pc, #244]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002434:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002438:	2220      	movs	r2, #32
 800243a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002442:	4838      	ldr	r0, [pc, #224]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002444:	f002 fe08 	bl	8005058 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 800244e:	f7ff feef 	bl	8002230 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
 8002458:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <HAL_ADC_MspInit+0x284>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2012      	movs	r0, #18
 8002464:	f002 fdc3 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002468:	2012      	movs	r0, #18
 800246a:	f002 fdda 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 800246e:	e04b      	b.n	8002508 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <HAL_ADC_MspInit+0x28c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d146      	bne.n	8002508 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800247a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800247e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f005 fe2a 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8002496:	f7ff fecb 	bl	8002230 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a1d      	ldr	r2, [pc, #116]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_ADC_MspInit+0x274>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <HAL_ADC_MspInit+0x294>)
 80024b6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024ba:	2225      	movs	r2, #37	@ 0x25
 80024bc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024d0:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024de:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80024e6:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80024ec:	4810      	ldr	r0, [pc, #64]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 80024ee:	f002 fdb3 	bl	8005058 <HAL_DMA_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 80024f8:	f7ff fe9a 	bl	8002230 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54
 8002502:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <HAL_ADC_MspInit+0x290>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002508:	bf00      	nop
 800250a:	3780      	adds	r7, #128	@ 0x80
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20001bf0 	.word	0x20001bf0
 8002514:	40021000 	.word	0x40021000
 8002518:	200004ac 	.word	0x200004ac
 800251c:	4002001c 	.word	0x4002001c
 8002520:	50000100 	.word	0x50000100
 8002524:	2000050c 	.word	0x2000050c
 8002528:	40020030 	.word	0x40020030
 800252c:	50000400 	.word	0x50000400
 8002530:	2000056c 	.word	0x2000056c
 8002534:	40020044 	.word	0x40020044

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b09e      	sub	sp, #120	@ 0x78
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	2254      	movs	r2, #84	@ 0x54
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f00f f954 	bl	8011806 <memset>
  if(huart->Instance==LPUART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1e      	ldr	r2, [pc, #120]	@ (80025dc <HAL_UART_MspInit+0xa4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d135      	bne.n	80025d4 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002568:	2320      	movs	r3, #32
 800256a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f005 fdb5 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002580:	f7ff fe56 	bl	8002230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002584:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	4a15      	ldr	r2, [pc, #84]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025b4:	2303      	movs	r3, #3
 80025b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025c4:	2308      	movs	r3, #8
 80025c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025cc:	4619      	mov	r1, r3
 80025ce:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 80025d0:	f002 ffb4 	bl	800553c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3778      	adds	r7, #120	@ 0x78
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40008000 	.word	0x40008000
 80025e0:	40021000 	.word	0x40021000
 80025e4:	48000800 	.word	0x48000800

080025e8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_OPAMP_MspInit+0x9c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d119      	bne.n	800263e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	4a1e      	ldr	r2, [pc, #120]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002622:	2302      	movs	r3, #2
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002626:	2303      	movs	r3, #3
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002638:	f002 ff80 	bl	800553c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 800263c:	e01d      	b.n	800267a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <HAL_OPAMP_MspInit+0xa4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d118      	bne.n	800267a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_OPAMP_MspInit+0xa0>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002660:	2302      	movs	r3, #2
 8002662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002664:	2303      	movs	r3, #3
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002676:	f002 ff61 	bl	800553c <HAL_GPIO_Init>
}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40010300 	.word	0x40010300
 8002688:	40021000 	.word	0x40021000
 800268c:	40010308 	.word	0x40010308

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	@ 0x38
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_TIM_Base_MspInit+0x1cc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d114      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80026be:	4b68      	ldr	r3, [pc, #416]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2018      	movs	r0, #24
 80026d0:	f002 fc8d 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80026d4:	2018      	movs	r0, #24
 80026d6:	f002 fca4 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80026da:	e0bb      	b.n	8002854 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e4:	d129      	bne.n	800273a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	4a57      	ldr	r2, [pc, #348]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270a:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002716:	2301      	movs	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002726:	230e      	movs	r3, #14
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002734:	f002 ff02 	bl	800553c <HAL_GPIO_Init>
}
 8002738:	e08c      	b.n	8002854 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a49      	ldr	r2, [pc, #292]	@ (8002864 <HAL_TIM_Base_MspInit+0x1d4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d137      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002744:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	4a45      	ldr	r2, [pc, #276]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002750:	4b43      	ldr	r3, [pc, #268]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 800275c:	4b42      	ldr	r3, [pc, #264]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 800275e:	4a43      	ldr	r2, [pc, #268]	@ (800286c <HAL_TIM_Base_MspInit+0x1dc>)
 8002760:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8002762:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002764:	2240      	movs	r2, #64	@ 0x40
 8002766:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002768:	4b3f      	ldr	r3, [pc, #252]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 800276a:	2210      	movs	r2, #16
 800276c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002774:	4b3c      	ldr	r3, [pc, #240]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 800277c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002780:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002782:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002784:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002788:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 800278a:	4b37      	ldr	r3, [pc, #220]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002790:	4b35      	ldr	r3, [pc, #212]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002792:	2200      	movs	r2, #0
 8002794:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8002796:	4834      	ldr	r0, [pc, #208]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 8002798:	f002 fc5e 	bl	8005058 <HAL_DMA_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 80027a2:	f7ff fd45 	bl	8002230 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002868 <HAL_TIM_Base_MspInit+0x1d8>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80027b2:	e04f      	b.n	8002854 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_TIM_Base_MspInit+0x1e0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027be:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	4a27      	ldr	r2, [pc, #156]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ca:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201e      	movs	r0, #30
 80027dc:	f002 fc07 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027e0:	201e      	movs	r0, #30
 80027e2:	f002 fc1e 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e035      	b.n	8002854 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <HAL_TIM_Base_MspInit+0x1e4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d130      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002816:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_TIM_Base_MspInit+0x1d0>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002822:	2304      	movs	r3, #4
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002832:	2309      	movs	r3, #9
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002840:	f002 fe7c 	bl	800553c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	2018      	movs	r0, #24
 800284a:	f002 fbd0 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800284e:	2018      	movs	r0, #24
 8002850:	f002 fbe7 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	@ 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40000400 	.word	0x40000400
 8002868:	20000854 	.word	0x20000854
 800286c:	40020008 	.word	0x40020008
 8002870:	40000800 	.word	0x40000800
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	@ (80029a0 <HAL_TIM_MspPostInit+0x128>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d13a      	bne.n	8002910 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	4b42      	ldr	r3, [pc, #264]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	4a41      	ldr	r2, [pc, #260]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a6:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028be:	4b39      	ldr	r3, [pc, #228]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028ca:	230c      	movs	r3, #12
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028da:	2302      	movs	r3, #2
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4830      	ldr	r0, [pc, #192]	@ (80029a8 <HAL_TIM_MspPostInit+0x130>)
 80028e6:	f002 fe29 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028fc:	2306      	movs	r3, #6
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f002 fe17 	bl	800553c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800290e:	e043      	b.n	8002998 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002918:	d11d      	bne.n	8002956 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002926:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002932:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002944:	2301      	movs	r3, #1
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4817      	ldr	r0, [pc, #92]	@ (80029ac <HAL_TIM_MspPostInit+0x134>)
 8002950:	f002 fdf4 	bl	800553c <HAL_GPIO_Init>
}
 8002954:	e020      	b.n	8002998 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_TIM_MspPostInit+0x138>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d11b      	bne.n	8002998 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_TIM_MspPostInit+0x12c>)
 800296e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8002988:	230a      	movs	r3, #10
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	4806      	ldr	r0, [pc, #24]	@ (80029ac <HAL_TIM_MspPostInit+0x134>)
 8002994:	f002 fdd2 	bl	800553c <HAL_GPIO_Init>
}
 8002998:	bf00      	nop
 800299a:	3730      	adds	r7, #48	@ 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40021000 	.word	0x40021000
 80029a8:	48000800 	.word	0x48000800
 80029ac:	48000400 	.word	0x48000400
 80029b0:	40000400 	.word	0x40000400

080029b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <NMI_Handler+0x4>

080029bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <MemManage_Handler+0x4>

080029cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <UsageFault_Handler+0x4>

080029dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0a:	f000 fb67 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <DMA1_Channel1_IRQHandler+0x10>)
 8002a1a:	f002 fc40 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000854 	.word	0x20000854

08002a28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <DMA1_Channel2_IRQHandler+0x10>)
 8002a2e:	f002 fc36 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200004ac 	.word	0x200004ac

08002a3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <DMA1_Channel3_IRQHandler+0x10>)
 8002a42:	f002 fc2c 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000050c 	.word	0x2000050c

08002a50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002a54:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <DMA1_Channel4_IRQHandler+0x10>)
 8002a56:	f002 fc22 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000056c 	.word	0x2000056c

08002a64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a68:	4803      	ldr	r0, [pc, #12]	@ (8002a78 <ADC1_2_IRQHandler+0x14>)
 8002a6a:	f001 f8a7 	bl	8003bbc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002a6e:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <ADC1_2_IRQHandler+0x18>)
 8002a70:	f001 f8a4 	bl	8003bbc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000368 	.word	0x20000368
 8002a7c:	200003d4 	.word	0x200003d4

08002a80 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <USB_LP_IRQHandler+0x10>)
 8002a86:	f003 f908 	bl	8005c9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20004394 	.word	0x20004394

08002a94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <EXTI9_5_IRQHandler+0x1c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <EXTI9_5_IRQHandler+0x1c>)
 8002aa0:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002aa2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002aa6:	f002 fee3 	bl	8005870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20001bec 	.word	0x20001bec

08002ab4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ab8:	4803      	ldr	r0, [pc, #12]	@ (8002ac8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002aba:	f006 fd67 	bl	800958c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002abe:	4803      	ldr	r0, [pc, #12]	@ (8002acc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002ac0:	f006 fd64 	bl	800958c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200006d8 	.word	0x200006d8
 8002acc:	20000808 	.word	0x20000808

08002ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 8002ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <TIM4_IRQHandler+0x20>)
 8002adc:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 8002ade:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ae6:	4803      	ldr	r0, [pc, #12]	@ (8002af4 <TIM4_IRQHandler+0x24>)
 8002ae8:	f006 fd50 	bl	800958c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200008c0 	.word	0x200008c0
 8002af4:	200007bc 	.word	0x200007bc

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_kill>:

int _kill(int pid, int sig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b12:	f00e fecb 	bl	80118ac <__errno>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2216      	movs	r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_exit>:

void _exit (int status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <_exit+0x12>

08002b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e00a      	b.n	8002b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b50:	f3af 8000 	nop.w
 8002b54:	4601      	mov	r1, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf0      	blt.n	8002b50 <_read+0x12>
  }

  return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e009      	b.n	8002b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf1      	blt.n	8002b8a <_write+0x12>
  }
  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_close>:

int _close(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_isatty>:

int _isatty(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f00e fe30 	bl	80118ac <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20020000 	.word	0x20020000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	20001bf4 	.word	0x20001bf4
 8002c80:	200049e0 	.word	0x200049e0

08002c84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <ws2812_update_force>:

/**
 * @description: 整理并发送数据
 */
void ws2812_update_force(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	e061      	b.n	8002d78 <ws2812_update_force+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	4936      	ldr	r1, [pc, #216]	@ (8002d94 <ws2812_update_force+0xec>)
 8002cba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002cbe:	4936      	ldr	r1, [pc, #216]	@ (8002d98 <ws2812_update_force+0xf0>)
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <ws2812_update_force+0xf0>)
 8002cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ccc:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <ws2812_update_force+0xf4>)
 8002cce:	4a34      	ldr	r2, [pc, #208]	@ (8002da0 <ws2812_update_force+0xf8>)
 8002cd0:	4934      	ldr	r1, [pc, #208]	@ (8002da4 <ws2812_update_force+0xfc>)
 8002cd2:	f000 f897 	bl	8002e04 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002ce4:	4a30      	ldr	r2, [pc, #192]	@ (8002da8 <ws2812_update_force+0x100>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	71bb      	strb	r3, [r7, #6]
 8002cee:	e03d      	b.n	8002d6c <ws2812_update_force+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <ws2812_update_force+0xfc>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <ws2812_update_force+0x60>
 8002d04:	2164      	movs	r1, #100	@ 0x64
 8002d06:	e000      	b.n	8002d0a <ws2812_update_force+0x62>
 8002d08:	2132      	movs	r1, #50	@ 0x32
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	460a      	mov	r2, r1
 8002d14:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002d16:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <ws2812_update_force+0xf8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79bb      	ldrb	r3, [r7, #6]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <ws2812_update_force+0x86>
 8002d2a:	2164      	movs	r1, #100	@ 0x64
 8002d2c:	e000      	b.n	8002d30 <ws2812_update_force+0x88>
 8002d2e:	2132      	movs	r1, #50	@ 0x32
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	3308      	adds	r3, #8
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <ws2812_update_force+0xf4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	79bb      	ldrb	r3, [r7, #6]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <ws2812_update_force+0xae>
 8002d52:	2164      	movs	r1, #100	@ 0x64
 8002d54:	e000      	b.n	8002d58 <ws2812_update_force+0xb0>
 8002d56:	2132      	movs	r1, #50	@ 0x32
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	460a      	mov	r2, r1
 8002d64:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	71bb      	strb	r3, [r7, #6]
 8002d6c:	79bb      	ldrb	r3, [r7, #6]
 8002d6e:	2b07      	cmp	r3, #7
 8002d70:	d9be      	bls.n	8002cf0 <ws2812_update_force+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	3301      	adds	r3, #1
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	2b31      	cmp	r3, #49	@ 0x31
 8002d7c:	d99a      	bls.n	8002cb4 <ws2812_update_force+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, WS2812TIM_TIM_CHANNEL, (uint32_t *)ws2812_data,
 8002d7e:	f640 0398 	movw	r3, #2200	@ 0x898
 8002d82:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <ws2812_update_force+0x100>)
 8002d84:	210c      	movs	r1, #12
 8002d86:	4809      	ldr	r0, [pc, #36]	@ (8002dac <ws2812_update_force+0x104>)
 8002d88:	f006 f822 	bl	8008dd0 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20001bf8 	.word	0x20001bf8
 8002d98:	20001cc0 	.word	0x20001cc0
 8002d9c:	20001d8a 	.word	0x20001d8a
 8002da0:	20001d89 	.word	0x20001d89
 8002da4:	20001d88 	.word	0x20001d88
 8002da8:	20001d8c 	.word	0x20001d8c
 8002dac:	20000770 	.word	0x20000770

08002db0 <ws2812_set_24bit>:




void ws2812_set_24bit(uint8_t led_id, uint32_t color)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
	ws2812_color[led_id] = color;
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4905      	ldr	r1, [pc, #20]	@ (8002dd4 <ws2812_set_24bit+0x24>)
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20001bf8 	.word	0x20001bf8

08002dd8 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	460b      	mov	r3, r1
 8002de4:	71bb      	strb	r3, [r7, #6]
 8002de6:	4613      	mov	r3, r2
 8002de8:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	431a      	orrs	r2, r3
 8002df4:	797b      	ldrb	r3, [r7, #5]
 8002df6:	4313      	orrs	r3, r2
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <rainbow_color>:
}

// =============== 以下为额外的效果演示函数 ================

uint32_t rainbow_color(float frequency, int phase, int center, int width)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	@ 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002e46:	6138      	str	r0, [r7, #16]
 8002e48:	60f9      	str	r1, [r7, #12]
 8002e4a:	60ba      	str	r2, [r7, #8]
	float r = sinf(frequency * phase + 0) * width + center;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002f60 <rainbow_color+0x124>
 8002e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e66:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6a:	f012 f8e7 	bl	801503c <sinf>
 8002e6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float g = sinf(frequency * phase + 2) * width + center;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eac:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb0:	f012 f8c4 	bl	801503c <sinf>
 8002eb4:	eeb0 7a40 	vmov.f32	s14, s0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	edc7 7a08 	vstr	s15, [r7, #32]
	float b = sinf(frequency * phase + 4) * width + center;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	f012 f8a1 	bl	801503c <sinf>
 8002efa:	eeb0 7a40 	vmov.f32	s14, s0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1a:	edc7 7a07 	vstr	s15, [r7, #28]
	return rgb_to_color((uint8_t)r, (uint8_t)g, (uint8_t)b);
 8002f1e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f26:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f2a:	793b      	ldrb	r3, [r7, #4]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f36:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f3a:	793a      	ldrb	r2, [r7, #4]
 8002f3c:	b2d1      	uxtb	r1, r2
 8002f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f46:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f4a:	793a      	ldrb	r2, [r7, #4]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff42 	bl	8002dd8 <rgb_to_color>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3728      	adds	r7, #40	@ 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	00000000 	.word	0x00000000

08002f64 <rainbow_effect>:

void rainbow_effect(uint8_t steps, uint16_t delay_ms)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80bb      	strh	r3, [r7, #4]
	float frequency = 0.1;
 8002f74:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <rainbow_effect+0x7c>)
 8002f76:	617b      	str	r3, [r7, #20]
	int center = 128;
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	613b      	str	r3, [r7, #16]
	int width = 127;
 8002f7c:	237f      	movs	r3, #127	@ 0x7f
 8002f7e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < steps; i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e022      	b.n	8002fcc <rainbow_effect+0x68>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	76fb      	strb	r3, [r7, #27]
 8002f8a:	e013      	b.n	8002fb4 <rainbow_effect+0x50>
		{
			uint32_t color = rainbow_color(frequency, i + led_id * 2, center, width);
 8002f8c:	7efb      	ldrb	r3, [r7, #27]
 8002f8e:	005a      	lsls	r2, r3, #1
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	6939      	ldr	r1, [r7, #16]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f9e:	f7ff ff4d 	bl	8002e3c <rainbow_color>
 8002fa2:	60b8      	str	r0, [r7, #8]
			ws2812_set_24bit(led_id, color);
 8002fa4:	7efb      	ldrb	r3, [r7, #27]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff01 	bl	8002db0 <ws2812_set_24bit>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002fae:	7efb      	ldrb	r3, [r7, #27]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	7efb      	ldrb	r3, [r7, #27]
 8002fb6:	2b31      	cmp	r3, #49	@ 0x31
 8002fb8:	d9e8      	bls.n	8002f8c <rainbow_effect+0x28>
		}
		ws2812_update_force();
 8002fba:	f7ff fe75 	bl	8002ca8 <ws2812_update_force>
		HAL_Delay(delay_ms);
 8002fbe:	88bb      	ldrh	r3, [r7, #4]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f8a9 	bl	8003118 <HAL_Delay>
	for (int i = 0; i < steps; i++)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dbd8      	blt.n	8002f86 <rainbow_effect+0x22>
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	3dcccccd 	.word	0x3dcccccd

08002fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fe4:	480d      	ldr	r0, [pc, #52]	@ (800301c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe8:	f7ff fe4c 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fec:	480c      	ldr	r0, [pc, #48]	@ (8003020 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fee:	490d      	ldr	r1, [pc, #52]	@ (8003024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <LoopForever+0xe>)
  movs r3, #0
 8002ff2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ff4:	e002      	b.n	8002ffc <LoopCopyDataInit>

08002ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffa:	3304      	adds	r3, #4

08002ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003000:	d3f9      	bcc.n	8002ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003004:	4c0a      	ldr	r4, [pc, #40]	@ (8003030 <LoopForever+0x16>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003008:	e001      	b.n	800300e <LoopFillZerobss>

0800300a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800300c:	3204      	adds	r2, #4

0800300e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003010:	d3fb      	bcc.n	800300a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003012:	f00e fc51 	bl	80118b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003016:	f7fe f9a9 	bl	800136c <main>

0800301a <LoopForever>:

LoopForever:
    b LoopForever
 800301a:	e7fe      	b.n	800301a <LoopForever>
  ldr   r0, =_estack
 800301c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003024:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8003028:	08016380 	.word	0x08016380
  ldr r2, =_sbss
 800302c:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8003030:	200049dc 	.word	0x200049dc

08003034 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC3_IRQHandler>

08003036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f001 ffc9 	bl	8004fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f80e 	bl	8003068 <HAL_InitTick>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	71fb      	strb	r3, [r7, #7]
 8003056:	e001      	b.n	800305c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003058:	f7ff f8f4 	bl	8002244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305c:	79fb      	ldrb	r3, [r7, #7]

}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003074:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <HAL_InitTick+0x68>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800307c:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <HAL_InitTick+0x6c>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <HAL_InitTick+0x68>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003088:	fbb1 f3f3 	udiv	r3, r1, r3
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	4618      	mov	r0, r3
 8003092:	f001 ffd4 	bl	800503e <HAL_SYSTICK_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10f      	bne.n	80030bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d809      	bhi.n	80030b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a2:	2200      	movs	r2, #0
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	f04f 30ff 	mov.w	r0, #4294967295
 80030aa:	f001 ffa0 	bl	8004fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <HAL_InitTick+0x70>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e007      	b.n	80030c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e004      	b.n	80030c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e001      	b.n	80030c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000008 	.word	0x20000008
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_IncTick+0x1c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_IncTick+0x20>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4413      	add	r3, r2
 80030ea:	4a03      	ldr	r2, [pc, #12]	@ (80030f8 <HAL_IncTick+0x1c>)
 80030ec:	6013      	str	r3, [r2, #0]
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	20002ebc 	.word	0x20002ebc
 80030fc:	20000008 	.word	0x20000008

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	@ (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20002ebc 	.word	0x20002ebc

08003118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d004      	beq.n	800313c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_Delay+0x40>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800313c:	bf00      	nop
 800313e:	f7ff ffdf 	bl	8003100 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d8f7      	bhi.n	800313e <HAL_Delay+0x26>
  {
  }
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000008 	.word	0x20000008

0800315c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800316c:	4904      	ldr	r1, [pc, #16]	@ (8003180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010030 	.word	0x40010030

08003184 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0202 	bic.w	r2, r3, #2
 8003194:	4904      	ldr	r1, [pc, #16]	@ (80031a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40010030 	.word	0x40010030

080031ac <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80031bc:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010030 	.word	0x40010030

080031d4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80031da:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0e      	ldr	r2, [pc, #56]	@ (8003218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031e6:	f7ff ff8b 	bl	8003100 <HAL_GetTick>
 80031ea:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80031ec:	e008      	b.n	8003200 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80031ee:	f7ff ff87 	bl	8003100 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b0a      	cmp	r3, #10
 80031fa:	d901      	bls.n	8003200 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e006      	b.n	800320e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40010030 	.word	0x40010030

0800321c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	609a      	str	r2, [r3, #8]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3360      	adds	r3, #96	@ 0x60
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <LL_ADC_SetOffset+0x44>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	03fff000 	.word	0x03fff000

080032cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3360      	adds	r3, #96	@ 0x60
 80032da:	461a      	mov	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3360      	adds	r3, #96	@ 0x60
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	431a      	orrs	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800332e:	b480      	push	{r7}
 8003330:	b087      	sub	sp, #28
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3360      	adds	r3, #96	@ 0x60
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	431a      	orrs	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3360      	adds	r3, #96	@ 0x60
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	615a      	str	r2, [r3, #20]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3330      	adds	r3, #48	@ 0x30
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	4413      	add	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	211f      	movs	r1, #31
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 011f 	and.w	r1, r3, #31
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3314      	adds	r3, #20
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	0e5b      	lsrs	r3, r3, #25
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	4413      	add	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0d1b      	lsrs	r3, r3, #20
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2107      	movs	r1, #7
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0d1b      	lsrs	r3, r3, #20
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0318 	and.w	r3, r3, #24
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034e0:	40d9      	lsrs	r1, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	400b      	ands	r3, r1
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	0007ffff 	.word	0x0007ffff

08003504 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 031f 	and.w	r3, r3, #31
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800354c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6093      	str	r3, [r2, #8]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003574:	d101      	bne.n	800357a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800359c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035c4:	d101      	bne.n	80035ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <LL_ADC_IsEnabled+0x18>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <LL_ADC_IsEnabled+0x1a>
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003636:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d101      	bne.n	8003666 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d101      	bne.n	800368c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b089      	sub	sp, #36	@ 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1a9      	b.n	8003a0a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe fdeb 	bl	80022a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff3f 	bl	8003560 <LL_ADC_IsDeepPowerDownEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff25 	bl	800353c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff5a 	bl	80035b0 <LL_ADC_IsInternalRegulatorEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d115      	bne.n	800372e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff3e 	bl	8003588 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800370c:	4b9c      	ldr	r3, [pc, #624]	@ (8003980 <HAL_ADC_Init+0x2e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	4a9c      	ldr	r2, [pc, #624]	@ (8003984 <HAL_ADC_Init+0x2e8>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	099b      	lsrs	r3, r3, #6
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003720:	e002      	b.n	8003728 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff3c 	bl	80035b0 <LL_ADC_IsInternalRegulatorEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff75 	bl	800364e <LL_ADC_REG_IsConversionOngoing>
 8003764:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 8142 	bne.w	80039f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 813e 	bne.w	80039f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003784:	f043 0202 	orr.w	r2, r3, #2
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff35 	bl	8003600 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d141      	bne.n	8003820 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADC_Init+0x114>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a77      	ldr	r2, [pc, #476]	@ (8003988 <HAL_ADC_Init+0x2ec>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10f      	bne.n	80037d0 <HAL_ADC_Init+0x134>
 80037b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037b4:	f7ff ff24 	bl	8003600 <LL_ADC_IsEnabled>
 80037b8:	4604      	mov	r4, r0
 80037ba:	4873      	ldr	r0, [pc, #460]	@ (8003988 <HAL_ADC_Init+0x2ec>)
 80037bc:	f7ff ff20 	bl	8003600 <LL_ADC_IsEnabled>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4323      	orrs	r3, r4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e012      	b.n	80037f6 <HAL_ADC_Init+0x15a>
 80037d0:	486e      	ldr	r0, [pc, #440]	@ (800398c <HAL_ADC_Init+0x2f0>)
 80037d2:	f7ff ff15 	bl	8003600 <LL_ADC_IsEnabled>
 80037d6:	4604      	mov	r4, r0
 80037d8:	486d      	ldr	r0, [pc, #436]	@ (8003990 <HAL_ADC_Init+0x2f4>)
 80037da:	f7ff ff11 	bl	8003600 <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	431c      	orrs	r4, r3
 80037e2:	486c      	ldr	r0, [pc, #432]	@ (8003994 <HAL_ADC_Init+0x2f8>)
 80037e4:	f7ff ff0c 	bl	8003600 <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4323      	orrs	r3, r4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003802:	d004      	beq.n	800380e <HAL_ADC_Init+0x172>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5f      	ldr	r2, [pc, #380]	@ (8003988 <HAL_ADC_Init+0x2ec>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x176>
 800380e:	4a62      	ldr	r2, [pc, #392]	@ (8003998 <HAL_ADC_Init+0x2fc>)
 8003810:	e000      	b.n	8003814 <HAL_ADC_Init+0x178>
 8003812:	4a62      	ldr	r2, [pc, #392]	@ (800399c <HAL_ADC_Init+0x300>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f7ff fcfe 	bl	800321c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7f5b      	ldrb	r3, [r3, #29]
 8003824:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800382a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003830:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003836:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800383e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800384a:	2b01      	cmp	r3, #1
 800384c:	d106      	bne.n	800385c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	045b      	lsls	r3, r3, #17
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b48      	ldr	r3, [pc, #288]	@ (80039a0 <HAL_ADC_Init+0x304>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	69b9      	ldr	r1, [r7, #24]
 8003888:	430b      	orrs	r3, r1
 800388a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fee4 	bl	8003674 <LL_ADC_INJ_IsConversionOngoing>
 80038ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d17f      	bne.n	80039b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d17c      	bne.n	80039b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d6:	f023 0302 	bic.w	r3, r3, #2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d017      	beq.n	800391c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80038fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003904:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6911      	ldr	r1, [r2, #16]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800391a:	e013      	b.n	8003944 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800392a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800393c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003940:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394a:	2b01      	cmp	r3, #1
 800394c:	d12a      	bne.n	80039a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003964:	4311      	orrs	r1, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003970:	430a      	orrs	r2, r1
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	e019      	b.n	80039b4 <HAL_ADC_Init+0x318>
 8003980:	20000000 	.word	0x20000000
 8003984:	053e2d63 	.word	0x053e2d63
 8003988:	50000100 	.word	0x50000100
 800398c:	50000400 	.word	0x50000400
 8003990:	50000500 	.word	0x50000500
 8003994:	50000600 	.word	0x50000600
 8003998:	50000300 	.word	0x50000300
 800399c:	50000700 	.word	0x50000700
 80039a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10c      	bne.n	80039d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	f023 010f 	bic.w	r1, r3, #15
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039d4:	e007      	b.n	80039e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 020f 	bic.w	r2, r2, #15
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039f6:	e007      	b.n	8003a08 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop

08003a14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a28:	d004      	beq.n	8003a34 <HAL_ADC_Start_DMA+0x20>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b98 <HAL_ADC_Start_DMA+0x184>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x24>
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_ADC_Start_DMA+0x188>)
 8003a36:	e000      	b.n	8003a3a <HAL_ADC_Start_DMA+0x26>
 8003a38:	4b59      	ldr	r3, [pc, #356]	@ (8003ba0 <HAL_ADC_Start_DMA+0x18c>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fd62 	bl	8003504 <LL_ADC_GetMultimode>
 8003a40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fe01 	bl	800364e <LL_ADC_REG_IsConversionOngoing>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 809b 	bne.w	8003b8a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x4e>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e096      	b.n	8003b90 <HAL_ADC_Start_DMA+0x17c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba4 <HAL_ADC_Start_DMA+0x190>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d008      	beq.n	8003a86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d002      	beq.n	8003a86 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	d17a      	bne.n	8003b7c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 ff4c 	bl	8004924 <ADC_Enable>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d16d      	bne.n	8003b72 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	@ (8003b98 <HAL_ADC_Start_DMA+0x184>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_ADC_Start_DMA+0xb4>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba8 <HAL_ADC_Start_DMA+0x194>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d002      	beq.n	8003ac4 <HAL_ADC_Start_DMA+0xb0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e003      	b.n	8003acc <HAL_ADC_Start_DMA+0xb8>
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_ADC_Start_DMA+0x198>)
 8003ac6:	e001      	b.n	8003acc <HAL_ADC_Start_DMA+0xb8>
 8003ac8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	f023 0206 	bic.w	r2, r3, #6
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60
 8003afe:	e002      	b.n	8003b06 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0a:	4a29      	ldr	r2, [pc, #164]	@ (8003bb0 <HAL_ADC_Start_DMA+0x19c>)
 8003b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <HAL_ADC_Start_DMA+0x1a0>)
 8003b14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <HAL_ADC_Start_DMA+0x1a4>)
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	221c      	movs	r2, #28
 8003b24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0210 	orr.w	r2, r2, #16
 8003b3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3340      	adds	r3, #64	@ 0x40
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f001 fb23 	bl	80051a8 <HAL_DMA_Start_IT>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fd5b 	bl	8003626 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b70:	e00d      	b.n	8003b8e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003b7a:	e008      	b.n	8003b8e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b88:	e001      	b.n	8003b8e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	50000100 	.word	0x50000100
 8003b9c:	50000300 	.word	0x50000300
 8003ba0:	50000700 	.word	0x50000700
 8003ba4:	50000600 	.word	0x50000600
 8003ba8:	50000500 	.word	0x50000500
 8003bac:	50000400 	.word	0x50000400
 8003bb0:	08004a51 	.word	0x08004a51
 8003bb4:	08004b29 	.word	0x08004b29
 8003bb8:	08004b45 	.word	0x08004b45

08003bbc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be0:	d004      	beq.n	8003bec <HAL_ADC_IRQHandler+0x30>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a8e      	ldr	r2, [pc, #568]	@ (8003e20 <HAL_ADC_IRQHandler+0x264>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_IRQHandler+0x34>
 8003bec:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <HAL_ADC_IRQHandler+0x268>)
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_IRQHandler+0x36>
 8003bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003e28 <HAL_ADC_IRQHandler+0x26c>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fc86 	bl	8003504 <LL_ADC_GetMultimode>
 8003bf8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <HAL_ADC_IRQHandler+0x78>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fff4 	bl	8004c14 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2202      	movs	r2, #2
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADC_IRQHandler+0x8c>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8094 	beq.w	8003d7c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 808e 	beq.w	8003d7c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fb9f 	bl	80033c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d072      	beq.n	8003d6e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a64      	ldr	r2, [pc, #400]	@ (8003e20 <HAL_ADC_IRQHandler+0x264>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_ADC_IRQHandler+0xea>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a65      	ldr	r2, [pc, #404]	@ (8003e2c <HAL_ADC_IRQHandler+0x270>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d002      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0xe6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	e003      	b.n	8003caa <HAL_ADC_IRQHandler+0xee>
 8003ca2:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <HAL_ADC_IRQHandler+0x274>)
 8003ca4:	e001      	b.n	8003caa <HAL_ADC_IRQHandler+0xee>
 8003ca6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d008      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d002      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b09      	cmp	r3, #9
 8003cc2:	d104      	bne.n	8003cce <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	e014      	b.n	8003cf8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a53      	ldr	r2, [pc, #332]	@ (8003e20 <HAL_ADC_IRQHandler+0x264>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_ADC_IRQHandler+0x130>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a53      	ldr	r2, [pc, #332]	@ (8003e2c <HAL_ADC_IRQHandler+0x270>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d002      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x12c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e003      	b.n	8003cf0 <HAL_ADC_IRQHandler+0x134>
 8003ce8:	4b51      	ldr	r3, [pc, #324]	@ (8003e30 <HAL_ADC_IRQHandler+0x274>)
 8003cea:	e001      	b.n	8003cf0 <HAL_ADC_IRQHandler+0x134>
 8003cec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cf0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d135      	bne.n	8003d6e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d12e      	bne.n	8003d6e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fc9a 	bl	800364e <LL_ADC_REG_IsConversionOngoing>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11a      	bne.n	8003d56 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020c 	bic.w	r2, r2, #12
 8003d2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d112      	bne.n	8003d6e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d54:	e00b      	b.n	8003d6e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe f9ea 	bl	8002148 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	220c      	movs	r2, #12
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x1d4>
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b3 	beq.w	8003f02 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80ad 	beq.w	8003f02 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fb3a 	bl	800343e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003dca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff faf5 	bl	80033c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dd6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <HAL_ADC_IRQHandler+0x264>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_ADC_IRQHandler+0x23a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_ADC_IRQHandler+0x270>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d002      	beq.n	8003df2 <HAL_ADC_IRQHandler+0x236>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	e003      	b.n	8003dfa <HAL_ADC_IRQHandler+0x23e>
 8003df2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_ADC_IRQHandler+0x274>)
 8003df4:	e001      	b.n	8003dfa <HAL_ADC_IRQHandler+0x23e>
 8003df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d008      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d002      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b07      	cmp	r3, #7
 8003e12:	d10f      	bne.n	8003e34 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	e01f      	b.n	8003e5e <HAL_ADC_IRQHandler+0x2a2>
 8003e1e:	bf00      	nop
 8003e20:	50000100 	.word	0x50000100
 8003e24:	50000300 	.word	0x50000300
 8003e28:	50000700 	.word	0x50000700
 8003e2c:	50000500 	.word	0x50000500
 8003e30:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a8b      	ldr	r2, [pc, #556]	@ (8004068 <HAL_ADC_IRQHandler+0x4ac>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_ADC_IRQHandler+0x296>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8a      	ldr	r2, [pc, #552]	@ (800406c <HAL_ADC_IRQHandler+0x4b0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d002      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x292>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	e003      	b.n	8003e56 <HAL_ADC_IRQHandler+0x29a>
 8003e4e:	4b88      	ldr	r3, [pc, #544]	@ (8004070 <HAL_ADC_IRQHandler+0x4b4>)
 8003e50:	e001      	b.n	8003e56 <HAL_ADC_IRQHandler+0x29a>
 8003e52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e56:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d047      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x2c2>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d03f      	beq.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d13a      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d133      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d12e      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fbea 	bl	8003674 <LL_ADC_INJ_IsConversionOngoing>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11a      	bne.n	8003edc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eb4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d112      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fe65 	bl	8004bc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2260      	movs	r2, #96	@ 0x60
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d011      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x374>
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8aa 	bl	800407c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x3a4>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fe4b 	bl	8004bec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <HAL_ADC_IRQHandler+0x3d4>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fe3d 	bl	8004c00 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d043      	beq.n	8004022 <HAL_ADC_IRQHandler+0x466>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d03e      	beq.n	8004022 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003fac:	2301      	movs	r3, #1
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb0:	e021      	b.n	8003ff6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fc0:	d004      	beq.n	8003fcc <HAL_ADC_IRQHandler+0x410>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <HAL_ADC_IRQHandler+0x4ac>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_IRQHandler+0x414>
 8003fcc:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_ADC_IRQHandler+0x4b8>)
 8003fce:	e000      	b.n	8003fd2 <HAL_ADC_IRQHandler+0x416>
 8003fd0:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <HAL_ADC_IRQHandler+0x4bc>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff faa4 	bl	8003520 <LL_ADC_GetMultiDMATransfer>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe2:	e008      	b.n	8003ff6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10e      	bne.n	800401a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f83b 	bl	8004090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2210      	movs	r2, #16
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d018      	beq.n	800405e <HAL_ADC_IRQHandler+0x4a2>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004046:	f043 0208 	orr.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004056:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fdbd 	bl	8004bd8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800405e:	bf00      	nop
 8004060:	3728      	adds	r7, #40	@ 0x28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	50000100 	.word	0x50000100
 800406c:	50000500 	.word	0x50000500
 8004070:	50000400 	.word	0x50000400
 8004074:	50000300 	.word	0x50000300
 8004078:	50000700 	.word	0x50000700

0800407c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b0b6      	sub	sp, #216	@ 0xd8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d102      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x24>
 80040c2:	2302      	movs	r3, #2
 80040c4:	f000 bc13 	b.w	80048ee <HAL_ADC_ConfigChannel+0x84a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff faba 	bl	800364e <LL_ADC_REG_IsConversionOngoing>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 83f3 	bne.w	80048c8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7ff f979 	bl	80033e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff faa8 	bl	800364e <LL_ADC_REG_IsConversionOngoing>
 80040fe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fab4 	bl	8003674 <LL_ADC_INJ_IsConversionOngoing>
 800410c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 81d9 	bne.w	80044cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800411a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 81d4 	bne.w	80044cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412c:	d10f      	bne.n	800414e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	4619      	mov	r1, r3
 800413a:	f7ff f993 	bl	8003464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff f927 	bl	800339a <LL_ADC_SetSamplingTimeCommonConfig>
 800414c:	e00e      	b.n	800416c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	461a      	mov	r2, r3
 800415c:	f7ff f982 	bl	8003464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff f917 	bl	800339a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d022      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6919      	ldr	r1, [r3, #16]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800419e:	f7ff f871 	bl	8003284 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7ff f8bd 	bl	800332e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x126>
 80041c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c8:	e000      	b.n	80041cc <HAL_ADC_ConfigChannel+0x128>
 80041ca:	2300      	movs	r3, #0
 80041cc:	461a      	mov	r2, r3
 80041ce:	f7ff f8c9 	bl	8003364 <LL_ADC_SetOffsetSaturation>
 80041d2:	e17b      	b.n	80044cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff f876 	bl	80032cc <LL_ADC_GetOffsetChannel>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x15c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff f86b 	bl	80032cc <LL_ADC_GetOffsetChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	0e9b      	lsrs	r3, r3, #26
 80041fa:	f003 021f 	and.w	r2, r3, #31
 80041fe:	e01e      	b.n	800423e <HAL_ADC_ConfigChannel+0x19a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f860 	bl	80032cc <LL_ADC_GetOffsetChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800421e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800422e:	2320      	movs	r3, #32
 8004230:	e004      	b.n	800423c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004232:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x1b2>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	e018      	b.n	8004288 <HAL_ADC_ConfigChannel+0x1e4>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800426a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800426e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800427a:	2320      	movs	r3, #32
 800427c:	e004      	b.n	8004288 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800427e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004288:	429a      	cmp	r2, r3
 800428a:	d106      	bne.n	800429a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f82f 	bl	80032f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff f813 	bl	80032cc <LL_ADC_GetOffsetChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x222>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f808 	bl	80032cc <LL_ADC_GetOffsetChannel>
 80042bc:	4603      	mov	r3, r0
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	e01e      	b.n	8004304 <HAL_ADC_ConfigChannel+0x260>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fffd 	bl	80032cc <LL_ADC_GetOffsetChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80042e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80042ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e004      	b.n	8004302 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80042f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <HAL_ADC_ConfigChannel+0x278>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	e018      	b.n	800434e <HAL_ADC_ConfigChannel+0x2aa>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e004      	b.n	800434e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800434e:	429a      	cmp	r2, r3
 8004350:	d106      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe ffcc 	bl	80032f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe ffb0 	bl	80032cc <LL_ADC_GetOffsetChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_ADC_ConfigChannel+0x2e8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe ffa5 	bl	80032cc <LL_ADC_GetOffsetChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	f003 021f 	and.w	r2, r3, #31
 800438a:	e01e      	b.n	80043ca <HAL_ADC_ConfigChannel+0x326>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2102      	movs	r1, #2
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe ff9a 	bl	80032cc <LL_ADC_GetOffsetChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80043aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80043b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043ba:	2320      	movs	r3, #32
 80043bc:	e004      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x33e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	0e9b      	lsrs	r3, r3, #26
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	e016      	b.n	8004410 <HAL_ADC_ConfigChannel+0x36c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80043f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80043fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e004      	b.n	8004410 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004406:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004410:	429a      	cmp	r2, r3
 8004412:	d106      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	2102      	movs	r1, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe ff6b 	bl	80032f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2103      	movs	r1, #3
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe ff4f 	bl	80032cc <LL_ADC_GetOffsetChannel>
 800442e:	4603      	mov	r3, r0
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <HAL_ADC_ConfigChannel+0x3aa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2103      	movs	r1, #3
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe ff44 	bl	80032cc <LL_ADC_GetOffsetChannel>
 8004444:	4603      	mov	r3, r0
 8004446:	0e9b      	lsrs	r3, r3, #26
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	e017      	b.n	800447e <HAL_ADC_ConfigChannel+0x3da>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2103      	movs	r1, #3
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe ff39 	bl	80032cc <LL_ADC_GetOffsetChannel>
 800445a:	4603      	mov	r3, r0
 800445c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004468:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800446a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e003      	b.n	800447c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x3f2>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	0e9b      	lsrs	r3, r3, #26
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	e011      	b.n	80044ba <HAL_ADC_ConfigChannel+0x416>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80044a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80044a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e003      	b.n	80044ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d106      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	2103      	movs	r1, #3
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe ff16 	bl	80032f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f895 	bl	8003600 <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 813d 	bne.w	8004758 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fe ffe6 	bl	80034bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4aa2      	ldr	r2, [pc, #648]	@ (8004780 <HAL_ADC_ConfigChannel+0x6dc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	f040 812e 	bne.w	8004758 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x480>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	0e9b      	lsrs	r3, r3, #26
 8004512:	3301      	adds	r3, #1
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2b09      	cmp	r3, #9
 800451a:	bf94      	ite	ls
 800451c:	2301      	movls	r3, #1
 800451e:	2300      	movhi	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e019      	b.n	8004558 <HAL_ADC_ConfigChannel+0x4b4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004534:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	e003      	b.n	8004548 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004540:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3301      	adds	r3, #1
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2b09      	cmp	r3, #9
 8004550:	bf94      	ite	ls
 8004552:	2301      	movls	r3, #1
 8004554:	2300      	movhi	r3, #0
 8004556:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004558:	2b00      	cmp	r3, #0
 800455a:	d079      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004564:	2b00      	cmp	r3, #0
 8004566:	d107      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x4d4>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0e9b      	lsrs	r3, r3, #26
 800456e:	3301      	adds	r3, #1
 8004570:	069b      	lsls	r3, r3, #26
 8004572:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004576:	e015      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x500>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004588:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800458a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004590:	2320      	movs	r3, #32
 8004592:	e003      	b.n	800459c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	069b      	lsls	r3, r3, #26
 80045a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x520>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0e9b      	lsrs	r3, r3, #26
 80045b6:	3301      	adds	r3, #1
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	e017      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x550>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80045d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80045d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80045dc:	2320      	movs	r3, #32
 80045de:	e003      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80045e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2101      	movs	r1, #1
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	ea42 0103 	orr.w	r1, r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10a      	bne.n	800461a <HAL_ADC_ConfigChannel+0x576>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	3301      	adds	r3, #1
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	051b      	lsls	r3, r3, #20
 8004618:	e018      	b.n	800464c <HAL_ADC_ConfigChannel+0x5a8>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800462c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004632:	2320      	movs	r3, #32
 8004634:	e003      	b.n	800463e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800464c:	430b      	orrs	r3, r1
 800464e:	e07e      	b.n	800474e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_ADC_ConfigChannel+0x5c8>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0e9b      	lsrs	r3, r3, #26
 8004662:	3301      	adds	r3, #1
 8004664:	069b      	lsls	r3, r3, #26
 8004666:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800466a:	e015      	b.n	8004698 <HAL_ADC_ConfigChannel+0x5f4>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800467a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004684:	2320      	movs	r3, #32
 8004686:	e003      	b.n	8004690 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	3301      	adds	r3, #1
 8004692:	069b      	lsls	r3, r3, #26
 8004694:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d109      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x614>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0e9b      	lsrs	r3, r3, #26
 80046aa:	3301      	adds	r3, #1
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	e017      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x644>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	61fb      	str	r3, [r7, #28]
  return result;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80046d0:	2320      	movs	r3, #32
 80046d2:	e003      	b.n	80046dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	ea42 0103 	orr.w	r1, r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x670>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	3301      	adds	r3, #1
 8004700:	f003 021f 	and.w	r2, r3, #31
 8004704:	4613      	mov	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4413      	add	r3, r2
 800470a:	3b1e      	subs	r3, #30
 800470c:	051b      	lsls	r3, r3, #20
 800470e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004712:	e01b      	b.n	800474c <HAL_ADC_ConfigChannel+0x6a8>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	613b      	str	r3, [r7, #16]
  return result;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800472c:	2320      	movs	r3, #32
 800472e:	e003      	b.n	8004738 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f003 021f 	and.w	r2, r3, #31
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	3b1e      	subs	r3, #30
 8004746:	051b      	lsls	r3, r3, #20
 8004748:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800474c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004752:	4619      	mov	r1, r3
 8004754:	f7fe fe86 	bl	8003464 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_ADC_ConfigChannel+0x6e0>)
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80be 	beq.w	80048e2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476e:	d004      	beq.n	800477a <HAL_ADC_ConfigChannel+0x6d6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <HAL_ADC_ConfigChannel+0x6e4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10a      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x6ec>
 800477a:	4b04      	ldr	r3, [pc, #16]	@ (800478c <HAL_ADC_ConfigChannel+0x6e8>)
 800477c:	e009      	b.n	8004792 <HAL_ADC_ConfigChannel+0x6ee>
 800477e:	bf00      	nop
 8004780:	407f0000 	.word	0x407f0000
 8004784:	80080000 	.word	0x80080000
 8004788:	50000100 	.word	0x50000100
 800478c:	50000300 	.word	0x50000300
 8004790:	4b59      	ldr	r3, [pc, #356]	@ (80048f8 <HAL_ADC_ConfigChannel+0x854>)
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fd68 	bl	8003268 <LL_ADC_GetCommonPathInternalCh>
 8004798:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a56      	ldr	r2, [pc, #344]	@ (80048fc <HAL_ADC_ConfigChannel+0x858>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x70c>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a55      	ldr	r2, [pc, #340]	@ (8004900 <HAL_ADC_ConfigChannel+0x85c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d13a      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d134      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047c4:	d005      	beq.n	80047d2 <HAL_ADC_ConfigChannel+0x72e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004904 <HAL_ADC_ConfigChannel+0x860>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f040 8085 	bne.w	80048dc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047da:	d004      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x742>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a49      	ldr	r2, [pc, #292]	@ (8004908 <HAL_ADC_ConfigChannel+0x864>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x746>
 80047e6:	4a49      	ldr	r2, [pc, #292]	@ (800490c <HAL_ADC_ConfigChannel+0x868>)
 80047e8:	e000      	b.n	80047ec <HAL_ADC_ConfigChannel+0x748>
 80047ea:	4a43      	ldr	r2, [pc, #268]	@ (80048f8 <HAL_ADC_ConfigChannel+0x854>)
 80047ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fd23 	bl	8003242 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047fc:	4b44      	ldr	r3, [pc, #272]	@ (8004910 <HAL_ADC_ConfigChannel+0x86c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	4a44      	ldr	r2, [pc, #272]	@ (8004914 <HAL_ADC_ConfigChannel+0x870>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004816:	e002      	b.n	800481e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f9      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004824:	e05a      	b.n	80048dc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3b      	ldr	r2, [pc, #236]	@ (8004918 <HAL_ADC_ConfigChannel+0x874>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11f      	bne.n	800487c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a31      	ldr	r2, [pc, #196]	@ (8004908 <HAL_ADC_ConfigChannel+0x864>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d104      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x7ac>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a34      	ldr	r2, [pc, #208]	@ (800491c <HAL_ADC_ConfigChannel+0x878>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d047      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004858:	d004      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x7c0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2a      	ldr	r2, [pc, #168]	@ (8004908 <HAL_ADC_ConfigChannel+0x864>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x7c4>
 8004864:	4a29      	ldr	r2, [pc, #164]	@ (800490c <HAL_ADC_ConfigChannel+0x868>)
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x7c6>
 8004868:	4a23      	ldr	r2, [pc, #140]	@ (80048f8 <HAL_ADC_ConfigChannel+0x854>)
 800486a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fe fce4 	bl	8003242 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800487a:	e031      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a27      	ldr	r2, [pc, #156]	@ (8004920 <HAL_ADC_ConfigChannel+0x87c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d12d      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800488a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d127      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <HAL_ADC_ConfigChannel+0x864>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d022      	beq.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048a4:	d004      	beq.n	80048b0 <HAL_ADC_ConfigChannel+0x80c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <HAL_ADC_ConfigChannel+0x864>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x810>
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_ADC_ConfigChannel+0x868>)
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x812>
 80048b4:	4a10      	ldr	r2, [pc, #64]	@ (80048f8 <HAL_ADC_ConfigChannel+0x854>)
 80048b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fe fcbe 	bl	8003242 <LL_ADC_SetCommonPathInternalCh>
 80048c6:	e00c      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80048da:	e002      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	37d8      	adds	r7, #216	@ 0xd8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	50000700 	.word	0x50000700
 80048fc:	c3210000 	.word	0xc3210000
 8004900:	90c00010 	.word	0x90c00010
 8004904:	50000600 	.word	0x50000600
 8004908:	50000100 	.word	0x50000100
 800490c:	50000300 	.word	0x50000300
 8004910:	20000000 	.word	0x20000000
 8004914:	053e2d63 	.word	0x053e2d63
 8004918:	c7520000 	.word	0xc7520000
 800491c:	50000500 	.word	0x50000500
 8004920:	cb840000 	.word	0xcb840000

08004924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fe63 	bl	8003600 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d176      	bne.n	8004a2e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b3c      	ldr	r3, [pc, #240]	@ (8004a38 <ADC_Enable+0x114>)
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e062      	b.n	8004a30 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fe32 	bl	80035d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800497c:	d004      	beq.n	8004988 <ADC_Enable+0x64>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2e      	ldr	r2, [pc, #184]	@ (8004a3c <ADC_Enable+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <ADC_Enable+0x68>
 8004988:	4b2d      	ldr	r3, [pc, #180]	@ (8004a40 <ADC_Enable+0x11c>)
 800498a:	e000      	b.n	800498e <ADC_Enable+0x6a>
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <ADC_Enable+0x120>)
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe fc6a 	bl	8003268 <LL_ADC_GetCommonPathInternalCh>
 8004994:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800499e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a48 <ADC_Enable+0x124>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	4a29      	ldr	r2, [pc, #164]	@ (8004a4c <ADC_Enable+0x128>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049b8:	e002      	b.n	80049c0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f9      	bne.n	80049ba <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049c6:	f7fe fb9b 	bl	8003100 <HAL_GetTick>
 80049ca:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049cc:	e028      	b.n	8004a20 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fe14 	bl	8003600 <LL_ADC_IsEnabled>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fdf8 	bl	80035d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049e8:	f7fe fb8a 	bl	8003100 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d914      	bls.n	8004a20 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d00d      	beq.n	8004a20 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	f043 0210 	orr.w	r2, r3, #16
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	f043 0201 	orr.w	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e007      	b.n	8004a30 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d1cf      	bne.n	80049ce <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	8000003f 	.word	0x8000003f
 8004a3c:	50000100 	.word	0x50000100
 8004a40:	50000300 	.word	0x50000300
 8004a44:	50000700 	.word	0x50000700
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	053e2d63 	.word	0x053e2d63

08004a50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d14b      	bne.n	8004b02 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d021      	beq.n	8004ac8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fc99 	bl	80033c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d032      	beq.n	8004afa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d12b      	bne.n	8004afa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11f      	bne.n	8004afa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ac6:	e018      	b.n	8004afa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d111      	bne.n	8004afa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d105      	bne.n	8004afa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7fd fb24 	bl	8002148 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b00:	e00e      	b.n	8004b20 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff fabe 	bl	8004090 <HAL_ADC_ErrorCallback>
}
 8004b14:	e004      	b.n	8004b20 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	4798      	blx	r3
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fd fad8 	bl	80020ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fa90 	bl	8004090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <LL_ADC_IsEnabled>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <LL_ADC_IsEnabled+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_ADC_IsEnabled+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_ADC_REG_IsConversionOngoing>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d101      	bne.n	8004bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b0a1      	sub	sp, #132	@ 0x84
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0e7      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004c52:	2300      	movs	r3, #0
 8004c54:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c5e:	d102      	bne.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c60:	4b6f      	ldr	r3, [pc, #444]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	e009      	b.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d102      	bne.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c70:	4b6d      	ldr	r3, [pc, #436]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	e001      	b.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0be      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff7f 	bl	8004b9e <LL_ADC_REG_IsConversionOngoing>
 8004ca0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff79 	bl	8004b9e <LL_ADC_REG_IsConversionOngoing>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 80a0 	bne.w	8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 809c 	bne.w	8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc4:	d004      	beq.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a55      	ldr	r2, [pc, #340]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004cd0:	4b56      	ldr	r3, [pc, #344]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004cd2:	e000      	b.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004cd4:	4b56      	ldr	r3, [pc, #344]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004cd6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d04b      	beq.n	8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cf2:	035b      	lsls	r3, r3, #13
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d04:	d004      	beq.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a45      	ldr	r2, [pc, #276]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10f      	bne.n	8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d14:	f7ff ff30 	bl	8004b78 <LL_ADC_IsEnabled>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4841      	ldr	r0, [pc, #260]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d1c:	f7ff ff2c 	bl	8004b78 <LL_ADC_IsEnabled>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4323      	orrs	r3, r4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e012      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d30:	483c      	ldr	r0, [pc, #240]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d32:	f7ff ff21 	bl	8004b78 <LL_ADC_IsEnabled>
 8004d36:	4604      	mov	r4, r0
 8004d38:	483b      	ldr	r0, [pc, #236]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d3a:	f7ff ff1d 	bl	8004b78 <LL_ADC_IsEnabled>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	431c      	orrs	r4, r3
 8004d42:	483c      	ldr	r0, [pc, #240]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d44:	f7ff ff18 	bl	8004b78 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d056      	beq.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d62:	f023 030f 	bic.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	6811      	ldr	r1, [r2, #0]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	431a      	orrs	r2, r3
 8004d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d74:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d76:	e047      	b.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8c:	d004      	beq.n	8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a23      	ldr	r2, [pc, #140]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10f      	bne.n	8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004d98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d9c:	f7ff feec 	bl	8004b78 <LL_ADC_IsEnabled>
 8004da0:	4604      	mov	r4, r0
 8004da2:	481f      	ldr	r0, [pc, #124]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004da4:	f7ff fee8 	bl	8004b78 <LL_ADC_IsEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4323      	orrs	r3, r4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	e012      	b.n	8004dde <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004db8:	481a      	ldr	r0, [pc, #104]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dba:	f7ff fedd 	bl	8004b78 <LL_ADC_IsEnabled>
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4819      	ldr	r0, [pc, #100]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dc2:	f7ff fed9 	bl	8004b78 <LL_ADC_IsEnabled>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	431c      	orrs	r4, r3
 8004dca:	481a      	ldr	r0, [pc, #104]	@ (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004dcc:	f7ff fed4 	bl	8004b78 <LL_ADC_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4323      	orrs	r3, r4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d012      	beq.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dea:	f023 030f 	bic.w	r3, r3, #15
 8004dee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004df0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004df2:	e009      	b.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004e06:	e000      	b.n	8004e0a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3784      	adds	r7, #132	@ 0x84
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	50000100 	.word	0x50000100
 8004e24:	50000400 	.word	0x50000400
 8004e28:	50000500 	.word	0x50000500
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	50000700 	.word	0x50000700
 8004e34:	50000600 	.word	0x50000600

08004e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e48:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <__NVIC_SetPriorityGrouping+0x44>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e54:	4013      	ands	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e6a:	4a04      	ldr	r2, [pc, #16]	@ (8004e7c <__NVIC_SetPriorityGrouping+0x44>)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	60d3      	str	r3, [r2, #12]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <__NVIC_GetPriorityGrouping+0x18>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0307 	and.w	r3, r3, #7
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	db0b      	blt.n	8004ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	f003 021f 	and.w	r2, r3, #31
 8004eb4:	4907      	ldr	r1, [pc, #28]	@ (8004ed4 <__NVIC_EnableIRQ+0x38>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	e000e100 	.word	0xe000e100

08004ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	db0a      	blt.n	8004f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	490c      	ldr	r1, [pc, #48]	@ (8004f24 <__NVIC_SetPriority+0x4c>)
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	440b      	add	r3, r1
 8004efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f00:	e00a      	b.n	8004f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	4908      	ldr	r1, [pc, #32]	@ (8004f28 <__NVIC_SetPriority+0x50>)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	0112      	lsls	r2, r2, #4
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	440b      	add	r3, r1
 8004f16:	761a      	strb	r2, [r3, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000e100 	.word	0xe000e100
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f1c3 0307 	rsb	r3, r3, #7
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	bf28      	it	cs
 8004f4a:	2304      	movcs	r3, #4
 8004f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d902      	bls.n	8004f5c <NVIC_EncodePriority+0x30>
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3b03      	subs	r3, #3
 8004f5a:	e000      	b.n	8004f5e <NVIC_EncodePriority+0x32>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	401a      	ands	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f74:	f04f 31ff 	mov.w	r1, #4294967295
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	43d9      	mvns	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f84:	4313      	orrs	r3, r2
         );
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3724      	adds	r7, #36	@ 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa4:	d301      	bcc.n	8004faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e00f      	b.n	8004fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004faa:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fb2:	210f      	movs	r1, #15
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	f7ff ff8e 	bl	8004ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fbc:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <SysTick_Config+0x40>)
 8004fc4:	2207      	movs	r2, #7
 8004fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	e000e010 	.word	0xe000e010

08004fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff29 	bl	8004e38 <__NVIC_SetPriorityGrouping>
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ffc:	f7ff ff40 	bl	8004e80 <__NVIC_GetPriorityGrouping>
 8005000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff ff90 	bl	8004f2c <NVIC_EncodePriority>
 800500c:	4602      	mov	r2, r0
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff ff5f 	bl	8004ed8 <__NVIC_SetPriority>
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff33 	bl	8004e9c <__NVIC_EnableIRQ>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ffa4 	bl	8004f94 <SysTick_Config>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e08d      	b.n	8005186 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	4b47      	ldr	r3, [pc, #284]	@ (8005190 <HAL_DMA_Init+0x138>)
 8005072:	429a      	cmp	r2, r3
 8005074:	d80f      	bhi.n	8005096 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	4b45      	ldr	r3, [pc, #276]	@ (8005194 <HAL_DMA_Init+0x13c>)
 800507e:	4413      	add	r3, r2
 8005080:	4a45      	ldr	r2, [pc, #276]	@ (8005198 <HAL_DMA_Init+0x140>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a42      	ldr	r2, [pc, #264]	@ (800519c <HAL_DMA_Init+0x144>)
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
 8005094:	e00e      	b.n	80050b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	4b40      	ldr	r3, [pc, #256]	@ (80051a0 <HAL_DMA_Init+0x148>)
 800509e:	4413      	add	r3, r2
 80050a0:	4a3d      	ldr	r2, [pc, #244]	@ (8005198 <HAL_DMA_Init+0x140>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	009a      	lsls	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a3c      	ldr	r2, [pc, #240]	@ (80051a4 <HAL_DMA_Init+0x14c>)
 80050b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9b6 	bl	8005478 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005114:	d102      	bne.n	800511c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005130:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_DMA_Init+0x104>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d80c      	bhi.n	800515c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9d6 	bl	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e008      	b.n	800516e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40020407 	.word	0x40020407
 8005194:	bffdfff8 	.word	0xbffdfff8
 8005198:	cccccccd 	.word	0xcccccccd
 800519c:	40020000 	.word	0x40020000
 80051a0:	bffdfbf8 	.word	0xbffdfbf8
 80051a4:	40020400 	.word	0x40020400

080051a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_DMA_Start_IT+0x20>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e066      	b.n	8005296 <HAL_DMA_Start_IT+0xee>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d155      	bne.n	8005288 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f8fb 	bl	80053fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 020e 	orr.w	r2, r2, #14
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e00f      	b.n	8005240 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 020a 	orr.w	r2, r2, #10
 800523e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800525c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005274:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e005      	b.n	8005294 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005290:	2302      	movs	r3, #2
 8005292:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2204      	movs	r2, #4
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d026      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d021      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f003 021f 	and.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2104      	movs	r1, #4
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d071      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005316:	e06c      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2202      	movs	r2, #2
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02e      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d029      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 020a 	bic.w	r2, r2, #10
 8005352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	2102      	movs	r1, #2
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d038      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005388:	e033      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2208      	movs	r2, #8
 8005394:	409a      	lsls	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d025      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 020e 	bic.w	r2, r2, #14
 80053b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
}
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005412:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	f003 021f 	and.w	r2, r3, #31
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f202 	lsl.w	r2, r1, r2
 8005438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b10      	cmp	r3, #16
 8005448:	d108      	bne.n	800545c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800545a:	e007      	b.n	800546c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005488:	429a      	cmp	r2, r3
 800548a:	d802      	bhi.n	8005492 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e001      	b.n	8005496 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005492:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005494:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	3b08      	subs	r3, #8
 80054a2:	4a12      	ldr	r2, [pc, #72]	@ (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0b      	ldr	r2, [pc, #44]	@ (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2201      	movs	r2, #1
 80054cc:	409a      	lsls	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40020407 	.word	0x40020407
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020820 	.word	0x40020820
 80054ec:	cccccccd 	.word	0xcccccccd
 80054f0:	40020880 	.word	0x40020880

080054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	461a      	mov	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005516:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	1000823f 	.word	0x1000823f
 8005538:	40020940 	.word	0x40020940

0800553c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800554a:	e15a      	b.n	8005802 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4013      	ands	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 814c 	beq.w	80057fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d005      	beq.n	800557c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005578:	2b02      	cmp	r3, #2
 800557a:	d130      	bne.n	80055de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b2:	2201      	movs	r2, #1
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0201 	and.w	r2, r3, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d017      	beq.n	800561a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	2203      	movs	r2, #3
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d123      	bne.n	800566e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	08da      	lsrs	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4013      	ands	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	6939      	ldr	r1, [r7, #16]
 800566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a6 	beq.w	80057fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80056bc:	4b58      	ldr	r3, [pc, #352]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c8:	4a56      	ldr	r2, [pc, #344]	@ (8005824 <HAL_GPIO_Init+0x2e8>)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	3302      	adds	r3, #2
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	220f      	movs	r2, #15
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056f2:	d01f      	beq.n	8005734 <HAL_GPIO_Init+0x1f8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005828 <HAL_GPIO_Init+0x2ec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d019      	beq.n	8005730 <HAL_GPIO_Init+0x1f4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a4b      	ldr	r2, [pc, #300]	@ (800582c <HAL_GPIO_Init+0x2f0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_GPIO_Init+0x1f0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_GPIO_Init+0x2f4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00d      	beq.n	8005728 <HAL_GPIO_Init+0x1ec>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a49      	ldr	r2, [pc, #292]	@ (8005834 <HAL_GPIO_Init+0x2f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <HAL_GPIO_Init+0x1e8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a48      	ldr	r2, [pc, #288]	@ (8005838 <HAL_GPIO_Init+0x2fc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_GPIO_Init+0x1e4>
 800571c:	2305      	movs	r3, #5
 800571e:	e00a      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005720:	2306      	movs	r3, #6
 8005722:	e008      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005724:	2304      	movs	r3, #4
 8005726:	e006      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005728:	2303      	movs	r3, #3
 800572a:	e004      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 800572c:	2302      	movs	r3, #2
 800572e:	e002      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005734:	2300      	movs	r3, #0
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4093      	lsls	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005746:	4937      	ldr	r1, [pc, #220]	@ (8005824 <HAL_GPIO_Init+0x2e8>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005754:	4b39      	ldr	r3, [pc, #228]	@ (800583c <HAL_GPIO_Init+0x300>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005778:	4a30      	ldr	r2, [pc, #192]	@ (800583c <HAL_GPIO_Init+0x300>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800577e:	4b2f      	ldr	r3, [pc, #188]	@ (800583c <HAL_GPIO_Init+0x300>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057a2:	4a26      	ldr	r2, [pc, #152]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057a8:	4b24      	ldr	r3, [pc, #144]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057cc:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057d2:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057f6:	4a11      	ldr	r2, [pc, #68]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f ae9d 	bne.w	800554c <HAL_GPIO_Init+0x10>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40021000 	.word	0x40021000
 8005824:	40010000 	.word	0x40010000
 8005828:	48000400 	.word	0x48000400
 800582c:	48000800 	.word	0x48000800
 8005830:	48000c00 	.word	0x48000c00
 8005834:	48001000 	.word	0x48001000
 8005838:	48001400 	.word	0x48001400
 800583c:	40010400 	.word	0x40010400

08005840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
 800584c:	4613      	mov	r3, r2
 800584e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005850:	787b      	ldrb	r3, [r7, #1]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800585c:	e002      	b.n	8005864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800587a:	4b08      	ldr	r3, [pc, #32]	@ (800589c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005886:	4a05      	ldr	r2, [pc, #20]	@ (800589c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f806 	bl	80058a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40010400 	.word	0x40010400

080058a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0bb      	b.n	8005a46 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d101      	bne.n	80058de <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0b3      	b.n	8005a46 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d101      	bne.n	80058ee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0ab      	b.n	8005a46 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ee:	4b58      	ldr	r3, [pc, #352]	@ (8005a50 <HAL_OPAMP_Init+0x198>)
 80058f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f2:	4a57      	ldr	r2, [pc, #348]	@ (8005a50 <HAL_OPAMP_Init+0x198>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80058fa:	4b55      	ldr	r3, [pc, #340]	@ (8005a50 <HAL_OPAMP_Init+0x198>)
 80058fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fc fe64 	bl	80025e8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b40      	cmp	r3, #64	@ 0x40
 8005926:	d003      	beq.n	8005930 <HAL_OPAMP_Init+0x78>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b60      	cmp	r3, #96	@ 0x60
 800592e:	d133      	bne.n	8005998 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 0110 	bic.w	r1, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_OPAMP_Init+0x19c>)
 800594e:	4013      	ands	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6851      	ldr	r1, [r2, #4]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6892      	ldr	r2, [r2, #8]
 8005958:	4311      	orrs	r1, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6912      	ldr	r2, [r2, #16]
 800595e:	430a      	orrs	r2, r1
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	7d09      	ldrb	r1, [r1, #20]
 8005964:	2901      	cmp	r1, #1
 8005966:	d102      	bne.n	800596e <HAL_OPAMP_Init+0xb6>
 8005968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800596c:	e000      	b.n	8005970 <HAL_OPAMP_Init+0xb8>
 800596e:	2100      	movs	r1, #0
 8005970:	4311      	orrs	r1, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005976:	4311      	orrs	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800597c:	4311      	orrs	r1, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005982:	04d2      	lsls	r2, r2, #19
 8005984:	4311      	orrs	r1, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800598a:	0612      	lsls	r2, r2, #24
 800598c:	4311      	orrs	r1, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	430b      	orrs	r3, r1
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e035      	b.n	8005a04 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 0110 	bic.w	r1, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b27      	ldr	r3, [pc, #156]	@ (8005a54 <HAL_OPAMP_Init+0x19c>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6851      	ldr	r1, [r2, #4]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	4311      	orrs	r1, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68d2      	ldr	r2, [r2, #12]
 80059c6:	4311      	orrs	r1, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6912      	ldr	r2, [r2, #16]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	7d09      	ldrb	r1, [r1, #20]
 80059d2:	2901      	cmp	r1, #1
 80059d4:	d102      	bne.n	80059dc <HAL_OPAMP_Init+0x124>
 80059d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059da:	e000      	b.n	80059de <HAL_OPAMP_Init+0x126>
 80059dc:	2100      	movs	r1, #0
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059e4:	4311      	orrs	r1, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80059ea:	4311      	orrs	r1, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059f0:	04d2      	lsls	r2, r2, #19
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059f8:	0612      	lsls	r2, r2, #24
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db10      	blt.n	8005a30 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	e0003e11 	.word	0xe0003e11

08005a58 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	e01d      	b.n	8005aac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d102      	bne.n	8005a82 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
 8005a80:	e014      	b.n	8005aac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005aa6:	e001      	b.n	8005aac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0c0      	b.n	8005c4e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d106      	bne.n	8005ae6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f00a fbfb 	bl	80102dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f006 fa9b 	bl	800c02e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e03e      	b.n	8005b7c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005afe:	7bfa      	ldrb	r2, [r7, #15]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3311      	adds	r3, #17
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	3310      	adds	r3, #16
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	3313      	adds	r3, #19
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	440b      	add	r3, r1
 8005b48:	3320      	adds	r3, #32
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b4e:	7bfa      	ldrb	r2, [r7, #15]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3324      	adds	r3, #36	@ 0x24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	791b      	ldrb	r3, [r3, #4]
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3bb      	bcc.n	8005afe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
 8005b8a:	e044      	b.n	8005c16 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	440b      	add	r3, r1
 8005b9a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bb4:	7bfa      	ldrb	r2, [r7, #15]
 8005bb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	440b      	add	r3, r1
 8005bc6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005be4:	7bfa      	ldrb	r2, [r7, #15]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bfa:	7bfa      	ldrb	r2, [r7, #15]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	3301      	adds	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	791b      	ldrb	r3, [r3, #4]
 8005c1a:	7bfa      	ldrb	r2, [r7, #15]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d3b5      	bcc.n	8005b8c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005c2c:	f006 fa1a 	bl	800c064 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7a9b      	ldrb	r3, [r3, #10]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fc40 	bl	80074cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_PCD_Start+0x16>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e012      	b.n	8005c92 <HAL_PCD_Start+0x3c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f006 f9c1 	bl	800c000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f008 fc81 	bl	800e58a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f008 fc86 	bl	800e5b8 <USB_ReadInterrupts>
 8005cac:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb04 	bl	80062c6 <PCD_EP_ISR_Handler>

    return;
 8005cbe:	e110      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d013      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f00a fb8b 	bl	80103fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8fc 	bl	8005ee8 <HAL_PCD_SetAddress>

    return;
 8005cf0:	e0f7      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d14:	e0e5      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d32:	b292      	uxth	r2, r2
 8005d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d38:	e0d3      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d034      	beq.n	8005dae <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0204 	bic.w	r2, r2, #4
 8005d56:	b292      	uxth	r2, r2
 8005d58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0208 	bic.w	r2, r2, #8
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d107      	bne.n	8005d8e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d86:	2100      	movs	r1, #0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f00a fd2b 	bl	80107e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f00a fb6e 	bl	8010470 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005da6:	b292      	uxth	r2, r2
 8005da8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005dac:	e099      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d027      	beq.n	8005e08 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0208 	orr.w	r2, r2, #8
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de2:	b292      	uxth	r2, r2
 8005de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0204 	orr.w	r2, r2, #4
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f00a fb1b 	bl	801043c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e06:	e06c      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d040      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e24:	b292      	uxth	r2, r2
 8005e26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d12b      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0204 	orr.w	r2, r2, #4
 8005e46:	b292      	uxth	r2, r2
 8005e48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e82:	2101      	movs	r1, #1
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f00a fcad 	bl	80107e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005e8a:	e02a      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f00a fad5 	bl	801043c <HAL_PCD_SuspendCallback>
    return;
 8005e92:	e026      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00f      	beq.n	8005ebe <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f00a fa93 	bl	80103e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ebc:	e011      	b.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eda:	b292      	uxth	r2, r2
 8005edc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005ee0:	bf00      	nop
  }
}
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_PCD_SetAddress+0x1a>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e012      	b.n	8005f28 <HAL_PCD_SetAddress+0x40>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f008 fb22 	bl	800e562 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	70fb      	strb	r3, [r7, #3]
 8005f42:	460b      	mov	r3, r1
 8005f44:	803b      	strh	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da0e      	bge.n	8005f74 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 0207 	and.w	r2, r3, #7
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	3310      	adds	r3, #16
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	705a      	strb	r2, [r3, #1]
 8005f72:	e00e      	b.n	8005f92 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 0207 	and.w	r2, r3, #7
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f9e:	883a      	ldrh	r2, [r7, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	78ba      	ldrb	r2, [r7, #2]
 8005fa8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005faa:	78bb      	ldrb	r3, [r7, #2]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d102      	bne.n	8005fb6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_PCD_EP_Open+0x94>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e00e      	b.n	8005fe2 <HAL_PCD_EP_Open+0xb2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68f9      	ldr	r1, [r7, #12]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f006 f864 	bl	800c0a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da0e      	bge.n	800601c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	f003 0207 	and.w	r2, r3, #7
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	3310      	adds	r3, #16
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	705a      	strb	r2, [r3, #1]
 800601a:	e00e      	b.n	800603a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 0207 	and.w	r2, r3, #7
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_PCD_EP_Close+0x6a>
 8006050:	2302      	movs	r3, #2
 8006052:	e00e      	b.n	8006072 <HAL_PCD_EP_Close+0x88>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	4618      	mov	r0, r3
 8006064:	f006 fbe0 	bl	800c828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	460b      	mov	r3, r1
 8006088:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	f003 0207 	and.w	r2, r3, #7
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6979      	ldr	r1, [r7, #20]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f006 fd98 	bl	800cc02 <USB_EPStartXfer>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 0207 	and.w	r2, r3, #7
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	460b      	mov	r3, r1
 800611a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	f003 0207 	and.w	r2, r3, #7
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	3310      	adds	r3, #16
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2201      	movs	r2, #1
 8006156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006158:	7afb      	ldrb	r3, [r7, #11]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	b2da      	uxtb	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	4618      	mov	r0, r3
 800616c:	f006 fd49 	bl	800cc02 <USB_EPStartXfer>

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	7912      	ldrb	r2, [r2, #4]
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e03e      	b.n	8006216 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da0e      	bge.n	80061be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	f003 0207 	and.w	r2, r3, #7
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	3310      	adds	r3, #16
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	705a      	strb	r2, [r3, #1]
 80061bc:	e00c      	b.n	80061d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_PCD_EP_SetStall+0x7e>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e00e      	b.n	8006216 <HAL_PCD_EP_SetStall+0x9c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	4618      	mov	r0, r3
 8006208:	f008 f8ac 	bl	800e364 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7912      	ldrb	r2, [r2, #4]
 8006234:	4293      	cmp	r3, r2
 8006236:	d901      	bls.n	800623c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e040      	b.n	80062be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800623c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006240:	2b00      	cmp	r3, #0
 8006242:	da0e      	bge.n	8006262 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	3310      	adds	r3, #16
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	705a      	strb	r2, [r3, #1]
 8006260:	e00e      	b.n	8006280 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 0207 	and.w	r2, r3, #7
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_PCD_EP_ClrStall+0x82>
 800629c:	2302      	movs	r3, #2
 800629e:	e00e      	b.n	80062be <HAL_PCD_EP_ClrStall+0xa0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f008 f8a9 	bl	800e406 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b096      	sub	sp, #88	@ 0x58
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80062ce:	e3ad      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80062dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80062ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 816f 	bne.w	80065d2 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80062f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d14c      	bne.n	800639a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800630c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006310:	81fb      	strh	r3, [r7, #14]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	89fb      	ldrh	r3, [r7, #14]
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29b      	uxth	r3, r3
 8006322:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3310      	adds	r3, #16
 8006328:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	4413      	add	r3, r2
 8006344:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800634e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006350:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	441a      	add	r2, r3
 800635c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f00a f823 	bl	80103ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7b1b      	ldrb	r3, [r3, #12]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 835c 	beq.w	8006a2c <PCD_EP_ISR_Handler+0x766>
 8006374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8357 	bne.w	8006a2c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7b1b      	ldrb	r3, [r3, #12]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	731a      	strb	r2, [r3, #12]
 8006398:	e348      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063a0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80063ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80063b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d032      	beq.n	800641e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80063ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80063ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f008 f932 	bl	800e65c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006404:	4013      	ands	r3, r2
 8006406:	823b      	strh	r3, [r7, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	8a3a      	ldrh	r2, [r7, #16]
 800640e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006412:	b292      	uxth	r2, r2
 8006414:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f009 ff9c 	bl	8010354 <HAL_PCD_SetupStageCallback>
 800641c:	e306      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800641e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006422:	2b00      	cmp	r3, #0
 8006424:	f280 8302 	bge.w	8006a2c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29a      	uxth	r2, r3
 8006430:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006434:	4013      	ands	r3, r2
 8006436:	83fb      	strh	r3, [r7, #30]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	8bfa      	ldrh	r2, [r7, #30]
 800643e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006442:	b292      	uxth	r2, r2
 8006444:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	4413      	add	r3, r2
 8006460:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800646a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800646e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d019      	beq.n	80064aa <PCD_EP_ISR_Handler+0x1e4>
 8006476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006484:	6959      	ldr	r1, [r3, #20]
 8006486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006488:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800648a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800648e:	b29b      	uxth	r3, r3
 8006490:	f008 f8e4 	bl	800e65c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	441a      	add	r2, r3
 800649e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80064a2:	2100      	movs	r1, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f009 ff67 	bl	8010378 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80064b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80064b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 82b5 	bne.w	8006a2c <PCD_EP_ISR_Handler+0x766>
 80064c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80064c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80064ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064ce:	f000 82ad 	beq.w	8006a2c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	4413      	add	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b3e      	cmp	r3, #62	@ 0x3e
 8006508:	d91d      	bls.n	8006546 <PCD_EP_ISR_Handler+0x280>
 800650a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
 8006512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <PCD_EP_ISR_Handler+0x25e>
 800651e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006520:	3b01      	subs	r3, #1
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29a      	uxth	r2, r3
 800652a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29b      	uxth	r3, r3
 8006532:	4313      	orrs	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e026      	b.n	8006594 <PCD_EP_ISR_Handler+0x2ce>
 8006546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <PCD_EP_ISR_Handler+0x29e>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655c:	b29a      	uxth	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e017      	b.n	8006594 <PCD_EP_ISR_Handler+0x2ce>
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	647b      	str	r3, [r7, #68]	@ 0x44
 800656c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <PCD_EP_ISR_Handler+0x2b8>
 8006578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657a:	3301      	adds	r3, #1
 800657c:	647b      	str	r3, [r7, #68]	@ 0x44
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29b      	uxth	r3, r3
 800658c:	4313      	orrs	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	827b      	strh	r3, [r7, #18]
 80065a6:	8a7b      	ldrh	r3, [r7, #18]
 80065a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065ac:	827b      	strh	r3, [r7, #18]
 80065ae:	8a7b      	ldrh	r3, [r7, #18]
 80065b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065b4:	827b      	strh	r3, [r7, #18]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	8a7b      	ldrh	r3, [r7, #18]
 80065bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]
 80065d0:	e22c      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065e6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f280 80f6 	bge.w	80067dc <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29a      	uxth	r2, r3
 8006602:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006606:	4013      	ands	r3, r2
 8006608:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800661e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006622:	b292      	uxth	r2, r2
 8006624:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006626:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4413      	add	r3, r2
 800663a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800663c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800663e:	7b1b      	ldrb	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d123      	bne.n	800668c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	4413      	add	r3, r2
 800665e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006668:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800666c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 808e 	beq.w	8006792 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667c:	6959      	ldr	r1, [r3, #20]
 800667e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006680:	88da      	ldrh	r2, [r3, #6]
 8006682:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006686:	f007 ffe9 	bl	800e65c <USB_ReadPMA>
 800668a:	e082      	b.n	8006792 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	78db      	ldrb	r3, [r3, #3]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d10a      	bne.n	80066aa <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006698:	461a      	mov	r2, r3
 800669a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f9d3 	bl	8006a48 <HAL_PCD_EP_DB_Receive>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80066a8:	e073      	b.n	8006792 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d022      	beq.n	800674e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006710:	b29b      	uxth	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	4413      	add	r3, r2
 8006722:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800672c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006730:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02c      	beq.n	8006792 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673e:	6959      	ldr	r1, [r3, #20]
 8006740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006742:	891a      	ldrh	r2, [r3, #8]
 8006744:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006748:	f007 ff88 	bl	800e65c <USB_ReadPMA>
 800674c:	e021      	b.n	8006792 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	4413      	add	r3, r2
 8006768:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006772:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006776:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	6959      	ldr	r1, [r3, #20]
 8006786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006788:	895a      	ldrh	r2, [r3, #10]
 800678a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800678e:	f007 ff65 	bl	800e65c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800679a:	441a      	add	r2, r3
 800679c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80067a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80067a8:	441a      	add	r2, r3
 80067aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80067ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <PCD_EP_ISR_Handler+0x4fc>
 80067b6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80067ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d206      	bcs.n	80067d0 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80067c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f009 fdd5 	bl	8010378 <HAL_PCD_DataOutStageCallback>
 80067ce:	e005      	b.n	80067dc <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067d6:	4618      	mov	r0, r3
 80067d8:	f006 fa13 	bl	800cc02 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80067dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8121 	beq.w	8006a2c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80067ea:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	3310      	adds	r3, #16
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4413      	add	r3, r2
 80067fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800682e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800683a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	2b01      	cmp	r3, #1
 8006840:	f040 80a2 	bne.w	8006988 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006846:	2200      	movs	r2, #0
 8006848:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800684a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800684c:	7b1b      	ldrb	r3, [r3, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8093 	beq.w	800697a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006854:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d046      	beq.n	80068ee <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d126      	bne.n	80068b6 <PCD_EP_ISR_Handler+0x5f0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	4413      	add	r3, r2
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	00da      	lsls	r2, r3, #3
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	4413      	add	r3, r2
 800688a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800688e:	623b      	str	r3, [r7, #32]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689a:	b29a      	uxth	r2, r3
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e061      	b.n	800697a <PCD_EP_ISR_Handler+0x6b4>
 80068b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d15d      	bne.n	800697a <PCD_EP_ISR_Handler+0x6b4>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d2:	4413      	add	r3, r2
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	00da      	lsls	r2, r3, #3
 80068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068de:	4413      	add	r3, r2
 80068e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	2200      	movs	r2, #0
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e045      	b.n	800697a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d126      	bne.n	800694a <PCD_EP_ISR_Handler+0x684>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	4413      	add	r3, r2
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	00da      	lsls	r2, r3, #3
 800691a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691c:	4413      	add	r3, r2
 800691e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800692e:	b29a      	uxth	r2, r3
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	801a      	strh	r2, [r3, #0]
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006942:	b29a      	uxth	r2, r3
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e017      	b.n	800697a <PCD_EP_ISR_Handler+0x6b4>
 800694a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d113      	bne.n	800697a <PCD_EP_ISR_Handler+0x6b4>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	4413      	add	r3, r2
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	00da      	lsls	r2, r3, #3
 800696a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696c:	4413      	add	r3, r2
 800696e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	2200      	movs	r2, #0
 8006978:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f009 fd14 	bl	80103ae <HAL_PCD_DataInStageCallback>
 8006986:	e051      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006988:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800698c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d144      	bne.n	8006a1e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80069bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d907      	bls.n	80069d8 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80069c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069d0:	1ad2      	subs	r2, r2, r3
 80069d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d4:	619a      	str	r2, [r3, #24]
 80069d6:	e002      	b.n	80069de <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80069d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80069de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f009 fcde 	bl	80103ae <HAL_PCD_DataInStageCallback>
 80069f2:	e01b      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80069f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80069fc:	441a      	add	r2, r3
 80069fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a00:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a0a:	441a      	add	r2, r3
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a16:	4618      	mov	r0, r3
 8006a18:	f006 f8f3 	bl	800cc02 <USB_EPStartXfer>
 8006a1c:	e006      	b.n	8006a2c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a22:	461a      	mov	r2, r3
 8006a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f917 	bl	8006c5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	b21b      	sxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f6ff ac49 	blt.w	80062d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3758      	adds	r7, #88	@ 0x58
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d07c      	beq.n	8006b5a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	4413      	add	r3, r2
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	8b7b      	ldrh	r3, [r7, #26]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d306      	bcc.n	8006a9e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	8b7b      	ldrh	r3, [r7, #26]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	619a      	str	r2, [r3, #24]
 8006a9c:	e002      	b.n	8006aa4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d123      	bne.n	8006af4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac6:	833b      	strh	r3, [r7, #24]
 8006ac8:	8b3b      	ldrh	r3, [r7, #24]
 8006aca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ace:	833b      	strh	r3, [r7, #24]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	8b3b      	ldrh	r3, [r7, #24]
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01f      	beq.n	8006b3e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	82fb      	strh	r3, [r7, #22]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	8afb      	ldrh	r3, [r7, #22]
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b3e:	8b7b      	ldrh	r3, [r7, #26]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8085 	beq.w	8006c50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6959      	ldr	r1, [r3, #20]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	891a      	ldrh	r2, [r3, #8]
 8006b52:	8b7b      	ldrh	r3, [r7, #26]
 8006b54:	f007 fd82 	bl	800e65c <USB_ReadPMA>
 8006b58:	e07a      	b.n	8006c50 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	8b7b      	ldrh	r3, [r7, #26]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d306      	bcc.n	8006b98 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	8b7b      	ldrh	r3, [r7, #26]
 8006b90:	1ad2      	subs	r2, r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	619a      	str	r2, [r3, #24]
 8006b96:	e002      	b.n	8006b9e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d123      	bne.n	8006bee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc0:	83fb      	strh	r3, [r7, #30]
 8006bc2:	8bfb      	ldrh	r3, [r7, #30]
 8006bc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bc8:	83fb      	strh	r3, [r7, #30]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8bfb      	ldrh	r3, [r7, #30]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11f      	bne.n	8006c38 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	83bb      	strh	r3, [r7, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8bbb      	ldrh	r3, [r7, #28]
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c38:	8b7b      	ldrh	r3, [r7, #26]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6959      	ldr	r1, [r3, #20]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	895a      	ldrh	r2, [r3, #10]
 8006c4a:	8b7b      	ldrh	r3, [r7, #26]
 8006c4c:	f007 fd06 	bl	800e65c <USB_ReadPMA>
    }
  }

  return count;
 8006c50:	8b7b      	ldrh	r3, [r7, #26]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3720      	adds	r7, #32
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b0a4      	sub	sp, #144	@ 0x90
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 81db 	beq.w	800702a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4413      	add	r3, r2
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d907      	bls.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	619a      	str	r2, [r3, #24]
 8006cb6:	e002      	b.n	8006cbe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 80b9 	bne.w	8006e3a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d126      	bne.n	8006d1e <HAL_PCD_EP_DB_Transmit+0xc4>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	4413      	add	r3, r2
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e01a      	b.n	8006d54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d116      	bne.n	8006d54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	4413      	add	r3, r2
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	00da      	lsls	r2, r3, #3
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d126      	bne.n	8006db0 <HAL_PCD_EP_DB_Transmit+0x156>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	00da      	lsls	r2, r3, #3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e017      	b.n	8006de0 <HAL_PCD_EP_DB_Transmit+0x186>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d113      	bne.n	8006de0 <HAL_PCD_EP_DB_Transmit+0x186>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	4413      	add	r3, r2
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	00da      	lsls	r2, r3, #3
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dd8:	623b      	str	r3, [r7, #32]
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f009 fae1 	bl	80103ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 82fa 	beq.w	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e12:	82fb      	strh	r3, [r7, #22]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	8afb      	ldrh	r3, [r7, #22]
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
 8006e38:	e2d8      	b.n	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d021      	beq.n	8006e88 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	f040 82ac 	bne.w	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006eaa:	441a      	add	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d30b      	bcc.n	8006ed4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	621a      	str	r2, [r3, #32]
 8006ed2:	e017      	b.n	8006f04 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006edc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006eec:	e00a      	b.n	8006f04 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d165      	bne.n	8006fd8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f20:	4413      	add	r3, r2
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	00da      	lsls	r2, r3, #3
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f4a:	d91d      	bls.n	8006f88 <HAL_PCD_EP_DB_Transmit+0x32e>
 8006f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_PCD_EP_DB_Transmit+0x30c>
 8006f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f62:	3b01      	subs	r3, #1
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	029b      	lsls	r3, r3, #10
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e044      	b.n	8007012 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <HAL_PCD_EP_DB_Transmit+0x34c>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	e035      	b.n	8007012 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_PCD_EP_DB_Transmit+0x366>
 8006fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e01c      	b.n	8007012 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d118      	bne.n	8007012 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff4:	4413      	add	r3, r2
 8006ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	00da      	lsls	r2, r3, #3
 8006ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007000:	4413      	add	r3, r2
 8007002:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007006:	643b      	str	r3, [r7, #64]	@ 0x40
 8007008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800700c:	b29a      	uxth	r2, r3
 800700e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007010:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6959      	ldr	r1, [r3, #20]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	891a      	ldrh	r2, [r3, #8]
 800701e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007022:	b29b      	uxth	r3, r3
 8007024:	f007 fad8 	bl	800e5d8 <USB_WritePMA>
 8007028:	e1e0      	b.n	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	4413      	add	r3, r2
 8007044:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800704e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800705a:	429a      	cmp	r2, r3
 800705c:	d307      	bcc.n	800706e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	619a      	str	r2, [r3, #24]
 800706c:	e002      	b.n	8007074 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 80c0 	bne.w	80071fe <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d126      	bne.n	80070d4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800709a:	4413      	add	r3, r2
 800709c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070a6:	4413      	add	r3, r2
 80070a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	e01a      	b.n	800710a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d116      	bne.n	800710a <HAL_PCD_EP_DB_Transmit+0x4b0>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f0:	4413      	add	r3, r2
 80070f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00da      	lsls	r2, r3, #3
 80070fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007102:	663b      	str	r3, [r7, #96]	@ 0x60
 8007104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007106:	2200      	movs	r2, #0
 8007108:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d12b      	bne.n	8007170 <HAL_PCD_EP_DB_Transmit+0x516>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800712c:	4413      	add	r3, r2
 800712e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	00da      	lsls	r2, r3, #3
 8007136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007138:	4413      	add	r3, r2
 800713a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800713e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007142:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e017      	b.n	80071a0 <HAL_PCD_EP_DB_Transmit+0x546>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d113      	bne.n	80071a0 <HAL_PCD_EP_DB_Transmit+0x546>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007186:	4413      	add	r3, r2
 8007188:	677b      	str	r3, [r7, #116]	@ 0x74
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	00da      	lsls	r2, r3, #3
 8007190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007192:	4413      	add	r3, r2
 8007194:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007198:	673b      	str	r3, [r7, #112]	@ 0x70
 800719a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800719c:	2200      	movs	r2, #0
 800719e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f009 f901 	bl	80103ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 811a 	bne.w	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	441a      	add	r2, r3
 80071e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80071e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8013      	strh	r3, [r2, #0]
 80071fc:	e0f6      	b.n	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d121      	bne.n	800724c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800721e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007222:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	441a      	add	r2, r3
 8007234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007248:	b29b      	uxth	r3, r3
 800724a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007252:	2b01      	cmp	r3, #1
 8007254:	f040 80ca 	bne.w	80073ec <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	695a      	ldr	r2, [r3, #20]
 800725c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007260:	441a      	add	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800726e:	441a      	add	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a1a      	ldr	r2, [r3, #32]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	429a      	cmp	r2, r3
 800727e:	d30b      	bcc.n	8007298 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6a1a      	ldr	r2, [r3, #32]
 800728c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007290:	1ad2      	subs	r2, r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	621a      	str	r2, [r3, #32]
 8007296:	e017      	b.n	80072c8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d108      	bne.n	80072b2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80072a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80072a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80072b0:	e00a      	b.n	80072c8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d165      	bne.n	80073a2 <HAL_PCD_EP_DB_Transmit+0x748>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072ea:	4413      	add	r3, r2
 80072ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	00da      	lsls	r2, r3, #3
 80072f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007308:	b29a      	uxth	r2, r3
 800730a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007312:	2b3e      	cmp	r3, #62	@ 0x3e
 8007314:	d91d      	bls.n	8007352 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800731e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800732a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800732c:	3b01      	subs	r3, #1
 800732e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29a      	uxth	r2, r3
 8007336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007338:	b29b      	uxth	r3, r3
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	b29b      	uxth	r3, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734a:	b29a      	uxth	r2, r3
 800734c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e041      	b.n	80073d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <HAL_PCD_EP_DB_Transmit+0x716>
 800735a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e032      	b.n	80073d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_PCD_EP_DB_Transmit+0x730>
 8007384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007386:	3301      	adds	r3, #1
 8007388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29a      	uxth	r2, r3
 8007390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007392:	b29b      	uxth	r3, r3
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	b29b      	uxth	r3, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	b29a      	uxth	r2, r3
 800739c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e019      	b.n	80073d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d115      	bne.n	80073d6 <HAL_PCD_EP_DB_Transmit+0x77c>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b8:	4413      	add	r3, r2
 80073ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	00da      	lsls	r2, r3, #3
 80073c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80073cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6959      	ldr	r1, [r3, #20]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	895a      	ldrh	r2, [r3, #10]
 80073e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f007 f8f6 	bl	800e5d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007406:	82bb      	strh	r3, [r7, #20]
 8007408:	8abb      	ldrh	r3, [r7, #20]
 800740a:	f083 0310 	eor.w	r3, r3, #16
 800740e:	82bb      	strh	r3, [r7, #20]
 8007410:	8abb      	ldrh	r3, [r7, #20]
 8007412:	f083 0320 	eor.w	r3, r3, #32
 8007416:	82bb      	strh	r3, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	8abb      	ldrh	r3, [r7, #20]
 8007428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800742c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007438:	b29b      	uxth	r3, r3
 800743a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3790      	adds	r7, #144	@ 0x90
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007446:	b480      	push	{r7}
 8007448:	b087      	sub	sp, #28
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	817b      	strh	r3, [r7, #10]
 8007454:	4613      	mov	r3, r2
 8007456:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007464:	897b      	ldrh	r3, [r7, #10]
 8007466:	f003 0207 	and.w	r2, r3, #7
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	3310      	adds	r3, #16
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e009      	b.n	8007490 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800747c:	897a      	ldrh	r2, [r7, #10]
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d107      	bne.n	80074a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2200      	movs	r2, #0
 800749a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	80da      	strh	r2, [r3, #6]
 80074a4:	e00b      	b.n	80074be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2201      	movs	r2, #1
 80074aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007504:	b29b      	uxth	r3, r3
 8007506:	f043 0302 	orr.w	r3, r3, #2
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d141      	bne.n	80075b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800752e:	4b4b      	ldr	r3, [pc, #300]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800753a:	d131      	bne.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800753c:	4b47      	ldr	r3, [pc, #284]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007542:	4a46      	ldr	r2, [pc, #280]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800754c:	4b43      	ldr	r3, [pc, #268]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007554:	4a41      	ldr	r2, [pc, #260]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800755a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800755c:	4b40      	ldr	r3, [pc, #256]	@ (8007660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2232      	movs	r2, #50	@ 0x32
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	4a3f      	ldr	r2, [pc, #252]	@ (8007664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007568:	fba2 2303 	umull	r2, r3, r2, r3
 800756c:	0c9b      	lsrs	r3, r3, #18
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007572:	e002      	b.n	800757a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3b01      	subs	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800757a:	4b38      	ldr	r3, [pc, #224]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007586:	d102      	bne.n	800758e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f2      	bne.n	8007574 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800758e:	4b33      	ldr	r3, [pc, #204]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800759a:	d158      	bne.n	800764e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e057      	b.n	8007650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075a0:	4b2e      	ldr	r3, [pc, #184]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a6:	4a2d      	ldr	r2, [pc, #180]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80075b0:	e04d      	b.n	800764e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b8:	d141      	bne.n	800763e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075ba:	4b28      	ldr	r3, [pc, #160]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c6:	d131      	bne.n	800762c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075c8:	4b24      	ldr	r3, [pc, #144]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ce:	4a23      	ldr	r2, [pc, #140]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075d8:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075e0:	4a1e      	ldr	r2, [pc, #120]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2232      	movs	r2, #50	@ 0x32
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	0c9b      	lsrs	r3, r3, #18
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075fe:	e002      	b.n	8007606 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3b01      	subs	r3, #1
 8007604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007606:	4b15      	ldr	r3, [pc, #84]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800760e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007612:	d102      	bne.n	800761a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f2      	bne.n	8007600 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007626:	d112      	bne.n	800764e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e011      	b.n	8007650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800762c:	4b0b      	ldr	r3, [pc, #44]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007632:	4a0a      	ldr	r2, [pc, #40]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007638:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800763c:	e007      	b.n	800764e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007646:	4a05      	ldr	r2, [pc, #20]	@ (800765c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007648:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800764c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40007000 	.word	0x40007000
 8007660:	20000000 	.word	0x20000000
 8007664:	431bde83 	.word	0x431bde83

08007668 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800766c:	4b05      	ldr	r3, [pc, #20]	@ (8007684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4a04      	ldr	r2, [pc, #16]	@ (8007684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007676:	6093      	str	r3, [r2, #8]
}
 8007678:	bf00      	nop
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40007000 	.word	0x40007000

08007688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e2fe      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d075      	beq.n	8007792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076a6:	4b97      	ldr	r3, [pc, #604]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 030c 	and.w	r3, r3, #12
 80076ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076b0:	4b94      	ldr	r3, [pc, #592]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	d102      	bne.n	80076c6 <HAL_RCC_OscConfig+0x3e>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d002      	beq.n	80076cc <HAL_RCC_OscConfig+0x44>
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d10b      	bne.n	80076e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076cc:	4b8d      	ldr	r3, [pc, #564]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d05b      	beq.n	8007790 <HAL_RCC_OscConfig+0x108>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d157      	bne.n	8007790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e2d9      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d106      	bne.n	80076fc <HAL_RCC_OscConfig+0x74>
 80076ee:	4b85      	ldr	r3, [pc, #532]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a84      	ldr	r2, [pc, #528]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80076f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e01d      	b.n	8007738 <HAL_RCC_OscConfig+0xb0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007704:	d10c      	bne.n	8007720 <HAL_RCC_OscConfig+0x98>
 8007706:	4b7f      	ldr	r3, [pc, #508]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a7e      	ldr	r2, [pc, #504]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800770c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	4b7c      	ldr	r3, [pc, #496]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a7b      	ldr	r2, [pc, #492]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e00b      	b.n	8007738 <HAL_RCC_OscConfig+0xb0>
 8007720:	4b78      	ldr	r3, [pc, #480]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a77      	ldr	r2, [pc, #476]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b75      	ldr	r3, [pc, #468]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a74      	ldr	r2, [pc, #464]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fb fcde 	bl	8003100 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007748:	f7fb fcda 	bl	8003100 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b64      	cmp	r3, #100	@ 0x64
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e29e      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800775a:	4b6a      	ldr	r3, [pc, #424]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0xc0>
 8007766:	e014      	b.n	8007792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7fb fcca 	bl	8003100 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007770:	f7fb fcc6 	bl	8003100 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b64      	cmp	r3, #100	@ 0x64
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e28a      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007782:	4b60      	ldr	r3, [pc, #384]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0xe8>
 800778e:	e000      	b.n	8007792 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d075      	beq.n	800788a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800779e:	4b59      	ldr	r3, [pc, #356]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077a8:	4b56      	ldr	r3, [pc, #344]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	d102      	bne.n	80077be <HAL_RCC_OscConfig+0x136>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d002      	beq.n	80077c4 <HAL_RCC_OscConfig+0x13c>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d11f      	bne.n	8007804 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <HAL_RCC_OscConfig+0x154>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e25d      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077dc:	4b49      	ldr	r3, [pc, #292]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	061b      	lsls	r3, r3, #24
 80077ea:	4946      	ldr	r1, [pc, #280]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077f0:	4b45      	ldr	r3, [pc, #276]	@ (8007908 <HAL_RCC_OscConfig+0x280>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fb fc37 	bl	8003068 <HAL_InitTick>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d043      	beq.n	8007888 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e249      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d023      	beq.n	8007854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800780c:	4b3d      	ldr	r3, [pc, #244]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a3c      	ldr	r2, [pc, #240]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007818:	f7fb fc72 	bl	8003100 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007820:	f7fb fc6e 	bl	8003100 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e232      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007832:	4b34      	ldr	r3, [pc, #208]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	061b      	lsls	r3, r3, #24
 800784c:	492d      	ldr	r1, [pc, #180]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	604b      	str	r3, [r1, #4]
 8007852:	e01a      	b.n	800788a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007854:	4b2b      	ldr	r3, [pc, #172]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2a      	ldr	r2, [pc, #168]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800785a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800785e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007860:	f7fb fc4e 	bl	8003100 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007868:	f7fb fc4a 	bl	8003100 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e20e      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800787a:	4b22      	ldr	r3, [pc, #136]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f0      	bne.n	8007868 <HAL_RCC_OscConfig+0x1e0>
 8007886:	e000      	b.n	800788a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d041      	beq.n	800791a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01c      	beq.n	80078d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800789e:	4b19      	ldr	r3, [pc, #100]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80078a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a4:	4a17      	ldr	r2, [pc, #92]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ae:	f7fb fc27 	bl	8003100 <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078b6:	f7fb fc23 	bl	8003100 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e1e7      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80078ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0ef      	beq.n	80078b6 <HAL_RCC_OscConfig+0x22e>
 80078d6:	e020      	b.n	800791a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80078da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078de:	4a09      	ldr	r2, [pc, #36]	@ (8007904 <HAL_RCC_OscConfig+0x27c>)
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e8:	f7fb fc0a 	bl	8003100 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078ee:	e00d      	b.n	800790c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078f0:	f7fb fc06 	bl	8003100 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d906      	bls.n	800790c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e1ca      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000
 8007908:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800790c:	4b8c      	ldr	r3, [pc, #560]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 800790e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1ea      	bne.n	80078f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80a6 	beq.w	8007a74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007928:	2300      	movs	r3, #0
 800792a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800792c:	4b84      	ldr	r3, [pc, #528]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 800792e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <HAL_RCC_OscConfig+0x2b4>
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <HAL_RCC_OscConfig+0x2b6>
 800793c:	2300      	movs	r3, #0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007942:	4b7f      	ldr	r3, [pc, #508]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007946:	4a7e      	ldr	r2, [pc, #504]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800794c:	6593      	str	r3, [r2, #88]	@ 0x58
 800794e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800795a:	2301      	movs	r3, #1
 800795c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800795e:	4b79      	ldr	r3, [pc, #484]	@ (8007b44 <HAL_RCC_OscConfig+0x4bc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d118      	bne.n	800799c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800796a:	4b76      	ldr	r3, [pc, #472]	@ (8007b44 <HAL_RCC_OscConfig+0x4bc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a75      	ldr	r2, [pc, #468]	@ (8007b44 <HAL_RCC_OscConfig+0x4bc>)
 8007970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007976:	f7fb fbc3 	bl	8003100 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800797e:	f7fb fbbf 	bl	8003100 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e183      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007990:	4b6c      	ldr	r3, [pc, #432]	@ (8007b44 <HAL_RCC_OscConfig+0x4bc>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f0      	beq.n	800797e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d108      	bne.n	80079b6 <HAL_RCC_OscConfig+0x32e>
 80079a4:	4b66      	ldr	r3, [pc, #408]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079aa:	4a65      	ldr	r2, [pc, #404]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079b4:	e024      	b.n	8007a00 <HAL_RCC_OscConfig+0x378>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d110      	bne.n	80079e0 <HAL_RCC_OscConfig+0x358>
 80079be:	4b60      	ldr	r3, [pc, #384]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079c6:	f043 0304 	orr.w	r3, r3, #4
 80079ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	4a5a      	ldr	r2, [pc, #360]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079de:	e00f      	b.n	8007a00 <HAL_RCC_OscConfig+0x378>
 80079e0:	4b57      	ldr	r3, [pc, #348]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e6:	4a56      	ldr	r2, [pc, #344]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079f0:	4b53      	ldr	r3, [pc, #332]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f6:	4a52      	ldr	r2, [pc, #328]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	f023 0304 	bic.w	r3, r3, #4
 80079fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d016      	beq.n	8007a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a08:	f7fb fb7a 	bl	8003100 <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0e:	e00a      	b.n	8007a26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a10:	f7fb fb76 	bl	8003100 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e138      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a26:	4b46      	ldr	r3, [pc, #280]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0ed      	beq.n	8007a10 <HAL_RCC_OscConfig+0x388>
 8007a34:	e015      	b.n	8007a62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a36:	f7fb fb63 	bl	8003100 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a3c:	e00a      	b.n	8007a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3e:	f7fb fb5f 	bl	8003100 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e121      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a54:	4b3a      	ldr	r3, [pc, #232]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1ed      	bne.n	8007a3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a68:	4b35      	ldr	r3, [pc, #212]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6c:	4a34      	ldr	r2, [pc, #208]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03c      	beq.n	8007afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01c      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a88:	4b2d      	ldr	r3, [pc, #180]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a98:	f7fb fb32 	bl	8003100 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007aa0:	f7fb fb2e 	bl	8003100 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e0f2      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ab2:	4b23      	ldr	r3, [pc, #140]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0ef      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x418>
 8007ac0:	e01b      	b.n	8007afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad2:	f7fb fb15 	bl	8003100 <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ada:	f7fb fb11 	bl	8003100 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e0d5      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007aec:	4b14      	ldr	r3, [pc, #80]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ef      	bne.n	8007ada <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80c9 	beq.w	8007c96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b04:	4b0e      	ldr	r3, [pc, #56]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 030c 	and.w	r3, r3, #12
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	f000 8083 	beq.w	8007c18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d15e      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a08      	ldr	r2, [pc, #32]	@ (8007b40 <HAL_RCC_OscConfig+0x4b8>)
 8007b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fb faeb 	bl	8003100 <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b2c:	e00c      	b.n	8007b48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b2e:	f7fb fae7 	bl	8003100 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d905      	bls.n	8007b48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e0ab      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
 8007b40:	40021000 	.word	0x40021000
 8007b44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b48:	4b55      	ldr	r3, [pc, #340]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1ec      	bne.n	8007b2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b54:	4b52      	ldr	r3, [pc, #328]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	4b52      	ldr	r3, [pc, #328]	@ (8007ca4 <HAL_RCC_OscConfig+0x61c>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6a11      	ldr	r1, [r2, #32]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0112      	lsls	r2, r2, #4
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007b6e:	0212      	lsls	r2, r2, #8
 8007b70:	4311      	orrs	r1, r2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b76:	0852      	lsrs	r2, r2, #1
 8007b78:	3a01      	subs	r2, #1
 8007b7a:	0552      	lsls	r2, r2, #21
 8007b7c:	4311      	orrs	r1, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b82:	0852      	lsrs	r2, r2, #1
 8007b84:	3a01      	subs	r2, #1
 8007b86:	0652      	lsls	r2, r2, #25
 8007b88:	4311      	orrs	r1, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b8e:	06d2      	lsls	r2, r2, #27
 8007b90:	430a      	orrs	r2, r1
 8007b92:	4943      	ldr	r1, [pc, #268]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b98:	4b41      	ldr	r3, [pc, #260]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a40      	ldr	r2, [pc, #256]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ba2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fb faa6 	bl	8003100 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bb8:	f7fb faa2 	bl	8003100 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e066      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bca:	4b35      	ldr	r3, [pc, #212]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x530>
 8007bd6:	e05e      	b.n	8007c96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd8:	4b31      	ldr	r3, [pc, #196]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a30      	ldr	r2, [pc, #192]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be4:	f7fb fa8c 	bl	8003100 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fb fa88 	bl	8003100 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e04c      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bfe:	4b28      	ldr	r3, [pc, #160]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f0      	bne.n	8007bec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c0a:	4b25      	ldr	r3, [pc, #148]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	4924      	ldr	r1, [pc, #144]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007c10:	4b25      	ldr	r3, [pc, #148]	@ (8007ca8 <HAL_RCC_OscConfig+0x620>)
 8007c12:	4013      	ands	r3, r2
 8007c14:	60cb      	str	r3, [r1, #12]
 8007c16:	e03e      	b.n	8007c96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e039      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c24:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca0 <HAL_RCC_OscConfig+0x618>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f003 0203 	and.w	r2, r3, #3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d12c      	bne.n	8007c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	3b01      	subs	r3, #1
 8007c44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d123      	bne.n	8007c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d11b      	bne.n	8007c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d113      	bne.n	8007c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c74:	085b      	lsrs	r3, r3, #1
 8007c76:	3b01      	subs	r3, #1
 8007c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d001      	beq.n	8007c96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	019f800c 	.word	0x019f800c
 8007ca8:	feeefffc 	.word	0xfeeefffc

08007cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e11e      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cc4:	4b91      	ldr	r3, [pc, #580]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d910      	bls.n	8007cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f023 020f 	bic.w	r2, r3, #15
 8007cda:	498c      	ldr	r1, [pc, #560]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e106      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d073      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d129      	bne.n	8007d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d08:	4b81      	ldr	r3, [pc, #516]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e0f4      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d18:	f000 f99e 	bl	8008058 <RCC_GetSysClockFreqFromPLLSource>
 8007d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	4a7c      	ldr	r2, [pc, #496]	@ (8007f14 <HAL_RCC_ClockConfig+0x268>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d93f      	bls.n	8007da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d26:	4b7a      	ldr	r3, [pc, #488]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d033      	beq.n	8007da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d12f      	bne.n	8007da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d46:	4b72      	ldr	r3, [pc, #456]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d4e:	4a70      	ldr	r2, [pc, #448]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d56:	2380      	movs	r3, #128	@ 0x80
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e024      	b.n	8007da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d107      	bne.n	8007d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d64:	4b6a      	ldr	r3, [pc, #424]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e0c6      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d74:	4b66      	ldr	r3, [pc, #408]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0be      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007d84:	f000 f8ce 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 8007d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	4a61      	ldr	r2, [pc, #388]	@ (8007f14 <HAL_RCC_ClockConfig+0x268>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d909      	bls.n	8007da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d92:	4b5f      	ldr	r3, [pc, #380]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007da2:	2380      	movs	r3, #128	@ 0x80
 8007da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007da6:	4b5a      	ldr	r3, [pc, #360]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f023 0203 	bic.w	r2, r3, #3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4957      	ldr	r1, [pc, #348]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db8:	f7fb f9a2 	bl	8003100 <HAL_GetTick>
 8007dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dbe:	e00a      	b.n	8007dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dc0:	f7fb f99e 	bl	8003100 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e095      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 020c 	and.w	r2, r3, #12
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d1eb      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d023      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e00:	4b43      	ldr	r3, [pc, #268]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a42      	ldr	r2, [pc, #264]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d007      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e18:	4b3d      	ldr	r3, [pc, #244]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e20:	4a3b      	ldr	r2, [pc, #236]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e28:	4b39      	ldr	r3, [pc, #228]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4936      	ldr	r1, [pc, #216]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	608b      	str	r3, [r1, #8]
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b80      	cmp	r3, #128	@ 0x80
 8007e40:	d105      	bne.n	8007e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e42:	4b33      	ldr	r3, [pc, #204]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	4a32      	ldr	r2, [pc, #200]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d21d      	bcs.n	8007e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f023 020f 	bic.w	r2, r3, #15
 8007e64:	4929      	ldr	r1, [pc, #164]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e6c:	f7fb f948 	bl	8003100 <HAL_GetTick>
 8007e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e72:	e00a      	b.n	8007e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e74:	f7fb f944 	bl	8003100 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e03b      	b.n	8007f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8a:	4b20      	ldr	r3, [pc, #128]	@ (8007f0c <HAL_RCC_ClockConfig+0x260>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d1ed      	bne.n	8007e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	4917      	ldr	r1, [pc, #92]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ec2:	4b13      	ldr	r3, [pc, #76]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	490f      	ldr	r1, [pc, #60]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ed6:	f000 f825 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b0c      	ldr	r3, [pc, #48]	@ (8007f10 <HAL_RCC_ClockConfig+0x264>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	490c      	ldr	r1, [pc, #48]	@ (8007f18 <HAL_RCC_ClockConfig+0x26c>)
 8007ee8:	5ccb      	ldrb	r3, [r1, r3]
 8007eea:	f003 031f 	and.w	r3, r3, #31
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <HAL_RCC_ClockConfig+0x270>)
 8007ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <HAL_RCC_ClockConfig+0x274>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fb f8b4 	bl	8003068 <HAL_InitTick>
 8007f00:	4603      	mov	r3, r0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40022000 	.word	0x40022000
 8007f10:	40021000 	.word	0x40021000
 8007f14:	04c4b400 	.word	0x04c4b400
 8007f18:	08015b34 	.word	0x08015b34
 8007f1c:	20000000 	.word	0x20000000
 8007f20:	20000004 	.word	0x20000004

08007f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 030c 	and.w	r3, r3, #12
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d102      	bne.n	8007f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f36:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	e047      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f3c:	4b27      	ldr	r3, [pc, #156]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 030c 	and.w	r3, r3, #12
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d102      	bne.n	8007f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f48:	4b26      	ldr	r3, [pc, #152]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	e03e      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f4e:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 030c 	and.w	r3, r3, #12
 8007f56:	2b0c      	cmp	r3, #12
 8007f58:	d136      	bne.n	8007fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f5a:	4b20      	ldr	r3, [pc, #128]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d10c      	bne.n	8007f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f78:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	4a16      	ldr	r2, [pc, #88]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f82:	68d2      	ldr	r2, [r2, #12]
 8007f84:	0a12      	lsrs	r2, r2, #8
 8007f86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	617b      	str	r3, [r7, #20]
      break;
 8007f90:	e00c      	b.n	8007fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f92:	4a13      	ldr	r2, [pc, #76]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9a:	4a10      	ldr	r2, [pc, #64]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f9c:	68d2      	ldr	r2, [r2, #12]
 8007f9e:	0a12      	lsrs	r2, r2, #8
 8007fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fa4:	fb02 f303 	mul.w	r3, r2, r3
 8007fa8:	617b      	str	r3, [r7, #20]
      break;
 8007faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fac:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	0e5b      	lsrs	r3, r3, #25
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e001      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007fcc:	693b      	ldr	r3, [r7, #16]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	40021000 	.word	0x40021000
 8007fe0:	00f42400 	.word	0x00f42400
 8007fe4:	007a1200 	.word	0x007a1200

08007fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fec:	4b03      	ldr	r3, [pc, #12]	@ (8007ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8007fee:	681b      	ldr	r3, [r3, #0]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	20000000 	.word	0x20000000

08008000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008004:	f7ff fff0 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4904      	ldr	r1, [pc, #16]	@ (8008028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40021000 	.word	0x40021000
 8008028:	08015b44 	.word	0x08015b44

0800802c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008030:	f7ff ffda 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b06      	ldr	r3, [pc, #24]	@ (8008050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	0adb      	lsrs	r3, r3, #11
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40021000 	.word	0x40021000
 8008054:	08015b44 	.word	0x08015b44

08008058 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800805e:	4b1e      	ldr	r3, [pc, #120]	@ (80080d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008068:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d10c      	bne.n	8008096 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	4a14      	ldr	r2, [pc, #80]	@ (80080d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008086:	68d2      	ldr	r2, [r2, #12]
 8008088:	0a12      	lsrs	r2, r2, #8
 800808a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	617b      	str	r3, [r7, #20]
    break;
 8008094:	e00c      	b.n	80080b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008096:	4a12      	ldr	r2, [pc, #72]	@ (80080e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	4a0e      	ldr	r2, [pc, #56]	@ (80080d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080a0:	68d2      	ldr	r2, [r2, #12]
 80080a2:	0a12      	lsrs	r2, r2, #8
 80080a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]
    break;
 80080ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080b0:	4b09      	ldr	r3, [pc, #36]	@ (80080d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	0e5b      	lsrs	r3, r3, #25
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	3301      	adds	r3, #1
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80080ca:	687b      	ldr	r3, [r7, #4]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	40021000 	.word	0x40021000
 80080dc:	007a1200 	.word	0x007a1200
 80080e0:	00f42400 	.word	0x00f42400

080080e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080ec:	2300      	movs	r3, #0
 80080ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080f0:	2300      	movs	r3, #0
 80080f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8098 	beq.w	8008232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008102:	2300      	movs	r3, #0
 8008104:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008106:	4b43      	ldr	r3, [pc, #268]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10d      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008112:	4b40      	ldr	r3, [pc, #256]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008116:	4a3f      	ldr	r2, [pc, #252]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800811c:	6593      	str	r3, [r2, #88]	@ 0x58
 800811e:	4b3d      	ldr	r3, [pc, #244]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800812a:	2301      	movs	r3, #1
 800812c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800812e:	4b3a      	ldr	r3, [pc, #232]	@ (8008218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a39      	ldr	r2, [pc, #228]	@ (8008218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800813a:	f7fa ffe1 	bl	8003100 <HAL_GetTick>
 800813e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008140:	e009      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008142:	f7fa ffdd 	bl	8003100 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	2b02      	cmp	r3, #2
 800814e:	d902      	bls.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	74fb      	strb	r3, [r7, #19]
        break;
 8008154:	e005      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008156:	4b30      	ldr	r3, [pc, #192]	@ (8008218 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0ef      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008162:	7cfb      	ldrb	r3, [r7, #19]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d159      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008168:	4b2a      	ldr	r3, [pc, #168]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008172:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01e      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	429a      	cmp	r2, r3
 8008182:	d019      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008184:	4b23      	ldr	r3, [pc, #140]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800818e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008190:	4b20      	ldr	r3, [pc, #128]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008196:	4a1f      	ldr	r2, [pc, #124]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800819c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081b0:	4a18      	ldr	r2, [pc, #96]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d016      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c2:	f7fa ff9d 	bl	8003100 <HAL_GetTick>
 80081c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c8:	e00b      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ca:	f7fa ff99 	bl	8003100 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081d8:	4293      	cmp	r3, r2
 80081da:	d902      	bls.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	74fb      	strb	r3, [r7, #19]
            break;
 80081e0:	e006      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0ec      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80081f0:	7cfb      	ldrb	r3, [r7, #19]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081f6:	4b07      	ldr	r3, [pc, #28]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008204:	4903      	ldr	r1, [pc, #12]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800820c:	e008      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800820e:	7cfb      	ldrb	r3, [r7, #19]
 8008210:	74bb      	strb	r3, [r7, #18]
 8008212:	e005      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008214:	40021000 	.word	0x40021000
 8008218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821c:	7cfb      	ldrb	r3, [r7, #19]
 800821e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008220:	7c7b      	ldrb	r3, [r7, #17]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d105      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008226:	4ba7      	ldr	r3, [pc, #668]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822a:	4aa6      	ldr	r2, [pc, #664]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800822c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008230:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800823e:	4ba1      	ldr	r3, [pc, #644]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008244:	f023 0203 	bic.w	r2, r3, #3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	499d      	ldr	r1, [pc, #628]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008260:	4b98      	ldr	r3, [pc, #608]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008266:	f023 020c 	bic.w	r2, r3, #12
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	4995      	ldr	r1, [pc, #596]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008270:	4313      	orrs	r3, r2
 8008272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008282:	4b90      	ldr	r3, [pc, #576]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008288:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	498c      	ldr	r1, [pc, #560]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082a4:	4b87      	ldr	r3, [pc, #540]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	4984      	ldr	r1, [pc, #528]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082c6:	4b7f      	ldr	r3, [pc, #508]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	497b      	ldr	r1, [pc, #492]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082e8:	4b76      	ldr	r3, [pc, #472]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	4973      	ldr	r1, [pc, #460]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800830a:	4b6e      	ldr	r3, [pc, #440]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008310:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	496a      	ldr	r1, [pc, #424]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800832c:	4b65      	ldr	r3, [pc, #404]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008332:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	4962      	ldr	r1, [pc, #392]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833c:	4313      	orrs	r3, r2
 800833e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800834e:	4b5d      	ldr	r3, [pc, #372]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008354:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	4959      	ldr	r1, [pc, #356]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835e:	4313      	orrs	r3, r2
 8008360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008370:	4b54      	ldr	r3, [pc, #336]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008376:	f023 0203 	bic.w	r2, r3, #3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	4951      	ldr	r1, [pc, #324]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008392:	4b4c      	ldr	r3, [pc, #304]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008398:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4948      	ldr	r1, [pc, #288]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d015      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083b4:	4b43      	ldr	r3, [pc, #268]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	4940      	ldr	r1, [pc, #256]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083d2:	d105      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083d4:	4b3b      	ldr	r3, [pc, #236]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a3a      	ldr	r2, [pc, #232]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083ec:	4b35      	ldr	r3, [pc, #212]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fa:	4932      	ldr	r1, [pc, #200]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800840a:	d105      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800840c:	4b2d      	ldr	r3, [pc, #180]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	4a2c      	ldr	r2, [pc, #176]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008416:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d015      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008424:	4b27      	ldr	r3, [pc, #156]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008432:	4924      	ldr	r1, [pc, #144]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008434:	4313      	orrs	r3, r2
 8008436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008442:	d105      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008444:	4b1f      	ldr	r3, [pc, #124]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800844a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800844e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d015      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800845c:	4b19      	ldr	r3, [pc, #100]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800845e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008462:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846a:	4916      	ldr	r1, [pc, #88]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846c:	4313      	orrs	r3, r2
 800846e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800847a:	d105      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800847c:	4b11      	ldr	r3, [pc, #68]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4a10      	ldr	r2, [pc, #64]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008486:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d019      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008494:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a2:	4908      	ldr	r1, [pc, #32]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b2:	d109      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084b4:	4b03      	ldr	r3, [pc, #12]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a02      	ldr	r2, [pc, #8]	@ (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084be:	60d3      	str	r3, [r2, #12]
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80084c2:	bf00      	nop
 80084c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d015      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80084d4:	4b29      	ldr	r3, [pc, #164]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e2:	4926      	ldr	r1, [pc, #152]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084f2:	d105      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80084f4:	4b21      	ldr	r3, [pc, #132]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a20      	ldr	r2, [pc, #128]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d015      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800850c:	4b1b      	ldr	r3, [pc, #108]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008512:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851a:	4918      	ldr	r1, [pc, #96]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852a:	d105      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800852c:	4b13      	ldr	r3, [pc, #76]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	4a12      	ldr	r2, [pc, #72]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008536:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d015      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008544:	4b0d      	ldr	r3, [pc, #52]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008546:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800854a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008552:	490a      	ldr	r1, [pc, #40]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008562:	d105      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	4a04      	ldr	r2, [pc, #16]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800856a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800856e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008570:	7cbb      	ldrb	r3, [r7, #18]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40021000 	.word	0x40021000

08008580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e049      	b.n	8008626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fa f872 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f001 fe08 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	d001      	beq.n	8008648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e04c      	b.n	80086e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <HAL_TIM_Base_Start+0xc0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d022      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008662:	d01d      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a22      	ldr	r2, [pc, #136]	@ (80086f4 <HAL_TIM_Base_Start+0xc4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d018      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a21      	ldr	r2, [pc, #132]	@ (80086f8 <HAL_TIM_Base_Start+0xc8>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d013      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <HAL_TIM_Base_Start+0xcc>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00e      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1e      	ldr	r2, [pc, #120]	@ (8008700 <HAL_TIM_Base_Start+0xd0>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d009      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <HAL_TIM_Base_Start+0xd4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d004      	beq.n	80086a0 <HAL_TIM_Base_Start+0x70>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1b      	ldr	r2, [pc, #108]	@ (8008708 <HAL_TIM_Base_Start+0xd8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d115      	bne.n	80086cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	4b19      	ldr	r3, [pc, #100]	@ (800870c <HAL_TIM_Base_Start+0xdc>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d015      	beq.n	80086de <HAL_TIM_Base_Start+0xae>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b8:	d011      	beq.n	80086de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0201 	orr.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ca:	e008      	b.n	80086de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e000      	b.n	80086e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800
 80086fc:	40000c00 	.word	0x40000c00
 8008700:	40013400 	.word	0x40013400
 8008704:	40014000 	.word	0x40014000
 8008708:	40015000 	.word	0x40015000
 800870c:	00010007 	.word	0x00010007

08008710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d001      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e054      	b.n	80087d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a26      	ldr	r2, [pc, #152]	@ (80087e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008752:	d01d      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a22      	ldr	r2, [pc, #136]	@ (80087e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a21      	ldr	r2, [pc, #132]	@ (80087e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1f      	ldr	r2, [pc, #124]	@ (80087ec <HAL_TIM_Base_Start_IT+0xdc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a1e      	ldr	r2, [pc, #120]	@ (80087f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1c      	ldr	r2, [pc, #112]	@ (80087f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0x80>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1b      	ldr	r2, [pc, #108]	@ (80087f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d115      	bne.n	80087bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	4b19      	ldr	r3, [pc, #100]	@ (80087fc <HAL_TIM_Base_Start_IT+0xec>)
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b06      	cmp	r3, #6
 80087a0:	d015      	beq.n	80087ce <HAL_TIM_Base_Start_IT+0xbe>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087a8:	d011      	beq.n	80087ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0201 	orr.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ba:	e008      	b.n	80087ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0201 	orr.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e000      	b.n	80087d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40012c00 	.word	0x40012c00
 80087e4:	40000400 	.word	0x40000400
 80087e8:	40000800 	.word	0x40000800
 80087ec:	40000c00 	.word	0x40000c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40015000 	.word	0x40015000
 80087fc:	00010007 	.word	0x00010007

08008800 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e049      	b.n	80088a6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f841 	bl	80088ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3304      	adds	r3, #4
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f001 fcc8 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <HAL_TIM_OC_Start+0x24>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	bf14      	ite	ne
 80088e0:	2301      	movne	r3, #1
 80088e2:	2300      	moveq	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	e03c      	b.n	8008962 <HAL_TIM_OC_Start+0x9e>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d109      	bne.n	8008902 <HAL_TIM_OC_Start+0x3e>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	bf14      	ite	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	2300      	moveq	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	e02f      	b.n	8008962 <HAL_TIM_OC_Start+0x9e>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b08      	cmp	r3, #8
 8008906:	d109      	bne.n	800891c <HAL_TIM_OC_Start+0x58>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	bf14      	ite	ne
 8008914:	2301      	movne	r3, #1
 8008916:	2300      	moveq	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	e022      	b.n	8008962 <HAL_TIM_OC_Start+0x9e>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b0c      	cmp	r3, #12
 8008920:	d109      	bne.n	8008936 <HAL_TIM_OC_Start+0x72>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b01      	cmp	r3, #1
 800892c:	bf14      	ite	ne
 800892e:	2301      	movne	r3, #1
 8008930:	2300      	moveq	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	e015      	b.n	8008962 <HAL_TIM_OC_Start+0x9e>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b10      	cmp	r3, #16
 800893a:	d109      	bne.n	8008950 <HAL_TIM_OC_Start+0x8c>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	bf14      	ite	ne
 8008948:	2301      	movne	r3, #1
 800894a:	2300      	moveq	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	e008      	b.n	8008962 <HAL_TIM_OC_Start+0x9e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b01      	cmp	r3, #1
 800895a:	bf14      	ite	ne
 800895c:	2301      	movne	r3, #1
 800895e:	2300      	moveq	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e0a6      	b.n	8008ab8 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <HAL_TIM_OC_Start+0xb6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008978:	e023      	b.n	80089c2 <HAL_TIM_OC_Start+0xfe>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b04      	cmp	r3, #4
 800897e:	d104      	bne.n	800898a <HAL_TIM_OC_Start+0xc6>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008988:	e01b      	b.n	80089c2 <HAL_TIM_OC_Start+0xfe>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d104      	bne.n	800899a <HAL_TIM_OC_Start+0xd6>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008998:	e013      	b.n	80089c2 <HAL_TIM_OC_Start+0xfe>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b0c      	cmp	r3, #12
 800899e:	d104      	bne.n	80089aa <HAL_TIM_OC_Start+0xe6>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089a8:	e00b      	b.n	80089c2 <HAL_TIM_OC_Start+0xfe>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b10      	cmp	r3, #16
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_OC_Start+0xf6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089b8:	e003      	b.n	80089c2 <HAL_TIM_OC_Start+0xfe>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2202      	movs	r2, #2
 80089be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2201      	movs	r2, #1
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 fa86 	bl	800aedc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a3a      	ldr	r2, [pc, #232]	@ (8008ac0 <HAL_TIM_OC_Start+0x1fc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d018      	beq.n	8008a0c <HAL_TIM_OC_Start+0x148>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a39      	ldr	r2, [pc, #228]	@ (8008ac4 <HAL_TIM_OC_Start+0x200>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d013      	beq.n	8008a0c <HAL_TIM_OC_Start+0x148>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a37      	ldr	r2, [pc, #220]	@ (8008ac8 <HAL_TIM_OC_Start+0x204>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00e      	beq.n	8008a0c <HAL_TIM_OC_Start+0x148>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a36      	ldr	r2, [pc, #216]	@ (8008acc <HAL_TIM_OC_Start+0x208>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d009      	beq.n	8008a0c <HAL_TIM_OC_Start+0x148>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a34      	ldr	r2, [pc, #208]	@ (8008ad0 <HAL_TIM_OC_Start+0x20c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d004      	beq.n	8008a0c <HAL_TIM_OC_Start+0x148>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a33      	ldr	r2, [pc, #204]	@ (8008ad4 <HAL_TIM_OC_Start+0x210>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_OC_Start+0x14c>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <HAL_TIM_OC_Start+0x14e>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d007      	beq.n	8008a26 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a25      	ldr	r2, [pc, #148]	@ (8008ac0 <HAL_TIM_OC_Start+0x1fc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d022      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a38:	d01d      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a26      	ldr	r2, [pc, #152]	@ (8008ad8 <HAL_TIM_OC_Start+0x214>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d018      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a24      	ldr	r2, [pc, #144]	@ (8008adc <HAL_TIM_OC_Start+0x218>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a23      	ldr	r2, [pc, #140]	@ (8008ae0 <HAL_TIM_OC_Start+0x21c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00e      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a19      	ldr	r2, [pc, #100]	@ (8008ac4 <HAL_TIM_OC_Start+0x200>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	@ (8008ac8 <HAL_TIM_OC_Start+0x204>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_TIM_OC_Start+0x1b2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <HAL_TIM_OC_Start+0x210>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d115      	bne.n	8008aa2 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	4b19      	ldr	r3, [pc, #100]	@ (8008ae4 <HAL_TIM_OC_Start+0x220>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d015      	beq.n	8008ab4 <HAL_TIM_OC_Start+0x1f0>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8e:	d011      	beq.n	8008ab4 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa0:	e008      	b.n	8008ab4 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0201 	orr.w	r2, r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e000      	b.n	8008ab6 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40012c00 	.word	0x40012c00
 8008ac4:	40013400 	.word	0x40013400
 8008ac8:	40014000 	.word	0x40014000
 8008acc:	40014400 	.word	0x40014400
 8008ad0:	40014800 	.word	0x40014800
 8008ad4:	40015000 	.word	0x40015000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	00010007 	.word	0x00010007

08008ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e049      	b.n	8008b8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f841 	bl	8008b96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f001 fb54 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <HAL_TIM_PWM_Start+0x24>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	e03c      	b.n	8008c4a <HAL_TIM_PWM_Start+0x9e>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d109      	bne.n	8008bea <HAL_TIM_PWM_Start+0x3e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	bf14      	ite	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	2300      	moveq	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	e02f      	b.n	8008c4a <HAL_TIM_PWM_Start+0x9e>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d109      	bne.n	8008c04 <HAL_TIM_PWM_Start+0x58>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	e022      	b.n	8008c4a <HAL_TIM_PWM_Start+0x9e>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b0c      	cmp	r3, #12
 8008c08:	d109      	bne.n	8008c1e <HAL_TIM_PWM_Start+0x72>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	bf14      	ite	ne
 8008c16:	2301      	movne	r3, #1
 8008c18:	2300      	moveq	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	e015      	b.n	8008c4a <HAL_TIM_PWM_Start+0x9e>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d109      	bne.n	8008c38 <HAL_TIM_PWM_Start+0x8c>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	e008      	b.n	8008c4a <HAL_TIM_PWM_Start+0x9e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	bf14      	ite	ne
 8008c44:	2301      	movne	r3, #1
 8008c46:	2300      	moveq	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e0a6      	b.n	8008da0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_PWM_Start+0xb6>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c60:	e023      	b.n	8008caa <HAL_TIM_PWM_Start+0xfe>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_PWM_Start+0xc6>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c70:	e01b      	b.n	8008caa <HAL_TIM_PWM_Start+0xfe>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_PWM_Start+0xd6>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c80:	e013      	b.n	8008caa <HAL_TIM_PWM_Start+0xfe>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b0c      	cmp	r3, #12
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_PWM_Start+0xe6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c90:	e00b      	b.n	8008caa <HAL_TIM_PWM_Start+0xfe>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_PWM_Start+0xf6>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ca0:	e003      	b.n	8008caa <HAL_TIM_PWM_Start+0xfe>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f002 f912 	bl	800aedc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8008da8 <HAL_TIM_PWM_Start+0x1fc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d018      	beq.n	8008cf4 <HAL_TIM_PWM_Start+0x148>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a39      	ldr	r2, [pc, #228]	@ (8008dac <HAL_TIM_PWM_Start+0x200>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d013      	beq.n	8008cf4 <HAL_TIM_PWM_Start+0x148>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a37      	ldr	r2, [pc, #220]	@ (8008db0 <HAL_TIM_PWM_Start+0x204>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00e      	beq.n	8008cf4 <HAL_TIM_PWM_Start+0x148>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a36      	ldr	r2, [pc, #216]	@ (8008db4 <HAL_TIM_PWM_Start+0x208>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d009      	beq.n	8008cf4 <HAL_TIM_PWM_Start+0x148>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a34      	ldr	r2, [pc, #208]	@ (8008db8 <HAL_TIM_PWM_Start+0x20c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d004      	beq.n	8008cf4 <HAL_TIM_PWM_Start+0x148>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a33      	ldr	r2, [pc, #204]	@ (8008dbc <HAL_TIM_PWM_Start+0x210>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIM_PWM_Start+0x14c>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <HAL_TIM_PWM_Start+0x14e>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a25      	ldr	r2, [pc, #148]	@ (8008da8 <HAL_TIM_PWM_Start+0x1fc>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d022      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d20:	d01d      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a26      	ldr	r2, [pc, #152]	@ (8008dc0 <HAL_TIM_PWM_Start+0x214>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d018      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a24      	ldr	r2, [pc, #144]	@ (8008dc4 <HAL_TIM_PWM_Start+0x218>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a23      	ldr	r2, [pc, #140]	@ (8008dc8 <HAL_TIM_PWM_Start+0x21c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a19      	ldr	r2, [pc, #100]	@ (8008dac <HAL_TIM_PWM_Start+0x200>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	@ (8008db0 <HAL_TIM_PWM_Start+0x204>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_TIM_PWM_Start+0x1b2>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <HAL_TIM_PWM_Start+0x210>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d115      	bne.n	8008d8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	4b19      	ldr	r3, [pc, #100]	@ (8008dcc <HAL_TIM_PWM_Start+0x220>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b06      	cmp	r3, #6
 8008d6e:	d015      	beq.n	8008d9c <HAL_TIM_PWM_Start+0x1f0>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d76:	d011      	beq.n	8008d9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d88:	e008      	b.n	8008d9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f042 0201 	orr.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e000      	b.n	8008d9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40012c00 	.word	0x40012c00
 8008dac:	40013400 	.word	0x40013400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800
 8008dbc:	40015000 	.word	0x40015000
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	00010007 	.word	0x00010007

08008dd0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <HAL_TIM_PWM_Start_DMA+0x2c>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e03c      	b.n	8008e76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d109      	bne.n	8008e16 <HAL_TIM_PWM_Start_DMA+0x46>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	bf0c      	ite	eq
 8008e0e:	2301      	moveq	r3, #1
 8008e10:	2300      	movne	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	e02f      	b.n	8008e76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d109      	bne.n	8008e30 <HAL_TIM_PWM_Start_DMA+0x60>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	e022      	b.n	8008e76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b0c      	cmp	r3, #12
 8008e34:	d109      	bne.n	8008e4a <HAL_TIM_PWM_Start_DMA+0x7a>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	e015      	b.n	8008e76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	d109      	bne.n	8008e64 <HAL_TIM_PWM_Start_DMA+0x94>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	bf0c      	ite	eq
 8008e5c:	2301      	moveq	r3, #1
 8008e5e:	2300      	movne	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	e008      	b.n	8008e76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e1b5      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d109      	bne.n	8008e98 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e03c      	b.n	8008f12 <HAL_TIM_PWM_Start_DMA+0x142>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d109      	bne.n	8008eb2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	bf0c      	ite	eq
 8008eaa:	2301      	moveq	r3, #1
 8008eac:	2300      	movne	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	e02f      	b.n	8008f12 <HAL_TIM_PWM_Start_DMA+0x142>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d109      	bne.n	8008ecc <HAL_TIM_PWM_Start_DMA+0xfc>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	e022      	b.n	8008f12 <HAL_TIM_PWM_Start_DMA+0x142>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b0c      	cmp	r3, #12
 8008ed0:	d109      	bne.n	8008ee6 <HAL_TIM_PWM_Start_DMA+0x116>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	bf0c      	ite	eq
 8008ede:	2301      	moveq	r3, #1
 8008ee0:	2300      	movne	r3, #0
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	e015      	b.n	8008f12 <HAL_TIM_PWM_Start_DMA+0x142>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	d109      	bne.n	8008f00 <HAL_TIM_PWM_Start_DMA+0x130>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2301      	moveq	r3, #1
 8008efa:	2300      	movne	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	e008      	b.n	8008f12 <HAL_TIM_PWM_Start_DMA+0x142>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d034      	beq.n	8008f80 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_TIM_PWM_Start_DMA+0x152>
 8008f1c:	887b      	ldrh	r3, [r7, #2]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e161      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <HAL_TIM_PWM_Start_DMA+0x166>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f34:	e026      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d104      	bne.n	8008f46 <HAL_TIM_PWM_Start_DMA+0x176>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f44:	e01e      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIM_PWM_Start_DMA+0x186>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f54:	e016      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b0c      	cmp	r3, #12
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_PWM_Start_DMA+0x196>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f64:	e00e      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b10      	cmp	r3, #16
 8008f6a:	d104      	bne.n	8008f76 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f74:	e006      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f7e:	e001      	b.n	8008f84 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e132      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b0c      	cmp	r3, #12
 8008f88:	f200 80ae 	bhi.w	80090e8 <HAL_TIM_PWM_Start_DMA+0x318>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fc9 	.word	0x08008fc9
 8008f98:	080090e9 	.word	0x080090e9
 8008f9c:	080090e9 	.word	0x080090e9
 8008fa0:	080090e9 	.word	0x080090e9
 8008fa4:	08009011 	.word	0x08009011
 8008fa8:	080090e9 	.word	0x080090e9
 8008fac:	080090e9 	.word	0x080090e9
 8008fb0:	080090e9 	.word	0x080090e9
 8008fb4:	08009059 	.word	0x08009059
 8008fb8:	080090e9 	.word	0x080090e9
 8008fbc:	080090e9 	.word	0x080090e9
 8008fc0:	080090e9 	.word	0x080090e9
 8008fc4:	080090a1 	.word	0x080090a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fcc:	4a89      	ldr	r2, [pc, #548]	@ (80091f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008fce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd4:	4a88      	ldr	r2, [pc, #544]	@ (80091f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008fd6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	4a87      	ldr	r2, [pc, #540]	@ (80091fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008fde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3334      	adds	r3, #52	@ 0x34
 8008fec:	461a      	mov	r2, r3
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	f7fc f8da 	bl	80051a8 <HAL_DMA_Start_IT>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e0f5      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800900c:	60da      	str	r2, [r3, #12]
      break;
 800900e:	e06e      	b.n	80090ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009014:	4a77      	ldr	r2, [pc, #476]	@ (80091f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009016:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	4a76      	ldr	r2, [pc, #472]	@ (80091f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800901e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009024:	4a75      	ldr	r2, [pc, #468]	@ (80091fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009026:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3338      	adds	r3, #56	@ 0x38
 8009034:	461a      	mov	r2, r3
 8009036:	887b      	ldrh	r3, [r7, #2]
 8009038:	f7fc f8b6 	bl	80051a8 <HAL_DMA_Start_IT>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0d1      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009054:	60da      	str	r2, [r3, #12]
      break;
 8009056:	e04a      	b.n	80090ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905c:	4a65      	ldr	r2, [pc, #404]	@ (80091f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800905e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	4a64      	ldr	r2, [pc, #400]	@ (80091f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009066:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	4a63      	ldr	r2, [pc, #396]	@ (80091fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800906e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	333c      	adds	r3, #60	@ 0x3c
 800907c:	461a      	mov	r2, r3
 800907e:	887b      	ldrh	r3, [r7, #2]
 8009080:	f7fc f892 	bl	80051a8 <HAL_DMA_Start_IT>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0ad      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800909c:	60da      	str	r2, [r3, #12]
      break;
 800909e:	e026      	b.n	80090ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a4:	4a53      	ldr	r2, [pc, #332]	@ (80091f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80090a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ac:	4a52      	ldr	r2, [pc, #328]	@ (80091f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b4:	4a51      	ldr	r2, [pc, #324]	@ (80091fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80090b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3340      	adds	r3, #64	@ 0x40
 80090c4:	461a      	mov	r2, r3
 80090c6:	887b      	ldrh	r3, [r7, #2]
 80090c8:	f7fc f86e 	bl	80051a8 <HAL_DMA_Start_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e089      	b.n	80091ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090e4:	60da      	str	r2, [r3, #12]
      break;
 80090e6:	e002      	b.n	80090ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	75fb      	strb	r3, [r7, #23]
      break;
 80090ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d179      	bne.n	80091e8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2201      	movs	r2, #1
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 feed 	bl	800aedc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a3e      	ldr	r2, [pc, #248]	@ (8009200 <HAL_TIM_PWM_Start_DMA+0x430>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d018      	beq.n	800913e <HAL_TIM_PWM_Start_DMA+0x36e>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a3c      	ldr	r2, [pc, #240]	@ (8009204 <HAL_TIM_PWM_Start_DMA+0x434>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <HAL_TIM_PWM_Start_DMA+0x36e>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a3b      	ldr	r2, [pc, #236]	@ (8009208 <HAL_TIM_PWM_Start_DMA+0x438>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00e      	beq.n	800913e <HAL_TIM_PWM_Start_DMA+0x36e>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a39      	ldr	r2, [pc, #228]	@ (800920c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <HAL_TIM_PWM_Start_DMA+0x36e>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a38      	ldr	r2, [pc, #224]	@ (8009210 <HAL_TIM_PWM_Start_DMA+0x440>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d004      	beq.n	800913e <HAL_TIM_PWM_Start_DMA+0x36e>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a36      	ldr	r2, [pc, #216]	@ (8009214 <HAL_TIM_PWM_Start_DMA+0x444>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d101      	bne.n	8009142 <HAL_TIM_PWM_Start_DMA+0x372>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <HAL_TIM_PWM_Start_DMA+0x374>
 8009142:	2300      	movs	r3, #0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009156:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a28      	ldr	r2, [pc, #160]	@ (8009200 <HAL_TIM_PWM_Start_DMA+0x430>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d022      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800916a:	d01d      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a29      	ldr	r2, [pc, #164]	@ (8009218 <HAL_TIM_PWM_Start_DMA+0x448>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d018      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a28      	ldr	r2, [pc, #160]	@ (800921c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d013      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a26      	ldr	r2, [pc, #152]	@ (8009220 <HAL_TIM_PWM_Start_DMA+0x450>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d00e      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1d      	ldr	r2, [pc, #116]	@ (8009204 <HAL_TIM_PWM_Start_DMA+0x434>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d009      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1b      	ldr	r2, [pc, #108]	@ (8009208 <HAL_TIM_PWM_Start_DMA+0x438>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d004      	beq.n	80091a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009214 <HAL_TIM_PWM_Start_DMA+0x444>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d115      	bne.n	80091d4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <HAL_TIM_PWM_Start_DMA+0x454>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b06      	cmp	r3, #6
 80091b8:	d015      	beq.n	80091e6 <HAL_TIM_PWM_Start_DMA+0x416>
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c0:	d011      	beq.n	80091e6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	e008      	b.n	80091e6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	e000      	b.n	80091e8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0800a0c3 	.word	0x0800a0c3
 80091f8:	0800a16b 	.word	0x0800a16b
 80091fc:	0800a031 	.word	0x0800a031
 8009200:	40012c00 	.word	0x40012c00
 8009204:	40013400 	.word	0x40013400
 8009208:	40014000 	.word	0x40014000
 800920c:	40014400 	.word	0x40014400
 8009210:	40014800 	.word	0x40014800
 8009214:	40015000 	.word	0x40015000
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40000c00 	.word	0x40000c00
 8009224:	00010007 	.word	0x00010007

08009228 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e049      	b.n	80092ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f841 	bl	80092d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f000 ffb4 	bl	800a1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <HAL_TIM_IC_Start_IT+0x1e>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009306:	b2db      	uxtb	r3, r3
 8009308:	e023      	b.n	8009352 <HAL_TIM_IC_Start_IT+0x66>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b04      	cmp	r3, #4
 800930e:	d104      	bne.n	800931a <HAL_TIM_IC_Start_IT+0x2e>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009316:	b2db      	uxtb	r3, r3
 8009318:	e01b      	b.n	8009352 <HAL_TIM_IC_Start_IT+0x66>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b08      	cmp	r3, #8
 800931e:	d104      	bne.n	800932a <HAL_TIM_IC_Start_IT+0x3e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009326:	b2db      	uxtb	r3, r3
 8009328:	e013      	b.n	8009352 <HAL_TIM_IC_Start_IT+0x66>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d104      	bne.n	800933a <HAL_TIM_IC_Start_IT+0x4e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009336:	b2db      	uxtb	r3, r3
 8009338:	e00b      	b.n	8009352 <HAL_TIM_IC_Start_IT+0x66>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b10      	cmp	r3, #16
 800933e:	d104      	bne.n	800934a <HAL_TIM_IC_Start_IT+0x5e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009346:	b2db      	uxtb	r3, r3
 8009348:	e003      	b.n	8009352 <HAL_TIM_IC_Start_IT+0x66>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009350:	b2db      	uxtb	r3, r3
 8009352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <HAL_TIM_IC_Start_IT+0x78>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009360:	b2db      	uxtb	r3, r3
 8009362:	e013      	b.n	800938c <HAL_TIM_IC_Start_IT+0xa0>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b04      	cmp	r3, #4
 8009368:	d104      	bne.n	8009374 <HAL_TIM_IC_Start_IT+0x88>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009370:	b2db      	uxtb	r3, r3
 8009372:	e00b      	b.n	800938c <HAL_TIM_IC_Start_IT+0xa0>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b08      	cmp	r3, #8
 8009378:	d104      	bne.n	8009384 <HAL_TIM_IC_Start_IT+0x98>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009380:	b2db      	uxtb	r3, r3
 8009382:	e003      	b.n	800938c <HAL_TIM_IC_Start_IT+0xa0>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800938a:	b2db      	uxtb	r3, r3
 800938c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009394:	7b7b      	ldrb	r3, [r7, #13]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d001      	beq.n	800939e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e0e2      	b.n	8009564 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d104      	bne.n	80093ae <HAL_TIM_IC_Start_IT+0xc2>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093ac:	e023      	b.n	80093f6 <HAL_TIM_IC_Start_IT+0x10a>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d104      	bne.n	80093be <HAL_TIM_IC_Start_IT+0xd2>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093bc:	e01b      	b.n	80093f6 <HAL_TIM_IC_Start_IT+0x10a>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d104      	bne.n	80093ce <HAL_TIM_IC_Start_IT+0xe2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093cc:	e013      	b.n	80093f6 <HAL_TIM_IC_Start_IT+0x10a>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b0c      	cmp	r3, #12
 80093d2:	d104      	bne.n	80093de <HAL_TIM_IC_Start_IT+0xf2>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093dc:	e00b      	b.n	80093f6 <HAL_TIM_IC_Start_IT+0x10a>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b10      	cmp	r3, #16
 80093e2:	d104      	bne.n	80093ee <HAL_TIM_IC_Start_IT+0x102>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093ec:	e003      	b.n	80093f6 <HAL_TIM_IC_Start_IT+0x10a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_IC_Start_IT+0x11a>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009404:	e013      	b.n	800942e <HAL_TIM_IC_Start_IT+0x142>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b04      	cmp	r3, #4
 800940a:	d104      	bne.n	8009416 <HAL_TIM_IC_Start_IT+0x12a>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009414:	e00b      	b.n	800942e <HAL_TIM_IC_Start_IT+0x142>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b08      	cmp	r3, #8
 800941a:	d104      	bne.n	8009426 <HAL_TIM_IC_Start_IT+0x13a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009424:	e003      	b.n	800942e <HAL_TIM_IC_Start_IT+0x142>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b0c      	cmp	r3, #12
 8009432:	d841      	bhi.n	80094b8 <HAL_TIM_IC_Start_IT+0x1cc>
 8009434:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <HAL_TIM_IC_Start_IT+0x150>)
 8009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943a:	bf00      	nop
 800943c:	08009471 	.word	0x08009471
 8009440:	080094b9 	.word	0x080094b9
 8009444:	080094b9 	.word	0x080094b9
 8009448:	080094b9 	.word	0x080094b9
 800944c:	08009483 	.word	0x08009483
 8009450:	080094b9 	.word	0x080094b9
 8009454:	080094b9 	.word	0x080094b9
 8009458:	080094b9 	.word	0x080094b9
 800945c:	08009495 	.word	0x08009495
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094b9 	.word	0x080094b9
 8009468:	080094b9 	.word	0x080094b9
 800946c:	080094a7 	.word	0x080094a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0202 	orr.w	r2, r2, #2
 800947e:	60da      	str	r2, [r3, #12]
      break;
 8009480:	e01d      	b.n	80094be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f042 0204 	orr.w	r2, r2, #4
 8009490:	60da      	str	r2, [r3, #12]
      break;
 8009492:	e014      	b.n	80094be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0208 	orr.w	r2, r2, #8
 80094a2:	60da      	str	r2, [r3, #12]
      break;
 80094a4:	e00b      	b.n	80094be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 0210 	orr.w	r2, r2, #16
 80094b4:	60da      	str	r2, [r3, #12]
      break;
 80094b6:	e002      	b.n	80094be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73fb      	strb	r3, [r7, #15]
      break;
 80094bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d14e      	bne.n	8009562 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2201      	movs	r2, #1
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fd05 	bl	800aedc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a25      	ldr	r2, [pc, #148]	@ (800956c <HAL_TIM_IC_Start_IT+0x280>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d022      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e4:	d01d      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a21      	ldr	r2, [pc, #132]	@ (8009570 <HAL_TIM_IC_Start_IT+0x284>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d018      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009574 <HAL_TIM_IC_Start_IT+0x288>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d013      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009578 <HAL_TIM_IC_Start_IT+0x28c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00e      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1c      	ldr	r2, [pc, #112]	@ (800957c <HAL_TIM_IC_Start_IT+0x290>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d009      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1b      	ldr	r2, [pc, #108]	@ (8009580 <HAL_TIM_IC_Start_IT+0x294>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d004      	beq.n	8009522 <HAL_TIM_IC_Start_IT+0x236>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a19      	ldr	r2, [pc, #100]	@ (8009584 <HAL_TIM_IC_Start_IT+0x298>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d115      	bne.n	800954e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	4b17      	ldr	r3, [pc, #92]	@ (8009588 <HAL_TIM_IC_Start_IT+0x29c>)
 800952a:	4013      	ands	r3, r2
 800952c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b06      	cmp	r3, #6
 8009532:	d015      	beq.n	8009560 <HAL_TIM_IC_Start_IT+0x274>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800953a:	d011      	beq.n	8009560 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0201 	orr.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800954c:	e008      	b.n	8009560 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0201 	orr.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e000      	b.n	8009562 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009560:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	40012c00 	.word	0x40012c00
 8009570:	40000400 	.word	0x40000400
 8009574:	40000800 	.word	0x40000800
 8009578:	40000c00 	.word	0x40000c00
 800957c:	40013400 	.word	0x40013400
 8009580:	40014000 	.word	0x40014000
 8009584:	40015000 	.word	0x40015000
 8009588:	00010007 	.word	0x00010007

0800958c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d020      	beq.n	80095f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01b      	beq.n	80095f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0202 	mvn.w	r2, #2
 80095c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7f8 fde6 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 80095dc:	e005      	b.n	80095ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fcf4 	bl	8009fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fcfb 	bl	8009fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d020      	beq.n	800963c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01b      	beq.n	800963c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f06f 0204 	mvn.w	r2, #4
 800960c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2202      	movs	r2, #2
 8009612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800961e:	2b00      	cmp	r3, #0
 8009620:	d003      	beq.n	800962a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7f8 fdc0 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8009628:	e005      	b.n	8009636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fcce 	bl	8009fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fcd5 	bl	8009fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	2b00      	cmp	r3, #0
 8009644:	d020      	beq.n	8009688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01b      	beq.n	8009688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f06f 0208 	mvn.w	r2, #8
 8009658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2204      	movs	r2, #4
 800965e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7f8 fd9a 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8009674:	e005      	b.n	8009682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fca8 	bl	8009fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fcaf 	bl	8009fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	2b00      	cmp	r3, #0
 8009690:	d020      	beq.n	80096d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01b      	beq.n	80096d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f06f 0210 	mvn.w	r2, #16
 80096a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2208      	movs	r2, #8
 80096aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7f8 fd74 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 80096c0:	e005      	b.n	80096ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fc82 	bl	8009fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fc89 	bl	8009fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00c      	beq.n	80096f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f06f 0201 	mvn.w	r2, #1
 80096f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fc60 	bl	8009fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d104      	bne.n	800970c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00c      	beq.n	8009726 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800971e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 fd35 	bl	800b190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fd2d 	bl	800b1a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00c      	beq.n	800976e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fc4d 	bl	800a008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f003 0320 	and.w	r3, r3, #32
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00c      	beq.n	8009792 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f06f 0220 	mvn.w	r2, #32
 800978a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 fcf5 	bl	800b17c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00c      	beq.n	80097b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80097ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 fd01 	bl	800b1b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00c      	beq.n	80097da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d007      	beq.n	80097da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80097d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 fcf9 	bl	800b1cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00c      	beq.n	80097fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80097f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 fcf1 	bl	800b1e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00c      	beq.n	8009822 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800981a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fce9 	bl	800b1f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009846:	2302      	movs	r3, #2
 8009848:	e066      	b.n	8009918 <HAL_TIM_OC_ConfigChannel+0xec>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b14      	cmp	r3, #20
 8009856:	d857      	bhi.n	8009908 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009858:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <HAL_TIM_OC_ConfigChannel+0x34>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	080098b5 	.word	0x080098b5
 8009864:	08009909 	.word	0x08009909
 8009868:	08009909 	.word	0x08009909
 800986c:	08009909 	.word	0x08009909
 8009870:	080098c3 	.word	0x080098c3
 8009874:	08009909 	.word	0x08009909
 8009878:	08009909 	.word	0x08009909
 800987c:	08009909 	.word	0x08009909
 8009880:	080098d1 	.word	0x080098d1
 8009884:	08009909 	.word	0x08009909
 8009888:	08009909 	.word	0x08009909
 800988c:	08009909 	.word	0x08009909
 8009890:	080098df 	.word	0x080098df
 8009894:	08009909 	.word	0x08009909
 8009898:	08009909 	.word	0x08009909
 800989c:	08009909 	.word	0x08009909
 80098a0:	080098ed 	.word	0x080098ed
 80098a4:	08009909 	.word	0x08009909
 80098a8:	08009909 	.word	0x08009909
 80098ac:	08009909 	.word	0x08009909
 80098b0:	080098fb 	.word	0x080098fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fd3e 	bl	800a33c <TIM_OC1_SetConfig>
      break;
 80098c0:	e025      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fdd1 	bl	800a470 <TIM_OC2_SetConfig>
      break;
 80098ce:	e01e      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fe5e 	bl	800a598 <TIM_OC3_SetConfig>
      break;
 80098dc:	e017      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fee9 	bl	800a6bc <TIM_OC4_SetConfig>
      break;
 80098ea:	e010      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 ff76 	bl	800a7e4 <TIM_OC5_SetConfig>
      break;
 80098f8:	e009      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68b9      	ldr	r1, [r7, #8]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 ffd9 	bl	800a8b8 <TIM_OC6_SetConfig>
      break;
 8009906:	e002      	b.n	800990e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	75fb      	strb	r3, [r7, #23]
      break;
 800990c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <HAL_TIM_IC_ConfigChannel+0x1e>
 800993a:	2302      	movs	r3, #2
 800993c:	e088      	b.n	8009a50 <HAL_TIM_IC_ConfigChannel+0x130>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11b      	bne.n	8009984 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800995c:	f001 f8f8 	bl	800ab50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699a      	ldr	r2, [r3, #24]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 020c 	bic.w	r2, r2, #12
 800996e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6999      	ldr	r1, [r3, #24]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	619a      	str	r2, [r3, #24]
 8009982:	e060      	b.n	8009a46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b04      	cmp	r3, #4
 8009988:	d11c      	bne.n	80099c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800999a:	f001 f97c 	bl	800ac96 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699a      	ldr	r2, [r3, #24]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80099ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6999      	ldr	r1, [r3, #24]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	021a      	lsls	r2, r3, #8
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	619a      	str	r2, [r3, #24]
 80099c2:	e040      	b.n	8009a46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b08      	cmp	r3, #8
 80099c8:	d11b      	bne.n	8009a02 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80099da:	f001 f9c9 	bl	800ad70 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69da      	ldr	r2, [r3, #28]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 020c 	bic.w	r2, r2, #12
 80099ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69d9      	ldr	r1, [r3, #28]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	61da      	str	r2, [r3, #28]
 8009a00:	e021      	b.n	8009a46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b0c      	cmp	r3, #12
 8009a06:	d11c      	bne.n	8009a42 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009a18:	f001 f9e6 	bl	800ade8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	69da      	ldr	r2, [r3, #28]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a2a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69d9      	ldr	r1, [r3, #28]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	021a      	lsls	r2, r3, #8
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	61da      	str	r2, [r3, #28]
 8009a40:	e001      	b.n	8009a46 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e0ff      	b.n	8009c76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b14      	cmp	r3, #20
 8009a82:	f200 80f0 	bhi.w	8009c66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a86:	a201      	add	r2, pc, #4	@ (adr r2, 8009a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009ae1 	.word	0x08009ae1
 8009a90:	08009c67 	.word	0x08009c67
 8009a94:	08009c67 	.word	0x08009c67
 8009a98:	08009c67 	.word	0x08009c67
 8009a9c:	08009b21 	.word	0x08009b21
 8009aa0:	08009c67 	.word	0x08009c67
 8009aa4:	08009c67 	.word	0x08009c67
 8009aa8:	08009c67 	.word	0x08009c67
 8009aac:	08009b63 	.word	0x08009b63
 8009ab0:	08009c67 	.word	0x08009c67
 8009ab4:	08009c67 	.word	0x08009c67
 8009ab8:	08009c67 	.word	0x08009c67
 8009abc:	08009ba3 	.word	0x08009ba3
 8009ac0:	08009c67 	.word	0x08009c67
 8009ac4:	08009c67 	.word	0x08009c67
 8009ac8:	08009c67 	.word	0x08009c67
 8009acc:	08009be5 	.word	0x08009be5
 8009ad0:	08009c67 	.word	0x08009c67
 8009ad4:	08009c67 	.word	0x08009c67
 8009ad8:	08009c67 	.word	0x08009c67
 8009adc:	08009c25 	.word	0x08009c25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fc28 	bl	800a33c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0208 	orr.w	r2, r2, #8
 8009afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0204 	bic.w	r2, r2, #4
 8009b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6999      	ldr	r1, [r3, #24]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	691a      	ldr	r2, [r3, #16]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	619a      	str	r2, [r3, #24]
      break;
 8009b1e:	e0a5      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fca2 	bl	800a470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699a      	ldr	r2, [r3, #24]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6999      	ldr	r1, [r3, #24]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	021a      	lsls	r2, r3, #8
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	619a      	str	r2, [r3, #24]
      break;
 8009b60:	e084      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 fd15 	bl	800a598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69da      	ldr	r2, [r3, #28]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0208 	orr.w	r2, r2, #8
 8009b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0204 	bic.w	r2, r2, #4
 8009b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69d9      	ldr	r1, [r3, #28]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	691a      	ldr	r2, [r3, #16]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	61da      	str	r2, [r3, #28]
      break;
 8009ba0:	e064      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fd87 	bl	800a6bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69da      	ldr	r2, [r3, #28]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69d9      	ldr	r1, [r3, #28]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	021a      	lsls	r2, r3, #8
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	61da      	str	r2, [r3, #28]
      break;
 8009be2:	e043      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fdfa 	bl	800a7e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0208 	orr.w	r2, r2, #8
 8009bfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0204 	bic.w	r2, r2, #4
 8009c0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	691a      	ldr	r2, [r3, #16]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c22:	e023      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68b9      	ldr	r1, [r7, #8]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fe44 	bl	800a8b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	021a      	lsls	r2, r3, #8
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009c64:	e002      	b.n	8009c6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop

08009c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_TIM_ConfigClockSource+0x1c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e0f6      	b.n	8009e8a <HAL_TIM_ConfigClockSource+0x20a>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009cba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8009e94 <HAL_TIM_ConfigClockSource+0x214>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	f000 80c1 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009cdc:	4a6d      	ldr	r2, [pc, #436]	@ (8009e94 <HAL_TIM_ConfigClockSource+0x214>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	f200 80c6 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8009e98 <HAL_TIM_ConfigClockSource+0x218>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	f000 80b9 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009cec:	4a6a      	ldr	r2, [pc, #424]	@ (8009e98 <HAL_TIM_ConfigClockSource+0x218>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	f200 80be 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009cf4:	4a69      	ldr	r2, [pc, #420]	@ (8009e9c <HAL_TIM_ConfigClockSource+0x21c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	f000 80b1 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009cfc:	4a67      	ldr	r2, [pc, #412]	@ (8009e9c <HAL_TIM_ConfigClockSource+0x21c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	f200 80b6 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d04:	4a66      	ldr	r2, [pc, #408]	@ (8009ea0 <HAL_TIM_ConfigClockSource+0x220>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	f000 80a9 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d0c:	4a64      	ldr	r2, [pc, #400]	@ (8009ea0 <HAL_TIM_ConfigClockSource+0x220>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	f200 80ae 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d14:	4a63      	ldr	r2, [pc, #396]	@ (8009ea4 <HAL_TIM_ConfigClockSource+0x224>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	f000 80a1 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d1c:	4a61      	ldr	r2, [pc, #388]	@ (8009ea4 <HAL_TIM_ConfigClockSource+0x224>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	f200 80a6 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d24:	4a60      	ldr	r2, [pc, #384]	@ (8009ea8 <HAL_TIM_ConfigClockSource+0x228>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	f000 8099 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ea8 <HAL_TIM_ConfigClockSource+0x228>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	f200 809e 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d38:	f000 8091 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d40:	f200 8096 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d48:	f000 8089 	beq.w	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d50:	f200 808e 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d58:	d03e      	beq.n	8009dd8 <HAL_TIM_ConfigClockSource+0x158>
 8009d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5e:	f200 8087 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d66:	f000 8086 	beq.w	8009e76 <HAL_TIM_ConfigClockSource+0x1f6>
 8009d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d6e:	d87f      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d70:	2b70      	cmp	r3, #112	@ 0x70
 8009d72:	d01a      	beq.n	8009daa <HAL_TIM_ConfigClockSource+0x12a>
 8009d74:	2b70      	cmp	r3, #112	@ 0x70
 8009d76:	d87b      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d78:	2b60      	cmp	r3, #96	@ 0x60
 8009d7a:	d050      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x19e>
 8009d7c:	2b60      	cmp	r3, #96	@ 0x60
 8009d7e:	d877      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d80:	2b50      	cmp	r3, #80	@ 0x50
 8009d82:	d03c      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x17e>
 8009d84:	2b50      	cmp	r3, #80	@ 0x50
 8009d86:	d873      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d88:	2b40      	cmp	r3, #64	@ 0x40
 8009d8a:	d058      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x1be>
 8009d8c:	2b40      	cmp	r3, #64	@ 0x40
 8009d8e:	d86f      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d90:	2b30      	cmp	r3, #48	@ 0x30
 8009d92:	d064      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d94:	2b30      	cmp	r3, #48	@ 0x30
 8009d96:	d86b      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d060      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d867      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05c      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d05a      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x1de>
 8009da8:	e062      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dba:	f001 f86f 	bl	800ae9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	609a      	str	r2, [r3, #8]
      break;
 8009dd6:	e04f      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009de8:	f001 f858 	bl	800ae9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dfa:	609a      	str	r2, [r3, #8]
      break;
 8009dfc:	e03c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f000 ff14 	bl	800ac38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2150      	movs	r1, #80	@ 0x50
 8009e16:	4618      	mov	r0, r3
 8009e18:	f001 f823 	bl	800ae62 <TIM_ITRx_SetConfig>
      break;
 8009e1c:	e02c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f000 ff70 	bl	800ad10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2160      	movs	r1, #96	@ 0x60
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 f813 	bl	800ae62 <TIM_ITRx_SetConfig>
      break;
 8009e3c:	e01c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f000 fef4 	bl	800ac38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2140      	movs	r1, #64	@ 0x40
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 f803 	bl	800ae62 <TIM_ITRx_SetConfig>
      break;
 8009e5c:	e00c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f000 fffa 	bl	800ae62 <TIM_ITRx_SetConfig>
      break;
 8009e6e:	e003      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
      break;
 8009e74:	e000      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	00100070 	.word	0x00100070
 8009e98:	00100060 	.word	0x00100060
 8009e9c:	00100050 	.word	0x00100050
 8009ea0:	00100040 	.word	0x00100040
 8009ea4:	00100030 	.word	0x00100030
 8009ea8:	00100020 	.word	0x00100020

08009eac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e031      	b.n	8009f28 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fd5a 	bl	800a990 <TIM_SlaveTimer_SetConfig>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e018      	b.n	8009f28 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f04:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f14:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b0c      	cmp	r3, #12
 8009f42:	d831      	bhi.n	8009fa8 <HAL_TIM_ReadCapturedValue+0x78>
 8009f44:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f81 	.word	0x08009f81
 8009f50:	08009fa9 	.word	0x08009fa9
 8009f54:	08009fa9 	.word	0x08009fa9
 8009f58:	08009fa9 	.word	0x08009fa9
 8009f5c:	08009f8b 	.word	0x08009f8b
 8009f60:	08009fa9 	.word	0x08009fa9
 8009f64:	08009fa9 	.word	0x08009fa9
 8009f68:	08009fa9 	.word	0x08009fa9
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009fa9 	.word	0x08009fa9
 8009f74:	08009fa9 	.word	0x08009fa9
 8009f78:	08009fa9 	.word	0x08009fa9
 8009f7c:	08009f9f 	.word	0x08009f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	60fb      	str	r3, [r7, #12]

      break;
 8009f88:	e00f      	b.n	8009faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	60fb      	str	r3, [r7, #12]

      break;
 8009f92:	e00a      	b.n	8009faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9a:	60fb      	str	r3, [r7, #12]

      break;
 8009f9c:	e005      	b.n	8009faa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa4:	60fb      	str	r3, [r7, #12]

      break;
 8009fa6:	e000      	b.n	8009faa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009fa8:	bf00      	nop
  }

  return tmpreg;
 8009faa:	68fb      	ldr	r3, [r7, #12]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	429a      	cmp	r2, r3
 800a046:	d107      	bne.n	800a058 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a056:	e02a      	b.n	800a0ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d107      	bne.n	800a072 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2202      	movs	r2, #2
 800a066:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a070:	e01d      	b.n	800a0ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d107      	bne.n	800a08c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2204      	movs	r2, #4
 800a080:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a08a:	e010      	b.n	800a0ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d107      	bne.n	800a0a6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2208      	movs	r2, #8
 800a09a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0a4:	e003      	b.n	800a0ae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff ffb4 	bl	800a01c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	771a      	strb	r2, [r3, #28]
}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d10b      	bne.n	800a0f2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d136      	bne.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0f0:	e031      	b.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d10b      	bne.n	800a114 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2202      	movs	r2, #2
 800a100:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d125      	bne.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a112:	e020      	b.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d10b      	bne.n	800a136 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2204      	movs	r2, #4
 800a122:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d114      	bne.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a134:	e00f      	b.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d10a      	bne.n	800a156 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2208      	movs	r2, #8
 800a144:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7ff ff42 	bl	8009fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	771a      	strb	r2, [r3, #28]
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a176:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d103      	bne.n	800a18a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	771a      	strb	r2, [r3, #28]
 800a188:	e019      	b.n	800a1be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d103      	bne.n	800a19c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2202      	movs	r2, #2
 800a198:	771a      	strb	r2, [r3, #28]
 800a19a:	e010      	b.n	800a1be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d103      	bne.n	800a1ae <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	771a      	strb	r2, [r3, #28]
 800a1ac:	e007      	b.n	800a1be <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d102      	bne.n	800a1be <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff ff18 	bl	8009ff4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	771a      	strb	r2, [r3, #28]
}
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a4c      	ldr	r2, [pc, #304]	@ (800a318 <TIM_Base_SetConfig+0x144>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d017      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f2:	d013      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a49      	ldr	r2, [pc, #292]	@ (800a31c <TIM_Base_SetConfig+0x148>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00f      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a48      	ldr	r2, [pc, #288]	@ (800a320 <TIM_Base_SetConfig+0x14c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00b      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a47      	ldr	r2, [pc, #284]	@ (800a324 <TIM_Base_SetConfig+0x150>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d007      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a46      	ldr	r2, [pc, #280]	@ (800a328 <TIM_Base_SetConfig+0x154>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_Base_SetConfig+0x48>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a45      	ldr	r2, [pc, #276]	@ (800a32c <TIM_Base_SetConfig+0x158>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d108      	bne.n	800a22e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a39      	ldr	r2, [pc, #228]	@ (800a318 <TIM_Base_SetConfig+0x144>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d023      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a23c:	d01f      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a36      	ldr	r2, [pc, #216]	@ (800a31c <TIM_Base_SetConfig+0x148>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d01b      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a35      	ldr	r2, [pc, #212]	@ (800a320 <TIM_Base_SetConfig+0x14c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d017      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a34      	ldr	r2, [pc, #208]	@ (800a324 <TIM_Base_SetConfig+0x150>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d013      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a33      	ldr	r2, [pc, #204]	@ (800a328 <TIM_Base_SetConfig+0x154>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d00f      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a33      	ldr	r2, [pc, #204]	@ (800a330 <TIM_Base_SetConfig+0x15c>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d00b      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a32      	ldr	r2, [pc, #200]	@ (800a334 <TIM_Base_SetConfig+0x160>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d007      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a31      	ldr	r2, [pc, #196]	@ (800a338 <TIM_Base_SetConfig+0x164>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d003      	beq.n	800a27e <TIM_Base_SetConfig+0xaa>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a2c      	ldr	r2, [pc, #176]	@ (800a32c <TIM_Base_SetConfig+0x158>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d108      	bne.n	800a290 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a18      	ldr	r2, [pc, #96]	@ (800a318 <TIM_Base_SetConfig+0x144>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d013      	beq.n	800a2e4 <TIM_Base_SetConfig+0x110>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a1a      	ldr	r2, [pc, #104]	@ (800a328 <TIM_Base_SetConfig+0x154>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00f      	beq.n	800a2e4 <TIM_Base_SetConfig+0x110>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a330 <TIM_Base_SetConfig+0x15c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00b      	beq.n	800a2e4 <TIM_Base_SetConfig+0x110>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <TIM_Base_SetConfig+0x160>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d007      	beq.n	800a2e4 <TIM_Base_SetConfig+0x110>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a18      	ldr	r2, [pc, #96]	@ (800a338 <TIM_Base_SetConfig+0x164>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d003      	beq.n	800a2e4 <TIM_Base_SetConfig+0x110>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a13      	ldr	r2, [pc, #76]	@ (800a32c <TIM_Base_SetConfig+0x158>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d103      	bne.n	800a2ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d105      	bne.n	800a30a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f023 0201 	bic.w	r2, r3, #1
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	611a      	str	r2, [r3, #16]
  }
}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	40012c00 	.word	0x40012c00
 800a31c:	40000400 	.word	0x40000400
 800a320:	40000800 	.word	0x40000800
 800a324:	40000c00 	.word	0x40000c00
 800a328:	40013400 	.word	0x40013400
 800a32c:	40015000 	.word	0x40015000
 800a330:	40014000 	.word	0x40014000
 800a334:	40014400 	.word	0x40014400
 800a338:	40014800 	.word	0x40014800

0800a33c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	f023 0201 	bic.w	r2, r3, #1
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a36a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f023 0302 	bic.w	r3, r3, #2
 800a388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a30      	ldr	r2, [pc, #192]	@ (800a458 <TIM_OC1_SetConfig+0x11c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d013      	beq.n	800a3c4 <TIM_OC1_SetConfig+0x88>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a2f      	ldr	r2, [pc, #188]	@ (800a45c <TIM_OC1_SetConfig+0x120>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_OC1_SetConfig+0x88>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a2e      	ldr	r2, [pc, #184]	@ (800a460 <TIM_OC1_SetConfig+0x124>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_OC1_SetConfig+0x88>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a2d      	ldr	r2, [pc, #180]	@ (800a464 <TIM_OC1_SetConfig+0x128>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_OC1_SetConfig+0x88>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800a468 <TIM_OC1_SetConfig+0x12c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_OC1_SetConfig+0x88>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a2b      	ldr	r2, [pc, #172]	@ (800a46c <TIM_OC1_SetConfig+0x130>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d10c      	bne.n	800a3de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f023 0308 	bic.w	r3, r3, #8
 800a3ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f023 0304 	bic.w	r3, r3, #4
 800a3dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a458 <TIM_OC1_SetConfig+0x11c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <TIM_OC1_SetConfig+0xd2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a1c      	ldr	r2, [pc, #112]	@ (800a45c <TIM_OC1_SetConfig+0x120>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_OC1_SetConfig+0xd2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a460 <TIM_OC1_SetConfig+0x124>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_OC1_SetConfig+0xd2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a1a      	ldr	r2, [pc, #104]	@ (800a464 <TIM_OC1_SetConfig+0x128>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_OC1_SetConfig+0xd2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a19      	ldr	r2, [pc, #100]	@ (800a468 <TIM_OC1_SetConfig+0x12c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_OC1_SetConfig+0xd2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a18      	ldr	r2, [pc, #96]	@ (800a46c <TIM_OC1_SetConfig+0x130>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d111      	bne.n	800a432 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a41c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	4313      	orrs	r3, r2
 800a426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	621a      	str	r2, [r3, #32]
}
 800a44c:	bf00      	nop
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	40012c00 	.word	0x40012c00
 800a45c:	40013400 	.word	0x40013400
 800a460:	40014000 	.word	0x40014000
 800a464:	40014400 	.word	0x40014400
 800a468:	40014800 	.word	0x40014800
 800a46c:	40015000 	.word	0x40015000

0800a470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a470:	b480      	push	{r7}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	f023 0210 	bic.w	r2, r3, #16
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a49e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f023 0320 	bic.w	r3, r3, #32
 800a4be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a2c      	ldr	r2, [pc, #176]	@ (800a580 <TIM_OC2_SetConfig+0x110>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d007      	beq.n	800a4e4 <TIM_OC2_SetConfig+0x74>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a584 <TIM_OC2_SetConfig+0x114>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d003      	beq.n	800a4e4 <TIM_OC2_SetConfig+0x74>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a2a      	ldr	r2, [pc, #168]	@ (800a588 <TIM_OC2_SetConfig+0x118>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d10d      	bne.n	800a500 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a1f      	ldr	r2, [pc, #124]	@ (800a580 <TIM_OC2_SetConfig+0x110>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d013      	beq.n	800a530 <TIM_OC2_SetConfig+0xc0>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a1e      	ldr	r2, [pc, #120]	@ (800a584 <TIM_OC2_SetConfig+0x114>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d00f      	beq.n	800a530 <TIM_OC2_SetConfig+0xc0>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a1e      	ldr	r2, [pc, #120]	@ (800a58c <TIM_OC2_SetConfig+0x11c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d00b      	beq.n	800a530 <TIM_OC2_SetConfig+0xc0>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a1d      	ldr	r2, [pc, #116]	@ (800a590 <TIM_OC2_SetConfig+0x120>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d007      	beq.n	800a530 <TIM_OC2_SetConfig+0xc0>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a1c      	ldr	r2, [pc, #112]	@ (800a594 <TIM_OC2_SetConfig+0x124>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d003      	beq.n	800a530 <TIM_OC2_SetConfig+0xc0>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a17      	ldr	r2, [pc, #92]	@ (800a588 <TIM_OC2_SetConfig+0x118>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d113      	bne.n	800a558 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a53e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4313      	orrs	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	621a      	str	r2, [r3, #32]
}
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40012c00 	.word	0x40012c00
 800a584:	40013400 	.word	0x40013400
 800a588:	40015000 	.word	0x40015000
 800a58c:	40014000 	.word	0x40014000
 800a590:	40014400 	.word	0x40014400
 800a594:	40014800 	.word	0x40014800

0800a598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a2b      	ldr	r2, [pc, #172]	@ (800a6a4 <TIM_OC3_SetConfig+0x10c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d007      	beq.n	800a60a <TIM_OC3_SetConfig+0x72>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a2a      	ldr	r2, [pc, #168]	@ (800a6a8 <TIM_OC3_SetConfig+0x110>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d003      	beq.n	800a60a <TIM_OC3_SetConfig+0x72>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a29      	ldr	r2, [pc, #164]	@ (800a6ac <TIM_OC3_SetConfig+0x114>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d10d      	bne.n	800a626 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a1e      	ldr	r2, [pc, #120]	@ (800a6a4 <TIM_OC3_SetConfig+0x10c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <TIM_OC3_SetConfig+0xbe>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <TIM_OC3_SetConfig+0x110>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00f      	beq.n	800a656 <TIM_OC3_SetConfig+0xbe>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a1d      	ldr	r2, [pc, #116]	@ (800a6b0 <TIM_OC3_SetConfig+0x118>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d00b      	beq.n	800a656 <TIM_OC3_SetConfig+0xbe>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1c      	ldr	r2, [pc, #112]	@ (800a6b4 <TIM_OC3_SetConfig+0x11c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d007      	beq.n	800a656 <TIM_OC3_SetConfig+0xbe>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b8 <TIM_OC3_SetConfig+0x120>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d003      	beq.n	800a656 <TIM_OC3_SetConfig+0xbe>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a16      	ldr	r2, [pc, #88]	@ (800a6ac <TIM_OC3_SetConfig+0x114>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d113      	bne.n	800a67e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a65c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	621a      	str	r2, [r3, #32]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	40012c00 	.word	0x40012c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40015000 	.word	0x40015000
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800

0800a6bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a70a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	031b      	lsls	r3, r3, #12
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	4313      	orrs	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7cc <TIM_OC4_SetConfig+0x110>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d007      	beq.n	800a730 <TIM_OC4_SetConfig+0x74>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a2b      	ldr	r2, [pc, #172]	@ (800a7d0 <TIM_OC4_SetConfig+0x114>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d003      	beq.n	800a730 <TIM_OC4_SetConfig+0x74>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7d4 <TIM_OC4_SetConfig+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d10d      	bne.n	800a74c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	031b      	lsls	r3, r3, #12
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4313      	orrs	r3, r2
 800a742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a74a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a1f      	ldr	r2, [pc, #124]	@ (800a7cc <TIM_OC4_SetConfig+0x110>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d013      	beq.n	800a77c <TIM_OC4_SetConfig+0xc0>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d0 <TIM_OC4_SetConfig+0x114>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d00f      	beq.n	800a77c <TIM_OC4_SetConfig+0xc0>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d8 <TIM_OC4_SetConfig+0x11c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d00b      	beq.n	800a77c <TIM_OC4_SetConfig+0xc0>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a1d      	ldr	r2, [pc, #116]	@ (800a7dc <TIM_OC4_SetConfig+0x120>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d007      	beq.n	800a77c <TIM_OC4_SetConfig+0xc0>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7e0 <TIM_OC4_SetConfig+0x124>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d003      	beq.n	800a77c <TIM_OC4_SetConfig+0xc0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a17      	ldr	r2, [pc, #92]	@ (800a7d4 <TIM_OC4_SetConfig+0x118>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d113      	bne.n	800a7a4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a782:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a78a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	019b      	lsls	r3, r3, #6
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	4313      	orrs	r3, r2
 800a796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	019b      	lsls	r3, r3, #6
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	621a      	str	r2, [r3, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	40012c00 	.word	0x40012c00
 800a7d0:	40013400 	.word	0x40013400
 800a7d4:	40015000 	.word	0x40015000
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	041b      	lsls	r3, r3, #16
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4313      	orrs	r3, r2
 800a834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a19      	ldr	r2, [pc, #100]	@ (800a8a0 <TIM_OC5_SetConfig+0xbc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d013      	beq.n	800a866 <TIM_OC5_SetConfig+0x82>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a18      	ldr	r2, [pc, #96]	@ (800a8a4 <TIM_OC5_SetConfig+0xc0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00f      	beq.n	800a866 <TIM_OC5_SetConfig+0x82>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a17      	ldr	r2, [pc, #92]	@ (800a8a8 <TIM_OC5_SetConfig+0xc4>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00b      	beq.n	800a866 <TIM_OC5_SetConfig+0x82>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a16      	ldr	r2, [pc, #88]	@ (800a8ac <TIM_OC5_SetConfig+0xc8>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d007      	beq.n	800a866 <TIM_OC5_SetConfig+0x82>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a15      	ldr	r2, [pc, #84]	@ (800a8b0 <TIM_OC5_SetConfig+0xcc>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d003      	beq.n	800a866 <TIM_OC5_SetConfig+0x82>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a14      	ldr	r2, [pc, #80]	@ (800a8b4 <TIM_OC5_SetConfig+0xd0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d109      	bne.n	800a87a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a86c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	021b      	lsls	r3, r3, #8
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	4313      	orrs	r3, r2
 800a878:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	621a      	str	r2, [r3, #32]
}
 800a894:	bf00      	nop
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	40012c00 	.word	0x40012c00
 800a8a4:	40013400 	.word	0x40013400
 800a8a8:	40014000 	.word	0x40014000
 800a8ac:	40014400 	.word	0x40014400
 800a8b0:	40014800 	.word	0x40014800
 800a8b4:	40015000 	.word	0x40015000

0800a8b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	021b      	lsls	r3, r3, #8
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	051b      	lsls	r3, r3, #20
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	4313      	orrs	r3, r2
 800a90a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a1a      	ldr	r2, [pc, #104]	@ (800a978 <TIM_OC6_SetConfig+0xc0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d013      	beq.n	800a93c <TIM_OC6_SetConfig+0x84>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a19      	ldr	r2, [pc, #100]	@ (800a97c <TIM_OC6_SetConfig+0xc4>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00f      	beq.n	800a93c <TIM_OC6_SetConfig+0x84>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a18      	ldr	r2, [pc, #96]	@ (800a980 <TIM_OC6_SetConfig+0xc8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00b      	beq.n	800a93c <TIM_OC6_SetConfig+0x84>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a17      	ldr	r2, [pc, #92]	@ (800a984 <TIM_OC6_SetConfig+0xcc>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d007      	beq.n	800a93c <TIM_OC6_SetConfig+0x84>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a16      	ldr	r2, [pc, #88]	@ (800a988 <TIM_OC6_SetConfig+0xd0>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d003      	beq.n	800a93c <TIM_OC6_SetConfig+0x84>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a15      	ldr	r2, [pc, #84]	@ (800a98c <TIM_OC6_SetConfig+0xd4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d109      	bne.n	800a950 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	029b      	lsls	r3, r3, #10
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	621a      	str	r2, [r3, #32]
}
 800a96a:	bf00      	nop
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40012c00 	.word	0x40012c00
 800a97c:	40013400 	.word	0x40013400
 800a980:	40014000 	.word	0x40014000
 800a984:	40014400 	.word	0x40014400
 800a988:	40014800 	.word	0x40014800
 800a98c:	40015000 	.word	0x40015000

0800a990 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a9ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9b0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4a56      	ldr	r2, [pc, #344]	@ (800ab38 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	f000 80a2 	beq.w	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800a9e6:	4a54      	ldr	r2, [pc, #336]	@ (800ab38 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	f200 809b 	bhi.w	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800a9ee:	4a53      	ldr	r2, [pc, #332]	@ (800ab3c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	f000 809a 	beq.w	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800a9f6:	4a51      	ldr	r2, [pc, #324]	@ (800ab3c <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	f200 8093 	bhi.w	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800a9fe:	4a50      	ldr	r2, [pc, #320]	@ (800ab40 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	f000 8092 	beq.w	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa06:	4a4e      	ldr	r2, [pc, #312]	@ (800ab40 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	f200 808b 	bhi.w	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa0e:	4a4d      	ldr	r2, [pc, #308]	@ (800ab44 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	f000 808a 	beq.w	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa16:	4a4b      	ldr	r2, [pc, #300]	@ (800ab44 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	f200 8083 	bhi.w	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa1e:	4a4a      	ldr	r2, [pc, #296]	@ (800ab48 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	f000 8082 	beq.w	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa26:	4a48      	ldr	r2, [pc, #288]	@ (800ab48 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d87b      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa2c:	4a47      	ldr	r2, [pc, #284]	@ (800ab4c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d07b      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa32:	4a46      	ldr	r2, [pc, #280]	@ (800ab4c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d875      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa3c:	d075      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa3e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa42:	d86f      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa48:	d06f      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa4e:	d869      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa50:	2b70      	cmp	r3, #112	@ 0x70
 800aa52:	d01a      	beq.n	800aa8a <TIM_SlaveTimer_SetConfig+0xfa>
 800aa54:	2b70      	cmp	r3, #112	@ 0x70
 800aa56:	d865      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa58:	2b60      	cmp	r3, #96	@ 0x60
 800aa5a:	d059      	beq.n	800ab10 <TIM_SlaveTimer_SetConfig+0x180>
 800aa5c:	2b60      	cmp	r3, #96	@ 0x60
 800aa5e:	d861      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa60:	2b50      	cmp	r3, #80	@ 0x50
 800aa62:	d04b      	beq.n	800aafc <TIM_SlaveTimer_SetConfig+0x16c>
 800aa64:	2b50      	cmp	r3, #80	@ 0x50
 800aa66:	d85d      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa68:	2b40      	cmp	r3, #64	@ 0x40
 800aa6a:	d019      	beq.n	800aaa0 <TIM_SlaveTimer_SetConfig+0x110>
 800aa6c:	2b40      	cmp	r3, #64	@ 0x40
 800aa6e:	d859      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa70:	2b30      	cmp	r3, #48	@ 0x30
 800aa72:	d05a      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa74:	2b30      	cmp	r3, #48	@ 0x30
 800aa76:	d855      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d056      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d851      	bhi.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d052      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d050      	beq.n	800ab2a <TIM_SlaveTimer_SetConfig+0x19a>
 800aa88:	e04c      	b.n	800ab24 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800aa9a:	f000 f9ff 	bl	800ae9c <TIM_ETR_SetConfig>
      break;
 800aa9e:	e045      	b.n	800ab2c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b05      	cmp	r3, #5
 800aaa6:	d004      	beq.n	800aab2 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800aaac:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800aab0:	d101      	bne.n	800aab6 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e03b      	b.n	800ab2e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a1a      	ldr	r2, [r3, #32]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0201 	bic.w	r2, r2, #1
 800aacc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aadc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	621a      	str	r2, [r3, #32]
      break;
 800aafa:	e017      	b.n	800ab2c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f000 f895 	bl	800ac38 <TIM_TI1_ConfigInputStage>
      break;
 800ab0e:	e00d      	b.n	800ab2c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	f000 f8f7 	bl	800ad10 <TIM_TI2_ConfigInputStage>
      break;
 800ab22:	e003      	b.n	800ab2c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
      break;
 800ab28:	e000      	b.n	800ab2c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800ab2a:	bf00      	nop
  }

  return status;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	00100070 	.word	0x00100070
 800ab3c:	00100060 	.word	0x00100060
 800ab40:	00100050 	.word	0x00100050
 800ab44:	00100040 	.word	0x00100040
 800ab48:	00100030 	.word	0x00100030
 800ab4c:	00100020 	.word	0x00100020

0800ab50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f023 0201 	bic.w	r2, r3, #1
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4a28      	ldr	r2, [pc, #160]	@ (800ac1c <TIM_TI1_SetConfig+0xcc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d01b      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab84:	d017      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	4a25      	ldr	r2, [pc, #148]	@ (800ac20 <TIM_TI1_SetConfig+0xd0>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d013      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4a24      	ldr	r2, [pc, #144]	@ (800ac24 <TIM_TI1_SetConfig+0xd4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d00f      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4a23      	ldr	r2, [pc, #140]	@ (800ac28 <TIM_TI1_SetConfig+0xd8>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00b      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4a22      	ldr	r2, [pc, #136]	@ (800ac2c <TIM_TI1_SetConfig+0xdc>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d007      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4a21      	ldr	r2, [pc, #132]	@ (800ac30 <TIM_TI1_SetConfig+0xe0>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d003      	beq.n	800abb6 <TIM_TI1_SetConfig+0x66>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	4a20      	ldr	r2, [pc, #128]	@ (800ac34 <TIM_TI1_SetConfig+0xe4>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d101      	bne.n	800abba <TIM_TI1_SetConfig+0x6a>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <TIM_TI1_SetConfig+0x6c>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d008      	beq.n	800abd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4313      	orrs	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e003      	b.n	800abda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f023 030a 	bic.w	r3, r3, #10
 800abf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f003 030a 	and.w	r3, r3, #10
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	621a      	str	r2, [r3, #32]
}
 800ac0e:	bf00      	nop
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40012c00 	.word	0x40012c00
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	40000c00 	.word	0x40000c00
 800ac2c:	40013400 	.word	0x40013400
 800ac30:	40014000 	.word	0x40014000
 800ac34:	40015000 	.word	0x40015000

0800ac38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	f023 0201 	bic.w	r2, r3, #1
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f023 030a 	bic.w	r3, r3, #10
 800ac74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	621a      	str	r2, [r3, #32]
}
 800ac8a:	bf00      	nop
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	f023 0210 	bic.w	r2, r3, #16
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	4313      	orrs	r3, r2
 800accc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	031b      	lsls	r3, r3, #12
 800acda:	b29b      	uxth	r3, r3
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ace8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	011b      	lsls	r3, r3, #4
 800acee:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	621a      	str	r2, [r3, #32]
}
 800ad04:	bf00      	nop
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	f023 0210 	bic.w	r2, r3, #16
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	031b      	lsls	r3, r3, #12
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	621a      	str	r2, [r3, #32]
}
 800ad64:	bf00      	nop
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f023 0303 	bic.w	r3, r3, #3
 800ad9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800adac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800adc0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	021b      	lsls	r3, r3, #8
 800adc6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	621a      	str	r2, [r3, #32]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae26:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	031b      	lsls	r3, r3, #12
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ae3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	031b      	lsls	r3, r3, #12
 800ae40:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	621a      	str	r2, [r3, #32]
}
 800ae56:	bf00      	nop
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b085      	sub	sp, #20
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ae78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	f043 0307 	orr.w	r3, r3, #7
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	609a      	str	r2, [r3, #8]
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	021a      	lsls	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	609a      	str	r2, [r3, #8]
}
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	f003 031f 	and.w	r3, r3, #31
 800aeee:	2201      	movs	r2, #1
 800aef0:	fa02 f303 	lsl.w	r3, r2, r3
 800aef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6a1a      	ldr	r2, [r3, #32]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	43db      	mvns	r3, r3
 800aefe:	401a      	ands	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f003 031f 	and.w	r3, r3, #31
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	fa01 f303 	lsl.w	r3, r1, r3
 800af14:	431a      	orrs	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	621a      	str	r2, [r3, #32]
}
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
	...

0800af28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e074      	b.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a34      	ldr	r2, [pc, #208]	@ (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d009      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a33      	ldr	r2, [pc, #204]	@ (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d004      	beq.n	800af7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a31      	ldr	r2, [pc, #196]	@ (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d108      	bne.n	800af90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800af96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a21      	ldr	r2, [pc, #132]	@ (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d022      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc0:	d01d      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1f      	ldr	r2, [pc, #124]	@ (800b044 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d018      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a1d      	ldr	r2, [pc, #116]	@ (800b048 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d013      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a1c      	ldr	r2, [pc, #112]	@ (800b04c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d00e      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a15      	ldr	r2, [pc, #84]	@ (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d009      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a18      	ldr	r2, [pc, #96]	@ (800b050 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d004      	beq.n	800affe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a11      	ldr	r2, [pc, #68]	@ (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d10c      	bne.n	800b018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40013400 	.word	0x40013400
 800b040:	40015000 	.word	0x40015000
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	40014000 	.word	0x40014000

0800b054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d101      	bne.n	800b070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e078      	b.n	800b162 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	4313      	orrs	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a1c      	ldr	r2, [pc, #112]	@ (800b170 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d009      	beq.n	800b116 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a1b      	ldr	r2, [pc, #108]	@ (800b174 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d004      	beq.n	800b116 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a19      	ldr	r2, [pc, #100]	@ (800b178 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d11c      	bne.n	800b150 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b120:	051b      	lsls	r3, r3, #20
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	40012c00 	.word	0x40012c00
 800b174:	40013400 	.word	0x40013400
 800b178:	40015000 	.word	0x40015000

0800b17c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e042      	b.n	800b2a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b220:	2b00      	cmp	r3, #0
 800b222:	d106      	bne.n	800b232 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f7 f983 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2224      	movs	r2, #36	@ 0x24
 800b236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f022 0201 	bic.w	r2, r2, #1
 800b248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fbb2 	bl	800b9bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f8b3 	bl	800b3c4 <UART_SetConfig>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e01b      	b.n	800b2a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0201 	orr.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fc31 	bl	800bb00 <UART_CheckIdleState>
 800b29e:	4603      	mov	r3, r0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	@ 0x28
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	603b      	str	r3, [r7, #0]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d17b      	bne.n	800b3ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <HAL_UART_Transmit+0x26>
 800b2c8:	88fb      	ldrh	r3, [r7, #6]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e074      	b.n	800b3bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2221      	movs	r2, #33	@ 0x21
 800b2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2e2:	f7f7 ff0d 	bl	8003100 <HAL_GetTick>
 800b2e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	88fa      	ldrh	r2, [r7, #6]
 800b2ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	88fa      	ldrh	r2, [r7, #6]
 800b2f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b300:	d108      	bne.n	800b314 <HAL_UART_Transmit+0x6c>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d104      	bne.n	800b314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	61bb      	str	r3, [r7, #24]
 800b312:	e003      	b.n	800b31c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b31c:	e030      	b.n	800b380 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2200      	movs	r2, #0
 800b326:	2180      	movs	r1, #128	@ 0x80
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 fc93 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2220      	movs	r2, #32
 800b338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e03d      	b.n	800b3bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b354:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	3302      	adds	r3, #2
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	e007      	b.n	800b36e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	781a      	ldrb	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	3301      	adds	r3, #1
 800b36c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b374:	b29b      	uxth	r3, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b386:	b29b      	uxth	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1c8      	bne.n	800b31e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2200      	movs	r2, #0
 800b394:	2140      	movs	r1, #64	@ 0x40
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 fc5c 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d005      	beq.n	800b3ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e006      	b.n	800b3bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e000      	b.n	800b3bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b3ba:	2302      	movs	r3, #2
  }
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3c8:	b08c      	sub	sp, #48	@ 0x30
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4baa      	ldr	r3, [pc, #680]	@ (800b69c <UART_SetConfig+0x2d8>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	430a      	orrs	r2, r1
 800b414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a9f      	ldr	r2, [pc, #636]	@ (800b6a0 <UART_SetConfig+0x2dc>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d004      	beq.n	800b430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b42c:	4313      	orrs	r3, r2
 800b42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b43a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b444:	430b      	orrs	r3, r1
 800b446:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44e:	f023 010f 	bic.w	r1, r3, #15
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a90      	ldr	r2, [pc, #576]	@ (800b6a4 <UART_SetConfig+0x2e0>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d125      	bne.n	800b4b4 <UART_SetConfig+0xf0>
 800b468:	4b8f      	ldr	r3, [pc, #572]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	2b03      	cmp	r3, #3
 800b474:	d81a      	bhi.n	800b4ac <UART_SetConfig+0xe8>
 800b476:	a201      	add	r2, pc, #4	@ (adr r2, 800b47c <UART_SetConfig+0xb8>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b48d 	.word	0x0800b48d
 800b480:	0800b49d 	.word	0x0800b49d
 800b484:	0800b495 	.word	0x0800b495
 800b488:	0800b4a5 	.word	0x0800b4a5
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b492:	e116      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b494:	2302      	movs	r3, #2
 800b496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b49a:	e112      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b49c:	2304      	movs	r3, #4
 800b49e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4a2:	e10e      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4aa:	e10a      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4b2:	e106      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a7c      	ldr	r2, [pc, #496]	@ (800b6ac <UART_SetConfig+0x2e8>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d138      	bne.n	800b530 <UART_SetConfig+0x16c>
 800b4be:	4b7a      	ldr	r3, [pc, #488]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4c4:	f003 030c 	and.w	r3, r3, #12
 800b4c8:	2b0c      	cmp	r3, #12
 800b4ca:	d82d      	bhi.n	800b528 <UART_SetConfig+0x164>
 800b4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d4 <UART_SetConfig+0x110>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b509 	.word	0x0800b509
 800b4d8:	0800b529 	.word	0x0800b529
 800b4dc:	0800b529 	.word	0x0800b529
 800b4e0:	0800b529 	.word	0x0800b529
 800b4e4:	0800b519 	.word	0x0800b519
 800b4e8:	0800b529 	.word	0x0800b529
 800b4ec:	0800b529 	.word	0x0800b529
 800b4f0:	0800b529 	.word	0x0800b529
 800b4f4:	0800b511 	.word	0x0800b511
 800b4f8:	0800b529 	.word	0x0800b529
 800b4fc:	0800b529 	.word	0x0800b529
 800b500:	0800b529 	.word	0x0800b529
 800b504:	0800b521 	.word	0x0800b521
 800b508:	2300      	movs	r3, #0
 800b50a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b50e:	e0d8      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b510:	2302      	movs	r3, #2
 800b512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b516:	e0d4      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b518:	2304      	movs	r3, #4
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51e:	e0d0      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b526:	e0cc      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b528:	2310      	movs	r3, #16
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52e:	e0c8      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a5e      	ldr	r2, [pc, #376]	@ (800b6b0 <UART_SetConfig+0x2ec>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d125      	bne.n	800b586 <UART_SetConfig+0x1c2>
 800b53a:	4b5b      	ldr	r3, [pc, #364]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b540:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b544:	2b30      	cmp	r3, #48	@ 0x30
 800b546:	d016      	beq.n	800b576 <UART_SetConfig+0x1b2>
 800b548:	2b30      	cmp	r3, #48	@ 0x30
 800b54a:	d818      	bhi.n	800b57e <UART_SetConfig+0x1ba>
 800b54c:	2b20      	cmp	r3, #32
 800b54e:	d00a      	beq.n	800b566 <UART_SetConfig+0x1a2>
 800b550:	2b20      	cmp	r3, #32
 800b552:	d814      	bhi.n	800b57e <UART_SetConfig+0x1ba>
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <UART_SetConfig+0x19a>
 800b558:	2b10      	cmp	r3, #16
 800b55a:	d008      	beq.n	800b56e <UART_SetConfig+0x1aa>
 800b55c:	e00f      	b.n	800b57e <UART_SetConfig+0x1ba>
 800b55e:	2300      	movs	r3, #0
 800b560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b564:	e0ad      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b566:	2302      	movs	r3, #2
 800b568:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b56c:	e0a9      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b56e:	2304      	movs	r3, #4
 800b570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b574:	e0a5      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b576:	2308      	movs	r3, #8
 800b578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57c:	e0a1      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b57e:	2310      	movs	r3, #16
 800b580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b584:	e09d      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a4a      	ldr	r2, [pc, #296]	@ (800b6b4 <UART_SetConfig+0x2f0>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d125      	bne.n	800b5dc <UART_SetConfig+0x218>
 800b590:	4b45      	ldr	r3, [pc, #276]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b596:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b59a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b59c:	d016      	beq.n	800b5cc <UART_SetConfig+0x208>
 800b59e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5a0:	d818      	bhi.n	800b5d4 <UART_SetConfig+0x210>
 800b5a2:	2b80      	cmp	r3, #128	@ 0x80
 800b5a4:	d00a      	beq.n	800b5bc <UART_SetConfig+0x1f8>
 800b5a6:	2b80      	cmp	r3, #128	@ 0x80
 800b5a8:	d814      	bhi.n	800b5d4 <UART_SetConfig+0x210>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <UART_SetConfig+0x1f0>
 800b5ae:	2b40      	cmp	r3, #64	@ 0x40
 800b5b0:	d008      	beq.n	800b5c4 <UART_SetConfig+0x200>
 800b5b2:	e00f      	b.n	800b5d4 <UART_SetConfig+0x210>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ba:	e082      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b5bc:	2302      	movs	r3, #2
 800b5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5c2:	e07e      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ca:	e07a      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5d2:	e076      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5da:	e072      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a35      	ldr	r2, [pc, #212]	@ (800b6b8 <UART_SetConfig+0x2f4>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d12a      	bne.n	800b63c <UART_SetConfig+0x278>
 800b5e6:	4b30      	ldr	r3, [pc, #192]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5f4:	d01a      	beq.n	800b62c <UART_SetConfig+0x268>
 800b5f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5fa:	d81b      	bhi.n	800b634 <UART_SetConfig+0x270>
 800b5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b600:	d00c      	beq.n	800b61c <UART_SetConfig+0x258>
 800b602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b606:	d815      	bhi.n	800b634 <UART_SetConfig+0x270>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <UART_SetConfig+0x250>
 800b60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b610:	d008      	beq.n	800b624 <UART_SetConfig+0x260>
 800b612:	e00f      	b.n	800b634 <UART_SetConfig+0x270>
 800b614:	2300      	movs	r3, #0
 800b616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b61a:	e052      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b61c:	2302      	movs	r3, #2
 800b61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b622:	e04e      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b624:	2304      	movs	r3, #4
 800b626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b62a:	e04a      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b62c:	2308      	movs	r3, #8
 800b62e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b632:	e046      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b634:	2310      	movs	r3, #16
 800b636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b63a:	e042      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <UART_SetConfig+0x2dc>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d13a      	bne.n	800b6bc <UART_SetConfig+0x2f8>
 800b646:	4b18      	ldr	r3, [pc, #96]	@ (800b6a8 <UART_SetConfig+0x2e4>)
 800b648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b64c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b654:	d01a      	beq.n	800b68c <UART_SetConfig+0x2c8>
 800b656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b65a:	d81b      	bhi.n	800b694 <UART_SetConfig+0x2d0>
 800b65c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b660:	d00c      	beq.n	800b67c <UART_SetConfig+0x2b8>
 800b662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b666:	d815      	bhi.n	800b694 <UART_SetConfig+0x2d0>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <UART_SetConfig+0x2b0>
 800b66c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b670:	d008      	beq.n	800b684 <UART_SetConfig+0x2c0>
 800b672:	e00f      	b.n	800b694 <UART_SetConfig+0x2d0>
 800b674:	2300      	movs	r3, #0
 800b676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b67a:	e022      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b67c:	2302      	movs	r3, #2
 800b67e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b682:	e01e      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b684:	2304      	movs	r3, #4
 800b686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b68a:	e01a      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b68c:	2308      	movs	r3, #8
 800b68e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b692:	e016      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b694:	2310      	movs	r3, #16
 800b696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69a:	e012      	b.n	800b6c2 <UART_SetConfig+0x2fe>
 800b69c:	cfff69f3 	.word	0xcfff69f3
 800b6a0:	40008000 	.word	0x40008000
 800b6a4:	40013800 	.word	0x40013800
 800b6a8:	40021000 	.word	0x40021000
 800b6ac:	40004400 	.word	0x40004400
 800b6b0:	40004800 	.word	0x40004800
 800b6b4:	40004c00 	.word	0x40004c00
 800b6b8:	40005000 	.word	0x40005000
 800b6bc:	2310      	movs	r3, #16
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4aae      	ldr	r2, [pc, #696]	@ (800b980 <UART_SetConfig+0x5bc>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	f040 8097 	bne.w	800b7fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6d2:	2b08      	cmp	r3, #8
 800b6d4:	d823      	bhi.n	800b71e <UART_SetConfig+0x35a>
 800b6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6dc <UART_SetConfig+0x318>)
 800b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6dc:	0800b701 	.word	0x0800b701
 800b6e0:	0800b71f 	.word	0x0800b71f
 800b6e4:	0800b709 	.word	0x0800b709
 800b6e8:	0800b71f 	.word	0x0800b71f
 800b6ec:	0800b70f 	.word	0x0800b70f
 800b6f0:	0800b71f 	.word	0x0800b71f
 800b6f4:	0800b71f 	.word	0x0800b71f
 800b6f8:	0800b71f 	.word	0x0800b71f
 800b6fc:	0800b717 	.word	0x0800b717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b700:	f7fc fc7e 	bl	8008000 <HAL_RCC_GetPCLK1Freq>
 800b704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b706:	e010      	b.n	800b72a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b708:	4b9e      	ldr	r3, [pc, #632]	@ (800b984 <UART_SetConfig+0x5c0>)
 800b70a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b70c:	e00d      	b.n	800b72a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b70e:	f7fc fc09 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 800b712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b714:	e009      	b.n	800b72a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b71a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b71c:	e005      	b.n	800b72a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 8130 	beq.w	800b992 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	4a94      	ldr	r2, [pc, #592]	@ (800b988 <UART_SetConfig+0x5c4>)
 800b738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	fbb3 f3f2 	udiv	r3, r3, r2
 800b744:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	005b      	lsls	r3, r3, #1
 800b74e:	4413      	add	r3, r2
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	429a      	cmp	r2, r3
 800b754:	d305      	bcc.n	800b762 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d903      	bls.n	800b76a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b768:	e113      	b.n	800b992 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	2200      	movs	r2, #0
 800b76e:	60bb      	str	r3, [r7, #8]
 800b770:	60fa      	str	r2, [r7, #12]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b776:	4a84      	ldr	r2, [pc, #528]	@ (800b988 <UART_SetConfig+0x5c4>)
 800b778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	2200      	movs	r2, #0
 800b780:	603b      	str	r3, [r7, #0]
 800b782:	607a      	str	r2, [r7, #4]
 800b784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b78c:	f7f5 faa4 	bl	8000cd8 <__aeabi_uldivmod>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4610      	mov	r0, r2
 800b796:	4619      	mov	r1, r3
 800b798:	f04f 0200 	mov.w	r2, #0
 800b79c:	f04f 0300 	mov.w	r3, #0
 800b7a0:	020b      	lsls	r3, r1, #8
 800b7a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7a6:	0202      	lsls	r2, r0, #8
 800b7a8:	6979      	ldr	r1, [r7, #20]
 800b7aa:	6849      	ldr	r1, [r1, #4]
 800b7ac:	0849      	lsrs	r1, r1, #1
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	eb12 0804 	adds.w	r8, r2, r4
 800b7b8:	eb43 0905 	adc.w	r9, r3, r5
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	469a      	mov	sl, r3
 800b7c4:	4693      	mov	fp, r2
 800b7c6:	4652      	mov	r2, sl
 800b7c8:	465b      	mov	r3, fp
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	f7f5 fa83 	bl	8000cd8 <__aeabi_uldivmod>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7e0:	d308      	bcc.n	800b7f4 <UART_SetConfig+0x430>
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7e8:	d204      	bcs.n	800b7f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6a3a      	ldr	r2, [r7, #32]
 800b7f0:	60da      	str	r2, [r3, #12]
 800b7f2:	e0ce      	b.n	800b992 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7fa:	e0ca      	b.n	800b992 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b804:	d166      	bne.n	800b8d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	d827      	bhi.n	800b85e <UART_SetConfig+0x49a>
 800b80e:	a201      	add	r2, pc, #4	@ (adr r2, 800b814 <UART_SetConfig+0x450>)
 800b810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b841 	.word	0x0800b841
 800b81c:	0800b849 	.word	0x0800b849
 800b820:	0800b85f 	.word	0x0800b85f
 800b824:	0800b84f 	.word	0x0800b84f
 800b828:	0800b85f 	.word	0x0800b85f
 800b82c:	0800b85f 	.word	0x0800b85f
 800b830:	0800b85f 	.word	0x0800b85f
 800b834:	0800b857 	.word	0x0800b857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b838:	f7fc fbe2 	bl	8008000 <HAL_RCC_GetPCLK1Freq>
 800b83c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b83e:	e014      	b.n	800b86a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b840:	f7fc fbf4 	bl	800802c <HAL_RCC_GetPCLK2Freq>
 800b844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b846:	e010      	b.n	800b86a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b848:	4b4e      	ldr	r3, [pc, #312]	@ (800b984 <UART_SetConfig+0x5c0>)
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b84c:	e00d      	b.n	800b86a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b84e:	f7fc fb69 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 800b852:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b854:	e009      	b.n	800b86a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b85a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b85c:	e005      	b.n	800b86a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8090 	beq.w	800b992 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b876:	4a44      	ldr	r2, [pc, #272]	@ (800b988 <UART_SetConfig+0x5c4>)
 800b878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b87c:	461a      	mov	r2, r3
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	fbb3 f3f2 	udiv	r3, r3, r2
 800b884:	005a      	lsls	r2, r3, #1
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	441a      	add	r2, r3
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	fbb2 f3f3 	udiv	r3, r2, r3
 800b896:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	2b0f      	cmp	r3, #15
 800b89c:	d916      	bls.n	800b8cc <UART_SetConfig+0x508>
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a4:	d212      	bcs.n	800b8cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	f023 030f 	bic.w	r3, r3, #15
 800b8ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	8bfb      	ldrh	r3, [r7, #30]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	8bfa      	ldrh	r2, [r7, #30]
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	e062      	b.n	800b992 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8d2:	e05e      	b.n	800b992 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8d8:	2b08      	cmp	r3, #8
 800b8da:	d828      	bhi.n	800b92e <UART_SetConfig+0x56a>
 800b8dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e4 <UART_SetConfig+0x520>)
 800b8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e2:	bf00      	nop
 800b8e4:	0800b909 	.word	0x0800b909
 800b8e8:	0800b911 	.word	0x0800b911
 800b8ec:	0800b919 	.word	0x0800b919
 800b8f0:	0800b92f 	.word	0x0800b92f
 800b8f4:	0800b91f 	.word	0x0800b91f
 800b8f8:	0800b92f 	.word	0x0800b92f
 800b8fc:	0800b92f 	.word	0x0800b92f
 800b900:	0800b92f 	.word	0x0800b92f
 800b904:	0800b927 	.word	0x0800b927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b908:	f7fc fb7a 	bl	8008000 <HAL_RCC_GetPCLK1Freq>
 800b90c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b90e:	e014      	b.n	800b93a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b910:	f7fc fb8c 	bl	800802c <HAL_RCC_GetPCLK2Freq>
 800b914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b916:	e010      	b.n	800b93a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b918:	4b1a      	ldr	r3, [pc, #104]	@ (800b984 <UART_SetConfig+0x5c0>)
 800b91a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b91c:	e00d      	b.n	800b93a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b91e:	f7fc fb01 	bl	8007f24 <HAL_RCC_GetSysClockFreq>
 800b922:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b924:	e009      	b.n	800b93a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b92a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b92c:	e005      	b.n	800b93a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b92e:	2300      	movs	r3, #0
 800b930:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b938:	bf00      	nop
    }

    if (pclk != 0U)
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d028      	beq.n	800b992 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b944:	4a10      	ldr	r2, [pc, #64]	@ (800b988 <UART_SetConfig+0x5c4>)
 800b946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	085b      	lsrs	r3, r3, #1
 800b958:	441a      	add	r2, r3
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	2b0f      	cmp	r3, #15
 800b968:	d910      	bls.n	800b98c <UART_SetConfig+0x5c8>
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b970:	d20c      	bcs.n	800b98c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	b29a      	uxth	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60da      	str	r2, [r3, #12]
 800b97c:	e009      	b.n	800b992 <UART_SetConfig+0x5ce>
 800b97e:	bf00      	nop
 800b980:	40008000 	.word	0x40008000
 800b984:	00f42400 	.word	0x00f42400
 800b988:	08015b4c 	.word	0x08015b4c
      }
      else
      {
        ret = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2201      	movs	r2, #1
 800b996:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3730      	adds	r7, #48	@ 0x30
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00a      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0c:	f003 0302 	and.w	r3, r3, #2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00a      	beq.n	800ba2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01a      	beq.n	800bad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baba:	d10a      	bne.n	800bad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	605a      	str	r2, [r3, #4]
  }
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b098      	sub	sp, #96	@ 0x60
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb10:	f7f7 faf6 	bl	8003100 <HAL_GetTick>
 800bb14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0308 	and.w	r3, r3, #8
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d12f      	bne.n	800bb84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f88e 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d022      	beq.n	800bb84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e6      	bne.n	800bb3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e063      	b.n	800bc4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	d149      	bne.n	800bc26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f857 	bl	800bc54 <UART_WaitOnFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d03c      	beq.n	800bc26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e6      	bne.n	800bbac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	e853 3f00 	ldrex	r3, [r3]
 800bbec:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f023 0301 	bic.w	r3, r3, #1
 800bbf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbfe:	61fa      	str	r2, [r7, #28]
 800bc00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	69b9      	ldr	r1, [r7, #24]
 800bc04:	69fa      	ldr	r2, [r7, #28]
 800bc06:	e841 2300 	strex	r3, r2, [r1]
 800bc0a:	617b      	str	r3, [r7, #20]
   return(result);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e5      	bne.n	800bbde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e012      	b.n	800bc4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2220      	movs	r2, #32
 800bc32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3758      	adds	r7, #88	@ 0x58
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	4613      	mov	r3, r2
 800bc62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc64:	e04f      	b.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d04b      	beq.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc6e:	f7f7 fa47 	bl	8003100 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d302      	bcc.n	800bc84 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e04e      	b.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d037      	beq.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b80      	cmp	r3, #128	@ 0x80
 800bc9a:	d034      	beq.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2b40      	cmp	r3, #64	@ 0x40
 800bca0:	d031      	beq.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	f003 0308 	and.w	r3, r3, #8
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	d110      	bne.n	800bcd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2208      	movs	r2, #8
 800bcb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f838 	bl	800bd2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e029      	b.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	69db      	ldr	r3, [r3, #28]
 800bcd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bce0:	d111      	bne.n	800bd06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 f81e 	bl	800bd2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e00f      	b.n	800bd26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69da      	ldr	r2, [r3, #28]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4013      	ands	r3, r2
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	bf0c      	ite	eq
 800bd16:	2301      	moveq	r3, #1
 800bd18:	2300      	movne	r3, #0
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d0a0      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b095      	sub	sp, #84	@ 0x54
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd54:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e6      	bne.n	800bd36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3308      	adds	r3, #8
 800bd8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e3      	bne.n	800bd68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d118      	bne.n	800bdda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f023 0310 	bic.w	r3, r3, #16
 800bdbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc6:	61bb      	str	r3, [r7, #24]
 800bdc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6979      	ldr	r1, [r7, #20]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e6      	bne.n	800bda8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2220      	movs	r2, #32
 800bdde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bdee:	bf00      	nop
 800bdf0:	3754      	adds	r7, #84	@ 0x54
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d101      	bne.n	800be10 <HAL_UARTEx_DisableFifoMode+0x16>
 800be0c:	2302      	movs	r3, #2
 800be0e:	e027      	b.n	800be60 <HAL_UARTEx_DisableFifoMode+0x66>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2224      	movs	r2, #36	@ 0x24
 800be1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f022 0201 	bic.w	r2, r2, #1
 800be36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d101      	bne.n	800be84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be80:	2302      	movs	r3, #2
 800be82:	e02d      	b.n	800bee0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2224      	movs	r2, #36	@ 0x24
 800be90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 0201 	bic.w	r2, r2, #1
 800beaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	430a      	orrs	r2, r1
 800bebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f84f 	bl	800bf64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800befc:	2302      	movs	r3, #2
 800befe:	e02d      	b.n	800bf5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2224      	movs	r2, #36	@ 0x24
 800bf0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f811 	bl	800bf64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d108      	bne.n	800bf86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf84:	e031      	b.n	800bfea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf86:	2308      	movs	r3, #8
 800bf88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf8a:	2308      	movs	r3, #8
 800bf8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	0e5b      	lsrs	r3, r3, #25
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 0307 	and.w	r3, r3, #7
 800bf9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	0f5b      	lsrs	r3, r3, #29
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
 800bfb0:	7b3a      	ldrb	r2, [r7, #12]
 800bfb2:	4911      	ldr	r1, [pc, #68]	@ (800bff8 <UARTEx_SetNbDataToProcess+0x94>)
 800bfb4:	5c8a      	ldrb	r2, [r1, r2]
 800bfb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfba:	7b3a      	ldrb	r2, [r7, #12]
 800bfbc:	490f      	ldr	r1, [pc, #60]	@ (800bffc <UARTEx_SetNbDataToProcess+0x98>)
 800bfbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	7b7a      	ldrb	r2, [r7, #13]
 800bfd0:	4909      	ldr	r1, [pc, #36]	@ (800bff8 <UARTEx_SetNbDataToProcess+0x94>)
 800bfd2:	5c8a      	ldrb	r2, [r1, r2]
 800bfd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bfd8:	7b7a      	ldrb	r2, [r7, #13]
 800bfda:	4908      	ldr	r1, [pc, #32]	@ (800bffc <UARTEx_SetNbDataToProcess+0x98>)
 800bfdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfde:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bfea:	bf00      	nop
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	08015b64 	.word	0x08015b64
 800bffc:	08015b6c 	.word	0x08015b6c

0800c000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c010:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c014:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	b29a      	uxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c036:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c03a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c042:	b29a      	uxth	r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	b29b      	uxth	r3, r3
 800c048:	43db      	mvns	r3, r3
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	4013      	ands	r3, r2
 800c04e:	b29a      	uxth	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	1d3b      	adds	r3, r7, #4
 800c06e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b09d      	sub	sp, #116	@ 0x74
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	78db      	ldrb	r3, [r3, #3]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d81f      	bhi.n	800c112 <USB_ActivateEndpoint+0x72>
 800c0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d8 <USB_ActivateEndpoint+0x38>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c0e9 	.word	0x0800c0e9
 800c0dc:	0800c105 	.word	0x0800c105
 800c0e0:	0800c11b 	.word	0x0800c11b
 800c0e4:	0800c0f7 	.word	0x0800c0f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c0e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c0ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c0f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c0f4:	e012      	b.n	800c11c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c0f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c0fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c0fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c102:	e00b      	b.n	800c11c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c104:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c10c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c110:	e004      	b.n	800c11c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c118:	e000      	b.n	800c11c <USB_ActivateEndpoint+0x7c>
      break;
 800c11a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	441a      	add	r2, r3
 800c126:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	b21b      	sxth	r3, r3
 800c14e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c156:	b21a      	sxth	r2, r3
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	b21b      	sxth	r3, r3
 800c15e:	4313      	orrs	r3, r2
 800c160:	b21b      	sxth	r3, r3
 800c162:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	441a      	add	r2, r3
 800c170:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c17c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c184:	b29b      	uxth	r3, r3
 800c186:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	7b1b      	ldrb	r3, [r3, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f040 8178 	bne.w	800c482 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8084 	beq.w	800c2a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	61bb      	str	r3, [r7, #24]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	00da      	lsls	r2, r3, #3
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	88db      	ldrh	r3, [r3, #6]
 800c1c4:	085b      	lsrs	r3, r3, #1
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	827b      	strh	r3, [r7, #18]
 800c1de:	8a7b      	ldrh	r3, [r7, #18]
 800c1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01b      	beq.n	800c220 <USB_ActivateEndpoint+0x180>
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1fe:	823b      	strh	r3, [r7, #16]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	441a      	add	r2, r3
 800c20a:	8a3b      	ldrh	r3, [r7, #16]
 800c20c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c218:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	78db      	ldrb	r3, [r3, #3]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d020      	beq.n	800c26a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	b29b      	uxth	r3, r3
 800c236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c23a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c23e:	81bb      	strh	r3, [r7, #12]
 800c240:	89bb      	ldrh	r3, [r7, #12]
 800c242:	f083 0320 	eor.w	r3, r3, #32
 800c246:	81bb      	strh	r3, [r7, #12]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	441a      	add	r2, r3
 800c252:	89bb      	ldrh	r3, [r7, #12]
 800c254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c25c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c264:	b29b      	uxth	r3, r3
 800c266:	8013      	strh	r3, [r2, #0]
 800c268:	e2d5      	b.n	800c816 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c27c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c280:	81fb      	strh	r3, [r7, #14]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	441a      	add	r2, r3
 800c28c:	89fb      	ldrh	r3, [r7, #14]
 800c28e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	8013      	strh	r3, [r2, #0]
 800c2a2:	e2b8      	b.n	800c816 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	4413      	add	r3, r2
 800c2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	00da      	lsls	r2, r3, #3
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	88db      	ldrh	r3, [r3, #6]
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	005b      	lsls	r3, r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e8:	4413      	add	r3, r2
 800c2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	00da      	lsls	r2, r3, #3
 800c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f4:	4413      	add	r3, r2
 800c2f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	b29b      	uxth	r3, r3
 800c302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c306:	b29a      	uxth	r2, r3
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	801a      	strh	r2, [r3, #0]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	2b3e      	cmp	r3, #62	@ 0x3e
 800c312:	d91d      	bls.n	800c350 <USB_ActivateEndpoint+0x2b0>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	095b      	lsrs	r3, r3, #5
 800c31a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	f003 031f 	and.w	r3, r3, #31
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <USB_ActivateEndpoint+0x28e>
 800c328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c32a:	3b01      	subs	r3, #1
 800c32c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	b29a      	uxth	r2, r3
 800c334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c336:	b29b      	uxth	r3, r3
 800c338:	029b      	lsls	r3, r3, #10
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4313      	orrs	r3, r2
 800c33e:	b29b      	uxth	r3, r3
 800c340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c348:	b29a      	uxth	r2, r3
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	801a      	strh	r2, [r3, #0]
 800c34e:	e026      	b.n	800c39e <USB_ActivateEndpoint+0x2fe>
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <USB_ActivateEndpoint+0x2ce>
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c366:	b29a      	uxth	r2, r3
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	801a      	strh	r2, [r3, #0]
 800c36c:	e017      	b.n	800c39e <USB_ActivateEndpoint+0x2fe>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	085b      	lsrs	r3, r3, #1
 800c374:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <USB_ActivateEndpoint+0x2e8>
 800c382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c384:	3301      	adds	r3, #1
 800c386:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c390:	b29b      	uxth	r3, r3
 800c392:	029b      	lsls	r3, r3, #10
 800c394:	b29b      	uxth	r3, r3
 800c396:	4313      	orrs	r3, r2
 800c398:	b29a      	uxth	r2, r3
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c3ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d01b      	beq.n	800c3ee <USB_ActivateEndpoint+0x34e>
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3cc:	843b      	strh	r3, [r7, #32]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	441a      	add	r2, r3
 800c3d8:	8c3b      	ldrh	r3, [r7, #32]
 800c3da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d124      	bne.n	800c440 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4413      	add	r3, r2
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	b29b      	uxth	r3, r3
 800c404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c40c:	83bb      	strh	r3, [r7, #28]
 800c40e:	8bbb      	ldrh	r3, [r7, #28]
 800c410:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c414:	83bb      	strh	r3, [r7, #28]
 800c416:	8bbb      	ldrh	r3, [r7, #28]
 800c418:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c41c:	83bb      	strh	r3, [r7, #28]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	441a      	add	r2, r3
 800c428:	8bbb      	ldrh	r3, [r7, #28]
 800c42a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c42e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]
 800c43e:	e1ea      	b.n	800c816 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c456:	83fb      	strh	r3, [r7, #30]
 800c458:	8bfb      	ldrh	r3, [r7, #30]
 800c45a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c45e:	83fb      	strh	r3, [r7, #30]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	441a      	add	r2, r3
 800c46a:	8bfb      	ldrh	r3, [r7, #30]
 800c46c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	8013      	strh	r3, [r2, #0]
 800c480:	e1c9      	b.n	800c816 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	78db      	ldrb	r3, [r3, #3]
 800c486:	2b02      	cmp	r3, #2
 800c488:	d11e      	bne.n	800c4c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	b29b      	uxth	r3, r3
 800c498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c49c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	441a      	add	r2, r3
 800c4ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c4b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c4be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	8013      	strh	r3, [r2, #0]
 800c4c6:	e01d      	b.n	800c504 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	441a      	add	r2, r3
 800c4ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c500:	b29b      	uxth	r3, r3
 800c502:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c50e:	b29b      	uxth	r3, r3
 800c510:	461a      	mov	r2, r3
 800c512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c514:	4413      	add	r3, r2
 800c516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	00da      	lsls	r2, r3, #3
 800c51e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c520:	4413      	add	r3, r2
 800c522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c526:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	085b      	lsrs	r3, r3, #1
 800c52e:	b29b      	uxth	r3, r3
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	b29a      	uxth	r2, r3
 800c534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c536:	801a      	strh	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c542:	b29b      	uxth	r3, r3
 800c544:	461a      	mov	r2, r3
 800c546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c548:	4413      	add	r3, r2
 800c54a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	00da      	lsls	r2, r3, #3
 800c552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c554:	4413      	add	r3, r2
 800c556:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c55a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	b29b      	uxth	r3, r3
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	b29a      	uxth	r2, r3
 800c568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c56a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	785b      	ldrb	r3, [r3, #1]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 8093 	bne.w	800c69c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c58a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d01b      	beq.n	800c5ca <USB_ActivateEndpoint+0x52a>
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	441a      	add	r2, r3
 800c5b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c5b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c5d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d01b      	beq.n	800c61a <USB_ActivateEndpoint+0x57a>
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	441a      	add	r2, r3
 800c604:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c60a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c60e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c612:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c616:	b29b      	uxth	r3, r3
 800c618:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	b29b      	uxth	r3, r3
 800c628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c62c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c630:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c632:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c634:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c638:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c63a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c63c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c640:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	441a      	add	r2, r3
 800c64c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c64e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c65a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65e:	b29b      	uxth	r3, r3
 800c660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c678:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	441a      	add	r2, r3
 800c684:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c68a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c68e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c696:	b29b      	uxth	r3, r3
 800c698:	8013      	strh	r3, [r2, #0]
 800c69a:	e0bc      	b.n	800c816 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c6ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c6b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d01d      	beq.n	800c6f4 <USB_ActivateEndpoint+0x654>
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	441a      	add	r2, r3
 800c6dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c6e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c704:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01d      	beq.n	800c74c <USB_ActivateEndpoint+0x6ac>
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c726:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	441a      	add	r2, r3
 800c734:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c73c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c748:	b29b      	uxth	r3, r3
 800c74a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	78db      	ldrb	r3, [r3, #3]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d024      	beq.n	800c79e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	b29b      	uxth	r3, r3
 800c762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c76a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c76e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c772:	f083 0320 	eor.w	r3, r3, #32
 800c776:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	441a      	add	r2, r3
 800c784:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c798:	b29b      	uxth	r3, r3
 800c79a:	8013      	strh	r3, [r2, #0]
 800c79c:	e01d      	b.n	800c7da <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	441a      	add	r2, r3
 800c7c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c7c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	441a      	add	r2, r3
 800c7fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c80a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c812:	b29b      	uxth	r3, r3
 800c814:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c816:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3774      	adds	r7, #116	@ 0x74
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c828:	b480      	push	{r7}
 800c82a:	b08d      	sub	sp, #52	@ 0x34
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	7b1b      	ldrb	r3, [r3, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f040 808e 	bne.w	800c958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	785b      	ldrb	r3, [r3, #1]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d044      	beq.n	800c8ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	81bb      	strh	r3, [r7, #12]
 800c852:	89bb      	ldrh	r3, [r7, #12]
 800c854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01b      	beq.n	800c894 <USB_DeactivateEndpoint+0x6c>
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c86e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c872:	817b      	strh	r3, [r7, #10]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	441a      	add	r2, r3
 800c87e:	897b      	ldrh	r3, [r7, #10]
 800c880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c88c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c890:	b29b      	uxth	r3, r3
 800c892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4413      	add	r3, r2
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8aa:	813b      	strh	r3, [r7, #8]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	441a      	add	r2, r3
 800c8b6:	893b      	ldrh	r3, [r7, #8]
 800c8b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	8013      	strh	r3, [r2, #0]
 800c8cc:	e192      	b.n	800cbf4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	827b      	strh	r3, [r7, #18]
 800c8dc:	8a7b      	ldrh	r3, [r7, #18]
 800c8de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01b      	beq.n	800c91e <USB_DeactivateEndpoint+0xf6>
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8fc:	823b      	strh	r3, [r7, #16]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	441a      	add	r2, r3
 800c908:	8a3b      	ldrh	r3, [r7, #16]
 800c90a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c90e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c934:	81fb      	strh	r3, [r7, #14]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	441a      	add	r2, r3
 800c940:	89fb      	ldrh	r3, [r7, #14]
 800c942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c94a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c952:	b29b      	uxth	r3, r3
 800c954:	8013      	strh	r3, [r2, #0]
 800c956:	e14d      	b.n	800cbf4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	785b      	ldrb	r3, [r3, #1]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f040 80a5 	bne.w	800caac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	843b      	strh	r3, [r7, #32]
 800c970:	8c3b      	ldrh	r3, [r7, #32]
 800c972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c976:	2b00      	cmp	r3, #0
 800c978:	d01b      	beq.n	800c9b2 <USB_DeactivateEndpoint+0x18a>
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c98c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c990:	83fb      	strh	r3, [r7, #30]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	441a      	add	r2, r3
 800c99c:	8bfb      	ldrh	r3, [r7, #30]
 800c99e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	83bb      	strh	r3, [r7, #28]
 800c9c0:	8bbb      	ldrh	r3, [r7, #28]
 800c9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01b      	beq.n	800ca02 <USB_DeactivateEndpoint+0x1da>
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9e0:	837b      	strh	r3, [r7, #26]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	441a      	add	r2, r3
 800c9ec:	8b7b      	ldrh	r3, [r7, #26]
 800c9ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca18:	833b      	strh	r3, [r7, #24]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	441a      	add	r2, r3
 800ca24:	8b3b      	ldrh	r3, [r7, #24]
 800ca26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca50:	82fb      	strh	r3, [r7, #22]
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	441a      	add	r2, r3
 800ca5c:	8afb      	ldrh	r3, [r7, #22]
 800ca5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca88:	82bb      	strh	r3, [r7, #20]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	441a      	add	r2, r3
 800ca94:	8abb      	ldrh	r3, [r7, #20]
 800ca96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	8013      	strh	r3, [r2, #0]
 800caaa:	e0a3      	b.n	800cbf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800caba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cabc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01b      	beq.n	800cafc <USB_DeactivateEndpoint+0x2d4>
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cada:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	441a      	add	r2, r3
 800cae6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800caf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cb0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d01b      	beq.n	800cb4c <USB_DeactivateEndpoint+0x324>
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	441a      	add	r2, r3
 800cb36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	881b      	ldrh	r3, [r3, #0]
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	441a      	add	r2, r3
 800cb6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cb70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	441a      	add	r2, r3
 800cba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	441a      	add	r2, r3
 800cbde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3734      	adds	r7, #52	@ 0x34
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b0c2      	sub	sp, #264	@ 0x108
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc10:	6018      	str	r0, [r3, #0]
 800cc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc1a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	785b      	ldrb	r3, [r3, #1]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	f040 86b7 	bne.w	800d99c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	699a      	ldr	r2, [r3, #24]
 800cc3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d908      	bls.n	800cc5c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cc4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cc5a:	e007      	b.n	800cc6c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	7b1b      	ldrb	r3, [r3, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d13a      	bne.n	800ccf2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cc7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6959      	ldr	r1, [r3, #20]
 800cc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	88da      	ldrh	r2, [r3, #6]
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cca2:	6800      	ldr	r0, [r0, #0]
 800cca4:	f001 fc98 	bl	800e5d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	613b      	str	r3, [r7, #16]
 800ccb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	4413      	add	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]
 800cccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	00da      	lsls	r2, r3, #3
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	4413      	add	r3, r2
 800ccde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	801a      	strh	r2, [r3, #0]
 800ccee:	f000 be1f 	b.w	800d930 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ccf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	78db      	ldrb	r3, [r3, #3]
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	f040 8462 	bne.w	800d5c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6a1a      	ldr	r2, [r3, #32]
 800cd10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	f240 83df 	bls.w	800d4e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd48:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cd4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	441a      	add	r2, r3
 800cd66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cd6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cd76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6a1a      	ldr	r2, [r3, #32]
 800cd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 81c7 	beq.w	800d152 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cdc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d177      	bne.n	800ced0 <USB_EPStartXfer+0x2ce>
 800cde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	4413      	add	r3, r2
 800ce02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	00da      	lsls	r2, r3, #3
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	4413      	add	r3, r2
 800ce16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	801a      	strh	r2, [r3, #0]
 800ce2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce30:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce32:	d921      	bls.n	800ce78 <USB_EPStartXfer+0x276>
 800ce34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce38:	095b      	lsrs	r3, r3, #5
 800ce3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ce3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce42:	f003 031f 	and.w	r3, r3, #31
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <USB_EPStartXfer+0x252>
 800ce4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	029b      	lsls	r3, r3, #10
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	4313      	orrs	r3, r2
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce74:	801a      	strh	r2, [r3, #0]
 800ce76:	e050      	b.n	800cf1a <USB_EPStartXfer+0x318>
 800ce78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10a      	bne.n	800ce96 <USB_EPStartXfer+0x294>
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce92:	801a      	strh	r2, [r3, #0]
 800ce94:	e041      	b.n	800cf1a <USB_EPStartXfer+0x318>
 800ce96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9a:	085b      	lsrs	r3, r3, #1
 800ce9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <USB_EPStartXfer+0x2b4>
 800ceac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	029b      	lsls	r3, r3, #10
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	4313      	orrs	r3, r2
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	801a      	strh	r2, [r3, #0]
 800cece:	e024      	b.n	800cf1a <USB_EPStartXfer+0x318>
 800ced0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	785b      	ldrb	r3, [r3, #1]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d11c      	bne.n	800cf1a <USB_EPStartXfer+0x318>
 800cee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	461a      	mov	r2, r3
 800cef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef4:	4413      	add	r3, r2
 800cef6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cefc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	00da      	lsls	r2, r3, #3
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	4413      	add	r3, r2
 800cf0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cf1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	895b      	ldrh	r3, [r3, #10]
 800cf26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6959      	ldr	r1, [r3, #20]
 800cf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf48:	6800      	ldr	r0, [r0, #0]
 800cf4a:	f001 fb45 	bl	800e5d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	695a      	ldr	r2, [r3, #20]
 800cf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf5e:	441a      	add	r2, r3
 800cf60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6a1a      	ldr	r2, [r3, #32]
 800cf78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d90f      	bls.n	800cfa8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6a1a      	ldr	r2, [r3, #32]
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	621a      	str	r2, [r3, #32]
 800cfa6:	e00e      	b.n	800cfc6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cfc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	785b      	ldrb	r3, [r3, #1]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d177      	bne.n	800d0c6 <USB_EPStartXfer+0x4c4>
 800cfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	4413      	add	r3, r2
 800cff8:	61bb      	str	r3, [r7, #24]
 800cffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	00da      	lsls	r2, r3, #3
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	4413      	add	r3, r2
 800d00c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d010:	617b      	str	r3, [r7, #20]
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	b29b      	uxth	r3, r3
 800d018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	801a      	strh	r2, [r3, #0]
 800d022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d026:	2b3e      	cmp	r3, #62	@ 0x3e
 800d028:	d921      	bls.n	800d06e <USB_EPStartXfer+0x46c>
 800d02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d02e:	095b      	lsrs	r3, r3, #5
 800d030:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d038:	f003 031f 	and.w	r3, r3, #31
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d104      	bne.n	800d04a <USB_EPStartXfer+0x448>
 800d040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d044:	3b01      	subs	r3, #1
 800d046:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b29a      	uxth	r2, r3
 800d050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d054:	b29b      	uxth	r3, r3
 800d056:	029b      	lsls	r3, r3, #10
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4313      	orrs	r3, r2
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d066:	b29a      	uxth	r2, r3
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	801a      	strh	r2, [r3, #0]
 800d06c:	e056      	b.n	800d11c <USB_EPStartXfer+0x51a>
 800d06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <USB_EPStartXfer+0x48a>
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d084:	b29a      	uxth	r2, r3
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	801a      	strh	r2, [r3, #0]
 800d08a:	e047      	b.n	800d11c <USB_EPStartXfer+0x51a>
 800d08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d090:	085b      	lsrs	r3, r3, #1
 800d092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d004      	beq.n	800d0ac <USB_EPStartXfer+0x4aa>
 800d0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	029b      	lsls	r3, r3, #10
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	801a      	strh	r2, [r3, #0]
 800d0c4:	e02a      	b.n	800d11c <USB_EPStartXfer+0x51a>
 800d0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	785b      	ldrb	r3, [r3, #1]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d122      	bne.n	800d11c <USB_EPStartXfer+0x51a>
 800d0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	623b      	str	r3, [r7, #32]
 800d0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	623b      	str	r3, [r7, #32]
 800d0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	00da      	lsls	r2, r3, #3
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	4413      	add	r3, r2
 800d10c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d110:	61fb      	str	r3, [r7, #28]
 800d112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d116:	b29a      	uxth	r2, r3
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	891b      	ldrh	r3, [r3, #8]
 800d128:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6959      	ldr	r1, [r3, #20]
 800d138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d142:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d146:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	f001 fa44 	bl	800e5d8 <USB_WritePMA>
 800d150:	e3ee      	b.n	800d930 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d177      	bne.n	800d252 <USB_EPStartXfer+0x650>
 800d162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	461a      	mov	r2, r3
 800d180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d182:	4413      	add	r3, r2
 800d184:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	00da      	lsls	r2, r3, #3
 800d194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d196:	4413      	add	r3, r2
 800d198:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d19c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d19e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ac:	801a      	strh	r2, [r3, #0]
 800d1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1b4:	d921      	bls.n	800d1fa <USB_EPStartXfer+0x5f8>
 800d1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ba:	095b      	lsrs	r3, r3, #5
 800d1bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c4:	f003 031f 	and.w	r3, r3, #31
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d104      	bne.n	800d1d6 <USB_EPStartXfer+0x5d4>
 800d1cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	029b      	lsls	r3, r3, #10
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f6:	801a      	strh	r2, [r3, #0]
 800d1f8:	e056      	b.n	800d2a8 <USB_EPStartXfer+0x6a6>
 800d1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <USB_EPStartXfer+0x616>
 800d202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d210:	b29a      	uxth	r2, r3
 800d212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d214:	801a      	strh	r2, [r3, #0]
 800d216:	e047      	b.n	800d2a8 <USB_EPStartXfer+0x6a6>
 800d218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d21c:	085b      	lsrs	r3, r3, #1
 800d21e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <USB_EPStartXfer+0x636>
 800d22e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d232:	3301      	adds	r3, #1
 800d234:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d242:	b29b      	uxth	r3, r3
 800d244:	029b      	lsls	r3, r3, #10
 800d246:	b29b      	uxth	r3, r3
 800d248:	4313      	orrs	r3, r2
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d24e:	801a      	strh	r2, [r3, #0]
 800d250:	e02a      	b.n	800d2a8 <USB_EPStartXfer+0x6a6>
 800d252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d122      	bne.n	800d2a8 <USB_EPStartXfer+0x6a6>
 800d262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	461a      	mov	r2, r3
 800d280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d282:	4413      	add	r3, r2
 800d284:	653b      	str	r3, [r7, #80]	@ 0x50
 800d286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d28a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	00da      	lsls	r2, r3, #3
 800d294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d296:	4413      	add	r3, r2
 800d298:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	891b      	ldrh	r3, [r3, #8]
 800d2b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6959      	ldr	r1, [r3, #20]
 800d2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d2d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d2d6:	6800      	ldr	r0, [r0, #0]
 800d2d8:	f001 f97e 	bl	800e5d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800d2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	695a      	ldr	r2, [r3, #20]
 800d2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ec:	441a      	add	r2, r3
 800d2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6a1a      	ldr	r2, [r3, #32]
 800d306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	429a      	cmp	r2, r3
 800d314:	d90f      	bls.n	800d336 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6a1a      	ldr	r2, [r3, #32]
 800d322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d326:	1ad2      	subs	r2, r2, r3
 800d328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	621a      	str	r2, [r3, #32]
 800d334:	e00e      	b.n	800d354 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a1b      	ldr	r3, [r3, #32]
 800d342:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2200      	movs	r2, #0
 800d352:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	785b      	ldrb	r3, [r3, #1]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d177      	bne.n	800d460 <USB_EPStartXfer+0x85e>
 800d370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d37c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d390:	4413      	add	r3, r2
 800d392:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	00da      	lsls	r2, r3, #3
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3c2:	d921      	bls.n	800d408 <USB_EPStartXfer+0x806>
 800d3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c8:	095b      	lsrs	r3, r3, #5
 800d3ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d2:	f003 031f 	and.w	r3, r3, #31
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d104      	bne.n	800d3e4 <USB_EPStartXfer+0x7e2>
 800d3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	029b      	lsls	r3, r3, #10
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d400:	b29a      	uxth	r2, r3
 800d402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d404:	801a      	strh	r2, [r3, #0]
 800d406:	e050      	b.n	800d4aa <USB_EPStartXfer+0x8a8>
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <USB_EPStartXfer+0x824>
 800d410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d412:	881b      	ldrh	r3, [r3, #0]
 800d414:	b29b      	uxth	r3, r3
 800d416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d41a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d41e:	b29a      	uxth	r2, r3
 800d420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d422:	801a      	strh	r2, [r3, #0]
 800d424:	e041      	b.n	800d4aa <USB_EPStartXfer+0x8a8>
 800d426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d42a:	085b      	lsrs	r3, r3, #1
 800d42c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <USB_EPStartXfer+0x844>
 800d43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d440:	3301      	adds	r3, #1
 800d442:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d450:	b29b      	uxth	r3, r3
 800d452:	029b      	lsls	r3, r3, #10
 800d454:	b29b      	uxth	r3, r3
 800d456:	4313      	orrs	r3, r2
 800d458:	b29a      	uxth	r2, r3
 800d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45c:	801a      	strh	r2, [r3, #0]
 800d45e:	e024      	b.n	800d4aa <USB_EPStartXfer+0x8a8>
 800d460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d11c      	bne.n	800d4aa <USB_EPStartXfer+0x8a8>
 800d470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d47e:	b29b      	uxth	r3, r3
 800d480:	461a      	mov	r2, r3
 800d482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d484:	4413      	add	r3, r2
 800d486:	643b      	str	r3, [r7, #64]	@ 0x40
 800d488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	00da      	lsls	r2, r3, #3
 800d496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d498:	4413      	add	r3, r2
 800d49a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	895b      	ldrh	r3, [r3, #10]
 800d4b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	6959      	ldr	r1, [r3, #20]
 800d4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4d8:	6800      	ldr	r0, [r0, #0]
 800d4da:	f001 f87d 	bl	800e5d8 <USB_WritePMA>
 800d4de:	e227      	b.n	800d930 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	881b      	ldrh	r3, [r3, #0]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d516:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d51a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d51e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	441a      	add	r2, r3
 800d534:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d53c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d548:	b29b      	uxth	r3, r3
 800d54a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d55c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d566:	b29b      	uxth	r3, r3
 800d568:	461a      	mov	r2, r3
 800d56a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d56c:	4413      	add	r3, r2
 800d56e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	00da      	lsls	r2, r3, #3
 800d57e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d580:	4413      	add	r3, r2
 800d582:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d586:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d590:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	891b      	ldrh	r3, [r3, #8]
 800d59e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6959      	ldr	r1, [r3, #20]
 800d5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5c0:	6800      	ldr	r0, [r0, #0]
 800d5c2:	f001 f809 	bl	800e5d8 <USB_WritePMA>
 800d5c6:	e1b3      	b.n	800d930 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6a1a      	ldr	r2, [r3, #32]
 800d5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d8:	1ad2      	subs	r2, r2, r3
 800d5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	b29b      	uxth	r3, r3
 800d604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 80c6 	beq.w	800d79a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	673b      	str	r3, [r7, #112]	@ 0x70
 800d61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	785b      	ldrb	r3, [r3, #1]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d177      	bne.n	800d71a <USB_EPStartXfer+0xb18>
 800d62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d62e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d644:	b29b      	uxth	r3, r3
 800d646:	461a      	mov	r2, r3
 800d648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d64a:	4413      	add	r3, r2
 800d64c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	00da      	lsls	r2, r3, #3
 800d65c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d65e:	4413      	add	r3, r2
 800d660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d664:	667b      	str	r3, [r7, #100]	@ 0x64
 800d666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d670:	b29a      	uxth	r2, r3
 800d672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d674:	801a      	strh	r2, [r3, #0]
 800d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d67a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d67c:	d921      	bls.n	800d6c2 <USB_EPStartXfer+0xac0>
 800d67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68c:	f003 031f 	and.w	r3, r3, #31
 800d690:	2b00      	cmp	r3, #0
 800d692:	d104      	bne.n	800d69e <USB_EPStartXfer+0xa9c>
 800d694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d698:	3b01      	subs	r3, #1
 800d69a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d69e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	029b      	lsls	r3, r3, #10
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6be:	801a      	strh	r2, [r3, #0]
 800d6c0:	e050      	b.n	800d764 <USB_EPStartXfer+0xb62>
 800d6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10a      	bne.n	800d6e0 <USB_EPStartXfer+0xade>
 800d6ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6dc:	801a      	strh	r2, [r3, #0]
 800d6de:	e041      	b.n	800d764 <USB_EPStartXfer+0xb62>
 800d6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6e4:	085b      	lsrs	r3, r3, #1
 800d6e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ee:	f003 0301 	and.w	r3, r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d004      	beq.n	800d700 <USB_EPStartXfer+0xafe>
 800d6f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	b29a      	uxth	r2, r3
 800d706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	029b      	lsls	r3, r3, #10
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4313      	orrs	r3, r2
 800d712:	b29a      	uxth	r2, r3
 800d714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d716:	801a      	strh	r2, [r3, #0]
 800d718:	e024      	b.n	800d764 <USB_EPStartXfer+0xb62>
 800d71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	785b      	ldrb	r3, [r3, #1]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d11c      	bne.n	800d764 <USB_EPStartXfer+0xb62>
 800d72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d738:	b29b      	uxth	r3, r3
 800d73a:	461a      	mov	r2, r3
 800d73c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d73e:	4413      	add	r3, r2
 800d740:	673b      	str	r3, [r7, #112]	@ 0x70
 800d742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	00da      	lsls	r2, r3, #3
 800d750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d752:	4413      	add	r3, r2
 800d754:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d758:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d75e:	b29a      	uxth	r2, r3
 800d760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d762:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	895b      	ldrh	r3, [r3, #10]
 800d770:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6959      	ldr	r1, [r3, #20]
 800d780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d784:	b29b      	uxth	r3, r3
 800d786:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d78a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d78e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d792:	6800      	ldr	r0, [r0, #0]
 800d794:	f000 ff20 	bl	800e5d8 <USB_WritePMA>
 800d798:	e0ca      	b.n	800d930 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	785b      	ldrb	r3, [r3, #1]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d177      	bne.n	800d89a <USB_EPStartXfer+0xc98>
 800d7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d7ca:	4413      	add	r3, r2
 800d7cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d7ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	00da      	lsls	r2, r3, #3
 800d7dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d7de:	4413      	add	r3, r2
 800d7e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d7e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d7e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7f4:	801a      	strh	r2, [r3, #0]
 800d7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7fc:	d921      	bls.n	800d842 <USB_EPStartXfer+0xc40>
 800d7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d802:	095b      	lsrs	r3, r3, #5
 800d804:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d80c:	f003 031f 	and.w	r3, r3, #31
 800d810:	2b00      	cmp	r3, #0
 800d812:	d104      	bne.n	800d81e <USB_EPStartXfer+0xc1c>
 800d814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d818:	3b01      	subs	r3, #1
 800d81a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d81e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	b29a      	uxth	r2, r3
 800d824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d828:	b29b      	uxth	r3, r3
 800d82a:	029b      	lsls	r3, r3, #10
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	4313      	orrs	r3, r2
 800d830:	b29b      	uxth	r3, r3
 800d832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d83e:	801a      	strh	r2, [r3, #0]
 800d840:	e05c      	b.n	800d8fc <USB_EPStartXfer+0xcfa>
 800d842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10a      	bne.n	800d860 <USB_EPStartXfer+0xc5e>
 800d84a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d85c:	801a      	strh	r2, [r3, #0]
 800d85e:	e04d      	b.n	800d8fc <USB_EPStartXfer+0xcfa>
 800d860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d864:	085b      	lsrs	r3, r3, #1
 800d866:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d004      	beq.n	800d880 <USB_EPStartXfer+0xc7e>
 800d876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d87a:	3301      	adds	r3, #1
 800d87c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d882:	881b      	ldrh	r3, [r3, #0]
 800d884:	b29a      	uxth	r2, r3
 800d886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	029b      	lsls	r3, r3, #10
 800d88e:	b29b      	uxth	r3, r3
 800d890:	4313      	orrs	r3, r2
 800d892:	b29a      	uxth	r2, r3
 800d894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d896:	801a      	strh	r2, [r3, #0]
 800d898:	e030      	b.n	800d8fc <USB_EPStartXfer+0xcfa>
 800d89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	785b      	ldrb	r3, [r3, #1]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d128      	bne.n	800d8fc <USB_EPStartXfer+0xcfa>
 800d8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	00da      	lsls	r2, r3, #3
 800d8e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6959      	ldr	r1, [r3, #20]
 800d918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d922:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d926:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d92a:	6800      	ldr	r0, [r0, #0]
 800d92c:	f000 fe54 	bl	800e5d8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d93e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d956:	817b      	strh	r3, [r7, #10]
 800d958:	897b      	ldrh	r3, [r7, #10]
 800d95a:	f083 0310 	eor.w	r3, r3, #16
 800d95e:	817b      	strh	r3, [r7, #10]
 800d960:	897b      	ldrh	r3, [r7, #10]
 800d962:	f083 0320 	eor.w	r3, r3, #32
 800d966:	817b      	strh	r3, [r7, #10]
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	441a      	add	r2, r3
 800d982:	897b      	ldrh	r3, [r7, #10]
 800d984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d98c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d994:	b29b      	uxth	r3, r3
 800d996:	8013      	strh	r3, [r2, #0]
 800d998:	f000 bcde 	b.w	800e358 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d99c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	7b1b      	ldrb	r3, [r3, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f040 80bb 	bne.w	800db24 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	699a      	ldr	r2, [r3, #24]
 800d9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d917      	bls.n	800d9fa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	699a      	ldr	r2, [r3, #24]
 800d9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9ea:	1ad2      	subs	r2, r2, r3
 800d9ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	619a      	str	r2, [r3, #24]
 800d9f8:	e00e      	b.n	800da18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800da0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2200      	movs	r2, #0
 800da16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800da18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da34:	b29b      	uxth	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800da3c:	4413      	add	r3, r2
 800da3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	00da      	lsls	r2, r3, #3
 800da50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800da54:	4413      	add	r3, r2
 800da56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800da5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da62:	881b      	ldrh	r3, [r3, #0]
 800da64:	b29b      	uxth	r3, r3
 800da66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da70:	801a      	strh	r2, [r3, #0]
 800da72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da76:	2b3e      	cmp	r3, #62	@ 0x3e
 800da78:	d924      	bls.n	800dac4 <USB_EPStartXfer+0xec2>
 800da7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da7e:	095b      	lsrs	r3, r3, #5
 800da80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800da84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da88:	f003 031f 	and.w	r3, r3, #31
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d104      	bne.n	800da9a <USB_EPStartXfer+0xe98>
 800da90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800da94:	3b01      	subs	r3, #1
 800da96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800da9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	029b      	lsls	r3, r3, #10
 800daaa:	b29b      	uxth	r3, r3
 800daac:	4313      	orrs	r3, r2
 800daae:	b29b      	uxth	r3, r3
 800dab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dab8:	b29a      	uxth	r2, r3
 800daba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dabe:	801a      	strh	r2, [r3, #0]
 800dac0:	f000 bc10 	b.w	800e2e4 <USB_EPStartXfer+0x16e2>
 800dac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10c      	bne.n	800dae6 <USB_EPStartXfer+0xee4>
 800dacc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dadc:	b29a      	uxth	r2, r3
 800dade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dae2:	801a      	strh	r2, [r3, #0]
 800dae4:	e3fe      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
 800dae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daea:	085b      	lsrs	r3, r3, #1
 800daec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800daf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf4:	f003 0301 	and.w	r3, r3, #1
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d004      	beq.n	800db06 <USB_EPStartXfer+0xf04>
 800dafc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db00:	3301      	adds	r3, #1
 800db02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800db12:	b29b      	uxth	r3, r3
 800db14:	029b      	lsls	r3, r3, #10
 800db16:	b29b      	uxth	r3, r3
 800db18:	4313      	orrs	r3, r2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db20:	801a      	strh	r2, [r3, #0]
 800db22:	e3df      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800db24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	78db      	ldrb	r3, [r3, #3]
 800db30:	2b02      	cmp	r3, #2
 800db32:	f040 8218 	bne.w	800df66 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800db36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	785b      	ldrb	r3, [r3, #1]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f040 809d 	bne.w	800dc82 <USB_EPStartXfer+0x1080>
 800db48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800db56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db64:	b29b      	uxth	r3, r3
 800db66:	461a      	mov	r2, r3
 800db68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db6c:	4413      	add	r3, r2
 800db6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800db72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	00da      	lsls	r2, r3, #3
 800db80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db84:	4413      	add	r3, r2
 800db86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800db8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	b29b      	uxth	r3, r3
 800db96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dba0:	801a      	strh	r2, [r3, #0]
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbb0:	d92b      	bls.n	800dc0a <USB_EPStartXfer+0x1008>
 800dbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	095b      	lsrs	r3, r3, #5
 800dbc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	f003 031f 	and.w	r3, r3, #31
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d104      	bne.n	800dbe2 <USB_EPStartXfer+0xfe0>
 800dbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dbe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	029b      	lsls	r3, r3, #10
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc06:	801a      	strh	r2, [r3, #0]
 800dc08:	e070      	b.n	800dcec <USB_EPStartXfer+0x10ea>
 800dc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10c      	bne.n	800dc34 <USB_EPStartXfer+0x1032>
 800dc1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc30:	801a      	strh	r2, [r3, #0]
 800dc32:	e05b      	b.n	800dcec <USB_EPStartXfer+0x10ea>
 800dc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	085b      	lsrs	r3, r3, #1
 800dc42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d004      	beq.n	800dc64 <USB_EPStartXfer+0x1062>
 800dc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc5e:	3301      	adds	r3, #1
 800dc60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dc64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	029b      	lsls	r3, r3, #10
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	4313      	orrs	r3, r2
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc7e:	801a      	strh	r2, [r3, #0]
 800dc80:	e034      	b.n	800dcec <USB_EPStartXfer+0x10ea>
 800dc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	785b      	ldrb	r3, [r3, #1]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d12c      	bne.n	800dcec <USB_EPStartXfer+0x10ea>
 800dc92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dcbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	00da      	lsls	r2, r3, #3
 800dcca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dcce:	4413      	add	r3, r2
 800dcd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dcea:	801a      	strh	r2, [r3, #0]
 800dcec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dcfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	785b      	ldrb	r3, [r3, #1]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f040 809d 	bne.w	800de46 <USB_EPStartXfer+0x1244>
 800dd0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dd30:	4413      	add	r3, r2
 800dd32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	00da      	lsls	r2, r3, #3
 800dd44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dd48:	4413      	add	r3, r2
 800dd4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dd52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dd64:	801a      	strh	r2, [r3, #0]
 800dd66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd74:	d92b      	bls.n	800ddce <USB_EPStartXfer+0x11cc>
 800dd76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	095b      	lsrs	r3, r3, #5
 800dd84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	f003 031f 	and.w	r3, r3, #31
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d104      	bne.n	800dda6 <USB_EPStartXfer+0x11a4>
 800dd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dda0:	3b01      	subs	r3, #1
 800dda2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dda6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	029b      	lsls	r3, r3, #10
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ddca:	801a      	strh	r2, [r3, #0]
 800ddcc:	e069      	b.n	800dea2 <USB_EPStartXfer+0x12a0>
 800ddce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10c      	bne.n	800ddf8 <USB_EPStartXfer+0x11f6>
 800ddde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ddf4:	801a      	strh	r2, [r3, #0]
 800ddf6:	e054      	b.n	800dea2 <USB_EPStartXfer+0x12a0>
 800ddf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	085b      	lsrs	r3, r3, #1
 800de06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d004      	beq.n	800de28 <USB_EPStartXfer+0x1226>
 800de1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de22:	3301      	adds	r3, #1
 800de24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	b29a      	uxth	r2, r3
 800de30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de34:	b29b      	uxth	r3, r3
 800de36:	029b      	lsls	r3, r3, #10
 800de38:	b29b      	uxth	r3, r3
 800de3a:	4313      	orrs	r3, r2
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de42:	801a      	strh	r2, [r3, #0]
 800de44:	e02d      	b.n	800dea2 <USB_EPStartXfer+0x12a0>
 800de46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	785b      	ldrb	r3, [r3, #1]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d125      	bne.n	800dea2 <USB_EPStartXfer+0x12a0>
 800de56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de64:	b29b      	uxth	r3, r3
 800de66:	461a      	mov	r2, r3
 800de68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de6c:	4413      	add	r3, r2
 800de6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800de72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	00da      	lsls	r2, r3, #3
 800de80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de84:	4413      	add	r3, r2
 800de86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800de8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dea0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	69db      	ldr	r3, [r3, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f000 8218 	beq.w	800e2e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800deb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	4413      	add	r3, r2
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ded4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ded8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d005      	beq.n	800deec <USB_EPStartXfer+0x12ea>
 800dee0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10d      	bne.n	800df08 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800deec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800def0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800def4:	2b00      	cmp	r3, #0
 800def6:	f040 81f5 	bne.w	800e2e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800defa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800defe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df02:	2b00      	cmp	r3, #0
 800df04:	f040 81ee 	bne.w	800e2e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800df08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	b29b      	uxth	r3, r3
 800df26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800df32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	441a      	add	r2, r3
 800df4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800df50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df60:	b29b      	uxth	r3, r3
 800df62:	8013      	strh	r3, [r2, #0]
 800df64:	e1be      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800df66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	78db      	ldrb	r3, [r3, #3]
 800df72:	2b01      	cmp	r3, #1
 800df74:	f040 81b4 	bne.w	800e2e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800df78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	699a      	ldr	r2, [r3, #24]
 800df84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	429a      	cmp	r2, r3
 800df92:	d917      	bls.n	800dfc4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800df94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	699a      	ldr	r2, [r3, #24]
 800dfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb4:	1ad2      	subs	r2, r2, r3
 800dfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	619a      	str	r2, [r3, #24]
 800dfc2:	e00e      	b.n	800dfe2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800dfc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dfd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	785b      	ldrb	r3, [r3, #1]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f040 8085 	bne.w	800e0fe <USB_EPStartXfer+0x14fc>
 800dff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e010:	b29b      	uxth	r3, r3
 800e012:	461a      	mov	r2, r3
 800e014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e018:	4413      	add	r3, r2
 800e01a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	00da      	lsls	r2, r3, #3
 800e02c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e030:	4413      	add	r3, r2
 800e032:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e03a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e046:	b29a      	uxth	r2, r3
 800e048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e04c:	801a      	strh	r2, [r3, #0]
 800e04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e052:	2b3e      	cmp	r3, #62	@ 0x3e
 800e054:	d923      	bls.n	800e09e <USB_EPStartXfer+0x149c>
 800e056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e05a:	095b      	lsrs	r3, r3, #5
 800e05c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e064:	f003 031f 	and.w	r3, r3, #31
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d104      	bne.n	800e076 <USB_EPStartXfer+0x1474>
 800e06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e070:	3b01      	subs	r3, #1
 800e072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e07a:	881b      	ldrh	r3, [r3, #0]
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e082:	b29b      	uxth	r3, r3
 800e084:	029b      	lsls	r3, r3, #10
 800e086:	b29b      	uxth	r3, r3
 800e088:	4313      	orrs	r3, r2
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e094:	b29a      	uxth	r2, r3
 800e096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e09a:	801a      	strh	r2, [r3, #0]
 800e09c:	e060      	b.n	800e160 <USB_EPStartXfer+0x155e>
 800e09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10c      	bne.n	800e0c0 <USB_EPStartXfer+0x14be>
 800e0a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0bc:	801a      	strh	r2, [r3, #0]
 800e0be:	e04f      	b.n	800e160 <USB_EPStartXfer+0x155e>
 800e0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c4:	085b      	lsrs	r3, r3, #1
 800e0c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d004      	beq.n	800e0e0 <USB_EPStartXfer+0x14de>
 800e0d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0da:	3301      	adds	r3, #1
 800e0dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e0e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	029b      	lsls	r3, r3, #10
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e0fa:	801a      	strh	r2, [r3, #0]
 800e0fc:	e030      	b.n	800e160 <USB_EPStartXfer+0x155e>
 800e0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	785b      	ldrb	r3, [r3, #1]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d128      	bne.n	800e160 <USB_EPStartXfer+0x155e>
 800e10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	461a      	mov	r2, r3
 800e12e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e132:	4413      	add	r3, r2
 800e134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	00da      	lsls	r2, r3, #3
 800e146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e14a:	4413      	add	r3, r2
 800e14c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e158:	b29a      	uxth	r2, r3
 800e15a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e15e:	801a      	strh	r2, [r3, #0]
 800e160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	785b      	ldrb	r3, [r3, #1]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f040 8085 	bne.w	800e28a <USB_EPStartXfer+0x1688>
 800e180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	461a      	mov	r2, r3
 800e1a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e1a4:	4413      	add	r3, r2
 800e1a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e1aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	00da      	lsls	r2, r3, #3
 800e1b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e1bc:	4413      	add	r3, r2
 800e1be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e1c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e1c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e1d8:	801a      	strh	r2, [r3, #0]
 800e1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1de:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1e0:	d923      	bls.n	800e22a <USB_EPStartXfer+0x1628>
 800e1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e6:	095b      	lsrs	r3, r3, #5
 800e1e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f0:	f003 031f 	and.w	r3, r3, #31
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d104      	bne.n	800e202 <USB_EPStartXfer+0x1600>
 800e1f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e20e:	b29b      	uxth	r3, r3
 800e210:	029b      	lsls	r3, r3, #10
 800e212:	b29b      	uxth	r3, r3
 800e214:	4313      	orrs	r3, r2
 800e216:	b29b      	uxth	r3, r3
 800e218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e220:	b29a      	uxth	r2, r3
 800e222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e226:	801a      	strh	r2, [r3, #0]
 800e228:	e05c      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
 800e22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10c      	bne.n	800e24c <USB_EPStartXfer+0x164a>
 800e232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e242:	b29a      	uxth	r2, r3
 800e244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e248:	801a      	strh	r2, [r3, #0]
 800e24a:	e04b      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
 800e24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e250:	085b      	lsrs	r3, r3, #1
 800e252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d004      	beq.n	800e26c <USB_EPStartXfer+0x166a>
 800e262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e266:	3301      	adds	r3, #1
 800e268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e26c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	b29a      	uxth	r2, r3
 800e274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e278:	b29b      	uxth	r3, r3
 800e27a:	029b      	lsls	r3, r3, #10
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	4313      	orrs	r3, r2
 800e280:	b29a      	uxth	r2, r3
 800e282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e286:	801a      	strh	r2, [r3, #0]
 800e288:	e02c      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
 800e28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	785b      	ldrb	r3, [r3, #1]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d124      	bne.n	800e2e4 <USB_EPStartXfer+0x16e2>
 800e29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e2b0:	4413      	add	r3, r2
 800e2b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	00da      	lsls	r2, r3, #3
 800e2c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e2ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e2dc:	801a      	strh	r2, [r3, #0]
 800e2de:	e001      	b.n	800e2e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e03a      	b.n	800e35a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	b29b      	uxth	r3, r3
 800e302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e30a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e30e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e312:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e316:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e31a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e31e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e322:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e32a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	441a      	add	r2, r3
 800e340:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e34c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e354:	b29b      	uxth	r3, r3
 800e356:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	785b      	ldrb	r3, [r3, #1]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d020      	beq.n	800e3b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	b29b      	uxth	r3, r3
 800e384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e38c:	81bb      	strh	r3, [r7, #12]
 800e38e:	89bb      	ldrh	r3, [r7, #12]
 800e390:	f083 0310 	eor.w	r3, r3, #16
 800e394:	81bb      	strh	r3, [r7, #12]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	441a      	add	r2, r3
 800e3a0:	89bb      	ldrh	r3, [r7, #12]
 800e3a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	8013      	strh	r3, [r2, #0]
 800e3b6:	e01f      	b.n	800e3f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3ce:	81fb      	strh	r3, [r7, #14]
 800e3d0:	89fb      	ldrh	r3, [r7, #14]
 800e3d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e3d6:	81fb      	strh	r3, [r7, #14]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	441a      	add	r2, r3
 800e3e2:	89fb      	ldrh	r3, [r7, #14]
 800e3e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr

0800e406 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e406:	b480      	push	{r7}
 800e408:	b087      	sub	sp, #28
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
 800e40e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	7b1b      	ldrb	r3, [r3, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f040 809d 	bne.w	800e554 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	785b      	ldrb	r3, [r3, #1]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d04c      	beq.n	800e4bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	823b      	strh	r3, [r7, #16]
 800e430:	8a3b      	ldrh	r3, [r7, #16]
 800e432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	d01b      	beq.n	800e472 <USB_EPClearStall+0x6c>
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	881b      	ldrh	r3, [r3, #0]
 800e446:	b29b      	uxth	r3, r3
 800e448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e44c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e450:	81fb      	strh	r3, [r7, #14]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	441a      	add	r2, r3
 800e45c:	89fb      	ldrh	r3, [r7, #14]
 800e45e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e46a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e46e:	b29b      	uxth	r3, r3
 800e470:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	78db      	ldrb	r3, [r3, #3]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d06c      	beq.n	800e554 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	b29b      	uxth	r3, r3
 800e488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e48c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e490:	81bb      	strh	r3, [r7, #12]
 800e492:	89bb      	ldrh	r3, [r7, #12]
 800e494:	f083 0320 	eor.w	r3, r3, #32
 800e498:	81bb      	strh	r3, [r7, #12]
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	441a      	add	r2, r3
 800e4a4:	89bb      	ldrh	r3, [r7, #12]
 800e4a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	8013      	strh	r3, [r2, #0]
 800e4ba:	e04b      	b.n	800e554 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4413      	add	r3, r2
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	82fb      	strh	r3, [r7, #22]
 800e4ca:	8afb      	ldrh	r3, [r7, #22]
 800e4cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d01b      	beq.n	800e50c <USB_EPClearStall+0x106>
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4ea:	82bb      	strh	r3, [r7, #20]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	441a      	add	r2, r3
 800e4f6:	8abb      	ldrh	r3, [r7, #20]
 800e4f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e508:	b29b      	uxth	r3, r3
 800e50a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e51e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e522:	827b      	strh	r3, [r7, #18]
 800e524:	8a7b      	ldrh	r3, [r7, #18]
 800e526:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e52a:	827b      	strh	r3, [r7, #18]
 800e52c:	8a7b      	ldrh	r3, [r7, #18]
 800e52e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e532:	827b      	strh	r3, [r7, #18]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	441a      	add	r2, r3
 800e53e:	8a7b      	ldrh	r3, [r7, #18]
 800e540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e54c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e550:	b29b      	uxth	r3, r3
 800e552:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	371c      	adds	r7, #28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e56e:	78fb      	ldrb	r3, [r7, #3]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2280      	movs	r2, #128	@ 0x80
 800e578:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e598:	b29b      	uxth	r3, r3
 800e59a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e59e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b08b      	sub	sp, #44	@ 0x2c
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	80fb      	strh	r3, [r7, #6]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e5ee:	88bb      	ldrh	r3, [r7, #4]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	085b      	lsrs	r3, r3, #1
 800e5f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e5fe:	88fa      	ldrh	r2, [r7, #6]
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	4413      	add	r3, r2
 800e604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e608:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e60e:	e01b      	b.n	800e648 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	3301      	adds	r3, #1
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	021b      	lsls	r3, r3, #8
 800e61e:	b21a      	sxth	r2, r3
 800e620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e624:	4313      	orrs	r3, r2
 800e626:	b21b      	sxth	r3, r3
 800e628:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	8a7a      	ldrh	r2, [r7, #18]
 800e62e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	3302      	adds	r3, #2
 800e634:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	3301      	adds	r3, #1
 800e63a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	3301      	adds	r3, #1
 800e640:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e644:	3b01      	subs	r3, #1
 800e646:	627b      	str	r3, [r7, #36]	@ 0x24
 800e648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1e0      	bne.n	800e610 <USB_WritePMA+0x38>
  }
}
 800e64e:	bf00      	nop
 800e650:	bf00      	nop
 800e652:	372c      	adds	r7, #44	@ 0x2c
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b08b      	sub	sp, #44	@ 0x2c
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4611      	mov	r1, r2
 800e668:	461a      	mov	r2, r3
 800e66a:	460b      	mov	r3, r1
 800e66c:	80fb      	strh	r3, [r7, #6]
 800e66e:	4613      	mov	r3, r2
 800e670:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e672:	88bb      	ldrh	r3, [r7, #4]
 800e674:	085b      	lsrs	r3, r3, #1
 800e676:	b29b      	uxth	r3, r3
 800e678:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e682:	88fa      	ldrh	r2, [r7, #6]
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e68c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	627b      	str	r3, [r7, #36]	@ 0x24
 800e692:	e018      	b.n	800e6c6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e694:	6a3b      	ldr	r3, [r7, #32]
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	b29b      	uxth	r3, r3
 800e69a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e69c:	6a3b      	ldr	r3, [r7, #32]
 800e69e:	3302      	adds	r3, #2
 800e6a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	0a1b      	lsrs	r3, r3, #8
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1e3      	bne.n	800e694 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e6cc:	88bb      	ldrh	r3, [r7, #4]
 800e6ce:	f003 0301 	and.w	r3, r3, #1
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	881b      	ldrh	r3, [r3, #0]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	701a      	strb	r2, [r3, #0]
  }
}
 800e6e8:	bf00      	nop
 800e6ea:	372c      	adds	r7, #44	@ 0x2c
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e700:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e704:	f002 f8a4 	bl	8010850 <USBD_static_malloc>
 800e708:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d105      	bne.n	800e71c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e718:	2302      	movs	r3, #2
 800e71a:	e066      	b.n	800e7ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7c1b      	ldrb	r3, [r3, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d119      	bne.n	800e760 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e72c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e730:	2202      	movs	r2, #2
 800e732:	2181      	movs	r1, #129	@ 0x81
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f001 ff32 	bl	801059e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2201      	movs	r2, #1
 800e73e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e744:	2202      	movs	r2, #2
 800e746:	2101      	movs	r1, #1
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f001 ff28 	bl	801059e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2210      	movs	r2, #16
 800e75a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e75e:	e016      	b.n	800e78e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e760:	2340      	movs	r3, #64	@ 0x40
 800e762:	2202      	movs	r2, #2
 800e764:	2181      	movs	r1, #129	@ 0x81
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f001 ff19 	bl	801059e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e772:	2340      	movs	r3, #64	@ 0x40
 800e774:	2202      	movs	r2, #2
 800e776:	2101      	movs	r1, #1
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f001 ff10 	bl	801059e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2210      	movs	r2, #16
 800e78a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e78e:	2308      	movs	r3, #8
 800e790:	2203      	movs	r2, #3
 800e792:	2182      	movs	r1, #130	@ 0x82
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f001 ff02 	bl	801059e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	7c1b      	ldrb	r3, [r3, #16]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d109      	bne.n	800e7d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f001 ffd3 	bl	801077c <USBD_LL_PrepareReceive>
 800e7d6:	e007      	b.n	800e7e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7de:	2340      	movs	r3, #64	@ 0x40
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 ffca 	bl	801077c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e7fe:	2181      	movs	r1, #129	@ 0x81
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f001 fef2 	bl	80105ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e80c:	2101      	movs	r1, #1
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f001 feeb 	bl	80105ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e81c:	2182      	movs	r1, #130	@ 0x82
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f001 fee3 	bl	80105ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00e      	beq.n	800e85c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e84e:	4618      	mov	r0, r3
 800e850:	f002 f80c 	bl	801086c <USBD_static_free>
    pdev->pClassData = NULL;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2200      	movs	r2, #0
 800e858:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3708      	adds	r7, #8
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e878:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e87a:	2300      	movs	r3, #0
 800e87c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e87e:	2300      	movs	r3, #0
 800e880:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e882:	2300      	movs	r3, #0
 800e884:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d101      	bne.n	800e890 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e88c:	2303      	movs	r3, #3
 800e88e:	e0af      	b.n	800e9f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d03f      	beq.n	800e91c <USBD_CDC_Setup+0xb4>
 800e89c:	2b20      	cmp	r3, #32
 800e89e:	f040 809f 	bne.w	800e9e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	88db      	ldrh	r3, [r3, #6]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d02e      	beq.n	800e908 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	b25b      	sxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	da16      	bge.n	800e8e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e8c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	88d2      	ldrh	r2, [r2, #6]
 800e8c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	88db      	ldrh	r3, [r3, #6]
 800e8cc:	2b07      	cmp	r3, #7
 800e8ce:	bf28      	it	cs
 800e8d0:	2307      	movcs	r3, #7
 800e8d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	89fa      	ldrh	r2, [r7, #14]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f001 fa9d 	bl	800fe1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e8e0:	e085      	b.n	800e9ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	785a      	ldrb	r2, [r3, #1]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	88db      	ldrh	r3, [r3, #6]
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e8f8:	6939      	ldr	r1, [r7, #16]
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	88db      	ldrh	r3, [r3, #6]
 800e8fe:	461a      	mov	r2, r3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f001 fab6 	bl	800fe72 <USBD_CtlPrepareRx>
      break;
 800e906:	e072      	b.n	800e9ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	7850      	ldrb	r0, [r2, #1]
 800e914:	2200      	movs	r2, #0
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	4798      	blx	r3
      break;
 800e91a:	e068      	b.n	800e9ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	785b      	ldrb	r3, [r3, #1]
 800e920:	2b0b      	cmp	r3, #11
 800e922:	d852      	bhi.n	800e9ca <USBD_CDC_Setup+0x162>
 800e924:	a201      	add	r2, pc, #4	@ (adr r2, 800e92c <USBD_CDC_Setup+0xc4>)
 800e926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92a:	bf00      	nop
 800e92c:	0800e95d 	.word	0x0800e95d
 800e930:	0800e9d9 	.word	0x0800e9d9
 800e934:	0800e9cb 	.word	0x0800e9cb
 800e938:	0800e9cb 	.word	0x0800e9cb
 800e93c:	0800e9cb 	.word	0x0800e9cb
 800e940:	0800e9cb 	.word	0x0800e9cb
 800e944:	0800e9cb 	.word	0x0800e9cb
 800e948:	0800e9cb 	.word	0x0800e9cb
 800e94c:	0800e9cb 	.word	0x0800e9cb
 800e950:	0800e9cb 	.word	0x0800e9cb
 800e954:	0800e987 	.word	0x0800e987
 800e958:	0800e9b1 	.word	0x0800e9b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b03      	cmp	r3, #3
 800e966:	d107      	bne.n	800e978 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e968:	f107 030a 	add.w	r3, r7, #10
 800e96c:	2202      	movs	r2, #2
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 fa52 	bl	800fe1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e976:	e032      	b.n	800e9de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e978:	6839      	ldr	r1, [r7, #0]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f001 f9dc 	bl	800fd38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e980:	2303      	movs	r3, #3
 800e982:	75fb      	strb	r3, [r7, #23]
          break;
 800e984:	e02b      	b.n	800e9de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d107      	bne.n	800e9a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e992:	f107 030d 	add.w	r3, r7, #13
 800e996:	2201      	movs	r2, #1
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f001 fa3d 	bl	800fe1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e9a0:	e01d      	b.n	800e9de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f001 f9c7 	bl	800fd38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e9ae:	e016      	b.n	800e9de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d00f      	beq.n	800e9dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e9bc:	6839      	ldr	r1, [r7, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f001 f9ba 	bl	800fd38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e9c8:	e008      	b.n	800e9dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e9ca:	6839      	ldr	r1, [r7, #0]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f001 f9b3 	bl	800fd38 <USBD_CtlError>
          ret = USBD_FAIL;
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e9d6:	e002      	b.n	800e9de <USBD_CDC_Setup+0x176>
          break;
 800e9d8:	bf00      	nop
 800e9da:	e008      	b.n	800e9ee <USBD_CDC_Setup+0x186>
          break;
 800e9dc:	bf00      	nop
      }
      break;
 800e9de:	e006      	b.n	800e9ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f001 f9a8 	bl	800fd38 <USBD_CtlError>
      ret = USBD_FAIL;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e9ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	460b      	mov	r3, r1
 800ea02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ea0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e04f      	b.n	800eaba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ea22:	78fa      	ldrb	r2, [r7, #3]
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	4613      	mov	r3, r2
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4413      	add	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	440b      	add	r3, r1
 800ea30:	3318      	adds	r3, #24
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d029      	beq.n	800ea8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ea38:	78fa      	ldrb	r2, [r7, #3]
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	440b      	add	r3, r1
 800ea46:	3318      	adds	r3, #24
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	78f9      	ldrb	r1, [r7, #3]
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	460b      	mov	r3, r1
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	440b      	add	r3, r1
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	4403      	add	r3, r0
 800ea58:	3320      	adds	r3, #32
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ea60:	fb01 f303 	mul.w	r3, r1, r3
 800ea64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d110      	bne.n	800ea8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ea6a:	78fa      	ldrb	r2, [r7, #3]
 800ea6c:	6879      	ldr	r1, [r7, #4]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4413      	add	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	440b      	add	r3, r1
 800ea78:	3318      	adds	r3, #24
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ea7e:	78f9      	ldrb	r1, [r7, #3]
 800ea80:	2300      	movs	r3, #0
 800ea82:	2200      	movs	r2, #0
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f001 fe58 	bl	801073a <USBD_LL_Transmit>
 800ea8a:	e015      	b.n	800eab8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00b      	beq.n	800eab8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	460b      	mov	r3, r1
 800eacc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ead4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eae0:	2303      	movs	r3, #3
 800eae2:	e015      	b.n	800eb10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eae4:	78fb      	ldrb	r3, [r7, #3]
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f001 fe68 	bl	80107be <USBD_LL_GetRxDataSize>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e01a      	b.n	800eb68 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d014      	beq.n	800eb66 <USBD_CDC_EP0_RxReady+0x4e>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800eb42:	2bff      	cmp	r3, #255	@ 0xff
 800eb44:	d00f      	beq.n	800eb66 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800eb54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	22ff      	movs	r2, #255	@ 0xff
 800eb62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2243      	movs	r2, #67	@ 0x43
 800eb7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eb7e:	4b03      	ldr	r3, [pc, #12]	@ (800eb8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr
 800eb8c:	20000094 	.word	0x20000094

0800eb90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2243      	movs	r2, #67	@ 0x43
 800eb9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eb9e:	4b03      	ldr	r3, [pc, #12]	@ (800ebac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	20000050 	.word	0x20000050

0800ebb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2243      	movs	r2, #67	@ 0x43
 800ebbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ebbe:	4b03      	ldr	r3, [pc, #12]	@ (800ebcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	200000d8 	.word	0x200000d8

0800ebd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	220a      	movs	r2, #10
 800ebdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ebde:	4b03      	ldr	r3, [pc, #12]	@ (800ebec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	2000000c 	.word	0x2000000c

0800ebf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec00:	2303      	movs	r3, #3
 800ec02:	e004      	b.n	800ec0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b087      	sub	sp, #28
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec2c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	e008      	b.n	800ec4a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	371c      	adds	r7, #28
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b085      	sub	sp, #20
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e004      	b.n	800ec7c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	683a      	ldr	r2, [r7, #0]
 800ec76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	e016      	b.n	800ecd4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	7c1b      	ldrb	r3, [r3, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d109      	bne.n	800ecc2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ecb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ecb8:	2101      	movs	r1, #1
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 fd5e 	bl	801077c <USBD_LL_PrepareReceive>
 800ecc0:	e007      	b.n	800ecd2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ecc8:	2340      	movs	r3, #64	@ 0x40
 800ecca:	2101      	movs	r1, #1
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f001 fd55 	bl	801077c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	4613      	mov	r3, r2
 800ece8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d101      	bne.n	800ecf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ecf0:	2303      	movs	r3, #3
 800ecf2:	e01f      	b.n	800ed34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d003      	beq.n	800ed1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	79fa      	ldrb	r2, [r7, #7]
 800ed26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f001 fbbd 	bl	80104a8 <USBD_LL_Init>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed46:	2300      	movs	r3, #0
 800ed48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d101      	bne.n	800ed54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ed50:	2303      	movs	r3, #3
 800ed52:	e016      	b.n	800ed82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed70:	f107 020e 	add.w	r2, r7, #14
 800ed74:	4610      	mov	r0, r2
 800ed76:	4798      	blx	r3
 800ed78:	4602      	mov	r2, r0
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ed80:	2300      	movs	r3, #0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f001 fbe8 	bl	8010568 <USBD_LL_Start>
 800ed98:	4603      	mov	r3, r0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eda2:	b480      	push	{r7}
 800eda4:	b083      	sub	sp, #12
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d009      	beq.n	800ede6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	78fa      	ldrb	r2, [r7, #3]
 800eddc:	4611      	mov	r1, r2
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	4798      	blx	r3
 800ede2:	4603      	mov	r3, r0
 800ede4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d007      	beq.n	800ee16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	78fa      	ldrb	r2, [r7, #3]
 800ee10:	4611      	mov	r1, r2
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	4798      	blx	r3
  }

  return USBD_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee30:	6839      	ldr	r1, [r7, #0]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 ff46 	bl	800fcc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ee46:	461a      	mov	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ee54:	f003 031f 	and.w	r3, r3, #31
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d01a      	beq.n	800ee92 <USBD_LL_SetupStage+0x72>
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d822      	bhi.n	800eea6 <USBD_LL_SetupStage+0x86>
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <USBD_LL_SetupStage+0x4a>
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d00a      	beq.n	800ee7e <USBD_LL_SetupStage+0x5e>
 800ee68:	e01d      	b.n	800eea6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee70:	4619      	mov	r1, r3
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f9ee 	bl	800f254 <USBD_StdDevReq>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee7c:	e020      	b.n	800eec0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee84:	4619      	mov	r1, r3
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fa52 	bl	800f330 <USBD_StdItfReq>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee90:	e016      	b.n	800eec0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee98:	4619      	mov	r1, r3
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fa91 	bl	800f3c2 <USBD_StdEPReq>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]
      break;
 800eea4:	e00c      	b.n	800eec0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eeac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f001 fbb7 	bl	8010628 <USBD_LL_StallEP>
 800eeba:	4603      	mov	r3, r0
 800eebc:	73fb      	strb	r3, [r7, #15]
      break;
 800eebe:	bf00      	nop
  }

  return ret;
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b086      	sub	sp, #24
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	460b      	mov	r3, r1
 800eed4:	607a      	str	r2, [r7, #4]
 800eed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eed8:	7afb      	ldrb	r3, [r7, #11]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d138      	bne.n	800ef50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800eee4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eeec:	2b03      	cmp	r3, #3
 800eeee:	d14a      	bne.n	800ef86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	689a      	ldr	r2, [r3, #8]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d913      	bls.n	800ef24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	689a      	ldr	r2, [r3, #8]
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	1ad2      	subs	r2, r2, r3
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	68da      	ldr	r2, [r3, #12]
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	4293      	cmp	r3, r2
 800ef14:	bf28      	it	cs
 800ef16:	4613      	movcs	r3, r2
 800ef18:	461a      	mov	r2, r3
 800ef1a:	6879      	ldr	r1, [r7, #4]
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 ffc5 	bl	800feac <USBD_CtlContinueRx>
 800ef22:	e030      	b.n	800ef86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b03      	cmp	r3, #3
 800ef2e:	d10b      	bne.n	800ef48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d005      	beq.n	800ef48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 ffc0 	bl	800fece <USBD_CtlSendStatus>
 800ef4e:	e01a      	b.n	800ef86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d114      	bne.n	800ef86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef62:	699b      	ldr	r3, [r3, #24]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00e      	beq.n	800ef86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	7afa      	ldrb	r2, [r7, #11]
 800ef72:	4611      	mov	r1, r2
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	4798      	blx	r3
 800ef78:	4603      	mov	r3, r0
 800ef7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
 800ef84:	e000      	b.n	800ef88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3718      	adds	r7, #24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ef9e:	7afb      	ldrb	r3, [r7, #11]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d16b      	bne.n	800f07c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3314      	adds	r3, #20
 800efa8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d156      	bne.n	800f062 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	689a      	ldr	r2, [r3, #8]
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d914      	bls.n	800efea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	689a      	ldr	r2, [r3, #8]
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	1ad2      	subs	r2, r2, r3
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6879      	ldr	r1, [r7, #4]
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f000 ff3a 	bl	800fe50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efdc:	2300      	movs	r3, #0
 800efde:	2200      	movs	r2, #0
 800efe0:	2100      	movs	r1, #0
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f001 fbca 	bl	801077c <USBD_LL_PrepareReceive>
 800efe8:	e03b      	b.n	800f062 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	68da      	ldr	r2, [r3, #12]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d11c      	bne.n	800f030 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	685a      	ldr	r2, [r3, #4]
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800effe:	429a      	cmp	r2, r3
 800f000:	d316      	bcc.n	800f030 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d20f      	bcs.n	800f030 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f010:	2200      	movs	r2, #0
 800f012:	2100      	movs	r1, #0
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 ff1b 	bl	800fe50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f022:	2300      	movs	r3, #0
 800f024:	2200      	movs	r2, #0
 800f026:	2100      	movs	r1, #0
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f001 fba7 	bl	801077c <USBD_LL_PrepareReceive>
 800f02e:	e018      	b.n	800f062 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f036:	b2db      	uxtb	r3, r3
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d10b      	bne.n	800f054 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d005      	beq.n	800f054 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f054:	2180      	movs	r1, #128	@ 0x80
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f001 fae6 	bl	8010628 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f000 ff49 	bl	800fef4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d122      	bne.n	800f0b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f7ff fe98 	bl	800eda2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2200      	movs	r2, #0
 800f076:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f07a:	e01a      	b.n	800f0b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b03      	cmp	r3, #3
 800f086:	d114      	bne.n	800f0b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f08e:	695b      	ldr	r3, [r3, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00e      	beq.n	800f0b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f09a:	695b      	ldr	r3, [r3, #20]
 800f09c:	7afa      	ldrb	r2, [r7, #11]
 800f09e:	4611      	mov	r1, r2
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	4798      	blx	r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	e000      	b.n	800f0b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e02f      	b.n	800f150 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00f      	beq.n	800f11a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d009      	beq.n	800f11a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	6852      	ldr	r2, [r2, #4]
 800f112:	b2d2      	uxtb	r2, r2
 800f114:	4611      	mov	r1, r2
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f11a:	2340      	movs	r3, #64	@ 0x40
 800f11c:	2200      	movs	r2, #0
 800f11e:	2100      	movs	r1, #0
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f001 fa3c 	bl	801059e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2240      	movs	r2, #64	@ 0x40
 800f132:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f136:	2340      	movs	r3, #64	@ 0x40
 800f138:	2200      	movs	r2, #0
 800f13a:	2180      	movs	r1, #128	@ 0x80
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f001 fa2e 	bl	801059e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2201      	movs	r2, #1
 800f146:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2240      	movs	r2, #64	@ 0x40
 800f14c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f14e:	2300      	movs	r3, #0
}
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	78fa      	ldrb	r2, [r7, #3]
 800f168:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f186:	b2da      	uxtb	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2204      	movs	r2, #4
 800f192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	2b04      	cmp	r3, #4
 800f1b6:	d106      	bne.n	800f1c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e012      	b.n	800f210 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d10b      	bne.n	800f20e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1fc:	69db      	ldr	r3, [r3, #28]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d005      	beq.n	800f20e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f208:	69db      	ldr	r3, [r3, #28]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f20e:	2300      	movs	r3, #0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	3301      	adds	r3, #1
 800f22e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f236:	8a3b      	ldrh	r3, [r7, #16]
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	b21a      	sxth	r2, r3
 800f23c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f240:	4313      	orrs	r3, r2
 800f242:	b21b      	sxth	r3, r3
 800f244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f246:	89fb      	ldrh	r3, [r7, #14]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	371c      	adds	r7, #28
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f25e:	2300      	movs	r3, #0
 800f260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f26a:	2b40      	cmp	r3, #64	@ 0x40
 800f26c:	d005      	beq.n	800f27a <USBD_StdDevReq+0x26>
 800f26e:	2b40      	cmp	r3, #64	@ 0x40
 800f270:	d853      	bhi.n	800f31a <USBD_StdDevReq+0xc6>
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00b      	beq.n	800f28e <USBD_StdDevReq+0x3a>
 800f276:	2b20      	cmp	r3, #32
 800f278:	d14f      	bne.n	800f31a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	4798      	blx	r3
 800f288:	4603      	mov	r3, r0
 800f28a:	73fb      	strb	r3, [r7, #15]
      break;
 800f28c:	e04a      	b.n	800f324 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	785b      	ldrb	r3, [r3, #1]
 800f292:	2b09      	cmp	r3, #9
 800f294:	d83b      	bhi.n	800f30e <USBD_StdDevReq+0xba>
 800f296:	a201      	add	r2, pc, #4	@ (adr r2, 800f29c <USBD_StdDevReq+0x48>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2f1 	.word	0x0800f2f1
 800f2a0:	0800f305 	.word	0x0800f305
 800f2a4:	0800f30f 	.word	0x0800f30f
 800f2a8:	0800f2fb 	.word	0x0800f2fb
 800f2ac:	0800f30f 	.word	0x0800f30f
 800f2b0:	0800f2cf 	.word	0x0800f2cf
 800f2b4:	0800f2c5 	.word	0x0800f2c5
 800f2b8:	0800f30f 	.word	0x0800f30f
 800f2bc:	0800f2e7 	.word	0x0800f2e7
 800f2c0:	0800f2d9 	.word	0x0800f2d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f9de 	bl	800f688 <USBD_GetDescriptor>
          break;
 800f2cc:	e024      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fb6d 	bl	800f9b0 <USBD_SetAddress>
          break;
 800f2d6:	e01f      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fbac 	bl	800fa38 <USBD_SetConfig>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f2e4:	e018      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fc4b 	bl	800fb84 <USBD_GetConfig>
          break;
 800f2ee:	e013      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fc7c 	bl	800fbf0 <USBD_GetStatus>
          break;
 800f2f8:	e00e      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fcab 	bl	800fc58 <USBD_SetFeature>
          break;
 800f302:	e009      	b.n	800f318 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fcba 	bl	800fc80 <USBD_ClrFeature>
          break;
 800f30c:	e004      	b.n	800f318 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fd11 	bl	800fd38 <USBD_CtlError>
          break;
 800f316:	bf00      	nop
      }
      break;
 800f318:	e004      	b.n	800f324 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fd0b 	bl	800fd38 <USBD_CtlError>
      break;
 800f322:	bf00      	nop
  }

  return ret;
 800f324:	7bfb      	ldrb	r3, [r7, #15]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop

0800f330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f346:	2b40      	cmp	r3, #64	@ 0x40
 800f348:	d005      	beq.n	800f356 <USBD_StdItfReq+0x26>
 800f34a:	2b40      	cmp	r3, #64	@ 0x40
 800f34c:	d82f      	bhi.n	800f3ae <USBD_StdItfReq+0x7e>
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <USBD_StdItfReq+0x26>
 800f352:	2b20      	cmp	r3, #32
 800f354:	d12b      	bne.n	800f3ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	3b01      	subs	r3, #1
 800f360:	2b02      	cmp	r3, #2
 800f362:	d81d      	bhi.n	800f3a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	889b      	ldrh	r3, [r3, #4]
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d813      	bhi.n	800f396 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	6839      	ldr	r1, [r7, #0]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	4798      	blx	r3
 800f37c:	4603      	mov	r3, r0
 800f37e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	88db      	ldrh	r3, [r3, #6]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d110      	bne.n	800f3aa <USBD_StdItfReq+0x7a>
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10d      	bne.n	800f3aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fd9d 	bl	800fece <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f394:	e009      	b.n	800f3aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fccd 	bl	800fd38 <USBD_CtlError>
          break;
 800f39e:	e004      	b.n	800f3aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fcc8 	bl	800fd38 <USBD_CtlError>
          break;
 800f3a8:	e000      	b.n	800f3ac <USBD_StdItfReq+0x7c>
          break;
 800f3aa:	bf00      	nop
      }
      break;
 800f3ac:	e004      	b.n	800f3b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fcc1 	bl	800fd38 <USBD_CtlError>
      break;
 800f3b6:	bf00      	nop
  }

  return ret;
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	889b      	ldrh	r3, [r3, #4]
 800f3d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f3de:	2b40      	cmp	r3, #64	@ 0x40
 800f3e0:	d007      	beq.n	800f3f2 <USBD_StdEPReq+0x30>
 800f3e2:	2b40      	cmp	r3, #64	@ 0x40
 800f3e4:	f200 8145 	bhi.w	800f672 <USBD_StdEPReq+0x2b0>
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00c      	beq.n	800f406 <USBD_StdEPReq+0x44>
 800f3ec:	2b20      	cmp	r3, #32
 800f3ee:	f040 8140 	bne.w	800f672 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	4798      	blx	r3
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]
      break;
 800f404:	e13a      	b.n	800f67c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	785b      	ldrb	r3, [r3, #1]
 800f40a:	2b03      	cmp	r3, #3
 800f40c:	d007      	beq.n	800f41e <USBD_StdEPReq+0x5c>
 800f40e:	2b03      	cmp	r3, #3
 800f410:	f300 8129 	bgt.w	800f666 <USBD_StdEPReq+0x2a4>
 800f414:	2b00      	cmp	r3, #0
 800f416:	d07f      	beq.n	800f518 <USBD_StdEPReq+0x156>
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d03c      	beq.n	800f496 <USBD_StdEPReq+0xd4>
 800f41c:	e123      	b.n	800f666 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b02      	cmp	r3, #2
 800f428:	d002      	beq.n	800f430 <USBD_StdEPReq+0x6e>
 800f42a:	2b03      	cmp	r3, #3
 800f42c:	d016      	beq.n	800f45c <USBD_StdEPReq+0x9a>
 800f42e:	e02c      	b.n	800f48a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00d      	beq.n	800f452 <USBD_StdEPReq+0x90>
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	2b80      	cmp	r3, #128	@ 0x80
 800f43a:	d00a      	beq.n	800f452 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f43c:	7bbb      	ldrb	r3, [r7, #14]
 800f43e:	4619      	mov	r1, r3
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f001 f8f1 	bl	8010628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f446:	2180      	movs	r1, #128	@ 0x80
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 f8ed 	bl	8010628 <USBD_LL_StallEP>
 800f44e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f450:	e020      	b.n	800f494 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fc6f 	bl	800fd38 <USBD_CtlError>
              break;
 800f45a:	e01b      	b.n	800f494 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	885b      	ldrh	r3, [r3, #2]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10e      	bne.n	800f482 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00b      	beq.n	800f482 <USBD_StdEPReq+0xc0>
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	2b80      	cmp	r3, #128	@ 0x80
 800f46e:	d008      	beq.n	800f482 <USBD_StdEPReq+0xc0>
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	88db      	ldrh	r3, [r3, #6]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d104      	bne.n	800f482 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f478:	7bbb      	ldrb	r3, [r7, #14]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f001 f8d3 	bl	8010628 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fd23 	bl	800fece <USBD_CtlSendStatus>

              break;
 800f488:	e004      	b.n	800f494 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fc53 	bl	800fd38 <USBD_CtlError>
              break;
 800f492:	bf00      	nop
          }
          break;
 800f494:	e0ec      	b.n	800f670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d002      	beq.n	800f4a8 <USBD_StdEPReq+0xe6>
 800f4a2:	2b03      	cmp	r3, #3
 800f4a4:	d016      	beq.n	800f4d4 <USBD_StdEPReq+0x112>
 800f4a6:	e030      	b.n	800f50a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4a8:	7bbb      	ldrb	r3, [r7, #14]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00d      	beq.n	800f4ca <USBD_StdEPReq+0x108>
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
 800f4b0:	2b80      	cmp	r3, #128	@ 0x80
 800f4b2:	d00a      	beq.n	800f4ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f001 f8b5 	bl	8010628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4be:	2180      	movs	r1, #128	@ 0x80
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f001 f8b1 	bl	8010628 <USBD_LL_StallEP>
 800f4c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4c8:	e025      	b.n	800f516 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fc33 	bl	800fd38 <USBD_CtlError>
              break;
 800f4d2:	e020      	b.n	800f516 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	885b      	ldrh	r3, [r3, #2]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d11b      	bne.n	800f514 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d004      	beq.n	800f4f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f001 f8bb 	bl	8010666 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fcec 	bl	800fece <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	4798      	blx	r3
 800f504:	4603      	mov	r3, r0
 800f506:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f508:	e004      	b.n	800f514 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 fc13 	bl	800fd38 <USBD_CtlError>
              break;
 800f512:	e000      	b.n	800f516 <USBD_StdEPReq+0x154>
              break;
 800f514:	bf00      	nop
          }
          break;
 800f516:	e0ab      	b.n	800f670 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	2b02      	cmp	r3, #2
 800f522:	d002      	beq.n	800f52a <USBD_StdEPReq+0x168>
 800f524:	2b03      	cmp	r3, #3
 800f526:	d032      	beq.n	800f58e <USBD_StdEPReq+0x1cc>
 800f528:	e097      	b.n	800f65a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f52a:	7bbb      	ldrb	r3, [r7, #14]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d007      	beq.n	800f540 <USBD_StdEPReq+0x17e>
 800f530:	7bbb      	ldrb	r3, [r7, #14]
 800f532:	2b80      	cmp	r3, #128	@ 0x80
 800f534:	d004      	beq.n	800f540 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 fbfd 	bl	800fd38 <USBD_CtlError>
                break;
 800f53e:	e091      	b.n	800f664 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f544:	2b00      	cmp	r3, #0
 800f546:	da0b      	bge.n	800f560 <USBD_StdEPReq+0x19e>
 800f548:	7bbb      	ldrb	r3, [r7, #14]
 800f54a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f54e:	4613      	mov	r3, r2
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4413      	add	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	3310      	adds	r3, #16
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	4413      	add	r3, r2
 800f55c:	3304      	adds	r3, #4
 800f55e:	e00b      	b.n	800f578 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f560:	7bbb      	ldrb	r3, [r7, #14]
 800f562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f566:	4613      	mov	r3, r2
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	4413      	add	r3, r2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	4413      	add	r3, r2
 800f576:	3304      	adds	r3, #4
 800f578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	2200      	movs	r2, #0
 800f57e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2202      	movs	r2, #2
 800f584:	4619      	mov	r1, r3
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fc47 	bl	800fe1a <USBD_CtlSendData>
              break;
 800f58c:	e06a      	b.n	800f664 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f592:	2b00      	cmp	r3, #0
 800f594:	da11      	bge.n	800f5ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f596:	7bbb      	ldrb	r3, [r7, #14]
 800f598:	f003 020f 	and.w	r2, r3, #15
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3324      	adds	r3, #36	@ 0x24
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d117      	bne.n	800f5e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fbc0 	bl	800fd38 <USBD_CtlError>
                  break;
 800f5b8:	e054      	b.n	800f664 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	f003 020f 	and.w	r2, r3, #15
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	440b      	add	r3, r1
 800f5cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d104      	bne.n	800f5e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 fbad 	bl	800fd38 <USBD_CtlError>
                  break;
 800f5de:	e041      	b.n	800f664 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	da0b      	bge.n	800f600 <USBD_StdEPReq+0x23e>
 800f5e8:	7bbb      	ldrb	r3, [r7, #14]
 800f5ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	4413      	add	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	3310      	adds	r3, #16
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	e00b      	b.n	800f618 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f600:	7bbb      	ldrb	r3, [r7, #14]
 800f602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f606:	4613      	mov	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	3304      	adds	r3, #4
 800f618:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f61a:	7bbb      	ldrb	r3, [r7, #14]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <USBD_StdEPReq+0x264>
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	2b80      	cmp	r3, #128	@ 0x80
 800f624:	d103      	bne.n	800f62e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	2200      	movs	r2, #0
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	e00e      	b.n	800f64c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	4619      	mov	r1, r3
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f001 f836 	bl	80106a4 <USBD_LL_IsStallEP>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2201      	movs	r2, #1
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	e002      	b.n	800f64c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2200      	movs	r2, #0
 800f64a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	2202      	movs	r2, #2
 800f650:	4619      	mov	r1, r3
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 fbe1 	bl	800fe1a <USBD_CtlSendData>
              break;
 800f658:	e004      	b.n	800f664 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 fb6b 	bl	800fd38 <USBD_CtlError>
              break;
 800f662:	bf00      	nop
          }
          break;
 800f664:	e004      	b.n	800f670 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fb65 	bl	800fd38 <USBD_CtlError>
          break;
 800f66e:	bf00      	nop
      }
      break;
 800f670:	e004      	b.n	800f67c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f672:	6839      	ldr	r1, [r7, #0]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fb5f 	bl	800fd38 <USBD_CtlError>
      break;
 800f67a:	bf00      	nop
  }

  return ret;
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
	...

0800f688 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f692:	2300      	movs	r3, #0
 800f694:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f696:	2300      	movs	r3, #0
 800f698:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f69a:	2300      	movs	r3, #0
 800f69c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	885b      	ldrh	r3, [r3, #2]
 800f6a2:	0a1b      	lsrs	r3, r3, #8
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	2b0e      	cmp	r3, #14
 800f6aa:	f200 8152 	bhi.w	800f952 <USBD_GetDescriptor+0x2ca>
 800f6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f6b4 <USBD_GetDescriptor+0x2c>)
 800f6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b4:	0800f725 	.word	0x0800f725
 800f6b8:	0800f73d 	.word	0x0800f73d
 800f6bc:	0800f77d 	.word	0x0800f77d
 800f6c0:	0800f953 	.word	0x0800f953
 800f6c4:	0800f953 	.word	0x0800f953
 800f6c8:	0800f8f3 	.word	0x0800f8f3
 800f6cc:	0800f91f 	.word	0x0800f91f
 800f6d0:	0800f953 	.word	0x0800f953
 800f6d4:	0800f953 	.word	0x0800f953
 800f6d8:	0800f953 	.word	0x0800f953
 800f6dc:	0800f953 	.word	0x0800f953
 800f6e0:	0800f953 	.word	0x0800f953
 800f6e4:	0800f953 	.word	0x0800f953
 800f6e8:	0800f953 	.word	0x0800f953
 800f6ec:	0800f6f1 	.word	0x0800f6f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f6:	69db      	ldr	r3, [r3, #28]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00b      	beq.n	800f714 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f702:	69db      	ldr	r3, [r3, #28]
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	7c12      	ldrb	r2, [r2, #16]
 800f708:	f107 0108 	add.w	r1, r7, #8
 800f70c:	4610      	mov	r0, r2
 800f70e:	4798      	blx	r3
 800f710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f712:	e126      	b.n	800f962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f714:	6839      	ldr	r1, [r7, #0]
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fb0e 	bl	800fd38 <USBD_CtlError>
        err++;
 800f71c:	7afb      	ldrb	r3, [r7, #11]
 800f71e:	3301      	adds	r3, #1
 800f720:	72fb      	strb	r3, [r7, #11]
      break;
 800f722:	e11e      	b.n	800f962 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	7c12      	ldrb	r2, [r2, #16]
 800f730:	f107 0108 	add.w	r1, r7, #8
 800f734:	4610      	mov	r0, r2
 800f736:	4798      	blx	r3
 800f738:	60f8      	str	r0, [r7, #12]
      break;
 800f73a:	e112      	b.n	800f962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	7c1b      	ldrb	r3, [r3, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10d      	bne.n	800f760 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f74c:	f107 0208 	add.w	r2, r7, #8
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
 800f754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3301      	adds	r3, #1
 800f75a:	2202      	movs	r2, #2
 800f75c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f75e:	e100      	b.n	800f962 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f768:	f107 0208 	add.w	r2, r7, #8
 800f76c:	4610      	mov	r0, r2
 800f76e:	4798      	blx	r3
 800f770:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3301      	adds	r3, #1
 800f776:	2202      	movs	r2, #2
 800f778:	701a      	strb	r2, [r3, #0]
      break;
 800f77a:	e0f2      	b.n	800f962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	885b      	ldrh	r3, [r3, #2]
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b05      	cmp	r3, #5
 800f784:	f200 80ac 	bhi.w	800f8e0 <USBD_GetDescriptor+0x258>
 800f788:	a201      	add	r2, pc, #4	@ (adr r2, 800f790 <USBD_GetDescriptor+0x108>)
 800f78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78e:	bf00      	nop
 800f790:	0800f7a9 	.word	0x0800f7a9
 800f794:	0800f7dd 	.word	0x0800f7dd
 800f798:	0800f811 	.word	0x0800f811
 800f79c:	0800f845 	.word	0x0800f845
 800f7a0:	0800f879 	.word	0x0800f879
 800f7a4:	0800f8ad 	.word	0x0800f8ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00b      	beq.n	800f7cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	7c12      	ldrb	r2, [r2, #16]
 800f7c0:	f107 0108 	add.w	r1, r7, #8
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	4798      	blx	r3
 800f7c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7ca:	e091      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fab2 	bl	800fd38 <USBD_CtlError>
            err++;
 800f7d4:	7afb      	ldrb	r3, [r7, #11]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f7da:	e089      	b.n	800f8f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00b      	beq.n	800f800 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	7c12      	ldrb	r2, [r2, #16]
 800f7f4:	f107 0108 	add.w	r1, r7, #8
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	4798      	blx	r3
 800f7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7fe:	e077      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fa98 	bl	800fd38 <USBD_CtlError>
            err++;
 800f808:	7afb      	ldrb	r3, [r7, #11]
 800f80a:	3301      	adds	r3, #1
 800f80c:	72fb      	strb	r3, [r7, #11]
          break;
 800f80e:	e06f      	b.n	800f8f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00b      	beq.n	800f834 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	7c12      	ldrb	r2, [r2, #16]
 800f828:	f107 0108 	add.w	r1, r7, #8
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
 800f830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f832:	e05d      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fa7e 	bl	800fd38 <USBD_CtlError>
            err++;
 800f83c:	7afb      	ldrb	r3, [r7, #11]
 800f83e:	3301      	adds	r3, #1
 800f840:	72fb      	strb	r3, [r7, #11]
          break;
 800f842:	e055      	b.n	800f8f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f84a:	691b      	ldr	r3, [r3, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00b      	beq.n	800f868 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	7c12      	ldrb	r2, [r2, #16]
 800f85c:	f107 0108 	add.w	r1, r7, #8
 800f860:	4610      	mov	r0, r2
 800f862:	4798      	blx	r3
 800f864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f866:	e043      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fa64 	bl	800fd38 <USBD_CtlError>
            err++;
 800f870:	7afb      	ldrb	r3, [r7, #11]
 800f872:	3301      	adds	r3, #1
 800f874:	72fb      	strb	r3, [r7, #11]
          break;
 800f876:	e03b      	b.n	800f8f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00b      	beq.n	800f89c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	7c12      	ldrb	r2, [r2, #16]
 800f890:	f107 0108 	add.w	r1, r7, #8
 800f894:	4610      	mov	r0, r2
 800f896:	4798      	blx	r3
 800f898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f89a:	e029      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa4a 	bl	800fd38 <USBD_CtlError>
            err++;
 800f8a4:	7afb      	ldrb	r3, [r7, #11]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f8aa:	e021      	b.n	800f8f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f8b2:	699b      	ldr	r3, [r3, #24]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00b      	beq.n	800f8d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	7c12      	ldrb	r2, [r2, #16]
 800f8c4:	f107 0108 	add.w	r1, r7, #8
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
 800f8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8ce:	e00f      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8d0:	6839      	ldr	r1, [r7, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 fa30 	bl	800fd38 <USBD_CtlError>
            err++;
 800f8d8:	7afb      	ldrb	r3, [r7, #11]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f8de:	e007      	b.n	800f8f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f8e0:	6839      	ldr	r1, [r7, #0]
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fa28 	bl	800fd38 <USBD_CtlError>
          err++;
 800f8e8:	7afb      	ldrb	r3, [r7, #11]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f8ee:	bf00      	nop
      }
      break;
 800f8f0:	e037      	b.n	800f962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7c1b      	ldrb	r3, [r3, #16]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d109      	bne.n	800f90e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f902:	f107 0208 	add.w	r2, r7, #8
 800f906:	4610      	mov	r0, r2
 800f908:	4798      	blx	r3
 800f90a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f90c:	e029      	b.n	800f962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fa11 	bl	800fd38 <USBD_CtlError>
        err++;
 800f916:	7afb      	ldrb	r3, [r7, #11]
 800f918:	3301      	adds	r3, #1
 800f91a:	72fb      	strb	r3, [r7, #11]
      break;
 800f91c:	e021      	b.n	800f962 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	7c1b      	ldrb	r3, [r3, #16]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10d      	bne.n	800f942 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f92e:	f107 0208 	add.w	r2, r7, #8
 800f932:	4610      	mov	r0, r2
 800f934:	4798      	blx	r3
 800f936:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	3301      	adds	r3, #1
 800f93c:	2207      	movs	r2, #7
 800f93e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f940:	e00f      	b.n	800f962 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f9f7 	bl	800fd38 <USBD_CtlError>
        err++;
 800f94a:	7afb      	ldrb	r3, [r7, #11]
 800f94c:	3301      	adds	r3, #1
 800f94e:	72fb      	strb	r3, [r7, #11]
      break;
 800f950:	e007      	b.n	800f962 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f9ef 	bl	800fd38 <USBD_CtlError>
      err++;
 800f95a:	7afb      	ldrb	r3, [r7, #11]
 800f95c:	3301      	adds	r3, #1
 800f95e:	72fb      	strb	r3, [r7, #11]
      break;
 800f960:	bf00      	nop
  }

  if (err != 0U)
 800f962:	7afb      	ldrb	r3, [r7, #11]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d11e      	bne.n	800f9a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	88db      	ldrh	r3, [r3, #6]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d016      	beq.n	800f99e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f970:	893b      	ldrh	r3, [r7, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00e      	beq.n	800f994 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	88da      	ldrh	r2, [r3, #6]
 800f97a:	893b      	ldrh	r3, [r7, #8]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	bf28      	it	cs
 800f980:	4613      	movcs	r3, r2
 800f982:	b29b      	uxth	r3, r3
 800f984:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f986:	893b      	ldrh	r3, [r7, #8]
 800f988:	461a      	mov	r2, r3
 800f98a:	68f9      	ldr	r1, [r7, #12]
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f000 fa44 	bl	800fe1a <USBD_CtlSendData>
 800f992:	e009      	b.n	800f9a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f9ce 	bl	800fd38 <USBD_CtlError>
 800f99c:	e004      	b.n	800f9a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fa95 	bl	800fece <USBD_CtlSendStatus>
 800f9a4:	e000      	b.n	800f9a8 <USBD_GetDescriptor+0x320>
    return;
 800f9a6:	bf00      	nop
  }
}
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop

0800f9b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	889b      	ldrh	r3, [r3, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d131      	bne.n	800fa26 <USBD_SetAddress+0x76>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	88db      	ldrh	r3, [r3, #6]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d12d      	bne.n	800fa26 <USBD_SetAddress+0x76>
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	885b      	ldrh	r3, [r3, #2]
 800f9ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800f9d0:	d829      	bhi.n	800fa26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	885b      	ldrh	r3, [r3, #2]
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	d104      	bne.n	800f9f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f9ea:	6839      	ldr	r1, [r7, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f9a3 	bl	800fd38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f2:	e01d      	b.n	800fa30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7bfa      	ldrb	r2, [r7, #15]
 800f9f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f9fc:	7bfb      	ldrb	r3, [r7, #15]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 fe7b 	bl	80106fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fa61 	bl	800fece <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d004      	beq.n	800fa1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2202      	movs	r2, #2
 800fa16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa1a:	e009      	b.n	800fa30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa24:	e004      	b.n	800fa30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa26:	6839      	ldr	r1, [r7, #0]
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 f985 	bl	800fd38 <USBD_CtlError>
  }
}
 800fa2e:	bf00      	nop
 800fa30:	bf00      	nop
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	885b      	ldrh	r3, [r3, #2]
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	4b4c      	ldr	r3, [pc, #304]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fa4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa50:	4b4b      	ldr	r3, [pc, #300]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d905      	bls.n	800fa64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 f96c 	bl	800fd38 <USBD_CtlError>
    return USBD_FAIL;
 800fa60:	2303      	movs	r3, #3
 800fa62:	e088      	b.n	800fb76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d002      	beq.n	800fa76 <USBD_SetConfig+0x3e>
 800fa70:	2b03      	cmp	r3, #3
 800fa72:	d025      	beq.n	800fac0 <USBD_SetConfig+0x88>
 800fa74:	e071      	b.n	800fb5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fa76:	4b42      	ldr	r3, [pc, #264]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d01c      	beq.n	800fab8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fa7e:	4b40      	ldr	r3, [pc, #256]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	461a      	mov	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa88:	4b3d      	ldr	r3, [pc, #244]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7ff f992 	bl	800edb8 <USBD_SetClassConfig>
 800fa94:	4603      	mov	r3, r0
 800fa96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d004      	beq.n	800faa8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f949 	bl	800fd38 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800faa6:	e065      	b.n	800fb74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fa10 	bl	800fece <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2203      	movs	r2, #3
 800fab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fab6:	e05d      	b.n	800fb74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 fa08 	bl	800fece <USBD_CtlSendStatus>
      break;
 800fabe:	e059      	b.n	800fb74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fac0:	4b2f      	ldr	r3, [pc, #188]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d112      	bne.n	800faee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2202      	movs	r2, #2
 800facc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fad0:	4b2b      	ldr	r3, [pc, #172]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	461a      	mov	r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fada:	4b29      	ldr	r3, [pc, #164]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff f985 	bl	800edf0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 f9f1 	bl	800fece <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800faec:	e042      	b.n	800fb74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800faee:	4b24      	ldr	r3, [pc, #144]	@ (800fb80 <USBD_SetConfig+0x148>)
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	461a      	mov	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d02a      	beq.n	800fb52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff f973 	bl	800edf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fb0a:	4b1d      	ldr	r3, [pc, #116]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb14:	4b1a      	ldr	r3, [pc, #104]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff f94c 	bl	800edb8 <USBD_SetClassConfig>
 800fb20:	4603      	mov	r3, r0
 800fb22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00f      	beq.n	800fb4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 f903 	bl	800fd38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	4619      	mov	r1, r3
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7ff f958 	bl	800edf0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2202      	movs	r2, #2
 800fb44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fb48:	e014      	b.n	800fb74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f9bf 	bl	800fece <USBD_CtlSendStatus>
      break;
 800fb50:	e010      	b.n	800fb74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f9bb 	bl	800fece <USBD_CtlSendStatus>
      break;
 800fb58:	e00c      	b.n	800fb74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f8eb 	bl	800fd38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb62:	4b07      	ldr	r3, [pc, #28]	@ (800fb80 <USBD_SetConfig+0x148>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff f941 	bl	800edf0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	73fb      	strb	r3, [r7, #15]
      break;
 800fb72:	bf00      	nop
  }

  return ret;
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	20002ec0 	.word	0x20002ec0

0800fb84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	88db      	ldrh	r3, [r3, #6]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d004      	beq.n	800fba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f8cd 	bl	800fd38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb9e:	e023      	b.n	800fbe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b02      	cmp	r3, #2
 800fbaa:	dc02      	bgt.n	800fbb2 <USBD_GetConfig+0x2e>
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dc03      	bgt.n	800fbb8 <USBD_GetConfig+0x34>
 800fbb0:	e015      	b.n	800fbde <USBD_GetConfig+0x5a>
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d00b      	beq.n	800fbce <USBD_GetConfig+0x4a>
 800fbb6:	e012      	b.n	800fbde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	3308      	adds	r3, #8
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f927 	bl	800fe1a <USBD_CtlSendData>
        break;
 800fbcc:	e00c      	b.n	800fbe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 f91f 	bl	800fe1a <USBD_CtlSendData>
        break;
 800fbdc:	e004      	b.n	800fbe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 f8a9 	bl	800fd38 <USBD_CtlError>
        break;
 800fbe6:	bf00      	nop
}
 800fbe8:	bf00      	nop
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	3b01      	subs	r3, #1
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d81e      	bhi.n	800fc46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	88db      	ldrh	r3, [r3, #6]
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d004      	beq.n	800fc1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fc10:	6839      	ldr	r1, [r7, #0]
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f890 	bl	800fd38 <USBD_CtlError>
        break;
 800fc18:	e01a      	b.n	800fc50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d005      	beq.n	800fc36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	f043 0202 	orr.w	r2, r3, #2
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	330c      	adds	r3, #12
 800fc3a:	2202      	movs	r2, #2
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f8eb 	bl	800fe1a <USBD_CtlSendData>
      break;
 800fc44:	e004      	b.n	800fc50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fc46:	6839      	ldr	r1, [r7, #0]
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f875 	bl	800fd38 <USBD_CtlError>
      break;
 800fc4e:	bf00      	nop
  }
}
 800fc50:	bf00      	nop
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	885b      	ldrh	r3, [r3, #2]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d106      	bne.n	800fc78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f92b 	bl	800fece <USBD_CtlSendStatus>
  }
}
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	3b01      	subs	r3, #1
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d80b      	bhi.n	800fcb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	885b      	ldrh	r3, [r3, #2]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d10c      	bne.n	800fcba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f910 	bl	800fece <USBD_CtlSendStatus>
      }
      break;
 800fcae:	e004      	b.n	800fcba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fcb0:	6839      	ldr	r1, [r7, #0]
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f840 	bl	800fd38 <USBD_CtlError>
      break;
 800fcb8:	e000      	b.n	800fcbc <USBD_ClrFeature+0x3c>
      break;
 800fcba:	bf00      	nop
  }
}
 800fcbc:	bf00      	nop
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	781a      	ldrb	r2, [r3, #0]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	3301      	adds	r3, #1
 800fcec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f7ff fa92 	bl	800f218 <SWAPBYTE>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3301      	adds	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f7ff fa85 	bl	800f218 <SWAPBYTE>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	461a      	mov	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fa78 	bl	800f218 <SWAPBYTE>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	80da      	strh	r2, [r3, #6]
}
 800fd30:	bf00      	nop
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd42:	2180      	movs	r1, #128	@ 0x80
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fc6f 	bl	8010628 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fc6b 	bl	8010628 <USBD_LL_StallEP>
}
 800fd52:	bf00      	nop
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b086      	sub	sp, #24
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd66:	2300      	movs	r3, #0
 800fd68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d036      	beq.n	800fdde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fd74:	6938      	ldr	r0, [r7, #16]
 800fd76:	f000 f836 	bl	800fde6 <USBD_GetLen>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd88:	7dfb      	ldrb	r3, [r7, #23]
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	7812      	ldrb	r2, [r2, #0]
 800fd92:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd94:	7dfb      	ldrb	r3, [r7, #23]
 800fd96:	3301      	adds	r3, #1
 800fd98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd9a:	7dfb      	ldrb	r3, [r7, #23]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	4413      	add	r3, r2
 800fda0:	2203      	movs	r2, #3
 800fda2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fda4:	7dfb      	ldrb	r3, [r7, #23]
 800fda6:	3301      	adds	r3, #1
 800fda8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fdaa:	e013      	b.n	800fdd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	7812      	ldrb	r2, [r2, #0]
 800fdb6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	613b      	str	r3, [r7, #16]
    idx++;
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fdc4:	7dfb      	ldrb	r3, [r7, #23]
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	4413      	add	r3, r2
 800fdca:	2200      	movs	r2, #0
 800fdcc:	701a      	strb	r2, [r3, #0]
    idx++;
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1e7      	bne.n	800fdac <USBD_GetString+0x52>
 800fddc:	e000      	b.n	800fde0 <USBD_GetString+0x86>
    return;
 800fdde:	bf00      	nop
  }
}
 800fde0:	3718      	adds	r7, #24
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fde6:	b480      	push	{r7}
 800fde8:	b085      	sub	sp, #20
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fdf6:	e005      	b.n	800fe04 <USBD_GetLen+0x1e>
  {
    len++;
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	3301      	adds	r3, #1
 800fe02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d1f5      	bne.n	800fdf8 <USBD_GetLen+0x12>
  }

  return len;
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3714      	adds	r7, #20
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	60f8      	str	r0, [r7, #12]
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2202      	movs	r2, #2
 800fe2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	2100      	movs	r1, #0
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f000 fc7a 	bl	801073a <USBD_LL_Transmit>

  return USBD_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	2100      	movs	r1, #0
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f000 fc69 	bl	801073a <USBD_LL_Transmit>

  return USBD_OK;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fe72:	b580      	push	{r7, lr}
 800fe74:	b084      	sub	sp, #16
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	60f8      	str	r0, [r7, #12]
 800fe7a:	60b9      	str	r1, [r7, #8]
 800fe7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2203      	movs	r2, #3
 800fe82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	2100      	movs	r1, #0
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f000 fc6d 	bl	801077c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68ba      	ldr	r2, [r7, #8]
 800febc:	2100      	movs	r1, #0
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f000 fc5c 	bl	801077c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b082      	sub	sp, #8
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2204      	movs	r2, #4
 800feda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fede:	2300      	movs	r3, #0
 800fee0:	2200      	movs	r2, #0
 800fee2:	2100      	movs	r1, #0
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fc28 	bl	801073a <USBD_LL_Transmit>

  return USBD_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2205      	movs	r2, #5
 800ff00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff04:	2300      	movs	r3, #0
 800ff06:	2200      	movs	r2, #0
 800ff08:	2100      	movs	r1, #0
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 fc36 	bl	801077c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff10:	2300      	movs	r3, #0
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ff20:	2200      	movs	r2, #0
 800ff22:	4912      	ldr	r1, [pc, #72]	@ (800ff6c <MX_USB_Device_Init+0x50>)
 800ff24:	4812      	ldr	r0, [pc, #72]	@ (800ff70 <MX_USB_Device_Init+0x54>)
 800ff26:	f7fe fed9 	bl	800ecdc <USBD_Init>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ff30:	f7f2 f97e 	bl	8002230 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ff34:	490f      	ldr	r1, [pc, #60]	@ (800ff74 <MX_USB_Device_Init+0x58>)
 800ff36:	480e      	ldr	r0, [pc, #56]	@ (800ff70 <MX_USB_Device_Init+0x54>)
 800ff38:	f7fe ff00 	bl	800ed3c <USBD_RegisterClass>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ff42:	f7f2 f975 	bl	8002230 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ff46:	490c      	ldr	r1, [pc, #48]	@ (800ff78 <MX_USB_Device_Init+0x5c>)
 800ff48:	4809      	ldr	r0, [pc, #36]	@ (800ff70 <MX_USB_Device_Init+0x54>)
 800ff4a:	f7fe fe51 	bl	800ebf0 <USBD_CDC_RegisterInterface>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ff54:	f7f2 f96c 	bl	8002230 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ff58:	4805      	ldr	r0, [pc, #20]	@ (800ff70 <MX_USB_Device_Init+0x54>)
 800ff5a:	f7fe ff16 	bl	800ed8a <USBD_Start>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ff64:	f7f2 f964 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ff68:	bf00      	nop
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	20000130 	.word	0x20000130
 800ff70:	20002ec4 	.word	0x20002ec4
 800ff74:	20000018 	.word	0x20000018
 800ff78:	2000011c 	.word	0x2000011c

0800ff7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff80:	2200      	movs	r2, #0
 800ff82:	4905      	ldr	r1, [pc, #20]	@ (800ff98 <CDC_Init_FS+0x1c>)
 800ff84:	4805      	ldr	r0, [pc, #20]	@ (800ff9c <CDC_Init_FS+0x20>)
 800ff86:	f7fe fe48 	bl	800ec1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff8a:	4905      	ldr	r1, [pc, #20]	@ (800ffa0 <CDC_Init_FS+0x24>)
 800ff8c:	4803      	ldr	r0, [pc, #12]	@ (800ff9c <CDC_Init_FS+0x20>)
 800ff8e:	f7fe fe62 	bl	800ec56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20003994 	.word	0x20003994
 800ff9c:	20002ec4 	.word	0x20002ec4
 800ffa0:	20003194 	.word	0x20003194

0800ffa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ffa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	4603      	mov	r3, r0
 800ffbc:	6039      	str	r1, [r7, #0]
 800ffbe:	71fb      	strb	r3, [r7, #7]
 800ffc0:	4613      	mov	r3, r2
 800ffc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ffc4:	79fb      	ldrb	r3, [r7, #7]
 800ffc6:	2b23      	cmp	r3, #35	@ 0x23
 800ffc8:	d84a      	bhi.n	8010060 <CDC_Control_FS+0xac>
 800ffca:	a201      	add	r2, pc, #4	@ (adr r2, 800ffd0 <CDC_Control_FS+0x1c>)
 800ffcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd0:	08010061 	.word	0x08010061
 800ffd4:	08010061 	.word	0x08010061
 800ffd8:	08010061 	.word	0x08010061
 800ffdc:	08010061 	.word	0x08010061
 800ffe0:	08010061 	.word	0x08010061
 800ffe4:	08010061 	.word	0x08010061
 800ffe8:	08010061 	.word	0x08010061
 800ffec:	08010061 	.word	0x08010061
 800fff0:	08010061 	.word	0x08010061
 800fff4:	08010061 	.word	0x08010061
 800fff8:	08010061 	.word	0x08010061
 800fffc:	08010061 	.word	0x08010061
 8010000:	08010061 	.word	0x08010061
 8010004:	08010061 	.word	0x08010061
 8010008:	08010061 	.word	0x08010061
 801000c:	08010061 	.word	0x08010061
 8010010:	08010061 	.word	0x08010061
 8010014:	08010061 	.word	0x08010061
 8010018:	08010061 	.word	0x08010061
 801001c:	08010061 	.word	0x08010061
 8010020:	08010061 	.word	0x08010061
 8010024:	08010061 	.word	0x08010061
 8010028:	08010061 	.word	0x08010061
 801002c:	08010061 	.word	0x08010061
 8010030:	08010061 	.word	0x08010061
 8010034:	08010061 	.word	0x08010061
 8010038:	08010061 	.word	0x08010061
 801003c:	08010061 	.word	0x08010061
 8010040:	08010061 	.word	0x08010061
 8010044:	08010061 	.word	0x08010061
 8010048:	08010061 	.word	0x08010061
 801004c:	08010061 	.word	0x08010061
 8010050:	08010061 	.word	0x08010061
 8010054:	08010061 	.word	0x08010061
 8010058:	08010061 	.word	0x08010061
 801005c:	08010061 	.word	0x08010061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010060:	bf00      	nop
  }

  return (USBD_OK);
 8010062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801007a:	6879      	ldr	r1, [r7, #4]
 801007c:	4805      	ldr	r0, [pc, #20]	@ (8010094 <CDC_Receive_FS+0x24>)
 801007e:	f7fe fdea 	bl	800ec56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010082:	4804      	ldr	r0, [pc, #16]	@ (8010094 <CDC_Receive_FS+0x24>)
 8010084:	f7fe fe00 	bl	800ec88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010088:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801008a:	4618      	mov	r0, r3
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20002ec4 	.word	0x20002ec4

08010098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010098:	b480      	push	{r7}
 801009a:	b087      	sub	sp, #28
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	371c      	adds	r7, #28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
	...

080100bc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	6039      	str	r1, [r7, #0]
 80100c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	2212      	movs	r2, #18
 80100cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80100ce:	4b03      	ldr	r3, [pc, #12]	@ (80100dc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	20000150 	.word	0x20000150

080100e0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	6039      	str	r1, [r7, #0]
 80100ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2204      	movs	r2, #4
 80100f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100f2:	4b03      	ldr	r3, [pc, #12]	@ (8010100 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	20000164 	.word	0x20000164

08010104 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	6039      	str	r1, [r7, #0]
 801010e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d105      	bne.n	8010122 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	4907      	ldr	r1, [pc, #28]	@ (8010138 <USBD_CDC_ProductStrDescriptor+0x34>)
 801011a:	4808      	ldr	r0, [pc, #32]	@ (801013c <USBD_CDC_ProductStrDescriptor+0x38>)
 801011c:	f7ff fe1d 	bl	800fd5a <USBD_GetString>
 8010120:	e004      	b.n	801012c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010122:	683a      	ldr	r2, [r7, #0]
 8010124:	4904      	ldr	r1, [pc, #16]	@ (8010138 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010126:	4805      	ldr	r0, [pc, #20]	@ (801013c <USBD_CDC_ProductStrDescriptor+0x38>)
 8010128:	f7ff fe17 	bl	800fd5a <USBD_GetString>
  }
  return USBD_StrDesc;
 801012c:	4b02      	ldr	r3, [pc, #8]	@ (8010138 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801012e:	4618      	mov	r0, r3
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20004194 	.word	0x20004194
 801013c:	08015aec 	.word	0x08015aec

08010140 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	4904      	ldr	r1, [pc, #16]	@ (8010160 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010150:	4804      	ldr	r0, [pc, #16]	@ (8010164 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010152:	f7ff fe02 	bl	800fd5a <USBD_GetString>
  return USBD_StrDesc;
 8010156:	4b02      	ldr	r3, [pc, #8]	@ (8010160 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	20004194 	.word	0x20004194
 8010164:	08015b04 	.word	0x08015b04

08010168 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	6039      	str	r1, [r7, #0]
 8010172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	221a      	movs	r2, #26
 8010178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801017a:	f000 f843 	bl	8010204 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801017e:	4b02      	ldr	r3, [pc, #8]	@ (8010188 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010180:	4618      	mov	r0, r3
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20000168 	.word	0x20000168

0801018c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	4603      	mov	r3, r0
 8010194:	6039      	str	r1, [r7, #0]
 8010196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d105      	bne.n	80101aa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	4907      	ldr	r1, [pc, #28]	@ (80101c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80101a2:	4808      	ldr	r0, [pc, #32]	@ (80101c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80101a4:	f7ff fdd9 	bl	800fd5a <USBD_GetString>
 80101a8:	e004      	b.n	80101b4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	4904      	ldr	r1, [pc, #16]	@ (80101c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80101ae:	4805      	ldr	r0, [pc, #20]	@ (80101c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80101b0:	f7ff fdd3 	bl	800fd5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80101b4:	4b02      	ldr	r3, [pc, #8]	@ (80101c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	20004194 	.word	0x20004194
 80101c4:	08015b18 	.word	0x08015b18

080101c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	6039      	str	r1, [r7, #0]
 80101d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d105      	bne.n	80101e6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	4907      	ldr	r1, [pc, #28]	@ (80101fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80101de:	4808      	ldr	r0, [pc, #32]	@ (8010200 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80101e0:	f7ff fdbb 	bl	800fd5a <USBD_GetString>
 80101e4:	e004      	b.n	80101f0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	4904      	ldr	r1, [pc, #16]	@ (80101fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80101ea:	4805      	ldr	r0, [pc, #20]	@ (8010200 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80101ec:	f7ff fdb5 	bl	800fd5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80101f0:	4b02      	ldr	r3, [pc, #8]	@ (80101fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20004194 	.word	0x20004194
 8010200:	08015b24 	.word	0x08015b24

08010204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801020a:	4b0f      	ldr	r3, [pc, #60]	@ (8010248 <Get_SerialNum+0x44>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010210:	4b0e      	ldr	r3, [pc, #56]	@ (801024c <Get_SerialNum+0x48>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010216:	4b0e      	ldr	r3, [pc, #56]	@ (8010250 <Get_SerialNum+0x4c>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4413      	add	r3, r2
 8010222:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d009      	beq.n	801023e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801022a:	2208      	movs	r2, #8
 801022c:	4909      	ldr	r1, [pc, #36]	@ (8010254 <Get_SerialNum+0x50>)
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f000 f814 	bl	801025c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010234:	2204      	movs	r2, #4
 8010236:	4908      	ldr	r1, [pc, #32]	@ (8010258 <Get_SerialNum+0x54>)
 8010238:	68b8      	ldr	r0, [r7, #8]
 801023a:	f000 f80f 	bl	801025c <IntToUnicode>
  }
}
 801023e:	bf00      	nop
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	1fff7590 	.word	0x1fff7590
 801024c:	1fff7594 	.word	0x1fff7594
 8010250:	1fff7598 	.word	0x1fff7598
 8010254:	2000016a 	.word	0x2000016a
 8010258:	2000017a 	.word	0x2000017a

0801025c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801025c:	b480      	push	{r7}
 801025e:	b087      	sub	sp, #28
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	4613      	mov	r3, r2
 8010268:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801026e:	2300      	movs	r3, #0
 8010270:	75fb      	strb	r3, [r7, #23]
 8010272:	e027      	b.n	80102c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	0f1b      	lsrs	r3, r3, #28
 8010278:	2b09      	cmp	r3, #9
 801027a:	d80b      	bhi.n	8010294 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	0f1b      	lsrs	r3, r3, #28
 8010280:	b2da      	uxtb	r2, r3
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	005b      	lsls	r3, r3, #1
 8010286:	4619      	mov	r1, r3
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	440b      	add	r3, r1
 801028c:	3230      	adds	r2, #48	@ 0x30
 801028e:	b2d2      	uxtb	r2, r2
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	e00a      	b.n	80102aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	0f1b      	lsrs	r3, r3, #28
 8010298:	b2da      	uxtb	r2, r3
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4619      	mov	r1, r3
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	440b      	add	r3, r1
 80102a4:	3237      	adds	r2, #55	@ 0x37
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	011b      	lsls	r3, r3, #4
 80102ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102b0:	7dfb      	ldrb	r3, [r7, #23]
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	3301      	adds	r3, #1
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	4413      	add	r3, r2
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102be:	7dfb      	ldrb	r3, [r7, #23]
 80102c0:	3301      	adds	r3, #1
 80102c2:	75fb      	strb	r3, [r7, #23]
 80102c4:	7dfa      	ldrb	r2, [r7, #23]
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d3d3      	bcc.n	8010274 <IntToUnicode+0x18>
  }
}
 80102cc:	bf00      	nop
 80102ce:	bf00      	nop
 80102d0:	371c      	adds	r7, #28
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
	...

080102dc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b098      	sub	sp, #96	@ 0x60
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80102e4:	f107 030c 	add.w	r3, r7, #12
 80102e8:	2254      	movs	r2, #84	@ 0x54
 80102ea:	2100      	movs	r1, #0
 80102ec:	4618      	mov	r0, r3
 80102ee:	f001 fa8a 	bl	8011806 <memset>
  if(pcdHandle->Instance==USB)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a15      	ldr	r2, [pc, #84]	@ (801034c <HAL_PCD_MspInit+0x70>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d122      	bne.n	8010342 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80102fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010300:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010302:	2300      	movs	r3, #0
 8010304:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010306:	f107 030c 	add.w	r3, r7, #12
 801030a:	4618      	mov	r0, r3
 801030c:	f7f7 feea 	bl	80080e4 <HAL_RCCEx_PeriphCLKConfig>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010316:	f7f1 ff8b 	bl	8002230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801031a:	4b0d      	ldr	r3, [pc, #52]	@ (8010350 <HAL_PCD_MspInit+0x74>)
 801031c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801031e:	4a0c      	ldr	r2, [pc, #48]	@ (8010350 <HAL_PCD_MspInit+0x74>)
 8010320:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010324:	6593      	str	r3, [r2, #88]	@ 0x58
 8010326:	4b0a      	ldr	r3, [pc, #40]	@ (8010350 <HAL_PCD_MspInit+0x74>)
 8010328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801032a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801032e:	60bb      	str	r3, [r7, #8]
 8010330:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010332:	2200      	movs	r2, #0
 8010334:	2100      	movs	r1, #0
 8010336:	2014      	movs	r0, #20
 8010338:	f7f4 fe59 	bl	8004fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801033c:	2014      	movs	r0, #20
 801033e:	f7f4 fe70 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010342:	bf00      	nop
 8010344:	3760      	adds	r7, #96	@ 0x60
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	40005c00 	.word	0x40005c00
 8010350:	40021000 	.word	0x40021000

08010354 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fe fd58 	bl	800ee20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010370:	bf00      	nop
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801038a:	78fa      	ldrb	r2, [r7, #3]
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	4613      	mov	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4413      	add	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	440b      	add	r3, r1
 8010398:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	4619      	mov	r1, r3
 80103a2:	f7fe fd92 	bl	800eeca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b082      	sub	sp, #8
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
 80103b6:	460b      	mov	r3, r1
 80103b8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80103c0:	78fa      	ldrb	r2, [r7, #3]
 80103c2:	6879      	ldr	r1, [r7, #4]
 80103c4:	4613      	mov	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	00db      	lsls	r3, r3, #3
 80103cc:	440b      	add	r3, r1
 80103ce:	3324      	adds	r3, #36	@ 0x24
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	4619      	mov	r1, r3
 80103d6:	f7fe fddb 	bl	800ef90 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80103da:	bf00      	nop
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e2:	b580      	push	{r7, lr}
 80103e4:	b082      	sub	sp, #8
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fe feef 	bl	800f1d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80103f6:	bf00      	nop
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b084      	sub	sp, #16
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010406:	2301      	movs	r3, #1
 8010408:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	795b      	ldrb	r3, [r3, #5]
 801040e:	2b02      	cmp	r3, #2
 8010410:	d001      	beq.n	8010416 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010412:	f7f1 ff0d 	bl	8002230 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801041c:	7bfa      	ldrb	r2, [r7, #15]
 801041e:	4611      	mov	r1, r2
 8010420:	4618      	mov	r0, r3
 8010422:	f7fe fe99 	bl	800f158 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801042c:	4618      	mov	r0, r3
 801042e:	f7fe fe45 	bl	800f0bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010432:	bf00      	nop
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fe94 	bl	800f178 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7a5b      	ldrb	r3, [r3, #9]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d005      	beq.n	8010464 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010458:	4b04      	ldr	r3, [pc, #16]	@ (801046c <HAL_PCD_SuspendCallback+0x30>)
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	4a03      	ldr	r2, [pc, #12]	@ (801046c <HAL_PCD_SuspendCallback+0x30>)
 801045e:	f043 0306 	orr.w	r3, r3, #6
 8010462:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010464:	bf00      	nop
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	e000ed00 	.word	0xe000ed00

08010470 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7a5b      	ldrb	r3, [r3, #9]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d007      	beq.n	8010490 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010480:	4b08      	ldr	r3, [pc, #32]	@ (80104a4 <HAL_PCD_ResumeCallback+0x34>)
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	4a07      	ldr	r2, [pc, #28]	@ (80104a4 <HAL_PCD_ResumeCallback+0x34>)
 8010486:	f023 0306 	bic.w	r3, r3, #6
 801048a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801048c:	f000 f9f8 	bl	8010880 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010496:	4618      	mov	r0, r3
 8010498:	f7fe fe84 	bl	800f1a4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801049c:	bf00      	nop
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	e000ed00 	.word	0xe000ed00

080104a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80104b0:	4a2b      	ldr	r2, [pc, #172]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a29      	ldr	r2, [pc, #164]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104bc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80104c0:	4b27      	ldr	r3, [pc, #156]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104c2:	4a28      	ldr	r2, [pc, #160]	@ (8010564 <USBD_LL_Init+0xbc>)
 80104c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80104c6:	4b26      	ldr	r3, [pc, #152]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104c8:	2208      	movs	r2, #8
 80104ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80104cc:	4b24      	ldr	r3, [pc, #144]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104ce:	2202      	movs	r2, #2
 80104d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80104d2:	4b23      	ldr	r3, [pc, #140]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104d4:	2202      	movs	r2, #2
 80104d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80104d8:	4b21      	ldr	r3, [pc, #132]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104da:	2200      	movs	r2, #0
 80104dc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80104de:	4b20      	ldr	r3, [pc, #128]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80104e4:	4b1e      	ldr	r3, [pc, #120]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80104ea:	4b1d      	ldr	r3, [pc, #116]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80104f0:	481b      	ldr	r0, [pc, #108]	@ (8010560 <USBD_LL_Init+0xb8>)
 80104f2:	f7f5 fae2 	bl	8005aba <HAL_PCD_Init>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d001      	beq.n	8010500 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80104fc:	f7f1 fe98 	bl	8002230 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010506:	2318      	movs	r3, #24
 8010508:	2200      	movs	r2, #0
 801050a:	2100      	movs	r1, #0
 801050c:	f7f6 ff9b 	bl	8007446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010516:	2358      	movs	r3, #88	@ 0x58
 8010518:	2200      	movs	r2, #0
 801051a:	2180      	movs	r1, #128	@ 0x80
 801051c:	f7f6 ff93 	bl	8007446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010526:	23c0      	movs	r3, #192	@ 0xc0
 8010528:	2200      	movs	r2, #0
 801052a:	2181      	movs	r1, #129	@ 0x81
 801052c:	f7f6 ff8b 	bl	8007446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010536:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801053a:	2200      	movs	r2, #0
 801053c:	2101      	movs	r1, #1
 801053e:	f7f6 ff82 	bl	8007446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801054c:	2200      	movs	r2, #0
 801054e:	2182      	movs	r1, #130	@ 0x82
 8010550:	f7f6 ff79 	bl	8007446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20004394 	.word	0x20004394
 8010564:	40005c00 	.word	0x40005c00

08010568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801057e:	4618      	mov	r0, r3
 8010580:	f7f5 fb69 	bl	8005c56 <HAL_PCD_Start>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f97e 	bl	801088c <USBD_Get_USB_Status>
 8010590:	4603      	mov	r3, r0
 8010592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010594:	7bbb      	ldrb	r3, [r7, #14]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	4608      	mov	r0, r1
 80105a8:	4611      	mov	r1, r2
 80105aa:	461a      	mov	r2, r3
 80105ac:	4603      	mov	r3, r0
 80105ae:	70fb      	strb	r3, [r7, #3]
 80105b0:	460b      	mov	r3, r1
 80105b2:	70bb      	strb	r3, [r7, #2]
 80105b4:	4613      	mov	r3, r2
 80105b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80105c6:	78bb      	ldrb	r3, [r7, #2]
 80105c8:	883a      	ldrh	r2, [r7, #0]
 80105ca:	78f9      	ldrb	r1, [r7, #3]
 80105cc:	f7f5 fcb0 	bl	8005f30 <HAL_PCD_EP_Open>
 80105d0:	4603      	mov	r3, r0
 80105d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
 80105d6:	4618      	mov	r0, r3
 80105d8:	f000 f958 	bl	801088c <USBD_Get_USB_Status>
 80105dc:	4603      	mov	r3, r0
 80105de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b084      	sub	sp, #16
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
 80105f2:	460b      	mov	r3, r1
 80105f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105fa:	2300      	movs	r3, #0
 80105fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010604:	78fa      	ldrb	r2, [r7, #3]
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7f5 fcee 	bl	8005fea <HAL_PCD_EP_Close>
 801060e:	4603      	mov	r3, r0
 8010610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010612:	7bfb      	ldrb	r3, [r7, #15]
 8010614:	4618      	mov	r0, r3
 8010616:	f000 f939 	bl	801088c <USBD_Get_USB_Status>
 801061a:	4603      	mov	r3, r0
 801061c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801061e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010638:	2300      	movs	r3, #0
 801063a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010642:	78fa      	ldrb	r2, [r7, #3]
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f7f5 fd97 	bl	800617a <HAL_PCD_EP_SetStall>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	4618      	mov	r0, r3
 8010654:	f000 f91a 	bl	801088c <USBD_Get_USB_Status>
 8010658:	4603      	mov	r3, r0
 801065a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801065c:	7bbb      	ldrb	r3, [r7, #14]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b084      	sub	sp, #16
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	460b      	mov	r3, r1
 8010670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010672:	2300      	movs	r3, #0
 8010674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010676:	2300      	movs	r3, #0
 8010678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010680:	78fa      	ldrb	r2, [r7, #3]
 8010682:	4611      	mov	r1, r2
 8010684:	4618      	mov	r0, r3
 8010686:	f7f5 fdca 	bl	800621e <HAL_PCD_EP_ClrStall>
 801068a:	4603      	mov	r3, r0
 801068c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	4618      	mov	r0, r3
 8010692:	f000 f8fb 	bl	801088c <USBD_Get_USB_Status>
 8010696:	4603      	mov	r3, r0
 8010698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801069a:	7bbb      	ldrb	r3, [r7, #14]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80106b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80106b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	da0b      	bge.n	80106d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80106c0:	78fb      	ldrb	r3, [r7, #3]
 80106c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106c6:	68f9      	ldr	r1, [r7, #12]
 80106c8:	4613      	mov	r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	440b      	add	r3, r1
 80106d2:	3312      	adds	r3, #18
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	e00b      	b.n	80106f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80106d8:	78fb      	ldrb	r3, [r7, #3]
 80106da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106de:	68f9      	ldr	r1, [r7, #12]
 80106e0:	4613      	mov	r3, r2
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	4413      	add	r3, r2
 80106e6:	00db      	lsls	r3, r3, #3
 80106e8:	440b      	add	r3, r1
 80106ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80106ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010716:	78fa      	ldrb	r2, [r7, #3]
 8010718:	4611      	mov	r1, r2
 801071a:	4618      	mov	r0, r3
 801071c:	f7f5 fbe4 	bl	8005ee8 <HAL_PCD_SetAddress>
 8010720:	4603      	mov	r3, r0
 8010722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010724:	7bfb      	ldrb	r3, [r7, #15]
 8010726:	4618      	mov	r0, r3
 8010728:	f000 f8b0 	bl	801088c <USBD_Get_USB_Status>
 801072c:	4603      	mov	r3, r0
 801072e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010730:	7bbb      	ldrb	r3, [r7, #14]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b086      	sub	sp, #24
 801073e:	af00      	add	r7, sp, #0
 8010740:	60f8      	str	r0, [r7, #12]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
 8010746:	460b      	mov	r3, r1
 8010748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074a:	2300      	movs	r3, #0
 801074c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010758:	7af9      	ldrb	r1, [r7, #11]
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	f7f5 fcd5 	bl	800610c <HAL_PCD_EP_Transmit>
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010766:	7dfb      	ldrb	r3, [r7, #23]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f88f 	bl	801088c <USBD_Get_USB_Status>
 801076e:	4603      	mov	r3, r0
 8010770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010772:	7dbb      	ldrb	r3, [r7, #22]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	607a      	str	r2, [r7, #4]
 8010786:	603b      	str	r3, [r7, #0]
 8010788:	460b      	mov	r3, r1
 801078a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010790:	2300      	movs	r3, #0
 8010792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801079a:	7af9      	ldrb	r1, [r7, #11]
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	f7f5 fc6b 	bl	800607a <HAL_PCD_EP_Receive>
 80107a4:	4603      	mov	r3, r0
 80107a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f000 f86e 	bl	801088c <USBD_Get_USB_Status>
 80107b0:	4603      	mov	r3, r0
 80107b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3718      	adds	r7, #24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	460b      	mov	r3, r1
 80107c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80107d0:	78fa      	ldrb	r2, [r7, #3]
 80107d2:	4611      	mov	r1, r2
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7f5 fc81 	bl	80060dc <HAL_PCD_EP_GetRxCount>
 80107da:	4603      	mov	r3, r0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80107f0:	78fb      	ldrb	r3, [r7, #3]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <HAL_PCDEx_LPM_Callback+0x18>
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d013      	beq.n	8010822 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80107fa:	e023      	b.n	8010844 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	7a5b      	ldrb	r3, [r3, #9]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d007      	beq.n	8010814 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010804:	f000 f83c 	bl	8010880 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010808:	4b10      	ldr	r3, [pc, #64]	@ (801084c <HAL_PCDEx_LPM_Callback+0x68>)
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	4a0f      	ldr	r2, [pc, #60]	@ (801084c <HAL_PCDEx_LPM_Callback+0x68>)
 801080e:	f023 0306 	bic.w	r3, r3, #6
 8010812:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fcc2 	bl	800f1a4 <USBD_LL_Resume>
    break;
 8010820:	e010      	b.n	8010844 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fca5 	bl	800f178 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	7a5b      	ldrb	r3, [r3, #9]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d005      	beq.n	8010842 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010836:	4b05      	ldr	r3, [pc, #20]	@ (801084c <HAL_PCDEx_LPM_Callback+0x68>)
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	4a04      	ldr	r2, [pc, #16]	@ (801084c <HAL_PCDEx_LPM_Callback+0x68>)
 801083c:	f043 0306 	orr.w	r3, r3, #6
 8010840:	6113      	str	r3, [r2, #16]
    break;
 8010842:	bf00      	nop
}
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	e000ed00 	.word	0xe000ed00

08010850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010858:	4b03      	ldr	r3, [pc, #12]	@ (8010868 <USBD_static_malloc+0x18>)
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	20004670 	.word	0x20004670

0801086c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]

}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010884:	f7f0 fe72 	bl	800156c <SystemClock_Config>
}
 8010888:	bf00      	nop
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801089a:	79fb      	ldrb	r3, [r7, #7]
 801089c:	2b03      	cmp	r3, #3
 801089e:	d817      	bhi.n	80108d0 <USBD_Get_USB_Status+0x44>
 80108a0:	a201      	add	r2, pc, #4	@ (adr r2, 80108a8 <USBD_Get_USB_Status+0x1c>)
 80108a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a6:	bf00      	nop
 80108a8:	080108b9 	.word	0x080108b9
 80108ac:	080108bf 	.word	0x080108bf
 80108b0:	080108c5 	.word	0x080108c5
 80108b4:	080108cb 	.word	0x080108cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	73fb      	strb	r3, [r7, #15]
    break;
 80108bc:	e00b      	b.n	80108d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108be:	2303      	movs	r3, #3
 80108c0:	73fb      	strb	r3, [r7, #15]
    break;
 80108c2:	e008      	b.n	80108d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108c4:	2301      	movs	r3, #1
 80108c6:	73fb      	strb	r3, [r7, #15]
    break;
 80108c8:	e005      	b.n	80108d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108ca:	2303      	movs	r3, #3
 80108cc:	73fb      	strb	r3, [r7, #15]
    break;
 80108ce:	e002      	b.n	80108d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108d0:	2303      	movs	r3, #3
 80108d2:	73fb      	strb	r3, [r7, #15]
    break;
 80108d4:	bf00      	nop
  }
  return usb_status;
 80108d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3714      	adds	r7, #20
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <__cvt>:
 80108e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108e8:	ec57 6b10 	vmov	r6, r7, d0
 80108ec:	2f00      	cmp	r7, #0
 80108ee:	460c      	mov	r4, r1
 80108f0:	4619      	mov	r1, r3
 80108f2:	463b      	mov	r3, r7
 80108f4:	bfbb      	ittet	lt
 80108f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80108fa:	461f      	movlt	r7, r3
 80108fc:	2300      	movge	r3, #0
 80108fe:	232d      	movlt	r3, #45	@ 0x2d
 8010900:	700b      	strb	r3, [r1, #0]
 8010902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010904:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010908:	4691      	mov	r9, r2
 801090a:	f023 0820 	bic.w	r8, r3, #32
 801090e:	bfbc      	itt	lt
 8010910:	4632      	movlt	r2, r6
 8010912:	4616      	movlt	r6, r2
 8010914:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010918:	d005      	beq.n	8010926 <__cvt+0x42>
 801091a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801091e:	d100      	bne.n	8010922 <__cvt+0x3e>
 8010920:	3401      	adds	r4, #1
 8010922:	2102      	movs	r1, #2
 8010924:	e000      	b.n	8010928 <__cvt+0x44>
 8010926:	2103      	movs	r1, #3
 8010928:	ab03      	add	r3, sp, #12
 801092a:	9301      	str	r3, [sp, #4]
 801092c:	ab02      	add	r3, sp, #8
 801092e:	9300      	str	r3, [sp, #0]
 8010930:	ec47 6b10 	vmov	d0, r6, r7
 8010934:	4653      	mov	r3, sl
 8010936:	4622      	mov	r2, r4
 8010938:	f001 f876 	bl	8011a28 <_dtoa_r>
 801093c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010940:	4605      	mov	r5, r0
 8010942:	d119      	bne.n	8010978 <__cvt+0x94>
 8010944:	f019 0f01 	tst.w	r9, #1
 8010948:	d00e      	beq.n	8010968 <__cvt+0x84>
 801094a:	eb00 0904 	add.w	r9, r0, r4
 801094e:	2200      	movs	r2, #0
 8010950:	2300      	movs	r3, #0
 8010952:	4630      	mov	r0, r6
 8010954:	4639      	mov	r1, r7
 8010956:	f7f0 f8df 	bl	8000b18 <__aeabi_dcmpeq>
 801095a:	b108      	cbz	r0, 8010960 <__cvt+0x7c>
 801095c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010960:	2230      	movs	r2, #48	@ 0x30
 8010962:	9b03      	ldr	r3, [sp, #12]
 8010964:	454b      	cmp	r3, r9
 8010966:	d31e      	bcc.n	80109a6 <__cvt+0xc2>
 8010968:	9b03      	ldr	r3, [sp, #12]
 801096a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801096c:	1b5b      	subs	r3, r3, r5
 801096e:	4628      	mov	r0, r5
 8010970:	6013      	str	r3, [r2, #0]
 8010972:	b004      	add	sp, #16
 8010974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010978:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801097c:	eb00 0904 	add.w	r9, r0, r4
 8010980:	d1e5      	bne.n	801094e <__cvt+0x6a>
 8010982:	7803      	ldrb	r3, [r0, #0]
 8010984:	2b30      	cmp	r3, #48	@ 0x30
 8010986:	d10a      	bne.n	801099e <__cvt+0xba>
 8010988:	2200      	movs	r2, #0
 801098a:	2300      	movs	r3, #0
 801098c:	4630      	mov	r0, r6
 801098e:	4639      	mov	r1, r7
 8010990:	f7f0 f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8010994:	b918      	cbnz	r0, 801099e <__cvt+0xba>
 8010996:	f1c4 0401 	rsb	r4, r4, #1
 801099a:	f8ca 4000 	str.w	r4, [sl]
 801099e:	f8da 3000 	ldr.w	r3, [sl]
 80109a2:	4499      	add	r9, r3
 80109a4:	e7d3      	b.n	801094e <__cvt+0x6a>
 80109a6:	1c59      	adds	r1, r3, #1
 80109a8:	9103      	str	r1, [sp, #12]
 80109aa:	701a      	strb	r2, [r3, #0]
 80109ac:	e7d9      	b.n	8010962 <__cvt+0x7e>

080109ae <__exponent>:
 80109ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109b0:	2900      	cmp	r1, #0
 80109b2:	bfba      	itte	lt
 80109b4:	4249      	neglt	r1, r1
 80109b6:	232d      	movlt	r3, #45	@ 0x2d
 80109b8:	232b      	movge	r3, #43	@ 0x2b
 80109ba:	2909      	cmp	r1, #9
 80109bc:	7002      	strb	r2, [r0, #0]
 80109be:	7043      	strb	r3, [r0, #1]
 80109c0:	dd29      	ble.n	8010a16 <__exponent+0x68>
 80109c2:	f10d 0307 	add.w	r3, sp, #7
 80109c6:	461d      	mov	r5, r3
 80109c8:	270a      	movs	r7, #10
 80109ca:	461a      	mov	r2, r3
 80109cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80109d0:	fb07 1416 	mls	r4, r7, r6, r1
 80109d4:	3430      	adds	r4, #48	@ 0x30
 80109d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80109da:	460c      	mov	r4, r1
 80109dc:	2c63      	cmp	r4, #99	@ 0x63
 80109de:	f103 33ff 	add.w	r3, r3, #4294967295
 80109e2:	4631      	mov	r1, r6
 80109e4:	dcf1      	bgt.n	80109ca <__exponent+0x1c>
 80109e6:	3130      	adds	r1, #48	@ 0x30
 80109e8:	1e94      	subs	r4, r2, #2
 80109ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80109ee:	1c41      	adds	r1, r0, #1
 80109f0:	4623      	mov	r3, r4
 80109f2:	42ab      	cmp	r3, r5
 80109f4:	d30a      	bcc.n	8010a0c <__exponent+0x5e>
 80109f6:	f10d 0309 	add.w	r3, sp, #9
 80109fa:	1a9b      	subs	r3, r3, r2
 80109fc:	42ac      	cmp	r4, r5
 80109fe:	bf88      	it	hi
 8010a00:	2300      	movhi	r3, #0
 8010a02:	3302      	adds	r3, #2
 8010a04:	4403      	add	r3, r0
 8010a06:	1a18      	subs	r0, r3, r0
 8010a08:	b003      	add	sp, #12
 8010a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010a10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010a14:	e7ed      	b.n	80109f2 <__exponent+0x44>
 8010a16:	2330      	movs	r3, #48	@ 0x30
 8010a18:	3130      	adds	r1, #48	@ 0x30
 8010a1a:	7083      	strb	r3, [r0, #2]
 8010a1c:	70c1      	strb	r1, [r0, #3]
 8010a1e:	1d03      	adds	r3, r0, #4
 8010a20:	e7f1      	b.n	8010a06 <__exponent+0x58>
	...

08010a24 <_printf_float>:
 8010a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a28:	b08d      	sub	sp, #52	@ 0x34
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010a30:	4616      	mov	r6, r2
 8010a32:	461f      	mov	r7, r3
 8010a34:	4605      	mov	r5, r0
 8010a36:	f000 feef 	bl	8011818 <_localeconv_r>
 8010a3a:	6803      	ldr	r3, [r0, #0]
 8010a3c:	9304      	str	r3, [sp, #16]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ef fc3e 	bl	80002c0 <strlen>
 8010a44:	2300      	movs	r3, #0
 8010a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a48:	f8d8 3000 	ldr.w	r3, [r8]
 8010a4c:	9005      	str	r0, [sp, #20]
 8010a4e:	3307      	adds	r3, #7
 8010a50:	f023 0307 	bic.w	r3, r3, #7
 8010a54:	f103 0208 	add.w	r2, r3, #8
 8010a58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8010a60:	f8c8 2000 	str.w	r2, [r8]
 8010a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010a6c:	9307      	str	r3, [sp, #28]
 8010a6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8010cec <_printf_float+0x2c8>)
 8010a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a80:	f7f0 f87c 	bl	8000b7c <__aeabi_dcmpun>
 8010a84:	bb70      	cbnz	r0, 8010ae4 <_printf_float+0xc0>
 8010a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a8a:	4b98      	ldr	r3, [pc, #608]	@ (8010cec <_printf_float+0x2c8>)
 8010a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a90:	f7f0 f856 	bl	8000b40 <__aeabi_dcmple>
 8010a94:	bb30      	cbnz	r0, 8010ae4 <_printf_float+0xc0>
 8010a96:	2200      	movs	r2, #0
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4640      	mov	r0, r8
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	f7f0 f845 	bl	8000b2c <__aeabi_dcmplt>
 8010aa2:	b110      	cbz	r0, 8010aaa <_printf_float+0x86>
 8010aa4:	232d      	movs	r3, #45	@ 0x2d
 8010aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010aaa:	4a91      	ldr	r2, [pc, #580]	@ (8010cf0 <_printf_float+0x2cc>)
 8010aac:	4b91      	ldr	r3, [pc, #580]	@ (8010cf4 <_printf_float+0x2d0>)
 8010aae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010ab2:	bf94      	ite	ls
 8010ab4:	4690      	movls	r8, r2
 8010ab6:	4698      	movhi	r8, r3
 8010ab8:	2303      	movs	r3, #3
 8010aba:	6123      	str	r3, [r4, #16]
 8010abc:	f02b 0304 	bic.w	r3, fp, #4
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	f04f 0900 	mov.w	r9, #0
 8010ac6:	9700      	str	r7, [sp, #0]
 8010ac8:	4633      	mov	r3, r6
 8010aca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010acc:	4621      	mov	r1, r4
 8010ace:	4628      	mov	r0, r5
 8010ad0:	f000 f9d2 	bl	8010e78 <_printf_common>
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	f040 808d 	bne.w	8010bf4 <_printf_float+0x1d0>
 8010ada:	f04f 30ff 	mov.w	r0, #4294967295
 8010ade:	b00d      	add	sp, #52	@ 0x34
 8010ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae4:	4642      	mov	r2, r8
 8010ae6:	464b      	mov	r3, r9
 8010ae8:	4640      	mov	r0, r8
 8010aea:	4649      	mov	r1, r9
 8010aec:	f7f0 f846 	bl	8000b7c <__aeabi_dcmpun>
 8010af0:	b140      	cbz	r0, 8010b04 <_printf_float+0xe0>
 8010af2:	464b      	mov	r3, r9
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	bfbc      	itt	lt
 8010af8:	232d      	movlt	r3, #45	@ 0x2d
 8010afa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010afe:	4a7e      	ldr	r2, [pc, #504]	@ (8010cf8 <_printf_float+0x2d4>)
 8010b00:	4b7e      	ldr	r3, [pc, #504]	@ (8010cfc <_printf_float+0x2d8>)
 8010b02:	e7d4      	b.n	8010aae <_printf_float+0x8a>
 8010b04:	6863      	ldr	r3, [r4, #4]
 8010b06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010b0a:	9206      	str	r2, [sp, #24]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	d13b      	bne.n	8010b88 <_printf_float+0x164>
 8010b10:	2306      	movs	r3, #6
 8010b12:	6063      	str	r3, [r4, #4]
 8010b14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010b18:	2300      	movs	r3, #0
 8010b1a:	6022      	str	r2, [r4, #0]
 8010b1c:	9303      	str	r3, [sp, #12]
 8010b1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b24:	ab09      	add	r3, sp, #36	@ 0x24
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	6861      	ldr	r1, [r4, #4]
 8010b2a:	ec49 8b10 	vmov	d0, r8, r9
 8010b2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7ff fed6 	bl	80108e4 <__cvt>
 8010b38:	9b06      	ldr	r3, [sp, #24]
 8010b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b3c:	2b47      	cmp	r3, #71	@ 0x47
 8010b3e:	4680      	mov	r8, r0
 8010b40:	d129      	bne.n	8010b96 <_printf_float+0x172>
 8010b42:	1cc8      	adds	r0, r1, #3
 8010b44:	db02      	blt.n	8010b4c <_printf_float+0x128>
 8010b46:	6863      	ldr	r3, [r4, #4]
 8010b48:	4299      	cmp	r1, r3
 8010b4a:	dd41      	ble.n	8010bd0 <_printf_float+0x1ac>
 8010b4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b50:	fa5f fa8a 	uxtb.w	sl, sl
 8010b54:	3901      	subs	r1, #1
 8010b56:	4652      	mov	r2, sl
 8010b58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010b5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b5e:	f7ff ff26 	bl	80109ae <__exponent>
 8010b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b64:	1813      	adds	r3, r2, r0
 8010b66:	2a01      	cmp	r2, #1
 8010b68:	4681      	mov	r9, r0
 8010b6a:	6123      	str	r3, [r4, #16]
 8010b6c:	dc02      	bgt.n	8010b74 <_printf_float+0x150>
 8010b6e:	6822      	ldr	r2, [r4, #0]
 8010b70:	07d2      	lsls	r2, r2, #31
 8010b72:	d501      	bpl.n	8010b78 <_printf_float+0x154>
 8010b74:	3301      	adds	r3, #1
 8010b76:	6123      	str	r3, [r4, #16]
 8010b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d0a2      	beq.n	8010ac6 <_printf_float+0xa2>
 8010b80:	232d      	movs	r3, #45	@ 0x2d
 8010b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b86:	e79e      	b.n	8010ac6 <_printf_float+0xa2>
 8010b88:	9a06      	ldr	r2, [sp, #24]
 8010b8a:	2a47      	cmp	r2, #71	@ 0x47
 8010b8c:	d1c2      	bne.n	8010b14 <_printf_float+0xf0>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1c0      	bne.n	8010b14 <_printf_float+0xf0>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e7bd      	b.n	8010b12 <_printf_float+0xee>
 8010b96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b9a:	d9db      	bls.n	8010b54 <_printf_float+0x130>
 8010b9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010ba0:	d118      	bne.n	8010bd4 <_printf_float+0x1b0>
 8010ba2:	2900      	cmp	r1, #0
 8010ba4:	6863      	ldr	r3, [r4, #4]
 8010ba6:	dd0b      	ble.n	8010bc0 <_printf_float+0x19c>
 8010ba8:	6121      	str	r1, [r4, #16]
 8010baa:	b913      	cbnz	r3, 8010bb2 <_printf_float+0x18e>
 8010bac:	6822      	ldr	r2, [r4, #0]
 8010bae:	07d0      	lsls	r0, r2, #31
 8010bb0:	d502      	bpl.n	8010bb8 <_printf_float+0x194>
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	440b      	add	r3, r1
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010bba:	f04f 0900 	mov.w	r9, #0
 8010bbe:	e7db      	b.n	8010b78 <_printf_float+0x154>
 8010bc0:	b913      	cbnz	r3, 8010bc8 <_printf_float+0x1a4>
 8010bc2:	6822      	ldr	r2, [r4, #0]
 8010bc4:	07d2      	lsls	r2, r2, #31
 8010bc6:	d501      	bpl.n	8010bcc <_printf_float+0x1a8>
 8010bc8:	3302      	adds	r3, #2
 8010bca:	e7f4      	b.n	8010bb6 <_printf_float+0x192>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	e7f2      	b.n	8010bb6 <_printf_float+0x192>
 8010bd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	db05      	blt.n	8010be6 <_printf_float+0x1c2>
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	6121      	str	r1, [r4, #16]
 8010bde:	07d8      	lsls	r0, r3, #31
 8010be0:	d5ea      	bpl.n	8010bb8 <_printf_float+0x194>
 8010be2:	1c4b      	adds	r3, r1, #1
 8010be4:	e7e7      	b.n	8010bb6 <_printf_float+0x192>
 8010be6:	2900      	cmp	r1, #0
 8010be8:	bfd4      	ite	le
 8010bea:	f1c1 0202 	rsble	r2, r1, #2
 8010bee:	2201      	movgt	r2, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	e7e0      	b.n	8010bb6 <_printf_float+0x192>
 8010bf4:	6823      	ldr	r3, [r4, #0]
 8010bf6:	055a      	lsls	r2, r3, #21
 8010bf8:	d407      	bmi.n	8010c0a <_printf_float+0x1e6>
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	4642      	mov	r2, r8
 8010bfe:	4631      	mov	r1, r6
 8010c00:	4628      	mov	r0, r5
 8010c02:	47b8      	blx	r7
 8010c04:	3001      	adds	r0, #1
 8010c06:	d12b      	bne.n	8010c60 <_printf_float+0x23c>
 8010c08:	e767      	b.n	8010ada <_printf_float+0xb6>
 8010c0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010c0e:	f240 80dd 	bls.w	8010dcc <_printf_float+0x3a8>
 8010c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c16:	2200      	movs	r2, #0
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f7ef ff7d 	bl	8000b18 <__aeabi_dcmpeq>
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d033      	beq.n	8010c8a <_printf_float+0x266>
 8010c22:	4a37      	ldr	r2, [pc, #220]	@ (8010d00 <_printf_float+0x2dc>)
 8010c24:	2301      	movs	r3, #1
 8010c26:	4631      	mov	r1, r6
 8010c28:	4628      	mov	r0, r5
 8010c2a:	47b8      	blx	r7
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	f43f af54 	beq.w	8010ada <_printf_float+0xb6>
 8010c32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010c36:	4543      	cmp	r3, r8
 8010c38:	db02      	blt.n	8010c40 <_printf_float+0x21c>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	07d8      	lsls	r0, r3, #31
 8010c3e:	d50f      	bpl.n	8010c60 <_printf_float+0x23c>
 8010c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c44:	4631      	mov	r1, r6
 8010c46:	4628      	mov	r0, r5
 8010c48:	47b8      	blx	r7
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	f43f af45 	beq.w	8010ada <_printf_float+0xb6>
 8010c50:	f04f 0900 	mov.w	r9, #0
 8010c54:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c58:	f104 0a1a 	add.w	sl, r4, #26
 8010c5c:	45c8      	cmp	r8, r9
 8010c5e:	dc09      	bgt.n	8010c74 <_printf_float+0x250>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	079b      	lsls	r3, r3, #30
 8010c64:	f100 8103 	bmi.w	8010e6e <_printf_float+0x44a>
 8010c68:	68e0      	ldr	r0, [r4, #12]
 8010c6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c6c:	4298      	cmp	r0, r3
 8010c6e:	bfb8      	it	lt
 8010c70:	4618      	movlt	r0, r3
 8010c72:	e734      	b.n	8010ade <_printf_float+0xba>
 8010c74:	2301      	movs	r3, #1
 8010c76:	4652      	mov	r2, sl
 8010c78:	4631      	mov	r1, r6
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	47b8      	blx	r7
 8010c7e:	3001      	adds	r0, #1
 8010c80:	f43f af2b 	beq.w	8010ada <_printf_float+0xb6>
 8010c84:	f109 0901 	add.w	r9, r9, #1
 8010c88:	e7e8      	b.n	8010c5c <_printf_float+0x238>
 8010c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dc39      	bgt.n	8010d04 <_printf_float+0x2e0>
 8010c90:	4a1b      	ldr	r2, [pc, #108]	@ (8010d00 <_printf_float+0x2dc>)
 8010c92:	2301      	movs	r3, #1
 8010c94:	4631      	mov	r1, r6
 8010c96:	4628      	mov	r0, r5
 8010c98:	47b8      	blx	r7
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	f43f af1d 	beq.w	8010ada <_printf_float+0xb6>
 8010ca0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010ca4:	ea59 0303 	orrs.w	r3, r9, r3
 8010ca8:	d102      	bne.n	8010cb0 <_printf_float+0x28c>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	07d9      	lsls	r1, r3, #31
 8010cae:	d5d7      	bpl.n	8010c60 <_printf_float+0x23c>
 8010cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cb4:	4631      	mov	r1, r6
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	47b8      	blx	r7
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f43f af0d 	beq.w	8010ada <_printf_float+0xb6>
 8010cc0:	f04f 0a00 	mov.w	sl, #0
 8010cc4:	f104 0b1a 	add.w	fp, r4, #26
 8010cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cca:	425b      	negs	r3, r3
 8010ccc:	4553      	cmp	r3, sl
 8010cce:	dc01      	bgt.n	8010cd4 <_printf_float+0x2b0>
 8010cd0:	464b      	mov	r3, r9
 8010cd2:	e793      	b.n	8010bfc <_printf_float+0x1d8>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	465a      	mov	r2, fp
 8010cd8:	4631      	mov	r1, r6
 8010cda:	4628      	mov	r0, r5
 8010cdc:	47b8      	blx	r7
 8010cde:	3001      	adds	r0, #1
 8010ce0:	f43f aefb 	beq.w	8010ada <_printf_float+0xb6>
 8010ce4:	f10a 0a01 	add.w	sl, sl, #1
 8010ce8:	e7ee      	b.n	8010cc8 <_printf_float+0x2a4>
 8010cea:	bf00      	nop
 8010cec:	7fefffff 	.word	0x7fefffff
 8010cf0:	08015b74 	.word	0x08015b74
 8010cf4:	08015b78 	.word	0x08015b78
 8010cf8:	08015b7c 	.word	0x08015b7c
 8010cfc:	08015b80 	.word	0x08015b80
 8010d00:	08015b84 	.word	0x08015b84
 8010d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d0a:	4553      	cmp	r3, sl
 8010d0c:	bfa8      	it	ge
 8010d0e:	4653      	movge	r3, sl
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	4699      	mov	r9, r3
 8010d14:	dc36      	bgt.n	8010d84 <_printf_float+0x360>
 8010d16:	f04f 0b00 	mov.w	fp, #0
 8010d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d1e:	f104 021a 	add.w	r2, r4, #26
 8010d22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010d24:	9306      	str	r3, [sp, #24]
 8010d26:	eba3 0309 	sub.w	r3, r3, r9
 8010d2a:	455b      	cmp	r3, fp
 8010d2c:	dc31      	bgt.n	8010d92 <_printf_float+0x36e>
 8010d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d30:	459a      	cmp	sl, r3
 8010d32:	dc3a      	bgt.n	8010daa <_printf_float+0x386>
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	07da      	lsls	r2, r3, #31
 8010d38:	d437      	bmi.n	8010daa <_printf_float+0x386>
 8010d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d3c:	ebaa 0903 	sub.w	r9, sl, r3
 8010d40:	9b06      	ldr	r3, [sp, #24]
 8010d42:	ebaa 0303 	sub.w	r3, sl, r3
 8010d46:	4599      	cmp	r9, r3
 8010d48:	bfa8      	it	ge
 8010d4a:	4699      	movge	r9, r3
 8010d4c:	f1b9 0f00 	cmp.w	r9, #0
 8010d50:	dc33      	bgt.n	8010dba <_printf_float+0x396>
 8010d52:	f04f 0800 	mov.w	r8, #0
 8010d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d5a:	f104 0b1a 	add.w	fp, r4, #26
 8010d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d60:	ebaa 0303 	sub.w	r3, sl, r3
 8010d64:	eba3 0309 	sub.w	r3, r3, r9
 8010d68:	4543      	cmp	r3, r8
 8010d6a:	f77f af79 	ble.w	8010c60 <_printf_float+0x23c>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	465a      	mov	r2, fp
 8010d72:	4631      	mov	r1, r6
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b8      	blx	r7
 8010d78:	3001      	adds	r0, #1
 8010d7a:	f43f aeae 	beq.w	8010ada <_printf_float+0xb6>
 8010d7e:	f108 0801 	add.w	r8, r8, #1
 8010d82:	e7ec      	b.n	8010d5e <_printf_float+0x33a>
 8010d84:	4642      	mov	r2, r8
 8010d86:	4631      	mov	r1, r6
 8010d88:	4628      	mov	r0, r5
 8010d8a:	47b8      	blx	r7
 8010d8c:	3001      	adds	r0, #1
 8010d8e:	d1c2      	bne.n	8010d16 <_printf_float+0x2f2>
 8010d90:	e6a3      	b.n	8010ada <_printf_float+0xb6>
 8010d92:	2301      	movs	r3, #1
 8010d94:	4631      	mov	r1, r6
 8010d96:	4628      	mov	r0, r5
 8010d98:	9206      	str	r2, [sp, #24]
 8010d9a:	47b8      	blx	r7
 8010d9c:	3001      	adds	r0, #1
 8010d9e:	f43f ae9c 	beq.w	8010ada <_printf_float+0xb6>
 8010da2:	9a06      	ldr	r2, [sp, #24]
 8010da4:	f10b 0b01 	add.w	fp, fp, #1
 8010da8:	e7bb      	b.n	8010d22 <_printf_float+0x2fe>
 8010daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dae:	4631      	mov	r1, r6
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b8      	blx	r7
 8010db4:	3001      	adds	r0, #1
 8010db6:	d1c0      	bne.n	8010d3a <_printf_float+0x316>
 8010db8:	e68f      	b.n	8010ada <_printf_float+0xb6>
 8010dba:	9a06      	ldr	r2, [sp, #24]
 8010dbc:	464b      	mov	r3, r9
 8010dbe:	4442      	add	r2, r8
 8010dc0:	4631      	mov	r1, r6
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	47b8      	blx	r7
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	d1c3      	bne.n	8010d52 <_printf_float+0x32e>
 8010dca:	e686      	b.n	8010ada <_printf_float+0xb6>
 8010dcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010dd0:	f1ba 0f01 	cmp.w	sl, #1
 8010dd4:	dc01      	bgt.n	8010dda <_printf_float+0x3b6>
 8010dd6:	07db      	lsls	r3, r3, #31
 8010dd8:	d536      	bpl.n	8010e48 <_printf_float+0x424>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	4642      	mov	r2, r8
 8010dde:	4631      	mov	r1, r6
 8010de0:	4628      	mov	r0, r5
 8010de2:	47b8      	blx	r7
 8010de4:	3001      	adds	r0, #1
 8010de6:	f43f ae78 	beq.w	8010ada <_printf_float+0xb6>
 8010dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dee:	4631      	mov	r1, r6
 8010df0:	4628      	mov	r0, r5
 8010df2:	47b8      	blx	r7
 8010df4:	3001      	adds	r0, #1
 8010df6:	f43f ae70 	beq.w	8010ada <_printf_float+0xb6>
 8010dfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010dfe:	2200      	movs	r2, #0
 8010e00:	2300      	movs	r3, #0
 8010e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e06:	f7ef fe87 	bl	8000b18 <__aeabi_dcmpeq>
 8010e0a:	b9c0      	cbnz	r0, 8010e3e <_printf_float+0x41a>
 8010e0c:	4653      	mov	r3, sl
 8010e0e:	f108 0201 	add.w	r2, r8, #1
 8010e12:	4631      	mov	r1, r6
 8010e14:	4628      	mov	r0, r5
 8010e16:	47b8      	blx	r7
 8010e18:	3001      	adds	r0, #1
 8010e1a:	d10c      	bne.n	8010e36 <_printf_float+0x412>
 8010e1c:	e65d      	b.n	8010ada <_printf_float+0xb6>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	465a      	mov	r2, fp
 8010e22:	4631      	mov	r1, r6
 8010e24:	4628      	mov	r0, r5
 8010e26:	47b8      	blx	r7
 8010e28:	3001      	adds	r0, #1
 8010e2a:	f43f ae56 	beq.w	8010ada <_printf_float+0xb6>
 8010e2e:	f108 0801 	add.w	r8, r8, #1
 8010e32:	45d0      	cmp	r8, sl
 8010e34:	dbf3      	blt.n	8010e1e <_printf_float+0x3fa>
 8010e36:	464b      	mov	r3, r9
 8010e38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010e3c:	e6df      	b.n	8010bfe <_printf_float+0x1da>
 8010e3e:	f04f 0800 	mov.w	r8, #0
 8010e42:	f104 0b1a 	add.w	fp, r4, #26
 8010e46:	e7f4      	b.n	8010e32 <_printf_float+0x40e>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	4642      	mov	r2, r8
 8010e4c:	e7e1      	b.n	8010e12 <_printf_float+0x3ee>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	464a      	mov	r2, r9
 8010e52:	4631      	mov	r1, r6
 8010e54:	4628      	mov	r0, r5
 8010e56:	47b8      	blx	r7
 8010e58:	3001      	adds	r0, #1
 8010e5a:	f43f ae3e 	beq.w	8010ada <_printf_float+0xb6>
 8010e5e:	f108 0801 	add.w	r8, r8, #1
 8010e62:	68e3      	ldr	r3, [r4, #12]
 8010e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e66:	1a5b      	subs	r3, r3, r1
 8010e68:	4543      	cmp	r3, r8
 8010e6a:	dcf0      	bgt.n	8010e4e <_printf_float+0x42a>
 8010e6c:	e6fc      	b.n	8010c68 <_printf_float+0x244>
 8010e6e:	f04f 0800 	mov.w	r8, #0
 8010e72:	f104 0919 	add.w	r9, r4, #25
 8010e76:	e7f4      	b.n	8010e62 <_printf_float+0x43e>

08010e78 <_printf_common>:
 8010e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7c:	4616      	mov	r6, r2
 8010e7e:	4698      	mov	r8, r3
 8010e80:	688a      	ldr	r2, [r1, #8]
 8010e82:	690b      	ldr	r3, [r1, #16]
 8010e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	bfb8      	it	lt
 8010e8c:	4613      	movlt	r3, r2
 8010e8e:	6033      	str	r3, [r6, #0]
 8010e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e94:	4607      	mov	r7, r0
 8010e96:	460c      	mov	r4, r1
 8010e98:	b10a      	cbz	r2, 8010e9e <_printf_common+0x26>
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	6033      	str	r3, [r6, #0]
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	0699      	lsls	r1, r3, #26
 8010ea2:	bf42      	ittt	mi
 8010ea4:	6833      	ldrmi	r3, [r6, #0]
 8010ea6:	3302      	addmi	r3, #2
 8010ea8:	6033      	strmi	r3, [r6, #0]
 8010eaa:	6825      	ldr	r5, [r4, #0]
 8010eac:	f015 0506 	ands.w	r5, r5, #6
 8010eb0:	d106      	bne.n	8010ec0 <_printf_common+0x48>
 8010eb2:	f104 0a19 	add.w	sl, r4, #25
 8010eb6:	68e3      	ldr	r3, [r4, #12]
 8010eb8:	6832      	ldr	r2, [r6, #0]
 8010eba:	1a9b      	subs	r3, r3, r2
 8010ebc:	42ab      	cmp	r3, r5
 8010ebe:	dc26      	bgt.n	8010f0e <_printf_common+0x96>
 8010ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	3b00      	subs	r3, #0
 8010ec8:	bf18      	it	ne
 8010eca:	2301      	movne	r3, #1
 8010ecc:	0692      	lsls	r2, r2, #26
 8010ece:	d42b      	bmi.n	8010f28 <_printf_common+0xb0>
 8010ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ed4:	4641      	mov	r1, r8
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	47c8      	blx	r9
 8010eda:	3001      	adds	r0, #1
 8010edc:	d01e      	beq.n	8010f1c <_printf_common+0xa4>
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	6922      	ldr	r2, [r4, #16]
 8010ee2:	f003 0306 	and.w	r3, r3, #6
 8010ee6:	2b04      	cmp	r3, #4
 8010ee8:	bf02      	ittt	eq
 8010eea:	68e5      	ldreq	r5, [r4, #12]
 8010eec:	6833      	ldreq	r3, [r6, #0]
 8010eee:	1aed      	subeq	r5, r5, r3
 8010ef0:	68a3      	ldr	r3, [r4, #8]
 8010ef2:	bf0c      	ite	eq
 8010ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ef8:	2500      	movne	r5, #0
 8010efa:	4293      	cmp	r3, r2
 8010efc:	bfc4      	itt	gt
 8010efe:	1a9b      	subgt	r3, r3, r2
 8010f00:	18ed      	addgt	r5, r5, r3
 8010f02:	2600      	movs	r6, #0
 8010f04:	341a      	adds	r4, #26
 8010f06:	42b5      	cmp	r5, r6
 8010f08:	d11a      	bne.n	8010f40 <_printf_common+0xc8>
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	e008      	b.n	8010f20 <_printf_common+0xa8>
 8010f0e:	2301      	movs	r3, #1
 8010f10:	4652      	mov	r2, sl
 8010f12:	4641      	mov	r1, r8
 8010f14:	4638      	mov	r0, r7
 8010f16:	47c8      	blx	r9
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d103      	bne.n	8010f24 <_printf_common+0xac>
 8010f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f24:	3501      	adds	r5, #1
 8010f26:	e7c6      	b.n	8010eb6 <_printf_common+0x3e>
 8010f28:	18e1      	adds	r1, r4, r3
 8010f2a:	1c5a      	adds	r2, r3, #1
 8010f2c:	2030      	movs	r0, #48	@ 0x30
 8010f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f32:	4422      	add	r2, r4
 8010f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f3c:	3302      	adds	r3, #2
 8010f3e:	e7c7      	b.n	8010ed0 <_printf_common+0x58>
 8010f40:	2301      	movs	r3, #1
 8010f42:	4622      	mov	r2, r4
 8010f44:	4641      	mov	r1, r8
 8010f46:	4638      	mov	r0, r7
 8010f48:	47c8      	blx	r9
 8010f4a:	3001      	adds	r0, #1
 8010f4c:	d0e6      	beq.n	8010f1c <_printf_common+0xa4>
 8010f4e:	3601      	adds	r6, #1
 8010f50:	e7d9      	b.n	8010f06 <_printf_common+0x8e>
	...

08010f54 <_printf_i>:
 8010f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f58:	7e0f      	ldrb	r7, [r1, #24]
 8010f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f5c:	2f78      	cmp	r7, #120	@ 0x78
 8010f5e:	4691      	mov	r9, r2
 8010f60:	4680      	mov	r8, r0
 8010f62:	460c      	mov	r4, r1
 8010f64:	469a      	mov	sl, r3
 8010f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f6a:	d807      	bhi.n	8010f7c <_printf_i+0x28>
 8010f6c:	2f62      	cmp	r7, #98	@ 0x62
 8010f6e:	d80a      	bhi.n	8010f86 <_printf_i+0x32>
 8010f70:	2f00      	cmp	r7, #0
 8010f72:	f000 80d2 	beq.w	801111a <_printf_i+0x1c6>
 8010f76:	2f58      	cmp	r7, #88	@ 0x58
 8010f78:	f000 80b9 	beq.w	80110ee <_printf_i+0x19a>
 8010f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010f84:	e03a      	b.n	8010ffc <_printf_i+0xa8>
 8010f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f8a:	2b15      	cmp	r3, #21
 8010f8c:	d8f6      	bhi.n	8010f7c <_printf_i+0x28>
 8010f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8010f94 <_printf_i+0x40>)
 8010f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f94:	08010fed 	.word	0x08010fed
 8010f98:	08011001 	.word	0x08011001
 8010f9c:	08010f7d 	.word	0x08010f7d
 8010fa0:	08010f7d 	.word	0x08010f7d
 8010fa4:	08010f7d 	.word	0x08010f7d
 8010fa8:	08010f7d 	.word	0x08010f7d
 8010fac:	08011001 	.word	0x08011001
 8010fb0:	08010f7d 	.word	0x08010f7d
 8010fb4:	08010f7d 	.word	0x08010f7d
 8010fb8:	08010f7d 	.word	0x08010f7d
 8010fbc:	08010f7d 	.word	0x08010f7d
 8010fc0:	08011101 	.word	0x08011101
 8010fc4:	0801102b 	.word	0x0801102b
 8010fc8:	080110bb 	.word	0x080110bb
 8010fcc:	08010f7d 	.word	0x08010f7d
 8010fd0:	08010f7d 	.word	0x08010f7d
 8010fd4:	08011123 	.word	0x08011123
 8010fd8:	08010f7d 	.word	0x08010f7d
 8010fdc:	0801102b 	.word	0x0801102b
 8010fe0:	08010f7d 	.word	0x08010f7d
 8010fe4:	08010f7d 	.word	0x08010f7d
 8010fe8:	080110c3 	.word	0x080110c3
 8010fec:	6833      	ldr	r3, [r6, #0]
 8010fee:	1d1a      	adds	r2, r3, #4
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	6032      	str	r2, [r6, #0]
 8010ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e09d      	b.n	801113c <_printf_i+0x1e8>
 8011000:	6833      	ldr	r3, [r6, #0]
 8011002:	6820      	ldr	r0, [r4, #0]
 8011004:	1d19      	adds	r1, r3, #4
 8011006:	6031      	str	r1, [r6, #0]
 8011008:	0606      	lsls	r6, r0, #24
 801100a:	d501      	bpl.n	8011010 <_printf_i+0xbc>
 801100c:	681d      	ldr	r5, [r3, #0]
 801100e:	e003      	b.n	8011018 <_printf_i+0xc4>
 8011010:	0645      	lsls	r5, r0, #25
 8011012:	d5fb      	bpl.n	801100c <_printf_i+0xb8>
 8011014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011018:	2d00      	cmp	r5, #0
 801101a:	da03      	bge.n	8011024 <_printf_i+0xd0>
 801101c:	232d      	movs	r3, #45	@ 0x2d
 801101e:	426d      	negs	r5, r5
 8011020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011024:	4859      	ldr	r0, [pc, #356]	@ (801118c <_printf_i+0x238>)
 8011026:	230a      	movs	r3, #10
 8011028:	e011      	b.n	801104e <_printf_i+0xfa>
 801102a:	6821      	ldr	r1, [r4, #0]
 801102c:	6833      	ldr	r3, [r6, #0]
 801102e:	0608      	lsls	r0, r1, #24
 8011030:	f853 5b04 	ldr.w	r5, [r3], #4
 8011034:	d402      	bmi.n	801103c <_printf_i+0xe8>
 8011036:	0649      	lsls	r1, r1, #25
 8011038:	bf48      	it	mi
 801103a:	b2ad      	uxthmi	r5, r5
 801103c:	2f6f      	cmp	r7, #111	@ 0x6f
 801103e:	4853      	ldr	r0, [pc, #332]	@ (801118c <_printf_i+0x238>)
 8011040:	6033      	str	r3, [r6, #0]
 8011042:	bf14      	ite	ne
 8011044:	230a      	movne	r3, #10
 8011046:	2308      	moveq	r3, #8
 8011048:	2100      	movs	r1, #0
 801104a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801104e:	6866      	ldr	r6, [r4, #4]
 8011050:	60a6      	str	r6, [r4, #8]
 8011052:	2e00      	cmp	r6, #0
 8011054:	bfa2      	ittt	ge
 8011056:	6821      	ldrge	r1, [r4, #0]
 8011058:	f021 0104 	bicge.w	r1, r1, #4
 801105c:	6021      	strge	r1, [r4, #0]
 801105e:	b90d      	cbnz	r5, 8011064 <_printf_i+0x110>
 8011060:	2e00      	cmp	r6, #0
 8011062:	d04b      	beq.n	80110fc <_printf_i+0x1a8>
 8011064:	4616      	mov	r6, r2
 8011066:	fbb5 f1f3 	udiv	r1, r5, r3
 801106a:	fb03 5711 	mls	r7, r3, r1, r5
 801106e:	5dc7      	ldrb	r7, [r0, r7]
 8011070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011074:	462f      	mov	r7, r5
 8011076:	42bb      	cmp	r3, r7
 8011078:	460d      	mov	r5, r1
 801107a:	d9f4      	bls.n	8011066 <_printf_i+0x112>
 801107c:	2b08      	cmp	r3, #8
 801107e:	d10b      	bne.n	8011098 <_printf_i+0x144>
 8011080:	6823      	ldr	r3, [r4, #0]
 8011082:	07df      	lsls	r7, r3, #31
 8011084:	d508      	bpl.n	8011098 <_printf_i+0x144>
 8011086:	6923      	ldr	r3, [r4, #16]
 8011088:	6861      	ldr	r1, [r4, #4]
 801108a:	4299      	cmp	r1, r3
 801108c:	bfde      	ittt	le
 801108e:	2330      	movle	r3, #48	@ 0x30
 8011090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011094:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011098:	1b92      	subs	r2, r2, r6
 801109a:	6122      	str	r2, [r4, #16]
 801109c:	f8cd a000 	str.w	sl, [sp]
 80110a0:	464b      	mov	r3, r9
 80110a2:	aa03      	add	r2, sp, #12
 80110a4:	4621      	mov	r1, r4
 80110a6:	4640      	mov	r0, r8
 80110a8:	f7ff fee6 	bl	8010e78 <_printf_common>
 80110ac:	3001      	adds	r0, #1
 80110ae:	d14a      	bne.n	8011146 <_printf_i+0x1f2>
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295
 80110b4:	b004      	add	sp, #16
 80110b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	f043 0320 	orr.w	r3, r3, #32
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	4833      	ldr	r0, [pc, #204]	@ (8011190 <_printf_i+0x23c>)
 80110c4:	2778      	movs	r7, #120	@ 0x78
 80110c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110ca:	6823      	ldr	r3, [r4, #0]
 80110cc:	6831      	ldr	r1, [r6, #0]
 80110ce:	061f      	lsls	r7, r3, #24
 80110d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80110d4:	d402      	bmi.n	80110dc <_printf_i+0x188>
 80110d6:	065f      	lsls	r7, r3, #25
 80110d8:	bf48      	it	mi
 80110da:	b2ad      	uxthmi	r5, r5
 80110dc:	6031      	str	r1, [r6, #0]
 80110de:	07d9      	lsls	r1, r3, #31
 80110e0:	bf44      	itt	mi
 80110e2:	f043 0320 	orrmi.w	r3, r3, #32
 80110e6:	6023      	strmi	r3, [r4, #0]
 80110e8:	b11d      	cbz	r5, 80110f2 <_printf_i+0x19e>
 80110ea:	2310      	movs	r3, #16
 80110ec:	e7ac      	b.n	8011048 <_printf_i+0xf4>
 80110ee:	4827      	ldr	r0, [pc, #156]	@ (801118c <_printf_i+0x238>)
 80110f0:	e7e9      	b.n	80110c6 <_printf_i+0x172>
 80110f2:	6823      	ldr	r3, [r4, #0]
 80110f4:	f023 0320 	bic.w	r3, r3, #32
 80110f8:	6023      	str	r3, [r4, #0]
 80110fa:	e7f6      	b.n	80110ea <_printf_i+0x196>
 80110fc:	4616      	mov	r6, r2
 80110fe:	e7bd      	b.n	801107c <_printf_i+0x128>
 8011100:	6833      	ldr	r3, [r6, #0]
 8011102:	6825      	ldr	r5, [r4, #0]
 8011104:	6961      	ldr	r1, [r4, #20]
 8011106:	1d18      	adds	r0, r3, #4
 8011108:	6030      	str	r0, [r6, #0]
 801110a:	062e      	lsls	r6, r5, #24
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	d501      	bpl.n	8011114 <_printf_i+0x1c0>
 8011110:	6019      	str	r1, [r3, #0]
 8011112:	e002      	b.n	801111a <_printf_i+0x1c6>
 8011114:	0668      	lsls	r0, r5, #25
 8011116:	d5fb      	bpl.n	8011110 <_printf_i+0x1bc>
 8011118:	8019      	strh	r1, [r3, #0]
 801111a:	2300      	movs	r3, #0
 801111c:	6123      	str	r3, [r4, #16]
 801111e:	4616      	mov	r6, r2
 8011120:	e7bc      	b.n	801109c <_printf_i+0x148>
 8011122:	6833      	ldr	r3, [r6, #0]
 8011124:	1d1a      	adds	r2, r3, #4
 8011126:	6032      	str	r2, [r6, #0]
 8011128:	681e      	ldr	r6, [r3, #0]
 801112a:	6862      	ldr	r2, [r4, #4]
 801112c:	2100      	movs	r1, #0
 801112e:	4630      	mov	r0, r6
 8011130:	f7ef f876 	bl	8000220 <memchr>
 8011134:	b108      	cbz	r0, 801113a <_printf_i+0x1e6>
 8011136:	1b80      	subs	r0, r0, r6
 8011138:	6060      	str	r0, [r4, #4]
 801113a:	6863      	ldr	r3, [r4, #4]
 801113c:	6123      	str	r3, [r4, #16]
 801113e:	2300      	movs	r3, #0
 8011140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011144:	e7aa      	b.n	801109c <_printf_i+0x148>
 8011146:	6923      	ldr	r3, [r4, #16]
 8011148:	4632      	mov	r2, r6
 801114a:	4649      	mov	r1, r9
 801114c:	4640      	mov	r0, r8
 801114e:	47d0      	blx	sl
 8011150:	3001      	adds	r0, #1
 8011152:	d0ad      	beq.n	80110b0 <_printf_i+0x15c>
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	079b      	lsls	r3, r3, #30
 8011158:	d413      	bmi.n	8011182 <_printf_i+0x22e>
 801115a:	68e0      	ldr	r0, [r4, #12]
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	4298      	cmp	r0, r3
 8011160:	bfb8      	it	lt
 8011162:	4618      	movlt	r0, r3
 8011164:	e7a6      	b.n	80110b4 <_printf_i+0x160>
 8011166:	2301      	movs	r3, #1
 8011168:	4632      	mov	r2, r6
 801116a:	4649      	mov	r1, r9
 801116c:	4640      	mov	r0, r8
 801116e:	47d0      	blx	sl
 8011170:	3001      	adds	r0, #1
 8011172:	d09d      	beq.n	80110b0 <_printf_i+0x15c>
 8011174:	3501      	adds	r5, #1
 8011176:	68e3      	ldr	r3, [r4, #12]
 8011178:	9903      	ldr	r1, [sp, #12]
 801117a:	1a5b      	subs	r3, r3, r1
 801117c:	42ab      	cmp	r3, r5
 801117e:	dcf2      	bgt.n	8011166 <_printf_i+0x212>
 8011180:	e7eb      	b.n	801115a <_printf_i+0x206>
 8011182:	2500      	movs	r5, #0
 8011184:	f104 0619 	add.w	r6, r4, #25
 8011188:	e7f5      	b.n	8011176 <_printf_i+0x222>
 801118a:	bf00      	nop
 801118c:	08015b86 	.word	0x08015b86
 8011190:	08015b97 	.word	0x08015b97

08011194 <_scanf_float>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	b087      	sub	sp, #28
 801119a:	4617      	mov	r7, r2
 801119c:	9303      	str	r3, [sp, #12]
 801119e:	688b      	ldr	r3, [r1, #8]
 80111a0:	1e5a      	subs	r2, r3, #1
 80111a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80111a6:	bf81      	itttt	hi
 80111a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80111ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80111b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80111b4:	608b      	strhi	r3, [r1, #8]
 80111b6:	680b      	ldr	r3, [r1, #0]
 80111b8:	460a      	mov	r2, r1
 80111ba:	f04f 0500 	mov.w	r5, #0
 80111be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80111c2:	f842 3b1c 	str.w	r3, [r2], #28
 80111c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80111ca:	4680      	mov	r8, r0
 80111cc:	460c      	mov	r4, r1
 80111ce:	bf98      	it	ls
 80111d0:	f04f 0b00 	movls.w	fp, #0
 80111d4:	9201      	str	r2, [sp, #4]
 80111d6:	4616      	mov	r6, r2
 80111d8:	46aa      	mov	sl, r5
 80111da:	46a9      	mov	r9, r5
 80111dc:	9502      	str	r5, [sp, #8]
 80111de:	68a2      	ldr	r2, [r4, #8]
 80111e0:	b152      	cbz	r2, 80111f8 <_scanf_float+0x64>
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80111e8:	d864      	bhi.n	80112b4 <_scanf_float+0x120>
 80111ea:	2b40      	cmp	r3, #64	@ 0x40
 80111ec:	d83c      	bhi.n	8011268 <_scanf_float+0xd4>
 80111ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80111f2:	b2c8      	uxtb	r0, r1
 80111f4:	280e      	cmp	r0, #14
 80111f6:	d93a      	bls.n	801126e <_scanf_float+0xda>
 80111f8:	f1b9 0f00 	cmp.w	r9, #0
 80111fc:	d003      	beq.n	8011206 <_scanf_float+0x72>
 80111fe:	6823      	ldr	r3, [r4, #0]
 8011200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	f10a 3aff 	add.w	sl, sl, #4294967295
 801120a:	f1ba 0f01 	cmp.w	sl, #1
 801120e:	f200 8117 	bhi.w	8011440 <_scanf_float+0x2ac>
 8011212:	9b01      	ldr	r3, [sp, #4]
 8011214:	429e      	cmp	r6, r3
 8011216:	f200 8108 	bhi.w	801142a <_scanf_float+0x296>
 801121a:	2001      	movs	r0, #1
 801121c:	b007      	add	sp, #28
 801121e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011222:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011226:	2a0d      	cmp	r2, #13
 8011228:	d8e6      	bhi.n	80111f8 <_scanf_float+0x64>
 801122a:	a101      	add	r1, pc, #4	@ (adr r1, 8011230 <_scanf_float+0x9c>)
 801122c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011230:	08011377 	.word	0x08011377
 8011234:	080111f9 	.word	0x080111f9
 8011238:	080111f9 	.word	0x080111f9
 801123c:	080111f9 	.word	0x080111f9
 8011240:	080113d7 	.word	0x080113d7
 8011244:	080113af 	.word	0x080113af
 8011248:	080111f9 	.word	0x080111f9
 801124c:	080111f9 	.word	0x080111f9
 8011250:	08011385 	.word	0x08011385
 8011254:	080111f9 	.word	0x080111f9
 8011258:	080111f9 	.word	0x080111f9
 801125c:	080111f9 	.word	0x080111f9
 8011260:	080111f9 	.word	0x080111f9
 8011264:	0801133d 	.word	0x0801133d
 8011268:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801126c:	e7db      	b.n	8011226 <_scanf_float+0x92>
 801126e:	290e      	cmp	r1, #14
 8011270:	d8c2      	bhi.n	80111f8 <_scanf_float+0x64>
 8011272:	a001      	add	r0, pc, #4	@ (adr r0, 8011278 <_scanf_float+0xe4>)
 8011274:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011278:	0801132d 	.word	0x0801132d
 801127c:	080111f9 	.word	0x080111f9
 8011280:	0801132d 	.word	0x0801132d
 8011284:	080113c3 	.word	0x080113c3
 8011288:	080111f9 	.word	0x080111f9
 801128c:	080112d5 	.word	0x080112d5
 8011290:	08011313 	.word	0x08011313
 8011294:	08011313 	.word	0x08011313
 8011298:	08011313 	.word	0x08011313
 801129c:	08011313 	.word	0x08011313
 80112a0:	08011313 	.word	0x08011313
 80112a4:	08011313 	.word	0x08011313
 80112a8:	08011313 	.word	0x08011313
 80112ac:	08011313 	.word	0x08011313
 80112b0:	08011313 	.word	0x08011313
 80112b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80112b6:	d809      	bhi.n	80112cc <_scanf_float+0x138>
 80112b8:	2b60      	cmp	r3, #96	@ 0x60
 80112ba:	d8b2      	bhi.n	8011222 <_scanf_float+0x8e>
 80112bc:	2b54      	cmp	r3, #84	@ 0x54
 80112be:	d07b      	beq.n	80113b8 <_scanf_float+0x224>
 80112c0:	2b59      	cmp	r3, #89	@ 0x59
 80112c2:	d199      	bne.n	80111f8 <_scanf_float+0x64>
 80112c4:	2d07      	cmp	r5, #7
 80112c6:	d197      	bne.n	80111f8 <_scanf_float+0x64>
 80112c8:	2508      	movs	r5, #8
 80112ca:	e02c      	b.n	8011326 <_scanf_float+0x192>
 80112cc:	2b74      	cmp	r3, #116	@ 0x74
 80112ce:	d073      	beq.n	80113b8 <_scanf_float+0x224>
 80112d0:	2b79      	cmp	r3, #121	@ 0x79
 80112d2:	e7f6      	b.n	80112c2 <_scanf_float+0x12e>
 80112d4:	6821      	ldr	r1, [r4, #0]
 80112d6:	05c8      	lsls	r0, r1, #23
 80112d8:	d51b      	bpl.n	8011312 <_scanf_float+0x17e>
 80112da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80112de:	6021      	str	r1, [r4, #0]
 80112e0:	f109 0901 	add.w	r9, r9, #1
 80112e4:	f1bb 0f00 	cmp.w	fp, #0
 80112e8:	d003      	beq.n	80112f2 <_scanf_float+0x15e>
 80112ea:	3201      	adds	r2, #1
 80112ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80112f0:	60a2      	str	r2, [r4, #8]
 80112f2:	68a3      	ldr	r3, [r4, #8]
 80112f4:	3b01      	subs	r3, #1
 80112f6:	60a3      	str	r3, [r4, #8]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	3301      	adds	r3, #1
 80112fc:	6123      	str	r3, [r4, #16]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	3b01      	subs	r3, #1
 8011302:	2b00      	cmp	r3, #0
 8011304:	607b      	str	r3, [r7, #4]
 8011306:	f340 8087 	ble.w	8011418 <_scanf_float+0x284>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	3301      	adds	r3, #1
 801130e:	603b      	str	r3, [r7, #0]
 8011310:	e765      	b.n	80111de <_scanf_float+0x4a>
 8011312:	eb1a 0105 	adds.w	r1, sl, r5
 8011316:	f47f af6f 	bne.w	80111f8 <_scanf_float+0x64>
 801131a:	6822      	ldr	r2, [r4, #0]
 801131c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011320:	6022      	str	r2, [r4, #0]
 8011322:	460d      	mov	r5, r1
 8011324:	468a      	mov	sl, r1
 8011326:	f806 3b01 	strb.w	r3, [r6], #1
 801132a:	e7e2      	b.n	80112f2 <_scanf_float+0x15e>
 801132c:	6822      	ldr	r2, [r4, #0]
 801132e:	0610      	lsls	r0, r2, #24
 8011330:	f57f af62 	bpl.w	80111f8 <_scanf_float+0x64>
 8011334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011338:	6022      	str	r2, [r4, #0]
 801133a:	e7f4      	b.n	8011326 <_scanf_float+0x192>
 801133c:	f1ba 0f00 	cmp.w	sl, #0
 8011340:	d10e      	bne.n	8011360 <_scanf_float+0x1cc>
 8011342:	f1b9 0f00 	cmp.w	r9, #0
 8011346:	d10e      	bne.n	8011366 <_scanf_float+0x1d2>
 8011348:	6822      	ldr	r2, [r4, #0]
 801134a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801134e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011352:	d108      	bne.n	8011366 <_scanf_float+0x1d2>
 8011354:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011358:	6022      	str	r2, [r4, #0]
 801135a:	f04f 0a01 	mov.w	sl, #1
 801135e:	e7e2      	b.n	8011326 <_scanf_float+0x192>
 8011360:	f1ba 0f02 	cmp.w	sl, #2
 8011364:	d055      	beq.n	8011412 <_scanf_float+0x27e>
 8011366:	2d01      	cmp	r5, #1
 8011368:	d002      	beq.n	8011370 <_scanf_float+0x1dc>
 801136a:	2d04      	cmp	r5, #4
 801136c:	f47f af44 	bne.w	80111f8 <_scanf_float+0x64>
 8011370:	3501      	adds	r5, #1
 8011372:	b2ed      	uxtb	r5, r5
 8011374:	e7d7      	b.n	8011326 <_scanf_float+0x192>
 8011376:	f1ba 0f01 	cmp.w	sl, #1
 801137a:	f47f af3d 	bne.w	80111f8 <_scanf_float+0x64>
 801137e:	f04f 0a02 	mov.w	sl, #2
 8011382:	e7d0      	b.n	8011326 <_scanf_float+0x192>
 8011384:	b97d      	cbnz	r5, 80113a6 <_scanf_float+0x212>
 8011386:	f1b9 0f00 	cmp.w	r9, #0
 801138a:	f47f af38 	bne.w	80111fe <_scanf_float+0x6a>
 801138e:	6822      	ldr	r2, [r4, #0]
 8011390:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011394:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011398:	f040 8108 	bne.w	80115ac <_scanf_float+0x418>
 801139c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80113a0:	6022      	str	r2, [r4, #0]
 80113a2:	2501      	movs	r5, #1
 80113a4:	e7bf      	b.n	8011326 <_scanf_float+0x192>
 80113a6:	2d03      	cmp	r5, #3
 80113a8:	d0e2      	beq.n	8011370 <_scanf_float+0x1dc>
 80113aa:	2d05      	cmp	r5, #5
 80113ac:	e7de      	b.n	801136c <_scanf_float+0x1d8>
 80113ae:	2d02      	cmp	r5, #2
 80113b0:	f47f af22 	bne.w	80111f8 <_scanf_float+0x64>
 80113b4:	2503      	movs	r5, #3
 80113b6:	e7b6      	b.n	8011326 <_scanf_float+0x192>
 80113b8:	2d06      	cmp	r5, #6
 80113ba:	f47f af1d 	bne.w	80111f8 <_scanf_float+0x64>
 80113be:	2507      	movs	r5, #7
 80113c0:	e7b1      	b.n	8011326 <_scanf_float+0x192>
 80113c2:	6822      	ldr	r2, [r4, #0]
 80113c4:	0591      	lsls	r1, r2, #22
 80113c6:	f57f af17 	bpl.w	80111f8 <_scanf_float+0x64>
 80113ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80113ce:	6022      	str	r2, [r4, #0]
 80113d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80113d4:	e7a7      	b.n	8011326 <_scanf_float+0x192>
 80113d6:	6822      	ldr	r2, [r4, #0]
 80113d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80113dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80113e0:	d006      	beq.n	80113f0 <_scanf_float+0x25c>
 80113e2:	0550      	lsls	r0, r2, #21
 80113e4:	f57f af08 	bpl.w	80111f8 <_scanf_float+0x64>
 80113e8:	f1b9 0f00 	cmp.w	r9, #0
 80113ec:	f000 80de 	beq.w	80115ac <_scanf_float+0x418>
 80113f0:	0591      	lsls	r1, r2, #22
 80113f2:	bf58      	it	pl
 80113f4:	9902      	ldrpl	r1, [sp, #8]
 80113f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80113fa:	bf58      	it	pl
 80113fc:	eba9 0101 	subpl.w	r1, r9, r1
 8011400:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011404:	bf58      	it	pl
 8011406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801140a:	6022      	str	r2, [r4, #0]
 801140c:	f04f 0900 	mov.w	r9, #0
 8011410:	e789      	b.n	8011326 <_scanf_float+0x192>
 8011412:	f04f 0a03 	mov.w	sl, #3
 8011416:	e786      	b.n	8011326 <_scanf_float+0x192>
 8011418:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801141c:	4639      	mov	r1, r7
 801141e:	4640      	mov	r0, r8
 8011420:	4798      	blx	r3
 8011422:	2800      	cmp	r0, #0
 8011424:	f43f aedb 	beq.w	80111de <_scanf_float+0x4a>
 8011428:	e6e6      	b.n	80111f8 <_scanf_float+0x64>
 801142a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801142e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011432:	463a      	mov	r2, r7
 8011434:	4640      	mov	r0, r8
 8011436:	4798      	blx	r3
 8011438:	6923      	ldr	r3, [r4, #16]
 801143a:	3b01      	subs	r3, #1
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	e6e8      	b.n	8011212 <_scanf_float+0x7e>
 8011440:	1e6b      	subs	r3, r5, #1
 8011442:	2b06      	cmp	r3, #6
 8011444:	d824      	bhi.n	8011490 <_scanf_float+0x2fc>
 8011446:	2d02      	cmp	r5, #2
 8011448:	d836      	bhi.n	80114b8 <_scanf_float+0x324>
 801144a:	9b01      	ldr	r3, [sp, #4]
 801144c:	429e      	cmp	r6, r3
 801144e:	f67f aee4 	bls.w	801121a <_scanf_float+0x86>
 8011452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801145a:	463a      	mov	r2, r7
 801145c:	4640      	mov	r0, r8
 801145e:	4798      	blx	r3
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	3b01      	subs	r3, #1
 8011464:	6123      	str	r3, [r4, #16]
 8011466:	e7f0      	b.n	801144a <_scanf_float+0x2b6>
 8011468:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801146c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011470:	463a      	mov	r2, r7
 8011472:	4640      	mov	r0, r8
 8011474:	4798      	blx	r3
 8011476:	6923      	ldr	r3, [r4, #16]
 8011478:	3b01      	subs	r3, #1
 801147a:	6123      	str	r3, [r4, #16]
 801147c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011480:	fa5f fa8a 	uxtb.w	sl, sl
 8011484:	f1ba 0f02 	cmp.w	sl, #2
 8011488:	d1ee      	bne.n	8011468 <_scanf_float+0x2d4>
 801148a:	3d03      	subs	r5, #3
 801148c:	b2ed      	uxtb	r5, r5
 801148e:	1b76      	subs	r6, r6, r5
 8011490:	6823      	ldr	r3, [r4, #0]
 8011492:	05da      	lsls	r2, r3, #23
 8011494:	d530      	bpl.n	80114f8 <_scanf_float+0x364>
 8011496:	055b      	lsls	r3, r3, #21
 8011498:	d511      	bpl.n	80114be <_scanf_float+0x32a>
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	429e      	cmp	r6, r3
 801149e:	f67f aebc 	bls.w	801121a <_scanf_float+0x86>
 80114a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80114aa:	463a      	mov	r2, r7
 80114ac:	4640      	mov	r0, r8
 80114ae:	4798      	blx	r3
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	3b01      	subs	r3, #1
 80114b4:	6123      	str	r3, [r4, #16]
 80114b6:	e7f0      	b.n	801149a <_scanf_float+0x306>
 80114b8:	46aa      	mov	sl, r5
 80114ba:	46b3      	mov	fp, r6
 80114bc:	e7de      	b.n	801147c <_scanf_float+0x2e8>
 80114be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80114c2:	6923      	ldr	r3, [r4, #16]
 80114c4:	2965      	cmp	r1, #101	@ 0x65
 80114c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80114ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	d00c      	beq.n	80114ec <_scanf_float+0x358>
 80114d2:	2945      	cmp	r1, #69	@ 0x45
 80114d4:	d00a      	beq.n	80114ec <_scanf_float+0x358>
 80114d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114da:	463a      	mov	r2, r7
 80114dc:	4640      	mov	r0, r8
 80114de:	4798      	blx	r3
 80114e0:	6923      	ldr	r3, [r4, #16]
 80114e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80114e6:	3b01      	subs	r3, #1
 80114e8:	1eb5      	subs	r5, r6, #2
 80114ea:	6123      	str	r3, [r4, #16]
 80114ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80114f0:	463a      	mov	r2, r7
 80114f2:	4640      	mov	r0, r8
 80114f4:	4798      	blx	r3
 80114f6:	462e      	mov	r6, r5
 80114f8:	6822      	ldr	r2, [r4, #0]
 80114fa:	f012 0210 	ands.w	r2, r2, #16
 80114fe:	d001      	beq.n	8011504 <_scanf_float+0x370>
 8011500:	2000      	movs	r0, #0
 8011502:	e68b      	b.n	801121c <_scanf_float+0x88>
 8011504:	7032      	strb	r2, [r6, #0]
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801150c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011510:	d11c      	bne.n	801154c <_scanf_float+0x3b8>
 8011512:	9b02      	ldr	r3, [sp, #8]
 8011514:	454b      	cmp	r3, r9
 8011516:	eba3 0209 	sub.w	r2, r3, r9
 801151a:	d123      	bne.n	8011564 <_scanf_float+0x3d0>
 801151c:	9901      	ldr	r1, [sp, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	4640      	mov	r0, r8
 8011522:	f002 fbf9 	bl	8013d18 <_strtod_r>
 8011526:	9b03      	ldr	r3, [sp, #12]
 8011528:	6821      	ldr	r1, [r4, #0]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f011 0f02 	tst.w	r1, #2
 8011530:	ec57 6b10 	vmov	r6, r7, d0
 8011534:	f103 0204 	add.w	r2, r3, #4
 8011538:	d01f      	beq.n	801157a <_scanf_float+0x3e6>
 801153a:	9903      	ldr	r1, [sp, #12]
 801153c:	600a      	str	r2, [r1, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	e9c3 6700 	strd	r6, r7, [r3]
 8011544:	68e3      	ldr	r3, [r4, #12]
 8011546:	3301      	adds	r3, #1
 8011548:	60e3      	str	r3, [r4, #12]
 801154a:	e7d9      	b.n	8011500 <_scanf_float+0x36c>
 801154c:	9b04      	ldr	r3, [sp, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d0e4      	beq.n	801151c <_scanf_float+0x388>
 8011552:	9905      	ldr	r1, [sp, #20]
 8011554:	230a      	movs	r3, #10
 8011556:	3101      	adds	r1, #1
 8011558:	4640      	mov	r0, r8
 801155a:	f002 fc5d 	bl	8013e18 <_strtol_r>
 801155e:	9b04      	ldr	r3, [sp, #16]
 8011560:	9e05      	ldr	r6, [sp, #20]
 8011562:	1ac2      	subs	r2, r0, r3
 8011564:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011568:	429e      	cmp	r6, r3
 801156a:	bf28      	it	cs
 801156c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011570:	4910      	ldr	r1, [pc, #64]	@ (80115b4 <_scanf_float+0x420>)
 8011572:	4630      	mov	r0, r6
 8011574:	f000 f8e4 	bl	8011740 <siprintf>
 8011578:	e7d0      	b.n	801151c <_scanf_float+0x388>
 801157a:	f011 0f04 	tst.w	r1, #4
 801157e:	9903      	ldr	r1, [sp, #12]
 8011580:	600a      	str	r2, [r1, #0]
 8011582:	d1dc      	bne.n	801153e <_scanf_float+0x3aa>
 8011584:	681d      	ldr	r5, [r3, #0]
 8011586:	4632      	mov	r2, r6
 8011588:	463b      	mov	r3, r7
 801158a:	4630      	mov	r0, r6
 801158c:	4639      	mov	r1, r7
 801158e:	f7ef faf5 	bl	8000b7c <__aeabi_dcmpun>
 8011592:	b128      	cbz	r0, 80115a0 <_scanf_float+0x40c>
 8011594:	4808      	ldr	r0, [pc, #32]	@ (80115b8 <_scanf_float+0x424>)
 8011596:	f000 f9b7 	bl	8011908 <nanf>
 801159a:	ed85 0a00 	vstr	s0, [r5]
 801159e:	e7d1      	b.n	8011544 <_scanf_float+0x3b0>
 80115a0:	4630      	mov	r0, r6
 80115a2:	4639      	mov	r1, r7
 80115a4:	f7ef fb48 	bl	8000c38 <__aeabi_d2f>
 80115a8:	6028      	str	r0, [r5, #0]
 80115aa:	e7cb      	b.n	8011544 <_scanf_float+0x3b0>
 80115ac:	f04f 0900 	mov.w	r9, #0
 80115b0:	e629      	b.n	8011206 <_scanf_float+0x72>
 80115b2:	bf00      	nop
 80115b4:	08015ba8 	.word	0x08015ba8
 80115b8:	08015f3d 	.word	0x08015f3d

080115bc <std>:
 80115bc:	2300      	movs	r3, #0
 80115be:	b510      	push	{r4, lr}
 80115c0:	4604      	mov	r4, r0
 80115c2:	e9c0 3300 	strd	r3, r3, [r0]
 80115c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115ca:	6083      	str	r3, [r0, #8]
 80115cc:	8181      	strh	r1, [r0, #12]
 80115ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80115d0:	81c2      	strh	r2, [r0, #14]
 80115d2:	6183      	str	r3, [r0, #24]
 80115d4:	4619      	mov	r1, r3
 80115d6:	2208      	movs	r2, #8
 80115d8:	305c      	adds	r0, #92	@ 0x5c
 80115da:	f000 f914 	bl	8011806 <memset>
 80115de:	4b0d      	ldr	r3, [pc, #52]	@ (8011614 <std+0x58>)
 80115e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80115e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011618 <std+0x5c>)
 80115e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80115e6:	4b0d      	ldr	r3, [pc, #52]	@ (801161c <std+0x60>)
 80115e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80115ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011620 <std+0x64>)
 80115ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80115ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011624 <std+0x68>)
 80115f0:	6224      	str	r4, [r4, #32]
 80115f2:	429c      	cmp	r4, r3
 80115f4:	d006      	beq.n	8011604 <std+0x48>
 80115f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80115fa:	4294      	cmp	r4, r2
 80115fc:	d002      	beq.n	8011604 <std+0x48>
 80115fe:	33d0      	adds	r3, #208	@ 0xd0
 8011600:	429c      	cmp	r4, r3
 8011602:	d105      	bne.n	8011610 <std+0x54>
 8011604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801160c:	f000 b978 	b.w	8011900 <__retarget_lock_init_recursive>
 8011610:	bd10      	pop	{r4, pc}
 8011612:	bf00      	nop
 8011614:	08011781 	.word	0x08011781
 8011618:	080117a3 	.word	0x080117a3
 801161c:	080117db 	.word	0x080117db
 8011620:	080117ff 	.word	0x080117ff
 8011624:	20004890 	.word	0x20004890

08011628 <stdio_exit_handler>:
 8011628:	4a02      	ldr	r2, [pc, #8]	@ (8011634 <stdio_exit_handler+0xc>)
 801162a:	4903      	ldr	r1, [pc, #12]	@ (8011638 <stdio_exit_handler+0x10>)
 801162c:	4803      	ldr	r0, [pc, #12]	@ (801163c <stdio_exit_handler+0x14>)
 801162e:	f000 b869 	b.w	8011704 <_fwalk_sglue>
 8011632:	bf00      	nop
 8011634:	20000184 	.word	0x20000184
 8011638:	080141d5 	.word	0x080141d5
 801163c:	20000194 	.word	0x20000194

08011640 <cleanup_stdio>:
 8011640:	6841      	ldr	r1, [r0, #4]
 8011642:	4b0c      	ldr	r3, [pc, #48]	@ (8011674 <cleanup_stdio+0x34>)
 8011644:	4299      	cmp	r1, r3
 8011646:	b510      	push	{r4, lr}
 8011648:	4604      	mov	r4, r0
 801164a:	d001      	beq.n	8011650 <cleanup_stdio+0x10>
 801164c:	f002 fdc2 	bl	80141d4 <_fflush_r>
 8011650:	68a1      	ldr	r1, [r4, #8]
 8011652:	4b09      	ldr	r3, [pc, #36]	@ (8011678 <cleanup_stdio+0x38>)
 8011654:	4299      	cmp	r1, r3
 8011656:	d002      	beq.n	801165e <cleanup_stdio+0x1e>
 8011658:	4620      	mov	r0, r4
 801165a:	f002 fdbb 	bl	80141d4 <_fflush_r>
 801165e:	68e1      	ldr	r1, [r4, #12]
 8011660:	4b06      	ldr	r3, [pc, #24]	@ (801167c <cleanup_stdio+0x3c>)
 8011662:	4299      	cmp	r1, r3
 8011664:	d004      	beq.n	8011670 <cleanup_stdio+0x30>
 8011666:	4620      	mov	r0, r4
 8011668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801166c:	f002 bdb2 	b.w	80141d4 <_fflush_r>
 8011670:	bd10      	pop	{r4, pc}
 8011672:	bf00      	nop
 8011674:	20004890 	.word	0x20004890
 8011678:	200048f8 	.word	0x200048f8
 801167c:	20004960 	.word	0x20004960

08011680 <global_stdio_init.part.0>:
 8011680:	b510      	push	{r4, lr}
 8011682:	4b0b      	ldr	r3, [pc, #44]	@ (80116b0 <global_stdio_init.part.0+0x30>)
 8011684:	4c0b      	ldr	r4, [pc, #44]	@ (80116b4 <global_stdio_init.part.0+0x34>)
 8011686:	4a0c      	ldr	r2, [pc, #48]	@ (80116b8 <global_stdio_init.part.0+0x38>)
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	4620      	mov	r0, r4
 801168c:	2200      	movs	r2, #0
 801168e:	2104      	movs	r1, #4
 8011690:	f7ff ff94 	bl	80115bc <std>
 8011694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011698:	2201      	movs	r2, #1
 801169a:	2109      	movs	r1, #9
 801169c:	f7ff ff8e 	bl	80115bc <std>
 80116a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80116a4:	2202      	movs	r2, #2
 80116a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116aa:	2112      	movs	r1, #18
 80116ac:	f7ff bf86 	b.w	80115bc <std>
 80116b0:	200049c8 	.word	0x200049c8
 80116b4:	20004890 	.word	0x20004890
 80116b8:	08011629 	.word	0x08011629

080116bc <__sfp_lock_acquire>:
 80116bc:	4801      	ldr	r0, [pc, #4]	@ (80116c4 <__sfp_lock_acquire+0x8>)
 80116be:	f000 b920 	b.w	8011902 <__retarget_lock_acquire_recursive>
 80116c2:	bf00      	nop
 80116c4:	200049d1 	.word	0x200049d1

080116c8 <__sfp_lock_release>:
 80116c8:	4801      	ldr	r0, [pc, #4]	@ (80116d0 <__sfp_lock_release+0x8>)
 80116ca:	f000 b91b 	b.w	8011904 <__retarget_lock_release_recursive>
 80116ce:	bf00      	nop
 80116d0:	200049d1 	.word	0x200049d1

080116d4 <__sinit>:
 80116d4:	b510      	push	{r4, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	f7ff fff0 	bl	80116bc <__sfp_lock_acquire>
 80116dc:	6a23      	ldr	r3, [r4, #32]
 80116de:	b11b      	cbz	r3, 80116e8 <__sinit+0x14>
 80116e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116e4:	f7ff bff0 	b.w	80116c8 <__sfp_lock_release>
 80116e8:	4b04      	ldr	r3, [pc, #16]	@ (80116fc <__sinit+0x28>)
 80116ea:	6223      	str	r3, [r4, #32]
 80116ec:	4b04      	ldr	r3, [pc, #16]	@ (8011700 <__sinit+0x2c>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d1f5      	bne.n	80116e0 <__sinit+0xc>
 80116f4:	f7ff ffc4 	bl	8011680 <global_stdio_init.part.0>
 80116f8:	e7f2      	b.n	80116e0 <__sinit+0xc>
 80116fa:	bf00      	nop
 80116fc:	08011641 	.word	0x08011641
 8011700:	200049c8 	.word	0x200049c8

08011704 <_fwalk_sglue>:
 8011704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011708:	4607      	mov	r7, r0
 801170a:	4688      	mov	r8, r1
 801170c:	4614      	mov	r4, r2
 801170e:	2600      	movs	r6, #0
 8011710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011714:	f1b9 0901 	subs.w	r9, r9, #1
 8011718:	d505      	bpl.n	8011726 <_fwalk_sglue+0x22>
 801171a:	6824      	ldr	r4, [r4, #0]
 801171c:	2c00      	cmp	r4, #0
 801171e:	d1f7      	bne.n	8011710 <_fwalk_sglue+0xc>
 8011720:	4630      	mov	r0, r6
 8011722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011726:	89ab      	ldrh	r3, [r5, #12]
 8011728:	2b01      	cmp	r3, #1
 801172a:	d907      	bls.n	801173c <_fwalk_sglue+0x38>
 801172c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011730:	3301      	adds	r3, #1
 8011732:	d003      	beq.n	801173c <_fwalk_sglue+0x38>
 8011734:	4629      	mov	r1, r5
 8011736:	4638      	mov	r0, r7
 8011738:	47c0      	blx	r8
 801173a:	4306      	orrs	r6, r0
 801173c:	3568      	adds	r5, #104	@ 0x68
 801173e:	e7e9      	b.n	8011714 <_fwalk_sglue+0x10>

08011740 <siprintf>:
 8011740:	b40e      	push	{r1, r2, r3}
 8011742:	b500      	push	{lr}
 8011744:	b09c      	sub	sp, #112	@ 0x70
 8011746:	ab1d      	add	r3, sp, #116	@ 0x74
 8011748:	9002      	str	r0, [sp, #8]
 801174a:	9006      	str	r0, [sp, #24]
 801174c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011750:	4809      	ldr	r0, [pc, #36]	@ (8011778 <siprintf+0x38>)
 8011752:	9107      	str	r1, [sp, #28]
 8011754:	9104      	str	r1, [sp, #16]
 8011756:	4909      	ldr	r1, [pc, #36]	@ (801177c <siprintf+0x3c>)
 8011758:	f853 2b04 	ldr.w	r2, [r3], #4
 801175c:	9105      	str	r1, [sp, #20]
 801175e:	6800      	ldr	r0, [r0, #0]
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	a902      	add	r1, sp, #8
 8011764:	f002 fbb6 	bl	8013ed4 <_svfiprintf_r>
 8011768:	9b02      	ldr	r3, [sp, #8]
 801176a:	2200      	movs	r2, #0
 801176c:	701a      	strb	r2, [r3, #0]
 801176e:	b01c      	add	sp, #112	@ 0x70
 8011770:	f85d eb04 	ldr.w	lr, [sp], #4
 8011774:	b003      	add	sp, #12
 8011776:	4770      	bx	lr
 8011778:	20000190 	.word	0x20000190
 801177c:	ffff0208 	.word	0xffff0208

08011780 <__sread>:
 8011780:	b510      	push	{r4, lr}
 8011782:	460c      	mov	r4, r1
 8011784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011788:	f000 f86c 	bl	8011864 <_read_r>
 801178c:	2800      	cmp	r0, #0
 801178e:	bfab      	itete	ge
 8011790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011792:	89a3      	ldrhlt	r3, [r4, #12]
 8011794:	181b      	addge	r3, r3, r0
 8011796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801179a:	bfac      	ite	ge
 801179c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801179e:	81a3      	strhlt	r3, [r4, #12]
 80117a0:	bd10      	pop	{r4, pc}

080117a2 <__swrite>:
 80117a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a6:	461f      	mov	r7, r3
 80117a8:	898b      	ldrh	r3, [r1, #12]
 80117aa:	05db      	lsls	r3, r3, #23
 80117ac:	4605      	mov	r5, r0
 80117ae:	460c      	mov	r4, r1
 80117b0:	4616      	mov	r6, r2
 80117b2:	d505      	bpl.n	80117c0 <__swrite+0x1e>
 80117b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b8:	2302      	movs	r3, #2
 80117ba:	2200      	movs	r2, #0
 80117bc:	f000 f840 	bl	8011840 <_lseek_r>
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80117ca:	81a3      	strh	r3, [r4, #12]
 80117cc:	4632      	mov	r2, r6
 80117ce:	463b      	mov	r3, r7
 80117d0:	4628      	mov	r0, r5
 80117d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117d6:	f000 b857 	b.w	8011888 <_write_r>

080117da <__sseek>:
 80117da:	b510      	push	{r4, lr}
 80117dc:	460c      	mov	r4, r1
 80117de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e2:	f000 f82d 	bl	8011840 <_lseek_r>
 80117e6:	1c43      	adds	r3, r0, #1
 80117e8:	89a3      	ldrh	r3, [r4, #12]
 80117ea:	bf15      	itete	ne
 80117ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80117ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80117f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80117f6:	81a3      	strheq	r3, [r4, #12]
 80117f8:	bf18      	it	ne
 80117fa:	81a3      	strhne	r3, [r4, #12]
 80117fc:	bd10      	pop	{r4, pc}

080117fe <__sclose>:
 80117fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011802:	f000 b80d 	b.w	8011820 <_close_r>

08011806 <memset>:
 8011806:	4402      	add	r2, r0
 8011808:	4603      	mov	r3, r0
 801180a:	4293      	cmp	r3, r2
 801180c:	d100      	bne.n	8011810 <memset+0xa>
 801180e:	4770      	bx	lr
 8011810:	f803 1b01 	strb.w	r1, [r3], #1
 8011814:	e7f9      	b.n	801180a <memset+0x4>
	...

08011818 <_localeconv_r>:
 8011818:	4800      	ldr	r0, [pc, #0]	@ (801181c <_localeconv_r+0x4>)
 801181a:	4770      	bx	lr
 801181c:	200002d0 	.word	0x200002d0

08011820 <_close_r>:
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	4d06      	ldr	r5, [pc, #24]	@ (801183c <_close_r+0x1c>)
 8011824:	2300      	movs	r3, #0
 8011826:	4604      	mov	r4, r0
 8011828:	4608      	mov	r0, r1
 801182a:	602b      	str	r3, [r5, #0]
 801182c:	f7f1 f9c0 	bl	8002bb0 <_close>
 8011830:	1c43      	adds	r3, r0, #1
 8011832:	d102      	bne.n	801183a <_close_r+0x1a>
 8011834:	682b      	ldr	r3, [r5, #0]
 8011836:	b103      	cbz	r3, 801183a <_close_r+0x1a>
 8011838:	6023      	str	r3, [r4, #0]
 801183a:	bd38      	pop	{r3, r4, r5, pc}
 801183c:	200049cc 	.word	0x200049cc

08011840 <_lseek_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4d07      	ldr	r5, [pc, #28]	@ (8011860 <_lseek_r+0x20>)
 8011844:	4604      	mov	r4, r0
 8011846:	4608      	mov	r0, r1
 8011848:	4611      	mov	r1, r2
 801184a:	2200      	movs	r2, #0
 801184c:	602a      	str	r2, [r5, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	f7f1 f9d5 	bl	8002bfe <_lseek>
 8011854:	1c43      	adds	r3, r0, #1
 8011856:	d102      	bne.n	801185e <_lseek_r+0x1e>
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	b103      	cbz	r3, 801185e <_lseek_r+0x1e>
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	200049cc 	.word	0x200049cc

08011864 <_read_r>:
 8011864:	b538      	push	{r3, r4, r5, lr}
 8011866:	4d07      	ldr	r5, [pc, #28]	@ (8011884 <_read_r+0x20>)
 8011868:	4604      	mov	r4, r0
 801186a:	4608      	mov	r0, r1
 801186c:	4611      	mov	r1, r2
 801186e:	2200      	movs	r2, #0
 8011870:	602a      	str	r2, [r5, #0]
 8011872:	461a      	mov	r2, r3
 8011874:	f7f1 f963 	bl	8002b3e <_read>
 8011878:	1c43      	adds	r3, r0, #1
 801187a:	d102      	bne.n	8011882 <_read_r+0x1e>
 801187c:	682b      	ldr	r3, [r5, #0]
 801187e:	b103      	cbz	r3, 8011882 <_read_r+0x1e>
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	200049cc 	.word	0x200049cc

08011888 <_write_r>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	4d07      	ldr	r5, [pc, #28]	@ (80118a8 <_write_r+0x20>)
 801188c:	4604      	mov	r4, r0
 801188e:	4608      	mov	r0, r1
 8011890:	4611      	mov	r1, r2
 8011892:	2200      	movs	r2, #0
 8011894:	602a      	str	r2, [r5, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	f7f1 f96e 	bl	8002b78 <_write>
 801189c:	1c43      	adds	r3, r0, #1
 801189e:	d102      	bne.n	80118a6 <_write_r+0x1e>
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	b103      	cbz	r3, 80118a6 <_write_r+0x1e>
 80118a4:	6023      	str	r3, [r4, #0]
 80118a6:	bd38      	pop	{r3, r4, r5, pc}
 80118a8:	200049cc 	.word	0x200049cc

080118ac <__errno>:
 80118ac:	4b01      	ldr	r3, [pc, #4]	@ (80118b4 <__errno+0x8>)
 80118ae:	6818      	ldr	r0, [r3, #0]
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	20000190 	.word	0x20000190

080118b8 <__libc_init_array>:
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	4d0d      	ldr	r5, [pc, #52]	@ (80118f0 <__libc_init_array+0x38>)
 80118bc:	4c0d      	ldr	r4, [pc, #52]	@ (80118f4 <__libc_init_array+0x3c>)
 80118be:	1b64      	subs	r4, r4, r5
 80118c0:	10a4      	asrs	r4, r4, #2
 80118c2:	2600      	movs	r6, #0
 80118c4:	42a6      	cmp	r6, r4
 80118c6:	d109      	bne.n	80118dc <__libc_init_array+0x24>
 80118c8:	4d0b      	ldr	r5, [pc, #44]	@ (80118f8 <__libc_init_array+0x40>)
 80118ca:	4c0c      	ldr	r4, [pc, #48]	@ (80118fc <__libc_init_array+0x44>)
 80118cc:	f004 f8f0 	bl	8015ab0 <_init>
 80118d0:	1b64      	subs	r4, r4, r5
 80118d2:	10a4      	asrs	r4, r4, #2
 80118d4:	2600      	movs	r6, #0
 80118d6:	42a6      	cmp	r6, r4
 80118d8:	d105      	bne.n	80118e6 <__libc_init_array+0x2e>
 80118da:	bd70      	pop	{r4, r5, r6, pc}
 80118dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80118e0:	4798      	blx	r3
 80118e2:	3601      	adds	r6, #1
 80118e4:	e7ee      	b.n	80118c4 <__libc_init_array+0xc>
 80118e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80118ea:	4798      	blx	r3
 80118ec:	3601      	adds	r6, #1
 80118ee:	e7f2      	b.n	80118d6 <__libc_init_array+0x1e>
 80118f0:	08016378 	.word	0x08016378
 80118f4:	08016378 	.word	0x08016378
 80118f8:	08016378 	.word	0x08016378
 80118fc:	0801637c 	.word	0x0801637c

08011900 <__retarget_lock_init_recursive>:
 8011900:	4770      	bx	lr

08011902 <__retarget_lock_acquire_recursive>:
 8011902:	4770      	bx	lr

08011904 <__retarget_lock_release_recursive>:
 8011904:	4770      	bx	lr
	...

08011908 <nanf>:
 8011908:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011910 <nanf+0x8>
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop
 8011910:	7fc00000 	.word	0x7fc00000

08011914 <quorem>:
 8011914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	6903      	ldr	r3, [r0, #16]
 801191a:	690c      	ldr	r4, [r1, #16]
 801191c:	42a3      	cmp	r3, r4
 801191e:	4607      	mov	r7, r0
 8011920:	db7e      	blt.n	8011a20 <quorem+0x10c>
 8011922:	3c01      	subs	r4, #1
 8011924:	f101 0814 	add.w	r8, r1, #20
 8011928:	00a3      	lsls	r3, r4, #2
 801192a:	f100 0514 	add.w	r5, r0, #20
 801192e:	9300      	str	r3, [sp, #0]
 8011930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801193a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801193e:	3301      	adds	r3, #1
 8011940:	429a      	cmp	r2, r3
 8011942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011946:	fbb2 f6f3 	udiv	r6, r2, r3
 801194a:	d32e      	bcc.n	80119aa <quorem+0x96>
 801194c:	f04f 0a00 	mov.w	sl, #0
 8011950:	46c4      	mov	ip, r8
 8011952:	46ae      	mov	lr, r5
 8011954:	46d3      	mov	fp, sl
 8011956:	f85c 3b04 	ldr.w	r3, [ip], #4
 801195a:	b298      	uxth	r0, r3
 801195c:	fb06 a000 	mla	r0, r6, r0, sl
 8011960:	0c02      	lsrs	r2, r0, #16
 8011962:	0c1b      	lsrs	r3, r3, #16
 8011964:	fb06 2303 	mla	r3, r6, r3, r2
 8011968:	f8de 2000 	ldr.w	r2, [lr]
 801196c:	b280      	uxth	r0, r0
 801196e:	b292      	uxth	r2, r2
 8011970:	1a12      	subs	r2, r2, r0
 8011972:	445a      	add	r2, fp
 8011974:	f8de 0000 	ldr.w	r0, [lr]
 8011978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801197c:	b29b      	uxth	r3, r3
 801197e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011982:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011986:	b292      	uxth	r2, r2
 8011988:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801198c:	45e1      	cmp	r9, ip
 801198e:	f84e 2b04 	str.w	r2, [lr], #4
 8011992:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011996:	d2de      	bcs.n	8011956 <quorem+0x42>
 8011998:	9b00      	ldr	r3, [sp, #0]
 801199a:	58eb      	ldr	r3, [r5, r3]
 801199c:	b92b      	cbnz	r3, 80119aa <quorem+0x96>
 801199e:	9b01      	ldr	r3, [sp, #4]
 80119a0:	3b04      	subs	r3, #4
 80119a2:	429d      	cmp	r5, r3
 80119a4:	461a      	mov	r2, r3
 80119a6:	d32f      	bcc.n	8011a08 <quorem+0xf4>
 80119a8:	613c      	str	r4, [r7, #16]
 80119aa:	4638      	mov	r0, r7
 80119ac:	f001 f9c4 	bl	8012d38 <__mcmp>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	db25      	blt.n	8011a00 <quorem+0xec>
 80119b4:	4629      	mov	r1, r5
 80119b6:	2000      	movs	r0, #0
 80119b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80119bc:	f8d1 c000 	ldr.w	ip, [r1]
 80119c0:	fa1f fe82 	uxth.w	lr, r2
 80119c4:	fa1f f38c 	uxth.w	r3, ip
 80119c8:	eba3 030e 	sub.w	r3, r3, lr
 80119cc:	4403      	add	r3, r0
 80119ce:	0c12      	lsrs	r2, r2, #16
 80119d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80119d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80119d8:	b29b      	uxth	r3, r3
 80119da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119de:	45c1      	cmp	r9, r8
 80119e0:	f841 3b04 	str.w	r3, [r1], #4
 80119e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80119e8:	d2e6      	bcs.n	80119b8 <quorem+0xa4>
 80119ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119f2:	b922      	cbnz	r2, 80119fe <quorem+0xea>
 80119f4:	3b04      	subs	r3, #4
 80119f6:	429d      	cmp	r5, r3
 80119f8:	461a      	mov	r2, r3
 80119fa:	d30b      	bcc.n	8011a14 <quorem+0x100>
 80119fc:	613c      	str	r4, [r7, #16]
 80119fe:	3601      	adds	r6, #1
 8011a00:	4630      	mov	r0, r6
 8011a02:	b003      	add	sp, #12
 8011a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a08:	6812      	ldr	r2, [r2, #0]
 8011a0a:	3b04      	subs	r3, #4
 8011a0c:	2a00      	cmp	r2, #0
 8011a0e:	d1cb      	bne.n	80119a8 <quorem+0x94>
 8011a10:	3c01      	subs	r4, #1
 8011a12:	e7c6      	b.n	80119a2 <quorem+0x8e>
 8011a14:	6812      	ldr	r2, [r2, #0]
 8011a16:	3b04      	subs	r3, #4
 8011a18:	2a00      	cmp	r2, #0
 8011a1a:	d1ef      	bne.n	80119fc <quorem+0xe8>
 8011a1c:	3c01      	subs	r4, #1
 8011a1e:	e7ea      	b.n	80119f6 <quorem+0xe2>
 8011a20:	2000      	movs	r0, #0
 8011a22:	e7ee      	b.n	8011a02 <quorem+0xee>
 8011a24:	0000      	movs	r0, r0
	...

08011a28 <_dtoa_r>:
 8011a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	69c7      	ldr	r7, [r0, #28]
 8011a2e:	b099      	sub	sp, #100	@ 0x64
 8011a30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011a34:	ec55 4b10 	vmov	r4, r5, d0
 8011a38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011a3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a3c:	4683      	mov	fp, r0
 8011a3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a42:	b97f      	cbnz	r7, 8011a64 <_dtoa_r+0x3c>
 8011a44:	2010      	movs	r0, #16
 8011a46:	f000 fdfd 	bl	8012644 <malloc>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011a50:	b920      	cbnz	r0, 8011a5c <_dtoa_r+0x34>
 8011a52:	4ba7      	ldr	r3, [pc, #668]	@ (8011cf0 <_dtoa_r+0x2c8>)
 8011a54:	21ef      	movs	r1, #239	@ 0xef
 8011a56:	48a7      	ldr	r0, [pc, #668]	@ (8011cf4 <_dtoa_r+0x2cc>)
 8011a58:	f002 fc36 	bl	80142c8 <__assert_func>
 8011a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011a60:	6007      	str	r7, [r0, #0]
 8011a62:	60c7      	str	r7, [r0, #12]
 8011a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a68:	6819      	ldr	r1, [r3, #0]
 8011a6a:	b159      	cbz	r1, 8011a84 <_dtoa_r+0x5c>
 8011a6c:	685a      	ldr	r2, [r3, #4]
 8011a6e:	604a      	str	r2, [r1, #4]
 8011a70:	2301      	movs	r3, #1
 8011a72:	4093      	lsls	r3, r2
 8011a74:	608b      	str	r3, [r1, #8]
 8011a76:	4658      	mov	r0, fp
 8011a78:	f000 feda 	bl	8012830 <_Bfree>
 8011a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a80:	2200      	movs	r2, #0
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	1e2b      	subs	r3, r5, #0
 8011a86:	bfb9      	ittee	lt
 8011a88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011a8c:	9303      	strlt	r3, [sp, #12]
 8011a8e:	2300      	movge	r3, #0
 8011a90:	6033      	strge	r3, [r6, #0]
 8011a92:	9f03      	ldr	r7, [sp, #12]
 8011a94:	4b98      	ldr	r3, [pc, #608]	@ (8011cf8 <_dtoa_r+0x2d0>)
 8011a96:	bfbc      	itt	lt
 8011a98:	2201      	movlt	r2, #1
 8011a9a:	6032      	strlt	r2, [r6, #0]
 8011a9c:	43bb      	bics	r3, r7
 8011a9e:	d112      	bne.n	8011ac6 <_dtoa_r+0x9e>
 8011aa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011aa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011aa6:	6013      	str	r3, [r2, #0]
 8011aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011aac:	4323      	orrs	r3, r4
 8011aae:	f000 854d 	beq.w	801254c <_dtoa_r+0xb24>
 8011ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ab4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011d0c <_dtoa_r+0x2e4>
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 854f 	beq.w	801255c <_dtoa_r+0xb34>
 8011abe:	f10a 0303 	add.w	r3, sl, #3
 8011ac2:	f000 bd49 	b.w	8012558 <_dtoa_r+0xb30>
 8011ac6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011aca:	2200      	movs	r2, #0
 8011acc:	ec51 0b17 	vmov	r0, r1, d7
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011ad6:	f7ef f81f 	bl	8000b18 <__aeabi_dcmpeq>
 8011ada:	4680      	mov	r8, r0
 8011adc:	b158      	cbz	r0, 8011af6 <_dtoa_r+0xce>
 8011ade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ae6:	b113      	cbz	r3, 8011aee <_dtoa_r+0xc6>
 8011ae8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011aea:	4b84      	ldr	r3, [pc, #528]	@ (8011cfc <_dtoa_r+0x2d4>)
 8011aec:	6013      	str	r3, [r2, #0]
 8011aee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011d10 <_dtoa_r+0x2e8>
 8011af2:	f000 bd33 	b.w	801255c <_dtoa_r+0xb34>
 8011af6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011afa:	aa16      	add	r2, sp, #88	@ 0x58
 8011afc:	a917      	add	r1, sp, #92	@ 0x5c
 8011afe:	4658      	mov	r0, fp
 8011b00:	f001 fa3a 	bl	8012f78 <__d2b>
 8011b04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011b08:	4681      	mov	r9, r0
 8011b0a:	2e00      	cmp	r6, #0
 8011b0c:	d077      	beq.n	8011bfe <_dtoa_r+0x1d6>
 8011b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011b20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011b24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011b28:	4619      	mov	r1, r3
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	4b74      	ldr	r3, [pc, #464]	@ (8011d00 <_dtoa_r+0x2d8>)
 8011b2e:	f7ee fbd3 	bl	80002d8 <__aeabi_dsub>
 8011b32:	a369      	add	r3, pc, #420	@ (adr r3, 8011cd8 <_dtoa_r+0x2b0>)
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	f7ee fd86 	bl	8000648 <__aeabi_dmul>
 8011b3c:	a368      	add	r3, pc, #416	@ (adr r3, 8011ce0 <_dtoa_r+0x2b8>)
 8011b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b42:	f7ee fbcb 	bl	80002dc <__adddf3>
 8011b46:	4604      	mov	r4, r0
 8011b48:	4630      	mov	r0, r6
 8011b4a:	460d      	mov	r5, r1
 8011b4c:	f7ee fd12 	bl	8000574 <__aeabi_i2d>
 8011b50:	a365      	add	r3, pc, #404	@ (adr r3, 8011ce8 <_dtoa_r+0x2c0>)
 8011b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b56:	f7ee fd77 	bl	8000648 <__aeabi_dmul>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	4620      	mov	r0, r4
 8011b60:	4629      	mov	r1, r5
 8011b62:	f7ee fbbb 	bl	80002dc <__adddf3>
 8011b66:	4604      	mov	r4, r0
 8011b68:	460d      	mov	r5, r1
 8011b6a:	f7ef f81d 	bl	8000ba8 <__aeabi_d2iz>
 8011b6e:	2200      	movs	r2, #0
 8011b70:	4607      	mov	r7, r0
 8011b72:	2300      	movs	r3, #0
 8011b74:	4620      	mov	r0, r4
 8011b76:	4629      	mov	r1, r5
 8011b78:	f7ee ffd8 	bl	8000b2c <__aeabi_dcmplt>
 8011b7c:	b140      	cbz	r0, 8011b90 <_dtoa_r+0x168>
 8011b7e:	4638      	mov	r0, r7
 8011b80:	f7ee fcf8 	bl	8000574 <__aeabi_i2d>
 8011b84:	4622      	mov	r2, r4
 8011b86:	462b      	mov	r3, r5
 8011b88:	f7ee ffc6 	bl	8000b18 <__aeabi_dcmpeq>
 8011b8c:	b900      	cbnz	r0, 8011b90 <_dtoa_r+0x168>
 8011b8e:	3f01      	subs	r7, #1
 8011b90:	2f16      	cmp	r7, #22
 8011b92:	d851      	bhi.n	8011c38 <_dtoa_r+0x210>
 8011b94:	4b5b      	ldr	r3, [pc, #364]	@ (8011d04 <_dtoa_r+0x2dc>)
 8011b96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ba2:	f7ee ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	d048      	beq.n	8011c3c <_dtoa_r+0x214>
 8011baa:	3f01      	subs	r7, #1
 8011bac:	2300      	movs	r3, #0
 8011bae:	9312      	str	r3, [sp, #72]	@ 0x48
 8011bb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bb2:	1b9b      	subs	r3, r3, r6
 8011bb4:	1e5a      	subs	r2, r3, #1
 8011bb6:	bf44      	itt	mi
 8011bb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8011bbc:	2300      	movmi	r3, #0
 8011bbe:	9208      	str	r2, [sp, #32]
 8011bc0:	bf54      	ite	pl
 8011bc2:	f04f 0800 	movpl.w	r8, #0
 8011bc6:	9308      	strmi	r3, [sp, #32]
 8011bc8:	2f00      	cmp	r7, #0
 8011bca:	db39      	blt.n	8011c40 <_dtoa_r+0x218>
 8011bcc:	9b08      	ldr	r3, [sp, #32]
 8011bce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011bd0:	443b      	add	r3, r7
 8011bd2:	9308      	str	r3, [sp, #32]
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bda:	2b09      	cmp	r3, #9
 8011bdc:	d864      	bhi.n	8011ca8 <_dtoa_r+0x280>
 8011bde:	2b05      	cmp	r3, #5
 8011be0:	bfc4      	itt	gt
 8011be2:	3b04      	subgt	r3, #4
 8011be4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011be8:	f1a3 0302 	sub.w	r3, r3, #2
 8011bec:	bfcc      	ite	gt
 8011bee:	2400      	movgt	r4, #0
 8011bf0:	2401      	movle	r4, #1
 8011bf2:	2b03      	cmp	r3, #3
 8011bf4:	d863      	bhi.n	8011cbe <_dtoa_r+0x296>
 8011bf6:	e8df f003 	tbb	[pc, r3]
 8011bfa:	372a      	.short	0x372a
 8011bfc:	5535      	.short	0x5535
 8011bfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011c02:	441e      	add	r6, r3
 8011c04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011c08:	2b20      	cmp	r3, #32
 8011c0a:	bfc1      	itttt	gt
 8011c0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011c10:	409f      	lslgt	r7, r3
 8011c12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011c16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011c1a:	bfd6      	itet	le
 8011c1c:	f1c3 0320 	rsble	r3, r3, #32
 8011c20:	ea47 0003 	orrgt.w	r0, r7, r3
 8011c24:	fa04 f003 	lslle.w	r0, r4, r3
 8011c28:	f7ee fc94 	bl	8000554 <__aeabi_ui2d>
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011c32:	3e01      	subs	r6, #1
 8011c34:	9214      	str	r2, [sp, #80]	@ 0x50
 8011c36:	e777      	b.n	8011b28 <_dtoa_r+0x100>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e7b8      	b.n	8011bae <_dtoa_r+0x186>
 8011c3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8011c3e:	e7b7      	b.n	8011bb0 <_dtoa_r+0x188>
 8011c40:	427b      	negs	r3, r7
 8011c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c44:	2300      	movs	r3, #0
 8011c46:	eba8 0807 	sub.w	r8, r8, r7
 8011c4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c4c:	e7c4      	b.n	8011bd8 <_dtoa_r+0x1b0>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	dc35      	bgt.n	8011cc4 <_dtoa_r+0x29c>
 8011c58:	2301      	movs	r3, #1
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	9307      	str	r3, [sp, #28]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c62:	e00b      	b.n	8011c7c <_dtoa_r+0x254>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e7f3      	b.n	8011c50 <_dtoa_r+0x228>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c6e:	18fb      	adds	r3, r7, r3
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	3301      	adds	r3, #1
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	bfb8      	it	lt
 8011c7a:	2301      	movlt	r3, #1
 8011c7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011c80:	2100      	movs	r1, #0
 8011c82:	2204      	movs	r2, #4
 8011c84:	f102 0514 	add.w	r5, r2, #20
 8011c88:	429d      	cmp	r5, r3
 8011c8a:	d91f      	bls.n	8011ccc <_dtoa_r+0x2a4>
 8011c8c:	6041      	str	r1, [r0, #4]
 8011c8e:	4658      	mov	r0, fp
 8011c90:	f000 fd8e 	bl	80127b0 <_Balloc>
 8011c94:	4682      	mov	sl, r0
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d13c      	bne.n	8011d14 <_dtoa_r+0x2ec>
 8011c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8011d08 <_dtoa_r+0x2e0>)
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011ca2:	e6d8      	b.n	8011a56 <_dtoa_r+0x2e>
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e7e0      	b.n	8011c6a <_dtoa_r+0x242>
 8011ca8:	2401      	movs	r4, #1
 8011caa:	2300      	movs	r3, #0
 8011cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	9307      	str	r3, [sp, #28]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	2312      	movs	r3, #18
 8011cbc:	e7d0      	b.n	8011c60 <_dtoa_r+0x238>
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cc2:	e7f5      	b.n	8011cb0 <_dtoa_r+0x288>
 8011cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	9307      	str	r3, [sp, #28]
 8011cca:	e7d7      	b.n	8011c7c <_dtoa_r+0x254>
 8011ccc:	3101      	adds	r1, #1
 8011cce:	0052      	lsls	r2, r2, #1
 8011cd0:	e7d8      	b.n	8011c84 <_dtoa_r+0x25c>
 8011cd2:	bf00      	nop
 8011cd4:	f3af 8000 	nop.w
 8011cd8:	636f4361 	.word	0x636f4361
 8011cdc:	3fd287a7 	.word	0x3fd287a7
 8011ce0:	8b60c8b3 	.word	0x8b60c8b3
 8011ce4:	3fc68a28 	.word	0x3fc68a28
 8011ce8:	509f79fb 	.word	0x509f79fb
 8011cec:	3fd34413 	.word	0x3fd34413
 8011cf0:	08015bba 	.word	0x08015bba
 8011cf4:	08015bd1 	.word	0x08015bd1
 8011cf8:	7ff00000 	.word	0x7ff00000
 8011cfc:	08015b85 	.word	0x08015b85
 8011d00:	3ff80000 	.word	0x3ff80000
 8011d04:	08015cc8 	.word	0x08015cc8
 8011d08:	08015c29 	.word	0x08015c29
 8011d0c:	08015bb6 	.word	0x08015bb6
 8011d10:	08015b84 	.word	0x08015b84
 8011d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011d18:	6018      	str	r0, [r3, #0]
 8011d1a:	9b07      	ldr	r3, [sp, #28]
 8011d1c:	2b0e      	cmp	r3, #14
 8011d1e:	f200 80a4 	bhi.w	8011e6a <_dtoa_r+0x442>
 8011d22:	2c00      	cmp	r4, #0
 8011d24:	f000 80a1 	beq.w	8011e6a <_dtoa_r+0x442>
 8011d28:	2f00      	cmp	r7, #0
 8011d2a:	dd33      	ble.n	8011d94 <_dtoa_r+0x36c>
 8011d2c:	4bad      	ldr	r3, [pc, #692]	@ (8011fe4 <_dtoa_r+0x5bc>)
 8011d2e:	f007 020f 	and.w	r2, r7, #15
 8011d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d36:	ed93 7b00 	vldr	d7, [r3]
 8011d3a:	05f8      	lsls	r0, r7, #23
 8011d3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011d40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011d44:	d516      	bpl.n	8011d74 <_dtoa_r+0x34c>
 8011d46:	4ba8      	ldr	r3, [pc, #672]	@ (8011fe8 <_dtoa_r+0x5c0>)
 8011d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d50:	f7ee fda4 	bl	800089c <__aeabi_ddiv>
 8011d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d58:	f004 040f 	and.w	r4, r4, #15
 8011d5c:	2603      	movs	r6, #3
 8011d5e:	4da2      	ldr	r5, [pc, #648]	@ (8011fe8 <_dtoa_r+0x5c0>)
 8011d60:	b954      	cbnz	r4, 8011d78 <_dtoa_r+0x350>
 8011d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d6a:	f7ee fd97 	bl	800089c <__aeabi_ddiv>
 8011d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d72:	e028      	b.n	8011dc6 <_dtoa_r+0x39e>
 8011d74:	2602      	movs	r6, #2
 8011d76:	e7f2      	b.n	8011d5e <_dtoa_r+0x336>
 8011d78:	07e1      	lsls	r1, r4, #31
 8011d7a:	d508      	bpl.n	8011d8e <_dtoa_r+0x366>
 8011d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d84:	f7ee fc60 	bl	8000648 <__aeabi_dmul>
 8011d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d8c:	3601      	adds	r6, #1
 8011d8e:	1064      	asrs	r4, r4, #1
 8011d90:	3508      	adds	r5, #8
 8011d92:	e7e5      	b.n	8011d60 <_dtoa_r+0x338>
 8011d94:	f000 80d2 	beq.w	8011f3c <_dtoa_r+0x514>
 8011d98:	427c      	negs	r4, r7
 8011d9a:	4b92      	ldr	r3, [pc, #584]	@ (8011fe4 <_dtoa_r+0x5bc>)
 8011d9c:	4d92      	ldr	r5, [pc, #584]	@ (8011fe8 <_dtoa_r+0x5c0>)
 8011d9e:	f004 020f 	and.w	r2, r4, #15
 8011da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011dae:	f7ee fc4b 	bl	8000648 <__aeabi_dmul>
 8011db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011db6:	1124      	asrs	r4, r4, #4
 8011db8:	2300      	movs	r3, #0
 8011dba:	2602      	movs	r6, #2
 8011dbc:	2c00      	cmp	r4, #0
 8011dbe:	f040 80b2 	bne.w	8011f26 <_dtoa_r+0x4fe>
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d1d3      	bne.n	8011d6e <_dtoa_r+0x346>
 8011dc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011dc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	f000 80b7 	beq.w	8011f40 <_dtoa_r+0x518>
 8011dd2:	4b86      	ldr	r3, [pc, #536]	@ (8011fec <_dtoa_r+0x5c4>)
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	4629      	mov	r1, r5
 8011dda:	f7ee fea7 	bl	8000b2c <__aeabi_dcmplt>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	f000 80ae 	beq.w	8011f40 <_dtoa_r+0x518>
 8011de4:	9b07      	ldr	r3, [sp, #28]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f000 80aa 	beq.w	8011f40 <_dtoa_r+0x518>
 8011dec:	9b00      	ldr	r3, [sp, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	dd37      	ble.n	8011e62 <_dtoa_r+0x43a>
 8011df2:	1e7b      	subs	r3, r7, #1
 8011df4:	9304      	str	r3, [sp, #16]
 8011df6:	4620      	mov	r0, r4
 8011df8:	4b7d      	ldr	r3, [pc, #500]	@ (8011ff0 <_dtoa_r+0x5c8>)
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	f7ee fc23 	bl	8000648 <__aeabi_dmul>
 8011e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e06:	9c00      	ldr	r4, [sp, #0]
 8011e08:	3601      	adds	r6, #1
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f7ee fbb2 	bl	8000574 <__aeabi_i2d>
 8011e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e14:	f7ee fc18 	bl	8000648 <__aeabi_dmul>
 8011e18:	4b76      	ldr	r3, [pc, #472]	@ (8011ff4 <_dtoa_r+0x5cc>)
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f7ee fa5e 	bl	80002dc <__adddf3>
 8011e20:	4605      	mov	r5, r0
 8011e22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011e26:	2c00      	cmp	r4, #0
 8011e28:	f040 808d 	bne.w	8011f46 <_dtoa_r+0x51e>
 8011e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e30:	4b71      	ldr	r3, [pc, #452]	@ (8011ff8 <_dtoa_r+0x5d0>)
 8011e32:	2200      	movs	r2, #0
 8011e34:	f7ee fa50 	bl	80002d8 <__aeabi_dsub>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e40:	462a      	mov	r2, r5
 8011e42:	4633      	mov	r3, r6
 8011e44:	f7ee fe90 	bl	8000b68 <__aeabi_dcmpgt>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f040 828b 	bne.w	8012364 <_dtoa_r+0x93c>
 8011e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e52:	462a      	mov	r2, r5
 8011e54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011e58:	f7ee fe68 	bl	8000b2c <__aeabi_dcmplt>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	f040 8128 	bne.w	80120b2 <_dtoa_r+0x68a>
 8011e62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011e66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f2c0 815a 	blt.w	8012126 <_dtoa_r+0x6fe>
 8011e72:	2f0e      	cmp	r7, #14
 8011e74:	f300 8157 	bgt.w	8012126 <_dtoa_r+0x6fe>
 8011e78:	4b5a      	ldr	r3, [pc, #360]	@ (8011fe4 <_dtoa_r+0x5bc>)
 8011e7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011e7e:	ed93 7b00 	vldr	d7, [r3]
 8011e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	ed8d 7b00 	vstr	d7, [sp]
 8011e8a:	da03      	bge.n	8011e94 <_dtoa_r+0x46c>
 8011e8c:	9b07      	ldr	r3, [sp, #28]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f340 8101 	ble.w	8012096 <_dtoa_r+0x66e>
 8011e94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011e98:	4656      	mov	r6, sl
 8011e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	f7ee fcfb 	bl	800089c <__aeabi_ddiv>
 8011ea6:	f7ee fe7f 	bl	8000ba8 <__aeabi_d2iz>
 8011eaa:	4680      	mov	r8, r0
 8011eac:	f7ee fb62 	bl	8000574 <__aeabi_i2d>
 8011eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011eb4:	f7ee fbc8 	bl	8000648 <__aeabi_dmul>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	460b      	mov	r3, r1
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011ec4:	f7ee fa08 	bl	80002d8 <__aeabi_dsub>
 8011ec8:	f806 4b01 	strb.w	r4, [r6], #1
 8011ecc:	9d07      	ldr	r5, [sp, #28]
 8011ece:	eba6 040a 	sub.w	r4, r6, sl
 8011ed2:	42a5      	cmp	r5, r4
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	f040 8117 	bne.w	801210a <_dtoa_r+0x6e2>
 8011edc:	f7ee f9fe 	bl	80002dc <__adddf3>
 8011ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	460d      	mov	r5, r1
 8011ee8:	f7ee fe3e 	bl	8000b68 <__aeabi_dcmpgt>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	f040 80f9 	bne.w	80120e4 <_dtoa_r+0x6bc>
 8011ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	4629      	mov	r1, r5
 8011efa:	f7ee fe0d 	bl	8000b18 <__aeabi_dcmpeq>
 8011efe:	b118      	cbz	r0, 8011f08 <_dtoa_r+0x4e0>
 8011f00:	f018 0f01 	tst.w	r8, #1
 8011f04:	f040 80ee 	bne.w	80120e4 <_dtoa_r+0x6bc>
 8011f08:	4649      	mov	r1, r9
 8011f0a:	4658      	mov	r0, fp
 8011f0c:	f000 fc90 	bl	8012830 <_Bfree>
 8011f10:	2300      	movs	r3, #0
 8011f12:	7033      	strb	r3, [r6, #0]
 8011f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f16:	3701      	adds	r7, #1
 8011f18:	601f      	str	r7, [r3, #0]
 8011f1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f000 831d 	beq.w	801255c <_dtoa_r+0xb34>
 8011f22:	601e      	str	r6, [r3, #0]
 8011f24:	e31a      	b.n	801255c <_dtoa_r+0xb34>
 8011f26:	07e2      	lsls	r2, r4, #31
 8011f28:	d505      	bpl.n	8011f36 <_dtoa_r+0x50e>
 8011f2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f2e:	f7ee fb8b 	bl	8000648 <__aeabi_dmul>
 8011f32:	3601      	adds	r6, #1
 8011f34:	2301      	movs	r3, #1
 8011f36:	1064      	asrs	r4, r4, #1
 8011f38:	3508      	adds	r5, #8
 8011f3a:	e73f      	b.n	8011dbc <_dtoa_r+0x394>
 8011f3c:	2602      	movs	r6, #2
 8011f3e:	e742      	b.n	8011dc6 <_dtoa_r+0x39e>
 8011f40:	9c07      	ldr	r4, [sp, #28]
 8011f42:	9704      	str	r7, [sp, #16]
 8011f44:	e761      	b.n	8011e0a <_dtoa_r+0x3e2>
 8011f46:	4b27      	ldr	r3, [pc, #156]	@ (8011fe4 <_dtoa_r+0x5bc>)
 8011f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f52:	4454      	add	r4, sl
 8011f54:	2900      	cmp	r1, #0
 8011f56:	d053      	beq.n	8012000 <_dtoa_r+0x5d8>
 8011f58:	4928      	ldr	r1, [pc, #160]	@ (8011ffc <_dtoa_r+0x5d4>)
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	f7ee fc9e 	bl	800089c <__aeabi_ddiv>
 8011f60:	4633      	mov	r3, r6
 8011f62:	462a      	mov	r2, r5
 8011f64:	f7ee f9b8 	bl	80002d8 <__aeabi_dsub>
 8011f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f6c:	4656      	mov	r6, sl
 8011f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f72:	f7ee fe19 	bl	8000ba8 <__aeabi_d2iz>
 8011f76:	4605      	mov	r5, r0
 8011f78:	f7ee fafc 	bl	8000574 <__aeabi_i2d>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	460b      	mov	r3, r1
 8011f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f84:	f7ee f9a8 	bl	80002d8 <__aeabi_dsub>
 8011f88:	3530      	adds	r5, #48	@ 0x30
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f92:	f806 5b01 	strb.w	r5, [r6], #1
 8011f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f9a:	f7ee fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d171      	bne.n	8012086 <_dtoa_r+0x65e>
 8011fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011fa6:	4911      	ldr	r1, [pc, #68]	@ (8011fec <_dtoa_r+0x5c4>)
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7ee f995 	bl	80002d8 <__aeabi_dsub>
 8011fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011fb2:	f7ee fdbb 	bl	8000b2c <__aeabi_dcmplt>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f040 8095 	bne.w	80120e6 <_dtoa_r+0x6be>
 8011fbc:	42a6      	cmp	r6, r4
 8011fbe:	f43f af50 	beq.w	8011e62 <_dtoa_r+0x43a>
 8011fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff0 <_dtoa_r+0x5c8>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f7ee fb3d 	bl	8000648 <__aeabi_dmul>
 8011fce:	4b08      	ldr	r3, [pc, #32]	@ (8011ff0 <_dtoa_r+0x5c8>)
 8011fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fda:	f7ee fb35 	bl	8000648 <__aeabi_dmul>
 8011fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fe2:	e7c4      	b.n	8011f6e <_dtoa_r+0x546>
 8011fe4:	08015cc8 	.word	0x08015cc8
 8011fe8:	08015ca0 	.word	0x08015ca0
 8011fec:	3ff00000 	.word	0x3ff00000
 8011ff0:	40240000 	.word	0x40240000
 8011ff4:	401c0000 	.word	0x401c0000
 8011ff8:	40140000 	.word	0x40140000
 8011ffc:	3fe00000 	.word	0x3fe00000
 8012000:	4631      	mov	r1, r6
 8012002:	4628      	mov	r0, r5
 8012004:	f7ee fb20 	bl	8000648 <__aeabi_dmul>
 8012008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801200c:	9415      	str	r4, [sp, #84]	@ 0x54
 801200e:	4656      	mov	r6, sl
 8012010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012014:	f7ee fdc8 	bl	8000ba8 <__aeabi_d2iz>
 8012018:	4605      	mov	r5, r0
 801201a:	f7ee faab 	bl	8000574 <__aeabi_i2d>
 801201e:	4602      	mov	r2, r0
 8012020:	460b      	mov	r3, r1
 8012022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012026:	f7ee f957 	bl	80002d8 <__aeabi_dsub>
 801202a:	3530      	adds	r5, #48	@ 0x30
 801202c:	f806 5b01 	strb.w	r5, [r6], #1
 8012030:	4602      	mov	r2, r0
 8012032:	460b      	mov	r3, r1
 8012034:	42a6      	cmp	r6, r4
 8012036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801203a:	f04f 0200 	mov.w	r2, #0
 801203e:	d124      	bne.n	801208a <_dtoa_r+0x662>
 8012040:	4bac      	ldr	r3, [pc, #688]	@ (80122f4 <_dtoa_r+0x8cc>)
 8012042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012046:	f7ee f949 	bl	80002dc <__adddf3>
 801204a:	4602      	mov	r2, r0
 801204c:	460b      	mov	r3, r1
 801204e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012052:	f7ee fd89 	bl	8000b68 <__aeabi_dcmpgt>
 8012056:	2800      	cmp	r0, #0
 8012058:	d145      	bne.n	80120e6 <_dtoa_r+0x6be>
 801205a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801205e:	49a5      	ldr	r1, [pc, #660]	@ (80122f4 <_dtoa_r+0x8cc>)
 8012060:	2000      	movs	r0, #0
 8012062:	f7ee f939 	bl	80002d8 <__aeabi_dsub>
 8012066:	4602      	mov	r2, r0
 8012068:	460b      	mov	r3, r1
 801206a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801206e:	f7ee fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8012072:	2800      	cmp	r0, #0
 8012074:	f43f aef5 	beq.w	8011e62 <_dtoa_r+0x43a>
 8012078:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801207a:	1e73      	subs	r3, r6, #1
 801207c:	9315      	str	r3, [sp, #84]	@ 0x54
 801207e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012082:	2b30      	cmp	r3, #48	@ 0x30
 8012084:	d0f8      	beq.n	8012078 <_dtoa_r+0x650>
 8012086:	9f04      	ldr	r7, [sp, #16]
 8012088:	e73e      	b.n	8011f08 <_dtoa_r+0x4e0>
 801208a:	4b9b      	ldr	r3, [pc, #620]	@ (80122f8 <_dtoa_r+0x8d0>)
 801208c:	f7ee fadc 	bl	8000648 <__aeabi_dmul>
 8012090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012094:	e7bc      	b.n	8012010 <_dtoa_r+0x5e8>
 8012096:	d10c      	bne.n	80120b2 <_dtoa_r+0x68a>
 8012098:	4b98      	ldr	r3, [pc, #608]	@ (80122fc <_dtoa_r+0x8d4>)
 801209a:	2200      	movs	r2, #0
 801209c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120a0:	f7ee fad2 	bl	8000648 <__aeabi_dmul>
 80120a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120a8:	f7ee fd54 	bl	8000b54 <__aeabi_dcmpge>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	f000 8157 	beq.w	8012360 <_dtoa_r+0x938>
 80120b2:	2400      	movs	r4, #0
 80120b4:	4625      	mov	r5, r4
 80120b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120b8:	43db      	mvns	r3, r3
 80120ba:	9304      	str	r3, [sp, #16]
 80120bc:	4656      	mov	r6, sl
 80120be:	2700      	movs	r7, #0
 80120c0:	4621      	mov	r1, r4
 80120c2:	4658      	mov	r0, fp
 80120c4:	f000 fbb4 	bl	8012830 <_Bfree>
 80120c8:	2d00      	cmp	r5, #0
 80120ca:	d0dc      	beq.n	8012086 <_dtoa_r+0x65e>
 80120cc:	b12f      	cbz	r7, 80120da <_dtoa_r+0x6b2>
 80120ce:	42af      	cmp	r7, r5
 80120d0:	d003      	beq.n	80120da <_dtoa_r+0x6b2>
 80120d2:	4639      	mov	r1, r7
 80120d4:	4658      	mov	r0, fp
 80120d6:	f000 fbab 	bl	8012830 <_Bfree>
 80120da:	4629      	mov	r1, r5
 80120dc:	4658      	mov	r0, fp
 80120de:	f000 fba7 	bl	8012830 <_Bfree>
 80120e2:	e7d0      	b.n	8012086 <_dtoa_r+0x65e>
 80120e4:	9704      	str	r7, [sp, #16]
 80120e6:	4633      	mov	r3, r6
 80120e8:	461e      	mov	r6, r3
 80120ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120ee:	2a39      	cmp	r2, #57	@ 0x39
 80120f0:	d107      	bne.n	8012102 <_dtoa_r+0x6da>
 80120f2:	459a      	cmp	sl, r3
 80120f4:	d1f8      	bne.n	80120e8 <_dtoa_r+0x6c0>
 80120f6:	9a04      	ldr	r2, [sp, #16]
 80120f8:	3201      	adds	r2, #1
 80120fa:	9204      	str	r2, [sp, #16]
 80120fc:	2230      	movs	r2, #48	@ 0x30
 80120fe:	f88a 2000 	strb.w	r2, [sl]
 8012102:	781a      	ldrb	r2, [r3, #0]
 8012104:	3201      	adds	r2, #1
 8012106:	701a      	strb	r2, [r3, #0]
 8012108:	e7bd      	b.n	8012086 <_dtoa_r+0x65e>
 801210a:	4b7b      	ldr	r3, [pc, #492]	@ (80122f8 <_dtoa_r+0x8d0>)
 801210c:	2200      	movs	r2, #0
 801210e:	f7ee fa9b 	bl	8000648 <__aeabi_dmul>
 8012112:	2200      	movs	r2, #0
 8012114:	2300      	movs	r3, #0
 8012116:	4604      	mov	r4, r0
 8012118:	460d      	mov	r5, r1
 801211a:	f7ee fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 801211e:	2800      	cmp	r0, #0
 8012120:	f43f aebb 	beq.w	8011e9a <_dtoa_r+0x472>
 8012124:	e6f0      	b.n	8011f08 <_dtoa_r+0x4e0>
 8012126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012128:	2a00      	cmp	r2, #0
 801212a:	f000 80db 	beq.w	80122e4 <_dtoa_r+0x8bc>
 801212e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012130:	2a01      	cmp	r2, #1
 8012132:	f300 80bf 	bgt.w	80122b4 <_dtoa_r+0x88c>
 8012136:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012138:	2a00      	cmp	r2, #0
 801213a:	f000 80b7 	beq.w	80122ac <_dtoa_r+0x884>
 801213e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012142:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012144:	4646      	mov	r6, r8
 8012146:	9a08      	ldr	r2, [sp, #32]
 8012148:	2101      	movs	r1, #1
 801214a:	441a      	add	r2, r3
 801214c:	4658      	mov	r0, fp
 801214e:	4498      	add	r8, r3
 8012150:	9208      	str	r2, [sp, #32]
 8012152:	f000 fc6b 	bl	8012a2c <__i2b>
 8012156:	4605      	mov	r5, r0
 8012158:	b15e      	cbz	r6, 8012172 <_dtoa_r+0x74a>
 801215a:	9b08      	ldr	r3, [sp, #32]
 801215c:	2b00      	cmp	r3, #0
 801215e:	dd08      	ble.n	8012172 <_dtoa_r+0x74a>
 8012160:	42b3      	cmp	r3, r6
 8012162:	9a08      	ldr	r2, [sp, #32]
 8012164:	bfa8      	it	ge
 8012166:	4633      	movge	r3, r6
 8012168:	eba8 0803 	sub.w	r8, r8, r3
 801216c:	1af6      	subs	r6, r6, r3
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	9308      	str	r3, [sp, #32]
 8012172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012174:	b1f3      	cbz	r3, 80121b4 <_dtoa_r+0x78c>
 8012176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012178:	2b00      	cmp	r3, #0
 801217a:	f000 80b7 	beq.w	80122ec <_dtoa_r+0x8c4>
 801217e:	b18c      	cbz	r4, 80121a4 <_dtoa_r+0x77c>
 8012180:	4629      	mov	r1, r5
 8012182:	4622      	mov	r2, r4
 8012184:	4658      	mov	r0, fp
 8012186:	f000 fd11 	bl	8012bac <__pow5mult>
 801218a:	464a      	mov	r2, r9
 801218c:	4601      	mov	r1, r0
 801218e:	4605      	mov	r5, r0
 8012190:	4658      	mov	r0, fp
 8012192:	f000 fc61 	bl	8012a58 <__multiply>
 8012196:	4649      	mov	r1, r9
 8012198:	9004      	str	r0, [sp, #16]
 801219a:	4658      	mov	r0, fp
 801219c:	f000 fb48 	bl	8012830 <_Bfree>
 80121a0:	9b04      	ldr	r3, [sp, #16]
 80121a2:	4699      	mov	r9, r3
 80121a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121a6:	1b1a      	subs	r2, r3, r4
 80121a8:	d004      	beq.n	80121b4 <_dtoa_r+0x78c>
 80121aa:	4649      	mov	r1, r9
 80121ac:	4658      	mov	r0, fp
 80121ae:	f000 fcfd 	bl	8012bac <__pow5mult>
 80121b2:	4681      	mov	r9, r0
 80121b4:	2101      	movs	r1, #1
 80121b6:	4658      	mov	r0, fp
 80121b8:	f000 fc38 	bl	8012a2c <__i2b>
 80121bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121be:	4604      	mov	r4, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 81cf 	beq.w	8012564 <_dtoa_r+0xb3c>
 80121c6:	461a      	mov	r2, r3
 80121c8:	4601      	mov	r1, r0
 80121ca:	4658      	mov	r0, fp
 80121cc:	f000 fcee 	bl	8012bac <__pow5mult>
 80121d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	4604      	mov	r4, r0
 80121d6:	f300 8095 	bgt.w	8012304 <_dtoa_r+0x8dc>
 80121da:	9b02      	ldr	r3, [sp, #8]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	f040 8087 	bne.w	80122f0 <_dtoa_r+0x8c8>
 80121e2:	9b03      	ldr	r3, [sp, #12]
 80121e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	f040 8089 	bne.w	8012300 <_dtoa_r+0x8d8>
 80121ee:	9b03      	ldr	r3, [sp, #12]
 80121f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121f4:	0d1b      	lsrs	r3, r3, #20
 80121f6:	051b      	lsls	r3, r3, #20
 80121f8:	b12b      	cbz	r3, 8012206 <_dtoa_r+0x7de>
 80121fa:	9b08      	ldr	r3, [sp, #32]
 80121fc:	3301      	adds	r3, #1
 80121fe:	9308      	str	r3, [sp, #32]
 8012200:	f108 0801 	add.w	r8, r8, #1
 8012204:	2301      	movs	r3, #1
 8012206:	930a      	str	r3, [sp, #40]	@ 0x28
 8012208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801220a:	2b00      	cmp	r3, #0
 801220c:	f000 81b0 	beq.w	8012570 <_dtoa_r+0xb48>
 8012210:	6923      	ldr	r3, [r4, #16]
 8012212:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012216:	6918      	ldr	r0, [r3, #16]
 8012218:	f000 fbbc 	bl	8012994 <__hi0bits>
 801221c:	f1c0 0020 	rsb	r0, r0, #32
 8012220:	9b08      	ldr	r3, [sp, #32]
 8012222:	4418      	add	r0, r3
 8012224:	f010 001f 	ands.w	r0, r0, #31
 8012228:	d077      	beq.n	801231a <_dtoa_r+0x8f2>
 801222a:	f1c0 0320 	rsb	r3, r0, #32
 801222e:	2b04      	cmp	r3, #4
 8012230:	dd6b      	ble.n	801230a <_dtoa_r+0x8e2>
 8012232:	9b08      	ldr	r3, [sp, #32]
 8012234:	f1c0 001c 	rsb	r0, r0, #28
 8012238:	4403      	add	r3, r0
 801223a:	4480      	add	r8, r0
 801223c:	4406      	add	r6, r0
 801223e:	9308      	str	r3, [sp, #32]
 8012240:	f1b8 0f00 	cmp.w	r8, #0
 8012244:	dd05      	ble.n	8012252 <_dtoa_r+0x82a>
 8012246:	4649      	mov	r1, r9
 8012248:	4642      	mov	r2, r8
 801224a:	4658      	mov	r0, fp
 801224c:	f000 fd08 	bl	8012c60 <__lshift>
 8012250:	4681      	mov	r9, r0
 8012252:	9b08      	ldr	r3, [sp, #32]
 8012254:	2b00      	cmp	r3, #0
 8012256:	dd05      	ble.n	8012264 <_dtoa_r+0x83c>
 8012258:	4621      	mov	r1, r4
 801225a:	461a      	mov	r2, r3
 801225c:	4658      	mov	r0, fp
 801225e:	f000 fcff 	bl	8012c60 <__lshift>
 8012262:	4604      	mov	r4, r0
 8012264:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012266:	2b00      	cmp	r3, #0
 8012268:	d059      	beq.n	801231e <_dtoa_r+0x8f6>
 801226a:	4621      	mov	r1, r4
 801226c:	4648      	mov	r0, r9
 801226e:	f000 fd63 	bl	8012d38 <__mcmp>
 8012272:	2800      	cmp	r0, #0
 8012274:	da53      	bge.n	801231e <_dtoa_r+0x8f6>
 8012276:	1e7b      	subs	r3, r7, #1
 8012278:	9304      	str	r3, [sp, #16]
 801227a:	4649      	mov	r1, r9
 801227c:	2300      	movs	r3, #0
 801227e:	220a      	movs	r2, #10
 8012280:	4658      	mov	r0, fp
 8012282:	f000 faf7 	bl	8012874 <__multadd>
 8012286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012288:	4681      	mov	r9, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	f000 8172 	beq.w	8012574 <_dtoa_r+0xb4c>
 8012290:	2300      	movs	r3, #0
 8012292:	4629      	mov	r1, r5
 8012294:	220a      	movs	r2, #10
 8012296:	4658      	mov	r0, fp
 8012298:	f000 faec 	bl	8012874 <__multadd>
 801229c:	9b00      	ldr	r3, [sp, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	4605      	mov	r5, r0
 80122a2:	dc67      	bgt.n	8012374 <_dtoa_r+0x94c>
 80122a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	dc41      	bgt.n	801232e <_dtoa_r+0x906>
 80122aa:	e063      	b.n	8012374 <_dtoa_r+0x94c>
 80122ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80122b2:	e746      	b.n	8012142 <_dtoa_r+0x71a>
 80122b4:	9b07      	ldr	r3, [sp, #28]
 80122b6:	1e5c      	subs	r4, r3, #1
 80122b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122ba:	42a3      	cmp	r3, r4
 80122bc:	bfbf      	itttt	lt
 80122be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80122c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80122c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80122c4:	1ae3      	sublt	r3, r4, r3
 80122c6:	bfb4      	ite	lt
 80122c8:	18d2      	addlt	r2, r2, r3
 80122ca:	1b1c      	subge	r4, r3, r4
 80122cc:	9b07      	ldr	r3, [sp, #28]
 80122ce:	bfbc      	itt	lt
 80122d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80122d2:	2400      	movlt	r4, #0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	bfb5      	itete	lt
 80122d8:	eba8 0603 	sublt.w	r6, r8, r3
 80122dc:	9b07      	ldrge	r3, [sp, #28]
 80122de:	2300      	movlt	r3, #0
 80122e0:	4646      	movge	r6, r8
 80122e2:	e730      	b.n	8012146 <_dtoa_r+0x71e>
 80122e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80122e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80122e8:	4646      	mov	r6, r8
 80122ea:	e735      	b.n	8012158 <_dtoa_r+0x730>
 80122ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80122ee:	e75c      	b.n	80121aa <_dtoa_r+0x782>
 80122f0:	2300      	movs	r3, #0
 80122f2:	e788      	b.n	8012206 <_dtoa_r+0x7de>
 80122f4:	3fe00000 	.word	0x3fe00000
 80122f8:	40240000 	.word	0x40240000
 80122fc:	40140000 	.word	0x40140000
 8012300:	9b02      	ldr	r3, [sp, #8]
 8012302:	e780      	b.n	8012206 <_dtoa_r+0x7de>
 8012304:	2300      	movs	r3, #0
 8012306:	930a      	str	r3, [sp, #40]	@ 0x28
 8012308:	e782      	b.n	8012210 <_dtoa_r+0x7e8>
 801230a:	d099      	beq.n	8012240 <_dtoa_r+0x818>
 801230c:	9a08      	ldr	r2, [sp, #32]
 801230e:	331c      	adds	r3, #28
 8012310:	441a      	add	r2, r3
 8012312:	4498      	add	r8, r3
 8012314:	441e      	add	r6, r3
 8012316:	9208      	str	r2, [sp, #32]
 8012318:	e792      	b.n	8012240 <_dtoa_r+0x818>
 801231a:	4603      	mov	r3, r0
 801231c:	e7f6      	b.n	801230c <_dtoa_r+0x8e4>
 801231e:	9b07      	ldr	r3, [sp, #28]
 8012320:	9704      	str	r7, [sp, #16]
 8012322:	2b00      	cmp	r3, #0
 8012324:	dc20      	bgt.n	8012368 <_dtoa_r+0x940>
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801232a:	2b02      	cmp	r3, #2
 801232c:	dd1e      	ble.n	801236c <_dtoa_r+0x944>
 801232e:	9b00      	ldr	r3, [sp, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	f47f aec0 	bne.w	80120b6 <_dtoa_r+0x68e>
 8012336:	4621      	mov	r1, r4
 8012338:	2205      	movs	r2, #5
 801233a:	4658      	mov	r0, fp
 801233c:	f000 fa9a 	bl	8012874 <__multadd>
 8012340:	4601      	mov	r1, r0
 8012342:	4604      	mov	r4, r0
 8012344:	4648      	mov	r0, r9
 8012346:	f000 fcf7 	bl	8012d38 <__mcmp>
 801234a:	2800      	cmp	r0, #0
 801234c:	f77f aeb3 	ble.w	80120b6 <_dtoa_r+0x68e>
 8012350:	4656      	mov	r6, sl
 8012352:	2331      	movs	r3, #49	@ 0x31
 8012354:	f806 3b01 	strb.w	r3, [r6], #1
 8012358:	9b04      	ldr	r3, [sp, #16]
 801235a:	3301      	adds	r3, #1
 801235c:	9304      	str	r3, [sp, #16]
 801235e:	e6ae      	b.n	80120be <_dtoa_r+0x696>
 8012360:	9c07      	ldr	r4, [sp, #28]
 8012362:	9704      	str	r7, [sp, #16]
 8012364:	4625      	mov	r5, r4
 8012366:	e7f3      	b.n	8012350 <_dtoa_r+0x928>
 8012368:	9b07      	ldr	r3, [sp, #28]
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801236e:	2b00      	cmp	r3, #0
 8012370:	f000 8104 	beq.w	801257c <_dtoa_r+0xb54>
 8012374:	2e00      	cmp	r6, #0
 8012376:	dd05      	ble.n	8012384 <_dtoa_r+0x95c>
 8012378:	4629      	mov	r1, r5
 801237a:	4632      	mov	r2, r6
 801237c:	4658      	mov	r0, fp
 801237e:	f000 fc6f 	bl	8012c60 <__lshift>
 8012382:	4605      	mov	r5, r0
 8012384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012386:	2b00      	cmp	r3, #0
 8012388:	d05a      	beq.n	8012440 <_dtoa_r+0xa18>
 801238a:	6869      	ldr	r1, [r5, #4]
 801238c:	4658      	mov	r0, fp
 801238e:	f000 fa0f 	bl	80127b0 <_Balloc>
 8012392:	4606      	mov	r6, r0
 8012394:	b928      	cbnz	r0, 80123a2 <_dtoa_r+0x97a>
 8012396:	4b84      	ldr	r3, [pc, #528]	@ (80125a8 <_dtoa_r+0xb80>)
 8012398:	4602      	mov	r2, r0
 801239a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801239e:	f7ff bb5a 	b.w	8011a56 <_dtoa_r+0x2e>
 80123a2:	692a      	ldr	r2, [r5, #16]
 80123a4:	3202      	adds	r2, #2
 80123a6:	0092      	lsls	r2, r2, #2
 80123a8:	f105 010c 	add.w	r1, r5, #12
 80123ac:	300c      	adds	r0, #12
 80123ae:	f001 ff75 	bl	801429c <memcpy>
 80123b2:	2201      	movs	r2, #1
 80123b4:	4631      	mov	r1, r6
 80123b6:	4658      	mov	r0, fp
 80123b8:	f000 fc52 	bl	8012c60 <__lshift>
 80123bc:	f10a 0301 	add.w	r3, sl, #1
 80123c0:	9307      	str	r3, [sp, #28]
 80123c2:	9b00      	ldr	r3, [sp, #0]
 80123c4:	4453      	add	r3, sl
 80123c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123c8:	9b02      	ldr	r3, [sp, #8]
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	462f      	mov	r7, r5
 80123d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80123d2:	4605      	mov	r5, r0
 80123d4:	9b07      	ldr	r3, [sp, #28]
 80123d6:	4621      	mov	r1, r4
 80123d8:	3b01      	subs	r3, #1
 80123da:	4648      	mov	r0, r9
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	f7ff fa99 	bl	8011914 <quorem>
 80123e2:	4639      	mov	r1, r7
 80123e4:	9002      	str	r0, [sp, #8]
 80123e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80123ea:	4648      	mov	r0, r9
 80123ec:	f000 fca4 	bl	8012d38 <__mcmp>
 80123f0:	462a      	mov	r2, r5
 80123f2:	9008      	str	r0, [sp, #32]
 80123f4:	4621      	mov	r1, r4
 80123f6:	4658      	mov	r0, fp
 80123f8:	f000 fcba 	bl	8012d70 <__mdiff>
 80123fc:	68c2      	ldr	r2, [r0, #12]
 80123fe:	4606      	mov	r6, r0
 8012400:	bb02      	cbnz	r2, 8012444 <_dtoa_r+0xa1c>
 8012402:	4601      	mov	r1, r0
 8012404:	4648      	mov	r0, r9
 8012406:	f000 fc97 	bl	8012d38 <__mcmp>
 801240a:	4602      	mov	r2, r0
 801240c:	4631      	mov	r1, r6
 801240e:	4658      	mov	r0, fp
 8012410:	920e      	str	r2, [sp, #56]	@ 0x38
 8012412:	f000 fa0d 	bl	8012830 <_Bfree>
 8012416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012418:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801241a:	9e07      	ldr	r6, [sp, #28]
 801241c:	ea43 0102 	orr.w	r1, r3, r2
 8012420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012422:	4319      	orrs	r1, r3
 8012424:	d110      	bne.n	8012448 <_dtoa_r+0xa20>
 8012426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801242a:	d029      	beq.n	8012480 <_dtoa_r+0xa58>
 801242c:	9b08      	ldr	r3, [sp, #32]
 801242e:	2b00      	cmp	r3, #0
 8012430:	dd02      	ble.n	8012438 <_dtoa_r+0xa10>
 8012432:	9b02      	ldr	r3, [sp, #8]
 8012434:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012438:	9b00      	ldr	r3, [sp, #0]
 801243a:	f883 8000 	strb.w	r8, [r3]
 801243e:	e63f      	b.n	80120c0 <_dtoa_r+0x698>
 8012440:	4628      	mov	r0, r5
 8012442:	e7bb      	b.n	80123bc <_dtoa_r+0x994>
 8012444:	2201      	movs	r2, #1
 8012446:	e7e1      	b.n	801240c <_dtoa_r+0x9e4>
 8012448:	9b08      	ldr	r3, [sp, #32]
 801244a:	2b00      	cmp	r3, #0
 801244c:	db04      	blt.n	8012458 <_dtoa_r+0xa30>
 801244e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012450:	430b      	orrs	r3, r1
 8012452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012454:	430b      	orrs	r3, r1
 8012456:	d120      	bne.n	801249a <_dtoa_r+0xa72>
 8012458:	2a00      	cmp	r2, #0
 801245a:	dded      	ble.n	8012438 <_dtoa_r+0xa10>
 801245c:	4649      	mov	r1, r9
 801245e:	2201      	movs	r2, #1
 8012460:	4658      	mov	r0, fp
 8012462:	f000 fbfd 	bl	8012c60 <__lshift>
 8012466:	4621      	mov	r1, r4
 8012468:	4681      	mov	r9, r0
 801246a:	f000 fc65 	bl	8012d38 <__mcmp>
 801246e:	2800      	cmp	r0, #0
 8012470:	dc03      	bgt.n	801247a <_dtoa_r+0xa52>
 8012472:	d1e1      	bne.n	8012438 <_dtoa_r+0xa10>
 8012474:	f018 0f01 	tst.w	r8, #1
 8012478:	d0de      	beq.n	8012438 <_dtoa_r+0xa10>
 801247a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801247e:	d1d8      	bne.n	8012432 <_dtoa_r+0xa0a>
 8012480:	9a00      	ldr	r2, [sp, #0]
 8012482:	2339      	movs	r3, #57	@ 0x39
 8012484:	7013      	strb	r3, [r2, #0]
 8012486:	4633      	mov	r3, r6
 8012488:	461e      	mov	r6, r3
 801248a:	3b01      	subs	r3, #1
 801248c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012490:	2a39      	cmp	r2, #57	@ 0x39
 8012492:	d052      	beq.n	801253a <_dtoa_r+0xb12>
 8012494:	3201      	adds	r2, #1
 8012496:	701a      	strb	r2, [r3, #0]
 8012498:	e612      	b.n	80120c0 <_dtoa_r+0x698>
 801249a:	2a00      	cmp	r2, #0
 801249c:	dd07      	ble.n	80124ae <_dtoa_r+0xa86>
 801249e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80124a2:	d0ed      	beq.n	8012480 <_dtoa_r+0xa58>
 80124a4:	9a00      	ldr	r2, [sp, #0]
 80124a6:	f108 0301 	add.w	r3, r8, #1
 80124aa:	7013      	strb	r3, [r2, #0]
 80124ac:	e608      	b.n	80120c0 <_dtoa_r+0x698>
 80124ae:	9b07      	ldr	r3, [sp, #28]
 80124b0:	9a07      	ldr	r2, [sp, #28]
 80124b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80124b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b8:	4293      	cmp	r3, r2
 80124ba:	d028      	beq.n	801250e <_dtoa_r+0xae6>
 80124bc:	4649      	mov	r1, r9
 80124be:	2300      	movs	r3, #0
 80124c0:	220a      	movs	r2, #10
 80124c2:	4658      	mov	r0, fp
 80124c4:	f000 f9d6 	bl	8012874 <__multadd>
 80124c8:	42af      	cmp	r7, r5
 80124ca:	4681      	mov	r9, r0
 80124cc:	f04f 0300 	mov.w	r3, #0
 80124d0:	f04f 020a 	mov.w	r2, #10
 80124d4:	4639      	mov	r1, r7
 80124d6:	4658      	mov	r0, fp
 80124d8:	d107      	bne.n	80124ea <_dtoa_r+0xac2>
 80124da:	f000 f9cb 	bl	8012874 <__multadd>
 80124de:	4607      	mov	r7, r0
 80124e0:	4605      	mov	r5, r0
 80124e2:	9b07      	ldr	r3, [sp, #28]
 80124e4:	3301      	adds	r3, #1
 80124e6:	9307      	str	r3, [sp, #28]
 80124e8:	e774      	b.n	80123d4 <_dtoa_r+0x9ac>
 80124ea:	f000 f9c3 	bl	8012874 <__multadd>
 80124ee:	4629      	mov	r1, r5
 80124f0:	4607      	mov	r7, r0
 80124f2:	2300      	movs	r3, #0
 80124f4:	220a      	movs	r2, #10
 80124f6:	4658      	mov	r0, fp
 80124f8:	f000 f9bc 	bl	8012874 <__multadd>
 80124fc:	4605      	mov	r5, r0
 80124fe:	e7f0      	b.n	80124e2 <_dtoa_r+0xaba>
 8012500:	9b00      	ldr	r3, [sp, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	bfcc      	ite	gt
 8012506:	461e      	movgt	r6, r3
 8012508:	2601      	movle	r6, #1
 801250a:	4456      	add	r6, sl
 801250c:	2700      	movs	r7, #0
 801250e:	4649      	mov	r1, r9
 8012510:	2201      	movs	r2, #1
 8012512:	4658      	mov	r0, fp
 8012514:	f000 fba4 	bl	8012c60 <__lshift>
 8012518:	4621      	mov	r1, r4
 801251a:	4681      	mov	r9, r0
 801251c:	f000 fc0c 	bl	8012d38 <__mcmp>
 8012520:	2800      	cmp	r0, #0
 8012522:	dcb0      	bgt.n	8012486 <_dtoa_r+0xa5e>
 8012524:	d102      	bne.n	801252c <_dtoa_r+0xb04>
 8012526:	f018 0f01 	tst.w	r8, #1
 801252a:	d1ac      	bne.n	8012486 <_dtoa_r+0xa5e>
 801252c:	4633      	mov	r3, r6
 801252e:	461e      	mov	r6, r3
 8012530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012534:	2a30      	cmp	r2, #48	@ 0x30
 8012536:	d0fa      	beq.n	801252e <_dtoa_r+0xb06>
 8012538:	e5c2      	b.n	80120c0 <_dtoa_r+0x698>
 801253a:	459a      	cmp	sl, r3
 801253c:	d1a4      	bne.n	8012488 <_dtoa_r+0xa60>
 801253e:	9b04      	ldr	r3, [sp, #16]
 8012540:	3301      	adds	r3, #1
 8012542:	9304      	str	r3, [sp, #16]
 8012544:	2331      	movs	r3, #49	@ 0x31
 8012546:	f88a 3000 	strb.w	r3, [sl]
 801254a:	e5b9      	b.n	80120c0 <_dtoa_r+0x698>
 801254c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801254e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80125ac <_dtoa_r+0xb84>
 8012552:	b11b      	cbz	r3, 801255c <_dtoa_r+0xb34>
 8012554:	f10a 0308 	add.w	r3, sl, #8
 8012558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	4650      	mov	r0, sl
 801255e:	b019      	add	sp, #100	@ 0x64
 8012560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012566:	2b01      	cmp	r3, #1
 8012568:	f77f ae37 	ble.w	80121da <_dtoa_r+0x7b2>
 801256c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801256e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012570:	2001      	movs	r0, #1
 8012572:	e655      	b.n	8012220 <_dtoa_r+0x7f8>
 8012574:	9b00      	ldr	r3, [sp, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	f77f aed6 	ble.w	8012328 <_dtoa_r+0x900>
 801257c:	4656      	mov	r6, sl
 801257e:	4621      	mov	r1, r4
 8012580:	4648      	mov	r0, r9
 8012582:	f7ff f9c7 	bl	8011914 <quorem>
 8012586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801258a:	f806 8b01 	strb.w	r8, [r6], #1
 801258e:	9b00      	ldr	r3, [sp, #0]
 8012590:	eba6 020a 	sub.w	r2, r6, sl
 8012594:	4293      	cmp	r3, r2
 8012596:	ddb3      	ble.n	8012500 <_dtoa_r+0xad8>
 8012598:	4649      	mov	r1, r9
 801259a:	2300      	movs	r3, #0
 801259c:	220a      	movs	r2, #10
 801259e:	4658      	mov	r0, fp
 80125a0:	f000 f968 	bl	8012874 <__multadd>
 80125a4:	4681      	mov	r9, r0
 80125a6:	e7ea      	b.n	801257e <_dtoa_r+0xb56>
 80125a8:	08015c29 	.word	0x08015c29
 80125ac:	08015bad 	.word	0x08015bad

080125b0 <_free_r>:
 80125b0:	b538      	push	{r3, r4, r5, lr}
 80125b2:	4605      	mov	r5, r0
 80125b4:	2900      	cmp	r1, #0
 80125b6:	d041      	beq.n	801263c <_free_r+0x8c>
 80125b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125bc:	1f0c      	subs	r4, r1, #4
 80125be:	2b00      	cmp	r3, #0
 80125c0:	bfb8      	it	lt
 80125c2:	18e4      	addlt	r4, r4, r3
 80125c4:	f000 f8e8 	bl	8012798 <__malloc_lock>
 80125c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012640 <_free_r+0x90>)
 80125ca:	6813      	ldr	r3, [r2, #0]
 80125cc:	b933      	cbnz	r3, 80125dc <_free_r+0x2c>
 80125ce:	6063      	str	r3, [r4, #4]
 80125d0:	6014      	str	r4, [r2, #0]
 80125d2:	4628      	mov	r0, r5
 80125d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d8:	f000 b8e4 	b.w	80127a4 <__malloc_unlock>
 80125dc:	42a3      	cmp	r3, r4
 80125de:	d908      	bls.n	80125f2 <_free_r+0x42>
 80125e0:	6820      	ldr	r0, [r4, #0]
 80125e2:	1821      	adds	r1, r4, r0
 80125e4:	428b      	cmp	r3, r1
 80125e6:	bf01      	itttt	eq
 80125e8:	6819      	ldreq	r1, [r3, #0]
 80125ea:	685b      	ldreq	r3, [r3, #4]
 80125ec:	1809      	addeq	r1, r1, r0
 80125ee:	6021      	streq	r1, [r4, #0]
 80125f0:	e7ed      	b.n	80125ce <_free_r+0x1e>
 80125f2:	461a      	mov	r2, r3
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	b10b      	cbz	r3, 80125fc <_free_r+0x4c>
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	d9fa      	bls.n	80125f2 <_free_r+0x42>
 80125fc:	6811      	ldr	r1, [r2, #0]
 80125fe:	1850      	adds	r0, r2, r1
 8012600:	42a0      	cmp	r0, r4
 8012602:	d10b      	bne.n	801261c <_free_r+0x6c>
 8012604:	6820      	ldr	r0, [r4, #0]
 8012606:	4401      	add	r1, r0
 8012608:	1850      	adds	r0, r2, r1
 801260a:	4283      	cmp	r3, r0
 801260c:	6011      	str	r1, [r2, #0]
 801260e:	d1e0      	bne.n	80125d2 <_free_r+0x22>
 8012610:	6818      	ldr	r0, [r3, #0]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	6053      	str	r3, [r2, #4]
 8012616:	4408      	add	r0, r1
 8012618:	6010      	str	r0, [r2, #0]
 801261a:	e7da      	b.n	80125d2 <_free_r+0x22>
 801261c:	d902      	bls.n	8012624 <_free_r+0x74>
 801261e:	230c      	movs	r3, #12
 8012620:	602b      	str	r3, [r5, #0]
 8012622:	e7d6      	b.n	80125d2 <_free_r+0x22>
 8012624:	6820      	ldr	r0, [r4, #0]
 8012626:	1821      	adds	r1, r4, r0
 8012628:	428b      	cmp	r3, r1
 801262a:	bf04      	itt	eq
 801262c:	6819      	ldreq	r1, [r3, #0]
 801262e:	685b      	ldreq	r3, [r3, #4]
 8012630:	6063      	str	r3, [r4, #4]
 8012632:	bf04      	itt	eq
 8012634:	1809      	addeq	r1, r1, r0
 8012636:	6021      	streq	r1, [r4, #0]
 8012638:	6054      	str	r4, [r2, #4]
 801263a:	e7ca      	b.n	80125d2 <_free_r+0x22>
 801263c:	bd38      	pop	{r3, r4, r5, pc}
 801263e:	bf00      	nop
 8012640:	200049d8 	.word	0x200049d8

08012644 <malloc>:
 8012644:	4b02      	ldr	r3, [pc, #8]	@ (8012650 <malloc+0xc>)
 8012646:	4601      	mov	r1, r0
 8012648:	6818      	ldr	r0, [r3, #0]
 801264a:	f000 b825 	b.w	8012698 <_malloc_r>
 801264e:	bf00      	nop
 8012650:	20000190 	.word	0x20000190

08012654 <sbrk_aligned>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	4e0f      	ldr	r6, [pc, #60]	@ (8012694 <sbrk_aligned+0x40>)
 8012658:	460c      	mov	r4, r1
 801265a:	6831      	ldr	r1, [r6, #0]
 801265c:	4605      	mov	r5, r0
 801265e:	b911      	cbnz	r1, 8012666 <sbrk_aligned+0x12>
 8012660:	f001 fe0c 	bl	801427c <_sbrk_r>
 8012664:	6030      	str	r0, [r6, #0]
 8012666:	4621      	mov	r1, r4
 8012668:	4628      	mov	r0, r5
 801266a:	f001 fe07 	bl	801427c <_sbrk_r>
 801266e:	1c43      	adds	r3, r0, #1
 8012670:	d103      	bne.n	801267a <sbrk_aligned+0x26>
 8012672:	f04f 34ff 	mov.w	r4, #4294967295
 8012676:	4620      	mov	r0, r4
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	1cc4      	adds	r4, r0, #3
 801267c:	f024 0403 	bic.w	r4, r4, #3
 8012680:	42a0      	cmp	r0, r4
 8012682:	d0f8      	beq.n	8012676 <sbrk_aligned+0x22>
 8012684:	1a21      	subs	r1, r4, r0
 8012686:	4628      	mov	r0, r5
 8012688:	f001 fdf8 	bl	801427c <_sbrk_r>
 801268c:	3001      	adds	r0, #1
 801268e:	d1f2      	bne.n	8012676 <sbrk_aligned+0x22>
 8012690:	e7ef      	b.n	8012672 <sbrk_aligned+0x1e>
 8012692:	bf00      	nop
 8012694:	200049d4 	.word	0x200049d4

08012698 <_malloc_r>:
 8012698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801269c:	1ccd      	adds	r5, r1, #3
 801269e:	f025 0503 	bic.w	r5, r5, #3
 80126a2:	3508      	adds	r5, #8
 80126a4:	2d0c      	cmp	r5, #12
 80126a6:	bf38      	it	cc
 80126a8:	250c      	movcc	r5, #12
 80126aa:	2d00      	cmp	r5, #0
 80126ac:	4606      	mov	r6, r0
 80126ae:	db01      	blt.n	80126b4 <_malloc_r+0x1c>
 80126b0:	42a9      	cmp	r1, r5
 80126b2:	d904      	bls.n	80126be <_malloc_r+0x26>
 80126b4:	230c      	movs	r3, #12
 80126b6:	6033      	str	r3, [r6, #0]
 80126b8:	2000      	movs	r0, #0
 80126ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012794 <_malloc_r+0xfc>
 80126c2:	f000 f869 	bl	8012798 <__malloc_lock>
 80126c6:	f8d8 3000 	ldr.w	r3, [r8]
 80126ca:	461c      	mov	r4, r3
 80126cc:	bb44      	cbnz	r4, 8012720 <_malloc_r+0x88>
 80126ce:	4629      	mov	r1, r5
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7ff ffbf 	bl	8012654 <sbrk_aligned>
 80126d6:	1c43      	adds	r3, r0, #1
 80126d8:	4604      	mov	r4, r0
 80126da:	d158      	bne.n	801278e <_malloc_r+0xf6>
 80126dc:	f8d8 4000 	ldr.w	r4, [r8]
 80126e0:	4627      	mov	r7, r4
 80126e2:	2f00      	cmp	r7, #0
 80126e4:	d143      	bne.n	801276e <_malloc_r+0xd6>
 80126e6:	2c00      	cmp	r4, #0
 80126e8:	d04b      	beq.n	8012782 <_malloc_r+0xea>
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	4639      	mov	r1, r7
 80126ee:	4630      	mov	r0, r6
 80126f0:	eb04 0903 	add.w	r9, r4, r3
 80126f4:	f001 fdc2 	bl	801427c <_sbrk_r>
 80126f8:	4581      	cmp	r9, r0
 80126fa:	d142      	bne.n	8012782 <_malloc_r+0xea>
 80126fc:	6821      	ldr	r1, [r4, #0]
 80126fe:	1a6d      	subs	r5, r5, r1
 8012700:	4629      	mov	r1, r5
 8012702:	4630      	mov	r0, r6
 8012704:	f7ff ffa6 	bl	8012654 <sbrk_aligned>
 8012708:	3001      	adds	r0, #1
 801270a:	d03a      	beq.n	8012782 <_malloc_r+0xea>
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	442b      	add	r3, r5
 8012710:	6023      	str	r3, [r4, #0]
 8012712:	f8d8 3000 	ldr.w	r3, [r8]
 8012716:	685a      	ldr	r2, [r3, #4]
 8012718:	bb62      	cbnz	r2, 8012774 <_malloc_r+0xdc>
 801271a:	f8c8 7000 	str.w	r7, [r8]
 801271e:	e00f      	b.n	8012740 <_malloc_r+0xa8>
 8012720:	6822      	ldr	r2, [r4, #0]
 8012722:	1b52      	subs	r2, r2, r5
 8012724:	d420      	bmi.n	8012768 <_malloc_r+0xd0>
 8012726:	2a0b      	cmp	r2, #11
 8012728:	d917      	bls.n	801275a <_malloc_r+0xc2>
 801272a:	1961      	adds	r1, r4, r5
 801272c:	42a3      	cmp	r3, r4
 801272e:	6025      	str	r5, [r4, #0]
 8012730:	bf18      	it	ne
 8012732:	6059      	strne	r1, [r3, #4]
 8012734:	6863      	ldr	r3, [r4, #4]
 8012736:	bf08      	it	eq
 8012738:	f8c8 1000 	streq.w	r1, [r8]
 801273c:	5162      	str	r2, [r4, r5]
 801273e:	604b      	str	r3, [r1, #4]
 8012740:	4630      	mov	r0, r6
 8012742:	f000 f82f 	bl	80127a4 <__malloc_unlock>
 8012746:	f104 000b 	add.w	r0, r4, #11
 801274a:	1d23      	adds	r3, r4, #4
 801274c:	f020 0007 	bic.w	r0, r0, #7
 8012750:	1ac2      	subs	r2, r0, r3
 8012752:	bf1c      	itt	ne
 8012754:	1a1b      	subne	r3, r3, r0
 8012756:	50a3      	strne	r3, [r4, r2]
 8012758:	e7af      	b.n	80126ba <_malloc_r+0x22>
 801275a:	6862      	ldr	r2, [r4, #4]
 801275c:	42a3      	cmp	r3, r4
 801275e:	bf0c      	ite	eq
 8012760:	f8c8 2000 	streq.w	r2, [r8]
 8012764:	605a      	strne	r2, [r3, #4]
 8012766:	e7eb      	b.n	8012740 <_malloc_r+0xa8>
 8012768:	4623      	mov	r3, r4
 801276a:	6864      	ldr	r4, [r4, #4]
 801276c:	e7ae      	b.n	80126cc <_malloc_r+0x34>
 801276e:	463c      	mov	r4, r7
 8012770:	687f      	ldr	r7, [r7, #4]
 8012772:	e7b6      	b.n	80126e2 <_malloc_r+0x4a>
 8012774:	461a      	mov	r2, r3
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	42a3      	cmp	r3, r4
 801277a:	d1fb      	bne.n	8012774 <_malloc_r+0xdc>
 801277c:	2300      	movs	r3, #0
 801277e:	6053      	str	r3, [r2, #4]
 8012780:	e7de      	b.n	8012740 <_malloc_r+0xa8>
 8012782:	230c      	movs	r3, #12
 8012784:	6033      	str	r3, [r6, #0]
 8012786:	4630      	mov	r0, r6
 8012788:	f000 f80c 	bl	80127a4 <__malloc_unlock>
 801278c:	e794      	b.n	80126b8 <_malloc_r+0x20>
 801278e:	6005      	str	r5, [r0, #0]
 8012790:	e7d6      	b.n	8012740 <_malloc_r+0xa8>
 8012792:	bf00      	nop
 8012794:	200049d8 	.word	0x200049d8

08012798 <__malloc_lock>:
 8012798:	4801      	ldr	r0, [pc, #4]	@ (80127a0 <__malloc_lock+0x8>)
 801279a:	f7ff b8b2 	b.w	8011902 <__retarget_lock_acquire_recursive>
 801279e:	bf00      	nop
 80127a0:	200049d0 	.word	0x200049d0

080127a4 <__malloc_unlock>:
 80127a4:	4801      	ldr	r0, [pc, #4]	@ (80127ac <__malloc_unlock+0x8>)
 80127a6:	f7ff b8ad 	b.w	8011904 <__retarget_lock_release_recursive>
 80127aa:	bf00      	nop
 80127ac:	200049d0 	.word	0x200049d0

080127b0 <_Balloc>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	69c6      	ldr	r6, [r0, #28]
 80127b4:	4604      	mov	r4, r0
 80127b6:	460d      	mov	r5, r1
 80127b8:	b976      	cbnz	r6, 80127d8 <_Balloc+0x28>
 80127ba:	2010      	movs	r0, #16
 80127bc:	f7ff ff42 	bl	8012644 <malloc>
 80127c0:	4602      	mov	r2, r0
 80127c2:	61e0      	str	r0, [r4, #28]
 80127c4:	b920      	cbnz	r0, 80127d0 <_Balloc+0x20>
 80127c6:	4b18      	ldr	r3, [pc, #96]	@ (8012828 <_Balloc+0x78>)
 80127c8:	4818      	ldr	r0, [pc, #96]	@ (801282c <_Balloc+0x7c>)
 80127ca:	216b      	movs	r1, #107	@ 0x6b
 80127cc:	f001 fd7c 	bl	80142c8 <__assert_func>
 80127d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127d4:	6006      	str	r6, [r0, #0]
 80127d6:	60c6      	str	r6, [r0, #12]
 80127d8:	69e6      	ldr	r6, [r4, #28]
 80127da:	68f3      	ldr	r3, [r6, #12]
 80127dc:	b183      	cbz	r3, 8012800 <_Balloc+0x50>
 80127de:	69e3      	ldr	r3, [r4, #28]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80127e6:	b9b8      	cbnz	r0, 8012818 <_Balloc+0x68>
 80127e8:	2101      	movs	r1, #1
 80127ea:	fa01 f605 	lsl.w	r6, r1, r5
 80127ee:	1d72      	adds	r2, r6, #5
 80127f0:	0092      	lsls	r2, r2, #2
 80127f2:	4620      	mov	r0, r4
 80127f4:	f001 fd86 	bl	8014304 <_calloc_r>
 80127f8:	b160      	cbz	r0, 8012814 <_Balloc+0x64>
 80127fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80127fe:	e00e      	b.n	801281e <_Balloc+0x6e>
 8012800:	2221      	movs	r2, #33	@ 0x21
 8012802:	2104      	movs	r1, #4
 8012804:	4620      	mov	r0, r4
 8012806:	f001 fd7d 	bl	8014304 <_calloc_r>
 801280a:	69e3      	ldr	r3, [r4, #28]
 801280c:	60f0      	str	r0, [r6, #12]
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1e4      	bne.n	80127de <_Balloc+0x2e>
 8012814:	2000      	movs	r0, #0
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	6802      	ldr	r2, [r0, #0]
 801281a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801281e:	2300      	movs	r3, #0
 8012820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012824:	e7f7      	b.n	8012816 <_Balloc+0x66>
 8012826:	bf00      	nop
 8012828:	08015bba 	.word	0x08015bba
 801282c:	08015c3a 	.word	0x08015c3a

08012830 <_Bfree>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	69c6      	ldr	r6, [r0, #28]
 8012834:	4605      	mov	r5, r0
 8012836:	460c      	mov	r4, r1
 8012838:	b976      	cbnz	r6, 8012858 <_Bfree+0x28>
 801283a:	2010      	movs	r0, #16
 801283c:	f7ff ff02 	bl	8012644 <malloc>
 8012840:	4602      	mov	r2, r0
 8012842:	61e8      	str	r0, [r5, #28]
 8012844:	b920      	cbnz	r0, 8012850 <_Bfree+0x20>
 8012846:	4b09      	ldr	r3, [pc, #36]	@ (801286c <_Bfree+0x3c>)
 8012848:	4809      	ldr	r0, [pc, #36]	@ (8012870 <_Bfree+0x40>)
 801284a:	218f      	movs	r1, #143	@ 0x8f
 801284c:	f001 fd3c 	bl	80142c8 <__assert_func>
 8012850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012854:	6006      	str	r6, [r0, #0]
 8012856:	60c6      	str	r6, [r0, #12]
 8012858:	b13c      	cbz	r4, 801286a <_Bfree+0x3a>
 801285a:	69eb      	ldr	r3, [r5, #28]
 801285c:	6862      	ldr	r2, [r4, #4]
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012864:	6021      	str	r1, [r4, #0]
 8012866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801286a:	bd70      	pop	{r4, r5, r6, pc}
 801286c:	08015bba 	.word	0x08015bba
 8012870:	08015c3a 	.word	0x08015c3a

08012874 <__multadd>:
 8012874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012878:	690d      	ldr	r5, [r1, #16]
 801287a:	4607      	mov	r7, r0
 801287c:	460c      	mov	r4, r1
 801287e:	461e      	mov	r6, r3
 8012880:	f101 0c14 	add.w	ip, r1, #20
 8012884:	2000      	movs	r0, #0
 8012886:	f8dc 3000 	ldr.w	r3, [ip]
 801288a:	b299      	uxth	r1, r3
 801288c:	fb02 6101 	mla	r1, r2, r1, r6
 8012890:	0c1e      	lsrs	r6, r3, #16
 8012892:	0c0b      	lsrs	r3, r1, #16
 8012894:	fb02 3306 	mla	r3, r2, r6, r3
 8012898:	b289      	uxth	r1, r1
 801289a:	3001      	adds	r0, #1
 801289c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128a0:	4285      	cmp	r5, r0
 80128a2:	f84c 1b04 	str.w	r1, [ip], #4
 80128a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128aa:	dcec      	bgt.n	8012886 <__multadd+0x12>
 80128ac:	b30e      	cbz	r6, 80128f2 <__multadd+0x7e>
 80128ae:	68a3      	ldr	r3, [r4, #8]
 80128b0:	42ab      	cmp	r3, r5
 80128b2:	dc19      	bgt.n	80128e8 <__multadd+0x74>
 80128b4:	6861      	ldr	r1, [r4, #4]
 80128b6:	4638      	mov	r0, r7
 80128b8:	3101      	adds	r1, #1
 80128ba:	f7ff ff79 	bl	80127b0 <_Balloc>
 80128be:	4680      	mov	r8, r0
 80128c0:	b928      	cbnz	r0, 80128ce <__multadd+0x5a>
 80128c2:	4602      	mov	r2, r0
 80128c4:	4b0c      	ldr	r3, [pc, #48]	@ (80128f8 <__multadd+0x84>)
 80128c6:	480d      	ldr	r0, [pc, #52]	@ (80128fc <__multadd+0x88>)
 80128c8:	21ba      	movs	r1, #186	@ 0xba
 80128ca:	f001 fcfd 	bl	80142c8 <__assert_func>
 80128ce:	6922      	ldr	r2, [r4, #16]
 80128d0:	3202      	adds	r2, #2
 80128d2:	f104 010c 	add.w	r1, r4, #12
 80128d6:	0092      	lsls	r2, r2, #2
 80128d8:	300c      	adds	r0, #12
 80128da:	f001 fcdf 	bl	801429c <memcpy>
 80128de:	4621      	mov	r1, r4
 80128e0:	4638      	mov	r0, r7
 80128e2:	f7ff ffa5 	bl	8012830 <_Bfree>
 80128e6:	4644      	mov	r4, r8
 80128e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128ec:	3501      	adds	r5, #1
 80128ee:	615e      	str	r6, [r3, #20]
 80128f0:	6125      	str	r5, [r4, #16]
 80128f2:	4620      	mov	r0, r4
 80128f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f8:	08015c29 	.word	0x08015c29
 80128fc:	08015c3a 	.word	0x08015c3a

08012900 <__s2b>:
 8012900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012904:	460c      	mov	r4, r1
 8012906:	4615      	mov	r5, r2
 8012908:	461f      	mov	r7, r3
 801290a:	2209      	movs	r2, #9
 801290c:	3308      	adds	r3, #8
 801290e:	4606      	mov	r6, r0
 8012910:	fb93 f3f2 	sdiv	r3, r3, r2
 8012914:	2100      	movs	r1, #0
 8012916:	2201      	movs	r2, #1
 8012918:	429a      	cmp	r2, r3
 801291a:	db09      	blt.n	8012930 <__s2b+0x30>
 801291c:	4630      	mov	r0, r6
 801291e:	f7ff ff47 	bl	80127b0 <_Balloc>
 8012922:	b940      	cbnz	r0, 8012936 <__s2b+0x36>
 8012924:	4602      	mov	r2, r0
 8012926:	4b19      	ldr	r3, [pc, #100]	@ (801298c <__s2b+0x8c>)
 8012928:	4819      	ldr	r0, [pc, #100]	@ (8012990 <__s2b+0x90>)
 801292a:	21d3      	movs	r1, #211	@ 0xd3
 801292c:	f001 fccc 	bl	80142c8 <__assert_func>
 8012930:	0052      	lsls	r2, r2, #1
 8012932:	3101      	adds	r1, #1
 8012934:	e7f0      	b.n	8012918 <__s2b+0x18>
 8012936:	9b08      	ldr	r3, [sp, #32]
 8012938:	6143      	str	r3, [r0, #20]
 801293a:	2d09      	cmp	r5, #9
 801293c:	f04f 0301 	mov.w	r3, #1
 8012940:	6103      	str	r3, [r0, #16]
 8012942:	dd16      	ble.n	8012972 <__s2b+0x72>
 8012944:	f104 0909 	add.w	r9, r4, #9
 8012948:	46c8      	mov	r8, r9
 801294a:	442c      	add	r4, r5
 801294c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012950:	4601      	mov	r1, r0
 8012952:	3b30      	subs	r3, #48	@ 0x30
 8012954:	220a      	movs	r2, #10
 8012956:	4630      	mov	r0, r6
 8012958:	f7ff ff8c 	bl	8012874 <__multadd>
 801295c:	45a0      	cmp	r8, r4
 801295e:	d1f5      	bne.n	801294c <__s2b+0x4c>
 8012960:	f1a5 0408 	sub.w	r4, r5, #8
 8012964:	444c      	add	r4, r9
 8012966:	1b2d      	subs	r5, r5, r4
 8012968:	1963      	adds	r3, r4, r5
 801296a:	42bb      	cmp	r3, r7
 801296c:	db04      	blt.n	8012978 <__s2b+0x78>
 801296e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012972:	340a      	adds	r4, #10
 8012974:	2509      	movs	r5, #9
 8012976:	e7f6      	b.n	8012966 <__s2b+0x66>
 8012978:	f814 3b01 	ldrb.w	r3, [r4], #1
 801297c:	4601      	mov	r1, r0
 801297e:	3b30      	subs	r3, #48	@ 0x30
 8012980:	220a      	movs	r2, #10
 8012982:	4630      	mov	r0, r6
 8012984:	f7ff ff76 	bl	8012874 <__multadd>
 8012988:	e7ee      	b.n	8012968 <__s2b+0x68>
 801298a:	bf00      	nop
 801298c:	08015c29 	.word	0x08015c29
 8012990:	08015c3a 	.word	0x08015c3a

08012994 <__hi0bits>:
 8012994:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012998:	4603      	mov	r3, r0
 801299a:	bf36      	itet	cc
 801299c:	0403      	lslcc	r3, r0, #16
 801299e:	2000      	movcs	r0, #0
 80129a0:	2010      	movcc	r0, #16
 80129a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129a6:	bf3c      	itt	cc
 80129a8:	021b      	lslcc	r3, r3, #8
 80129aa:	3008      	addcc	r0, #8
 80129ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129b0:	bf3c      	itt	cc
 80129b2:	011b      	lslcc	r3, r3, #4
 80129b4:	3004      	addcc	r0, #4
 80129b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129ba:	bf3c      	itt	cc
 80129bc:	009b      	lslcc	r3, r3, #2
 80129be:	3002      	addcc	r0, #2
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	db05      	blt.n	80129d0 <__hi0bits+0x3c>
 80129c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80129c8:	f100 0001 	add.w	r0, r0, #1
 80129cc:	bf08      	it	eq
 80129ce:	2020      	moveq	r0, #32
 80129d0:	4770      	bx	lr

080129d2 <__lo0bits>:
 80129d2:	6803      	ldr	r3, [r0, #0]
 80129d4:	4602      	mov	r2, r0
 80129d6:	f013 0007 	ands.w	r0, r3, #7
 80129da:	d00b      	beq.n	80129f4 <__lo0bits+0x22>
 80129dc:	07d9      	lsls	r1, r3, #31
 80129de:	d421      	bmi.n	8012a24 <__lo0bits+0x52>
 80129e0:	0798      	lsls	r0, r3, #30
 80129e2:	bf49      	itett	mi
 80129e4:	085b      	lsrmi	r3, r3, #1
 80129e6:	089b      	lsrpl	r3, r3, #2
 80129e8:	2001      	movmi	r0, #1
 80129ea:	6013      	strmi	r3, [r2, #0]
 80129ec:	bf5c      	itt	pl
 80129ee:	6013      	strpl	r3, [r2, #0]
 80129f0:	2002      	movpl	r0, #2
 80129f2:	4770      	bx	lr
 80129f4:	b299      	uxth	r1, r3
 80129f6:	b909      	cbnz	r1, 80129fc <__lo0bits+0x2a>
 80129f8:	0c1b      	lsrs	r3, r3, #16
 80129fa:	2010      	movs	r0, #16
 80129fc:	b2d9      	uxtb	r1, r3
 80129fe:	b909      	cbnz	r1, 8012a04 <__lo0bits+0x32>
 8012a00:	3008      	adds	r0, #8
 8012a02:	0a1b      	lsrs	r3, r3, #8
 8012a04:	0719      	lsls	r1, r3, #28
 8012a06:	bf04      	itt	eq
 8012a08:	091b      	lsreq	r3, r3, #4
 8012a0a:	3004      	addeq	r0, #4
 8012a0c:	0799      	lsls	r1, r3, #30
 8012a0e:	bf04      	itt	eq
 8012a10:	089b      	lsreq	r3, r3, #2
 8012a12:	3002      	addeq	r0, #2
 8012a14:	07d9      	lsls	r1, r3, #31
 8012a16:	d403      	bmi.n	8012a20 <__lo0bits+0x4e>
 8012a18:	085b      	lsrs	r3, r3, #1
 8012a1a:	f100 0001 	add.w	r0, r0, #1
 8012a1e:	d003      	beq.n	8012a28 <__lo0bits+0x56>
 8012a20:	6013      	str	r3, [r2, #0]
 8012a22:	4770      	bx	lr
 8012a24:	2000      	movs	r0, #0
 8012a26:	4770      	bx	lr
 8012a28:	2020      	movs	r0, #32
 8012a2a:	4770      	bx	lr

08012a2c <__i2b>:
 8012a2c:	b510      	push	{r4, lr}
 8012a2e:	460c      	mov	r4, r1
 8012a30:	2101      	movs	r1, #1
 8012a32:	f7ff febd 	bl	80127b0 <_Balloc>
 8012a36:	4602      	mov	r2, r0
 8012a38:	b928      	cbnz	r0, 8012a46 <__i2b+0x1a>
 8012a3a:	4b05      	ldr	r3, [pc, #20]	@ (8012a50 <__i2b+0x24>)
 8012a3c:	4805      	ldr	r0, [pc, #20]	@ (8012a54 <__i2b+0x28>)
 8012a3e:	f240 1145 	movw	r1, #325	@ 0x145
 8012a42:	f001 fc41 	bl	80142c8 <__assert_func>
 8012a46:	2301      	movs	r3, #1
 8012a48:	6144      	str	r4, [r0, #20]
 8012a4a:	6103      	str	r3, [r0, #16]
 8012a4c:	bd10      	pop	{r4, pc}
 8012a4e:	bf00      	nop
 8012a50:	08015c29 	.word	0x08015c29
 8012a54:	08015c3a 	.word	0x08015c3a

08012a58 <__multiply>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	4614      	mov	r4, r2
 8012a5e:	690a      	ldr	r2, [r1, #16]
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	bfa8      	it	ge
 8012a66:	4623      	movge	r3, r4
 8012a68:	460f      	mov	r7, r1
 8012a6a:	bfa4      	itt	ge
 8012a6c:	460c      	movge	r4, r1
 8012a6e:	461f      	movge	r7, r3
 8012a70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012a74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012a78:	68a3      	ldr	r3, [r4, #8]
 8012a7a:	6861      	ldr	r1, [r4, #4]
 8012a7c:	eb0a 0609 	add.w	r6, sl, r9
 8012a80:	42b3      	cmp	r3, r6
 8012a82:	b085      	sub	sp, #20
 8012a84:	bfb8      	it	lt
 8012a86:	3101      	addlt	r1, #1
 8012a88:	f7ff fe92 	bl	80127b0 <_Balloc>
 8012a8c:	b930      	cbnz	r0, 8012a9c <__multiply+0x44>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	4b44      	ldr	r3, [pc, #272]	@ (8012ba4 <__multiply+0x14c>)
 8012a92:	4845      	ldr	r0, [pc, #276]	@ (8012ba8 <__multiply+0x150>)
 8012a94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a98:	f001 fc16 	bl	80142c8 <__assert_func>
 8012a9c:	f100 0514 	add.w	r5, r0, #20
 8012aa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012aa4:	462b      	mov	r3, r5
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	4543      	cmp	r3, r8
 8012aaa:	d321      	bcc.n	8012af0 <__multiply+0x98>
 8012aac:	f107 0114 	add.w	r1, r7, #20
 8012ab0:	f104 0214 	add.w	r2, r4, #20
 8012ab4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ab8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012abc:	9302      	str	r3, [sp, #8]
 8012abe:	1b13      	subs	r3, r2, r4
 8012ac0:	3b15      	subs	r3, #21
 8012ac2:	f023 0303 	bic.w	r3, r3, #3
 8012ac6:	3304      	adds	r3, #4
 8012ac8:	f104 0715 	add.w	r7, r4, #21
 8012acc:	42ba      	cmp	r2, r7
 8012ace:	bf38      	it	cc
 8012ad0:	2304      	movcc	r3, #4
 8012ad2:	9301      	str	r3, [sp, #4]
 8012ad4:	9b02      	ldr	r3, [sp, #8]
 8012ad6:	9103      	str	r1, [sp, #12]
 8012ad8:	428b      	cmp	r3, r1
 8012ada:	d80c      	bhi.n	8012af6 <__multiply+0x9e>
 8012adc:	2e00      	cmp	r6, #0
 8012ade:	dd03      	ble.n	8012ae8 <__multiply+0x90>
 8012ae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d05b      	beq.n	8012ba0 <__multiply+0x148>
 8012ae8:	6106      	str	r6, [r0, #16]
 8012aea:	b005      	add	sp, #20
 8012aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af0:	f843 2b04 	str.w	r2, [r3], #4
 8012af4:	e7d8      	b.n	8012aa8 <__multiply+0x50>
 8012af6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012afa:	f1ba 0f00 	cmp.w	sl, #0
 8012afe:	d024      	beq.n	8012b4a <__multiply+0xf2>
 8012b00:	f104 0e14 	add.w	lr, r4, #20
 8012b04:	46a9      	mov	r9, r5
 8012b06:	f04f 0c00 	mov.w	ip, #0
 8012b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012b0e:	f8d9 3000 	ldr.w	r3, [r9]
 8012b12:	fa1f fb87 	uxth.w	fp, r7
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	fb0a 330b 	mla	r3, sl, fp, r3
 8012b1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012b20:	f8d9 7000 	ldr.w	r7, [r9]
 8012b24:	4463      	add	r3, ip
 8012b26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8012b2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b38:	4572      	cmp	r2, lr
 8012b3a:	f849 3b04 	str.w	r3, [r9], #4
 8012b3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b42:	d8e2      	bhi.n	8012b0a <__multiply+0xb2>
 8012b44:	9b01      	ldr	r3, [sp, #4]
 8012b46:	f845 c003 	str.w	ip, [r5, r3]
 8012b4a:	9b03      	ldr	r3, [sp, #12]
 8012b4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012b50:	3104      	adds	r1, #4
 8012b52:	f1b9 0f00 	cmp.w	r9, #0
 8012b56:	d021      	beq.n	8012b9c <__multiply+0x144>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	f104 0c14 	add.w	ip, r4, #20
 8012b5e:	46ae      	mov	lr, r5
 8012b60:	f04f 0a00 	mov.w	sl, #0
 8012b64:	f8bc b000 	ldrh.w	fp, [ip]
 8012b68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012b6c:	fb09 770b 	mla	r7, r9, fp, r7
 8012b70:	4457      	add	r7, sl
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b78:	f84e 3b04 	str.w	r3, [lr], #4
 8012b7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b84:	f8be 3000 	ldrh.w	r3, [lr]
 8012b88:	fb09 330a 	mla	r3, r9, sl, r3
 8012b8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012b90:	4562      	cmp	r2, ip
 8012b92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b96:	d8e5      	bhi.n	8012b64 <__multiply+0x10c>
 8012b98:	9f01      	ldr	r7, [sp, #4]
 8012b9a:	51eb      	str	r3, [r5, r7]
 8012b9c:	3504      	adds	r5, #4
 8012b9e:	e799      	b.n	8012ad4 <__multiply+0x7c>
 8012ba0:	3e01      	subs	r6, #1
 8012ba2:	e79b      	b.n	8012adc <__multiply+0x84>
 8012ba4:	08015c29 	.word	0x08015c29
 8012ba8:	08015c3a 	.word	0x08015c3a

08012bac <__pow5mult>:
 8012bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bb0:	4615      	mov	r5, r2
 8012bb2:	f012 0203 	ands.w	r2, r2, #3
 8012bb6:	4607      	mov	r7, r0
 8012bb8:	460e      	mov	r6, r1
 8012bba:	d007      	beq.n	8012bcc <__pow5mult+0x20>
 8012bbc:	4c25      	ldr	r4, [pc, #148]	@ (8012c54 <__pow5mult+0xa8>)
 8012bbe:	3a01      	subs	r2, #1
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bc6:	f7ff fe55 	bl	8012874 <__multadd>
 8012bca:	4606      	mov	r6, r0
 8012bcc:	10ad      	asrs	r5, r5, #2
 8012bce:	d03d      	beq.n	8012c4c <__pow5mult+0xa0>
 8012bd0:	69fc      	ldr	r4, [r7, #28]
 8012bd2:	b97c      	cbnz	r4, 8012bf4 <__pow5mult+0x48>
 8012bd4:	2010      	movs	r0, #16
 8012bd6:	f7ff fd35 	bl	8012644 <malloc>
 8012bda:	4602      	mov	r2, r0
 8012bdc:	61f8      	str	r0, [r7, #28]
 8012bde:	b928      	cbnz	r0, 8012bec <__pow5mult+0x40>
 8012be0:	4b1d      	ldr	r3, [pc, #116]	@ (8012c58 <__pow5mult+0xac>)
 8012be2:	481e      	ldr	r0, [pc, #120]	@ (8012c5c <__pow5mult+0xb0>)
 8012be4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012be8:	f001 fb6e 	bl	80142c8 <__assert_func>
 8012bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012bf0:	6004      	str	r4, [r0, #0]
 8012bf2:	60c4      	str	r4, [r0, #12]
 8012bf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012bfc:	b94c      	cbnz	r4, 8012c12 <__pow5mult+0x66>
 8012bfe:	f240 2171 	movw	r1, #625	@ 0x271
 8012c02:	4638      	mov	r0, r7
 8012c04:	f7ff ff12 	bl	8012a2c <__i2b>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c0e:	4604      	mov	r4, r0
 8012c10:	6003      	str	r3, [r0, #0]
 8012c12:	f04f 0900 	mov.w	r9, #0
 8012c16:	07eb      	lsls	r3, r5, #31
 8012c18:	d50a      	bpl.n	8012c30 <__pow5mult+0x84>
 8012c1a:	4631      	mov	r1, r6
 8012c1c:	4622      	mov	r2, r4
 8012c1e:	4638      	mov	r0, r7
 8012c20:	f7ff ff1a 	bl	8012a58 <__multiply>
 8012c24:	4631      	mov	r1, r6
 8012c26:	4680      	mov	r8, r0
 8012c28:	4638      	mov	r0, r7
 8012c2a:	f7ff fe01 	bl	8012830 <_Bfree>
 8012c2e:	4646      	mov	r6, r8
 8012c30:	106d      	asrs	r5, r5, #1
 8012c32:	d00b      	beq.n	8012c4c <__pow5mult+0xa0>
 8012c34:	6820      	ldr	r0, [r4, #0]
 8012c36:	b938      	cbnz	r0, 8012c48 <__pow5mult+0x9c>
 8012c38:	4622      	mov	r2, r4
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	f7ff ff0b 	bl	8012a58 <__multiply>
 8012c42:	6020      	str	r0, [r4, #0]
 8012c44:	f8c0 9000 	str.w	r9, [r0]
 8012c48:	4604      	mov	r4, r0
 8012c4a:	e7e4      	b.n	8012c16 <__pow5mult+0x6a>
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c52:	bf00      	nop
 8012c54:	08015c94 	.word	0x08015c94
 8012c58:	08015bba 	.word	0x08015bba
 8012c5c:	08015c3a 	.word	0x08015c3a

08012c60 <__lshift>:
 8012c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c64:	460c      	mov	r4, r1
 8012c66:	6849      	ldr	r1, [r1, #4]
 8012c68:	6923      	ldr	r3, [r4, #16]
 8012c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c6e:	68a3      	ldr	r3, [r4, #8]
 8012c70:	4607      	mov	r7, r0
 8012c72:	4691      	mov	r9, r2
 8012c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c78:	f108 0601 	add.w	r6, r8, #1
 8012c7c:	42b3      	cmp	r3, r6
 8012c7e:	db0b      	blt.n	8012c98 <__lshift+0x38>
 8012c80:	4638      	mov	r0, r7
 8012c82:	f7ff fd95 	bl	80127b0 <_Balloc>
 8012c86:	4605      	mov	r5, r0
 8012c88:	b948      	cbnz	r0, 8012c9e <__lshift+0x3e>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	4b28      	ldr	r3, [pc, #160]	@ (8012d30 <__lshift+0xd0>)
 8012c8e:	4829      	ldr	r0, [pc, #164]	@ (8012d34 <__lshift+0xd4>)
 8012c90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c94:	f001 fb18 	bl	80142c8 <__assert_func>
 8012c98:	3101      	adds	r1, #1
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	e7ee      	b.n	8012c7c <__lshift+0x1c>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	f100 0114 	add.w	r1, r0, #20
 8012ca4:	f100 0210 	add.w	r2, r0, #16
 8012ca8:	4618      	mov	r0, r3
 8012caa:	4553      	cmp	r3, sl
 8012cac:	db33      	blt.n	8012d16 <__lshift+0xb6>
 8012cae:	6920      	ldr	r0, [r4, #16]
 8012cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cb4:	f104 0314 	add.w	r3, r4, #20
 8012cb8:	f019 091f 	ands.w	r9, r9, #31
 8012cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012cc4:	d02b      	beq.n	8012d1e <__lshift+0xbe>
 8012cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8012cca:	468a      	mov	sl, r1
 8012ccc:	2200      	movs	r2, #0
 8012cce:	6818      	ldr	r0, [r3, #0]
 8012cd0:	fa00 f009 	lsl.w	r0, r0, r9
 8012cd4:	4310      	orrs	r0, r2
 8012cd6:	f84a 0b04 	str.w	r0, [sl], #4
 8012cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cde:	459c      	cmp	ip, r3
 8012ce0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ce4:	d8f3      	bhi.n	8012cce <__lshift+0x6e>
 8012ce6:	ebac 0304 	sub.w	r3, ip, r4
 8012cea:	3b15      	subs	r3, #21
 8012cec:	f023 0303 	bic.w	r3, r3, #3
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	f104 0015 	add.w	r0, r4, #21
 8012cf6:	4584      	cmp	ip, r0
 8012cf8:	bf38      	it	cc
 8012cfa:	2304      	movcc	r3, #4
 8012cfc:	50ca      	str	r2, [r1, r3]
 8012cfe:	b10a      	cbz	r2, 8012d04 <__lshift+0xa4>
 8012d00:	f108 0602 	add.w	r6, r8, #2
 8012d04:	3e01      	subs	r6, #1
 8012d06:	4638      	mov	r0, r7
 8012d08:	612e      	str	r6, [r5, #16]
 8012d0a:	4621      	mov	r1, r4
 8012d0c:	f7ff fd90 	bl	8012830 <_Bfree>
 8012d10:	4628      	mov	r0, r5
 8012d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	e7c5      	b.n	8012caa <__lshift+0x4a>
 8012d1e:	3904      	subs	r1, #4
 8012d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d28:	459c      	cmp	ip, r3
 8012d2a:	d8f9      	bhi.n	8012d20 <__lshift+0xc0>
 8012d2c:	e7ea      	b.n	8012d04 <__lshift+0xa4>
 8012d2e:	bf00      	nop
 8012d30:	08015c29 	.word	0x08015c29
 8012d34:	08015c3a 	.word	0x08015c3a

08012d38 <__mcmp>:
 8012d38:	690a      	ldr	r2, [r1, #16]
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	6900      	ldr	r0, [r0, #16]
 8012d3e:	1a80      	subs	r0, r0, r2
 8012d40:	b530      	push	{r4, r5, lr}
 8012d42:	d10e      	bne.n	8012d62 <__mcmp+0x2a>
 8012d44:	3314      	adds	r3, #20
 8012d46:	3114      	adds	r1, #20
 8012d48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012d4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012d50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d58:	4295      	cmp	r5, r2
 8012d5a:	d003      	beq.n	8012d64 <__mcmp+0x2c>
 8012d5c:	d205      	bcs.n	8012d6a <__mcmp+0x32>
 8012d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d62:	bd30      	pop	{r4, r5, pc}
 8012d64:	42a3      	cmp	r3, r4
 8012d66:	d3f3      	bcc.n	8012d50 <__mcmp+0x18>
 8012d68:	e7fb      	b.n	8012d62 <__mcmp+0x2a>
 8012d6a:	2001      	movs	r0, #1
 8012d6c:	e7f9      	b.n	8012d62 <__mcmp+0x2a>
	...

08012d70 <__mdiff>:
 8012d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	4689      	mov	r9, r1
 8012d76:	4606      	mov	r6, r0
 8012d78:	4611      	mov	r1, r2
 8012d7a:	4648      	mov	r0, r9
 8012d7c:	4614      	mov	r4, r2
 8012d7e:	f7ff ffdb 	bl	8012d38 <__mcmp>
 8012d82:	1e05      	subs	r5, r0, #0
 8012d84:	d112      	bne.n	8012dac <__mdiff+0x3c>
 8012d86:	4629      	mov	r1, r5
 8012d88:	4630      	mov	r0, r6
 8012d8a:	f7ff fd11 	bl	80127b0 <_Balloc>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	b928      	cbnz	r0, 8012d9e <__mdiff+0x2e>
 8012d92:	4b3f      	ldr	r3, [pc, #252]	@ (8012e90 <__mdiff+0x120>)
 8012d94:	f240 2137 	movw	r1, #567	@ 0x237
 8012d98:	483e      	ldr	r0, [pc, #248]	@ (8012e94 <__mdiff+0x124>)
 8012d9a:	f001 fa95 	bl	80142c8 <__assert_func>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012da4:	4610      	mov	r0, r2
 8012da6:	b003      	add	sp, #12
 8012da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dac:	bfbc      	itt	lt
 8012dae:	464b      	movlt	r3, r9
 8012db0:	46a1      	movlt	r9, r4
 8012db2:	4630      	mov	r0, r6
 8012db4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012db8:	bfba      	itte	lt
 8012dba:	461c      	movlt	r4, r3
 8012dbc:	2501      	movlt	r5, #1
 8012dbe:	2500      	movge	r5, #0
 8012dc0:	f7ff fcf6 	bl	80127b0 <_Balloc>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	b918      	cbnz	r0, 8012dd0 <__mdiff+0x60>
 8012dc8:	4b31      	ldr	r3, [pc, #196]	@ (8012e90 <__mdiff+0x120>)
 8012dca:	f240 2145 	movw	r1, #581	@ 0x245
 8012dce:	e7e3      	b.n	8012d98 <__mdiff+0x28>
 8012dd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012dd4:	6926      	ldr	r6, [r4, #16]
 8012dd6:	60c5      	str	r5, [r0, #12]
 8012dd8:	f109 0310 	add.w	r3, r9, #16
 8012ddc:	f109 0514 	add.w	r5, r9, #20
 8012de0:	f104 0e14 	add.w	lr, r4, #20
 8012de4:	f100 0b14 	add.w	fp, r0, #20
 8012de8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012dec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012df0:	9301      	str	r3, [sp, #4]
 8012df2:	46d9      	mov	r9, fp
 8012df4:	f04f 0c00 	mov.w	ip, #0
 8012df8:	9b01      	ldr	r3, [sp, #4]
 8012dfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012dfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012e02:	9301      	str	r3, [sp, #4]
 8012e04:	fa1f f38a 	uxth.w	r3, sl
 8012e08:	4619      	mov	r1, r3
 8012e0a:	b283      	uxth	r3, r0
 8012e0c:	1acb      	subs	r3, r1, r3
 8012e0e:	0c00      	lsrs	r0, r0, #16
 8012e10:	4463      	add	r3, ip
 8012e12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012e16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012e20:	4576      	cmp	r6, lr
 8012e22:	f849 3b04 	str.w	r3, [r9], #4
 8012e26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e2a:	d8e5      	bhi.n	8012df8 <__mdiff+0x88>
 8012e2c:	1b33      	subs	r3, r6, r4
 8012e2e:	3b15      	subs	r3, #21
 8012e30:	f023 0303 	bic.w	r3, r3, #3
 8012e34:	3415      	adds	r4, #21
 8012e36:	3304      	adds	r3, #4
 8012e38:	42a6      	cmp	r6, r4
 8012e3a:	bf38      	it	cc
 8012e3c:	2304      	movcc	r3, #4
 8012e3e:	441d      	add	r5, r3
 8012e40:	445b      	add	r3, fp
 8012e42:	461e      	mov	r6, r3
 8012e44:	462c      	mov	r4, r5
 8012e46:	4544      	cmp	r4, r8
 8012e48:	d30e      	bcc.n	8012e68 <__mdiff+0xf8>
 8012e4a:	f108 0103 	add.w	r1, r8, #3
 8012e4e:	1b49      	subs	r1, r1, r5
 8012e50:	f021 0103 	bic.w	r1, r1, #3
 8012e54:	3d03      	subs	r5, #3
 8012e56:	45a8      	cmp	r8, r5
 8012e58:	bf38      	it	cc
 8012e5a:	2100      	movcc	r1, #0
 8012e5c:	440b      	add	r3, r1
 8012e5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e62:	b191      	cbz	r1, 8012e8a <__mdiff+0x11a>
 8012e64:	6117      	str	r7, [r2, #16]
 8012e66:	e79d      	b.n	8012da4 <__mdiff+0x34>
 8012e68:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e6c:	46e6      	mov	lr, ip
 8012e6e:	0c08      	lsrs	r0, r1, #16
 8012e70:	fa1c fc81 	uxtah	ip, ip, r1
 8012e74:	4471      	add	r1, lr
 8012e76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e7a:	b289      	uxth	r1, r1
 8012e7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e80:	f846 1b04 	str.w	r1, [r6], #4
 8012e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e88:	e7dd      	b.n	8012e46 <__mdiff+0xd6>
 8012e8a:	3f01      	subs	r7, #1
 8012e8c:	e7e7      	b.n	8012e5e <__mdiff+0xee>
 8012e8e:	bf00      	nop
 8012e90:	08015c29 	.word	0x08015c29
 8012e94:	08015c3a 	.word	0x08015c3a

08012e98 <__ulp>:
 8012e98:	b082      	sub	sp, #8
 8012e9a:	ed8d 0b00 	vstr	d0, [sp]
 8012e9e:	9a01      	ldr	r2, [sp, #4]
 8012ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8012ee0 <__ulp+0x48>)
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	dc08      	bgt.n	8012ebe <__ulp+0x26>
 8012eac:	425b      	negs	r3, r3
 8012eae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012eb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012eb6:	da04      	bge.n	8012ec2 <__ulp+0x2a>
 8012eb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012ebc:	4113      	asrs	r3, r2
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	e008      	b.n	8012ed4 <__ulp+0x3c>
 8012ec2:	f1a2 0314 	sub.w	r3, r2, #20
 8012ec6:	2b1e      	cmp	r3, #30
 8012ec8:	bfda      	itte	le
 8012eca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012ece:	40da      	lsrle	r2, r3
 8012ed0:	2201      	movgt	r2, #1
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	4610      	mov	r0, r2
 8012ed8:	ec41 0b10 	vmov	d0, r0, r1
 8012edc:	b002      	add	sp, #8
 8012ede:	4770      	bx	lr
 8012ee0:	7ff00000 	.word	0x7ff00000

08012ee4 <__b2d>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	6906      	ldr	r6, [r0, #16]
 8012eea:	f100 0814 	add.w	r8, r0, #20
 8012eee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012ef2:	1f37      	subs	r7, r6, #4
 8012ef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ef8:	4610      	mov	r0, r2
 8012efa:	f7ff fd4b 	bl	8012994 <__hi0bits>
 8012efe:	f1c0 0320 	rsb	r3, r0, #32
 8012f02:	280a      	cmp	r0, #10
 8012f04:	600b      	str	r3, [r1, #0]
 8012f06:	491b      	ldr	r1, [pc, #108]	@ (8012f74 <__b2d+0x90>)
 8012f08:	dc15      	bgt.n	8012f36 <__b2d+0x52>
 8012f0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012f0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012f12:	45b8      	cmp	r8, r7
 8012f14:	ea43 0501 	orr.w	r5, r3, r1
 8012f18:	bf34      	ite	cc
 8012f1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012f1e:	2300      	movcs	r3, #0
 8012f20:	3015      	adds	r0, #21
 8012f22:	fa02 f000 	lsl.w	r0, r2, r0
 8012f26:	fa23 f30c 	lsr.w	r3, r3, ip
 8012f2a:	4303      	orrs	r3, r0
 8012f2c:	461c      	mov	r4, r3
 8012f2e:	ec45 4b10 	vmov	d0, r4, r5
 8012f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f36:	45b8      	cmp	r8, r7
 8012f38:	bf3a      	itte	cc
 8012f3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012f3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012f42:	2300      	movcs	r3, #0
 8012f44:	380b      	subs	r0, #11
 8012f46:	d012      	beq.n	8012f6e <__b2d+0x8a>
 8012f48:	f1c0 0120 	rsb	r1, r0, #32
 8012f4c:	fa23 f401 	lsr.w	r4, r3, r1
 8012f50:	4082      	lsls	r2, r0
 8012f52:	4322      	orrs	r2, r4
 8012f54:	4547      	cmp	r7, r8
 8012f56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012f5a:	bf8c      	ite	hi
 8012f5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012f60:	2200      	movls	r2, #0
 8012f62:	4083      	lsls	r3, r0
 8012f64:	40ca      	lsrs	r2, r1
 8012f66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	e7de      	b.n	8012f2c <__b2d+0x48>
 8012f6e:	ea42 0501 	orr.w	r5, r2, r1
 8012f72:	e7db      	b.n	8012f2c <__b2d+0x48>
 8012f74:	3ff00000 	.word	0x3ff00000

08012f78 <__d2b>:
 8012f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f7c:	460f      	mov	r7, r1
 8012f7e:	2101      	movs	r1, #1
 8012f80:	ec59 8b10 	vmov	r8, r9, d0
 8012f84:	4616      	mov	r6, r2
 8012f86:	f7ff fc13 	bl	80127b0 <_Balloc>
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	b930      	cbnz	r0, 8012f9c <__d2b+0x24>
 8012f8e:	4602      	mov	r2, r0
 8012f90:	4b23      	ldr	r3, [pc, #140]	@ (8013020 <__d2b+0xa8>)
 8012f92:	4824      	ldr	r0, [pc, #144]	@ (8013024 <__d2b+0xac>)
 8012f94:	f240 310f 	movw	r1, #783	@ 0x30f
 8012f98:	f001 f996 	bl	80142c8 <__assert_func>
 8012f9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fa4:	b10d      	cbz	r5, 8012faa <__d2b+0x32>
 8012fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	f1b8 0300 	subs.w	r3, r8, #0
 8012fb0:	d023      	beq.n	8012ffa <__d2b+0x82>
 8012fb2:	4668      	mov	r0, sp
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	f7ff fd0c 	bl	80129d2 <__lo0bits>
 8012fba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012fbe:	b1d0      	cbz	r0, 8012ff6 <__d2b+0x7e>
 8012fc0:	f1c0 0320 	rsb	r3, r0, #32
 8012fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8012fc8:	430b      	orrs	r3, r1
 8012fca:	40c2      	lsrs	r2, r0
 8012fcc:	6163      	str	r3, [r4, #20]
 8012fce:	9201      	str	r2, [sp, #4]
 8012fd0:	9b01      	ldr	r3, [sp, #4]
 8012fd2:	61a3      	str	r3, [r4, #24]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	bf0c      	ite	eq
 8012fd8:	2201      	moveq	r2, #1
 8012fda:	2202      	movne	r2, #2
 8012fdc:	6122      	str	r2, [r4, #16]
 8012fde:	b1a5      	cbz	r5, 801300a <__d2b+0x92>
 8012fe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012fe4:	4405      	add	r5, r0
 8012fe6:	603d      	str	r5, [r7, #0]
 8012fe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012fec:	6030      	str	r0, [r6, #0]
 8012fee:	4620      	mov	r0, r4
 8012ff0:	b003      	add	sp, #12
 8012ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ff6:	6161      	str	r1, [r4, #20]
 8012ff8:	e7ea      	b.n	8012fd0 <__d2b+0x58>
 8012ffa:	a801      	add	r0, sp, #4
 8012ffc:	f7ff fce9 	bl	80129d2 <__lo0bits>
 8013000:	9b01      	ldr	r3, [sp, #4]
 8013002:	6163      	str	r3, [r4, #20]
 8013004:	3020      	adds	r0, #32
 8013006:	2201      	movs	r2, #1
 8013008:	e7e8      	b.n	8012fdc <__d2b+0x64>
 801300a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801300e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013012:	6038      	str	r0, [r7, #0]
 8013014:	6918      	ldr	r0, [r3, #16]
 8013016:	f7ff fcbd 	bl	8012994 <__hi0bits>
 801301a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801301e:	e7e5      	b.n	8012fec <__d2b+0x74>
 8013020:	08015c29 	.word	0x08015c29
 8013024:	08015c3a 	.word	0x08015c3a

08013028 <__ratio>:
 8013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	b085      	sub	sp, #20
 801302e:	e9cd 1000 	strd	r1, r0, [sp]
 8013032:	a902      	add	r1, sp, #8
 8013034:	f7ff ff56 	bl	8012ee4 <__b2d>
 8013038:	9800      	ldr	r0, [sp, #0]
 801303a:	a903      	add	r1, sp, #12
 801303c:	ec55 4b10 	vmov	r4, r5, d0
 8013040:	f7ff ff50 	bl	8012ee4 <__b2d>
 8013044:	9b01      	ldr	r3, [sp, #4]
 8013046:	6919      	ldr	r1, [r3, #16]
 8013048:	9b00      	ldr	r3, [sp, #0]
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	1ac9      	subs	r1, r1, r3
 801304e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013052:	1a9b      	subs	r3, r3, r2
 8013054:	ec5b ab10 	vmov	sl, fp, d0
 8013058:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801305c:	2b00      	cmp	r3, #0
 801305e:	bfce      	itee	gt
 8013060:	462a      	movgt	r2, r5
 8013062:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013066:	465a      	movle	r2, fp
 8013068:	462f      	mov	r7, r5
 801306a:	46d9      	mov	r9, fp
 801306c:	bfcc      	ite	gt
 801306e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013072:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013076:	464b      	mov	r3, r9
 8013078:	4652      	mov	r2, sl
 801307a:	4620      	mov	r0, r4
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed fc0d 	bl	800089c <__aeabi_ddiv>
 8013082:	ec41 0b10 	vmov	d0, r0, r1
 8013086:	b005      	add	sp, #20
 8013088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801308c <__copybits>:
 801308c:	3901      	subs	r1, #1
 801308e:	b570      	push	{r4, r5, r6, lr}
 8013090:	1149      	asrs	r1, r1, #5
 8013092:	6914      	ldr	r4, [r2, #16]
 8013094:	3101      	adds	r1, #1
 8013096:	f102 0314 	add.w	r3, r2, #20
 801309a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801309e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80130a2:	1f05      	subs	r5, r0, #4
 80130a4:	42a3      	cmp	r3, r4
 80130a6:	d30c      	bcc.n	80130c2 <__copybits+0x36>
 80130a8:	1aa3      	subs	r3, r4, r2
 80130aa:	3b11      	subs	r3, #17
 80130ac:	f023 0303 	bic.w	r3, r3, #3
 80130b0:	3211      	adds	r2, #17
 80130b2:	42a2      	cmp	r2, r4
 80130b4:	bf88      	it	hi
 80130b6:	2300      	movhi	r3, #0
 80130b8:	4418      	add	r0, r3
 80130ba:	2300      	movs	r3, #0
 80130bc:	4288      	cmp	r0, r1
 80130be:	d305      	bcc.n	80130cc <__copybits+0x40>
 80130c0:	bd70      	pop	{r4, r5, r6, pc}
 80130c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80130c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80130ca:	e7eb      	b.n	80130a4 <__copybits+0x18>
 80130cc:	f840 3b04 	str.w	r3, [r0], #4
 80130d0:	e7f4      	b.n	80130bc <__copybits+0x30>

080130d2 <__any_on>:
 80130d2:	f100 0214 	add.w	r2, r0, #20
 80130d6:	6900      	ldr	r0, [r0, #16]
 80130d8:	114b      	asrs	r3, r1, #5
 80130da:	4298      	cmp	r0, r3
 80130dc:	b510      	push	{r4, lr}
 80130de:	db11      	blt.n	8013104 <__any_on+0x32>
 80130e0:	dd0a      	ble.n	80130f8 <__any_on+0x26>
 80130e2:	f011 011f 	ands.w	r1, r1, #31
 80130e6:	d007      	beq.n	80130f8 <__any_on+0x26>
 80130e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130ec:	fa24 f001 	lsr.w	r0, r4, r1
 80130f0:	fa00 f101 	lsl.w	r1, r0, r1
 80130f4:	428c      	cmp	r4, r1
 80130f6:	d10b      	bne.n	8013110 <__any_on+0x3e>
 80130f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d803      	bhi.n	8013108 <__any_on+0x36>
 8013100:	2000      	movs	r0, #0
 8013102:	bd10      	pop	{r4, pc}
 8013104:	4603      	mov	r3, r0
 8013106:	e7f7      	b.n	80130f8 <__any_on+0x26>
 8013108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801310c:	2900      	cmp	r1, #0
 801310e:	d0f5      	beq.n	80130fc <__any_on+0x2a>
 8013110:	2001      	movs	r0, #1
 8013112:	e7f6      	b.n	8013102 <__any_on+0x30>

08013114 <sulp>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	4604      	mov	r4, r0
 8013118:	460d      	mov	r5, r1
 801311a:	ec45 4b10 	vmov	d0, r4, r5
 801311e:	4616      	mov	r6, r2
 8013120:	f7ff feba 	bl	8012e98 <__ulp>
 8013124:	ec51 0b10 	vmov	r0, r1, d0
 8013128:	b17e      	cbz	r6, 801314a <sulp+0x36>
 801312a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801312e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013132:	2b00      	cmp	r3, #0
 8013134:	dd09      	ble.n	801314a <sulp+0x36>
 8013136:	051b      	lsls	r3, r3, #20
 8013138:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801313c:	2400      	movs	r4, #0
 801313e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013142:	4622      	mov	r2, r4
 8013144:	462b      	mov	r3, r5
 8013146:	f7ed fa7f 	bl	8000648 <__aeabi_dmul>
 801314a:	ec41 0b10 	vmov	d0, r0, r1
 801314e:	bd70      	pop	{r4, r5, r6, pc}

08013150 <_strtod_l>:
 8013150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013154:	b09f      	sub	sp, #124	@ 0x7c
 8013156:	460c      	mov	r4, r1
 8013158:	9217      	str	r2, [sp, #92]	@ 0x5c
 801315a:	2200      	movs	r2, #0
 801315c:	921a      	str	r2, [sp, #104]	@ 0x68
 801315e:	9005      	str	r0, [sp, #20]
 8013160:	f04f 0a00 	mov.w	sl, #0
 8013164:	f04f 0b00 	mov.w	fp, #0
 8013168:	460a      	mov	r2, r1
 801316a:	9219      	str	r2, [sp, #100]	@ 0x64
 801316c:	7811      	ldrb	r1, [r2, #0]
 801316e:	292b      	cmp	r1, #43	@ 0x2b
 8013170:	d04a      	beq.n	8013208 <_strtod_l+0xb8>
 8013172:	d838      	bhi.n	80131e6 <_strtod_l+0x96>
 8013174:	290d      	cmp	r1, #13
 8013176:	d832      	bhi.n	80131de <_strtod_l+0x8e>
 8013178:	2908      	cmp	r1, #8
 801317a:	d832      	bhi.n	80131e2 <_strtod_l+0x92>
 801317c:	2900      	cmp	r1, #0
 801317e:	d03b      	beq.n	80131f8 <_strtod_l+0xa8>
 8013180:	2200      	movs	r2, #0
 8013182:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013184:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013186:	782a      	ldrb	r2, [r5, #0]
 8013188:	2a30      	cmp	r2, #48	@ 0x30
 801318a:	f040 80b3 	bne.w	80132f4 <_strtod_l+0x1a4>
 801318e:	786a      	ldrb	r2, [r5, #1]
 8013190:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013194:	2a58      	cmp	r2, #88	@ 0x58
 8013196:	d16e      	bne.n	8013276 <_strtod_l+0x126>
 8013198:	9302      	str	r3, [sp, #8]
 801319a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801319c:	9301      	str	r3, [sp, #4]
 801319e:	ab1a      	add	r3, sp, #104	@ 0x68
 80131a0:	9300      	str	r3, [sp, #0]
 80131a2:	4a8e      	ldr	r2, [pc, #568]	@ (80133dc <_strtod_l+0x28c>)
 80131a4:	9805      	ldr	r0, [sp, #20]
 80131a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80131a8:	a919      	add	r1, sp, #100	@ 0x64
 80131aa:	f001 f927 	bl	80143fc <__gethex>
 80131ae:	f010 060f 	ands.w	r6, r0, #15
 80131b2:	4604      	mov	r4, r0
 80131b4:	d005      	beq.n	80131c2 <_strtod_l+0x72>
 80131b6:	2e06      	cmp	r6, #6
 80131b8:	d128      	bne.n	801320c <_strtod_l+0xbc>
 80131ba:	3501      	adds	r5, #1
 80131bc:	2300      	movs	r3, #0
 80131be:	9519      	str	r5, [sp, #100]	@ 0x64
 80131c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f040 858e 	bne.w	8013ce6 <_strtod_l+0xb96>
 80131ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131cc:	b1cb      	cbz	r3, 8013202 <_strtod_l+0xb2>
 80131ce:	4652      	mov	r2, sl
 80131d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80131d4:	ec43 2b10 	vmov	d0, r2, r3
 80131d8:	b01f      	add	sp, #124	@ 0x7c
 80131da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131de:	2920      	cmp	r1, #32
 80131e0:	d1ce      	bne.n	8013180 <_strtod_l+0x30>
 80131e2:	3201      	adds	r2, #1
 80131e4:	e7c1      	b.n	801316a <_strtod_l+0x1a>
 80131e6:	292d      	cmp	r1, #45	@ 0x2d
 80131e8:	d1ca      	bne.n	8013180 <_strtod_l+0x30>
 80131ea:	2101      	movs	r1, #1
 80131ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80131ee:	1c51      	adds	r1, r2, #1
 80131f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80131f2:	7852      	ldrb	r2, [r2, #1]
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	d1c5      	bne.n	8013184 <_strtod_l+0x34>
 80131f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80131fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f040 8570 	bne.w	8013ce2 <_strtod_l+0xb92>
 8013202:	4652      	mov	r2, sl
 8013204:	465b      	mov	r3, fp
 8013206:	e7e5      	b.n	80131d4 <_strtod_l+0x84>
 8013208:	2100      	movs	r1, #0
 801320a:	e7ef      	b.n	80131ec <_strtod_l+0x9c>
 801320c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801320e:	b13a      	cbz	r2, 8013220 <_strtod_l+0xd0>
 8013210:	2135      	movs	r1, #53	@ 0x35
 8013212:	a81c      	add	r0, sp, #112	@ 0x70
 8013214:	f7ff ff3a 	bl	801308c <__copybits>
 8013218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801321a:	9805      	ldr	r0, [sp, #20]
 801321c:	f7ff fb08 	bl	8012830 <_Bfree>
 8013220:	3e01      	subs	r6, #1
 8013222:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013224:	2e04      	cmp	r6, #4
 8013226:	d806      	bhi.n	8013236 <_strtod_l+0xe6>
 8013228:	e8df f006 	tbb	[pc, r6]
 801322c:	201d0314 	.word	0x201d0314
 8013230:	14          	.byte	0x14
 8013231:	00          	.byte	0x00
 8013232:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013236:	05e1      	lsls	r1, r4, #23
 8013238:	bf48      	it	mi
 801323a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801323e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013242:	0d1b      	lsrs	r3, r3, #20
 8013244:	051b      	lsls	r3, r3, #20
 8013246:	2b00      	cmp	r3, #0
 8013248:	d1bb      	bne.n	80131c2 <_strtod_l+0x72>
 801324a:	f7fe fb2f 	bl	80118ac <__errno>
 801324e:	2322      	movs	r3, #34	@ 0x22
 8013250:	6003      	str	r3, [r0, #0]
 8013252:	e7b6      	b.n	80131c2 <_strtod_l+0x72>
 8013254:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013258:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801325c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013260:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013264:	e7e7      	b.n	8013236 <_strtod_l+0xe6>
 8013266:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80133e4 <_strtod_l+0x294>
 801326a:	e7e4      	b.n	8013236 <_strtod_l+0xe6>
 801326c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013270:	f04f 3aff 	mov.w	sl, #4294967295
 8013274:	e7df      	b.n	8013236 <_strtod_l+0xe6>
 8013276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013278:	1c5a      	adds	r2, r3, #1
 801327a:	9219      	str	r2, [sp, #100]	@ 0x64
 801327c:	785b      	ldrb	r3, [r3, #1]
 801327e:	2b30      	cmp	r3, #48	@ 0x30
 8013280:	d0f9      	beq.n	8013276 <_strtod_l+0x126>
 8013282:	2b00      	cmp	r3, #0
 8013284:	d09d      	beq.n	80131c2 <_strtod_l+0x72>
 8013286:	2301      	movs	r3, #1
 8013288:	9309      	str	r3, [sp, #36]	@ 0x24
 801328a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801328c:	930c      	str	r3, [sp, #48]	@ 0x30
 801328e:	2300      	movs	r3, #0
 8013290:	9308      	str	r3, [sp, #32]
 8013292:	930a      	str	r3, [sp, #40]	@ 0x28
 8013294:	461f      	mov	r7, r3
 8013296:	220a      	movs	r2, #10
 8013298:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801329a:	7805      	ldrb	r5, [r0, #0]
 801329c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80132a0:	b2d9      	uxtb	r1, r3
 80132a2:	2909      	cmp	r1, #9
 80132a4:	d928      	bls.n	80132f8 <_strtod_l+0x1a8>
 80132a6:	494e      	ldr	r1, [pc, #312]	@ (80133e0 <_strtod_l+0x290>)
 80132a8:	2201      	movs	r2, #1
 80132aa:	f000 ffd5 	bl	8014258 <strncmp>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d032      	beq.n	8013318 <_strtod_l+0x1c8>
 80132b2:	2000      	movs	r0, #0
 80132b4:	462a      	mov	r2, r5
 80132b6:	4681      	mov	r9, r0
 80132b8:	463d      	mov	r5, r7
 80132ba:	4603      	mov	r3, r0
 80132bc:	2a65      	cmp	r2, #101	@ 0x65
 80132be:	d001      	beq.n	80132c4 <_strtod_l+0x174>
 80132c0:	2a45      	cmp	r2, #69	@ 0x45
 80132c2:	d114      	bne.n	80132ee <_strtod_l+0x19e>
 80132c4:	b91d      	cbnz	r5, 80132ce <_strtod_l+0x17e>
 80132c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132c8:	4302      	orrs	r2, r0
 80132ca:	d095      	beq.n	80131f8 <_strtod_l+0xa8>
 80132cc:	2500      	movs	r5, #0
 80132ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80132d0:	1c62      	adds	r2, r4, #1
 80132d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80132d4:	7862      	ldrb	r2, [r4, #1]
 80132d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80132d8:	d077      	beq.n	80133ca <_strtod_l+0x27a>
 80132da:	2a2d      	cmp	r2, #45	@ 0x2d
 80132dc:	d07b      	beq.n	80133d6 <_strtod_l+0x286>
 80132de:	f04f 0c00 	mov.w	ip, #0
 80132e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80132e6:	2909      	cmp	r1, #9
 80132e8:	f240 8082 	bls.w	80133f0 <_strtod_l+0x2a0>
 80132ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80132ee:	f04f 0800 	mov.w	r8, #0
 80132f2:	e0a2      	b.n	801343a <_strtod_l+0x2ea>
 80132f4:	2300      	movs	r3, #0
 80132f6:	e7c7      	b.n	8013288 <_strtod_l+0x138>
 80132f8:	2f08      	cmp	r7, #8
 80132fa:	bfd5      	itete	le
 80132fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80132fe:	9908      	ldrgt	r1, [sp, #32]
 8013300:	fb02 3301 	mlale	r3, r2, r1, r3
 8013304:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013308:	f100 0001 	add.w	r0, r0, #1
 801330c:	bfd4      	ite	le
 801330e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013310:	9308      	strgt	r3, [sp, #32]
 8013312:	3701      	adds	r7, #1
 8013314:	9019      	str	r0, [sp, #100]	@ 0x64
 8013316:	e7bf      	b.n	8013298 <_strtod_l+0x148>
 8013318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	9219      	str	r2, [sp, #100]	@ 0x64
 801331e:	785a      	ldrb	r2, [r3, #1]
 8013320:	b37f      	cbz	r7, 8013382 <_strtod_l+0x232>
 8013322:	4681      	mov	r9, r0
 8013324:	463d      	mov	r5, r7
 8013326:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801332a:	2b09      	cmp	r3, #9
 801332c:	d912      	bls.n	8013354 <_strtod_l+0x204>
 801332e:	2301      	movs	r3, #1
 8013330:	e7c4      	b.n	80132bc <_strtod_l+0x16c>
 8013332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	9219      	str	r2, [sp, #100]	@ 0x64
 8013338:	785a      	ldrb	r2, [r3, #1]
 801333a:	3001      	adds	r0, #1
 801333c:	2a30      	cmp	r2, #48	@ 0x30
 801333e:	d0f8      	beq.n	8013332 <_strtod_l+0x1e2>
 8013340:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013344:	2b08      	cmp	r3, #8
 8013346:	f200 84d3 	bhi.w	8013cf0 <_strtod_l+0xba0>
 801334a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801334c:	930c      	str	r3, [sp, #48]	@ 0x30
 801334e:	4681      	mov	r9, r0
 8013350:	2000      	movs	r0, #0
 8013352:	4605      	mov	r5, r0
 8013354:	3a30      	subs	r2, #48	@ 0x30
 8013356:	f100 0301 	add.w	r3, r0, #1
 801335a:	d02a      	beq.n	80133b2 <_strtod_l+0x262>
 801335c:	4499      	add	r9, r3
 801335e:	eb00 0c05 	add.w	ip, r0, r5
 8013362:	462b      	mov	r3, r5
 8013364:	210a      	movs	r1, #10
 8013366:	4563      	cmp	r3, ip
 8013368:	d10d      	bne.n	8013386 <_strtod_l+0x236>
 801336a:	1c69      	adds	r1, r5, #1
 801336c:	4401      	add	r1, r0
 801336e:	4428      	add	r0, r5
 8013370:	2808      	cmp	r0, #8
 8013372:	dc16      	bgt.n	80133a2 <_strtod_l+0x252>
 8013374:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013376:	230a      	movs	r3, #10
 8013378:	fb03 2300 	mla	r3, r3, r0, r2
 801337c:	930a      	str	r3, [sp, #40]	@ 0x28
 801337e:	2300      	movs	r3, #0
 8013380:	e018      	b.n	80133b4 <_strtod_l+0x264>
 8013382:	4638      	mov	r0, r7
 8013384:	e7da      	b.n	801333c <_strtod_l+0x1ec>
 8013386:	2b08      	cmp	r3, #8
 8013388:	f103 0301 	add.w	r3, r3, #1
 801338c:	dc03      	bgt.n	8013396 <_strtod_l+0x246>
 801338e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013390:	434e      	muls	r6, r1
 8013392:	960a      	str	r6, [sp, #40]	@ 0x28
 8013394:	e7e7      	b.n	8013366 <_strtod_l+0x216>
 8013396:	2b10      	cmp	r3, #16
 8013398:	bfde      	ittt	le
 801339a:	9e08      	ldrle	r6, [sp, #32]
 801339c:	434e      	mulle	r6, r1
 801339e:	9608      	strle	r6, [sp, #32]
 80133a0:	e7e1      	b.n	8013366 <_strtod_l+0x216>
 80133a2:	280f      	cmp	r0, #15
 80133a4:	dceb      	bgt.n	801337e <_strtod_l+0x22e>
 80133a6:	9808      	ldr	r0, [sp, #32]
 80133a8:	230a      	movs	r3, #10
 80133aa:	fb03 2300 	mla	r3, r3, r0, r2
 80133ae:	9308      	str	r3, [sp, #32]
 80133b0:	e7e5      	b.n	801337e <_strtod_l+0x22e>
 80133b2:	4629      	mov	r1, r5
 80133b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133b6:	1c50      	adds	r0, r2, #1
 80133b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80133ba:	7852      	ldrb	r2, [r2, #1]
 80133bc:	4618      	mov	r0, r3
 80133be:	460d      	mov	r5, r1
 80133c0:	e7b1      	b.n	8013326 <_strtod_l+0x1d6>
 80133c2:	f04f 0900 	mov.w	r9, #0
 80133c6:	2301      	movs	r3, #1
 80133c8:	e77d      	b.n	80132c6 <_strtod_l+0x176>
 80133ca:	f04f 0c00 	mov.w	ip, #0
 80133ce:	1ca2      	adds	r2, r4, #2
 80133d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80133d2:	78a2      	ldrb	r2, [r4, #2]
 80133d4:	e785      	b.n	80132e2 <_strtod_l+0x192>
 80133d6:	f04f 0c01 	mov.w	ip, #1
 80133da:	e7f8      	b.n	80133ce <_strtod_l+0x27e>
 80133dc:	08015da8 	.word	0x08015da8
 80133e0:	08015d90 	.word	0x08015d90
 80133e4:	7ff00000 	.word	0x7ff00000
 80133e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133ea:	1c51      	adds	r1, r2, #1
 80133ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80133ee:	7852      	ldrb	r2, [r2, #1]
 80133f0:	2a30      	cmp	r2, #48	@ 0x30
 80133f2:	d0f9      	beq.n	80133e8 <_strtod_l+0x298>
 80133f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80133f8:	2908      	cmp	r1, #8
 80133fa:	f63f af78 	bhi.w	80132ee <_strtod_l+0x19e>
 80133fe:	3a30      	subs	r2, #48	@ 0x30
 8013400:	920e      	str	r2, [sp, #56]	@ 0x38
 8013402:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013404:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013406:	f04f 080a 	mov.w	r8, #10
 801340a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801340c:	1c56      	adds	r6, r2, #1
 801340e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013410:	7852      	ldrb	r2, [r2, #1]
 8013412:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013416:	f1be 0f09 	cmp.w	lr, #9
 801341a:	d939      	bls.n	8013490 <_strtod_l+0x340>
 801341c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801341e:	1a76      	subs	r6, r6, r1
 8013420:	2e08      	cmp	r6, #8
 8013422:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013426:	dc03      	bgt.n	8013430 <_strtod_l+0x2e0>
 8013428:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801342a:	4588      	cmp	r8, r1
 801342c:	bfa8      	it	ge
 801342e:	4688      	movge	r8, r1
 8013430:	f1bc 0f00 	cmp.w	ip, #0
 8013434:	d001      	beq.n	801343a <_strtod_l+0x2ea>
 8013436:	f1c8 0800 	rsb	r8, r8, #0
 801343a:	2d00      	cmp	r5, #0
 801343c:	d14e      	bne.n	80134dc <_strtod_l+0x38c>
 801343e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013440:	4308      	orrs	r0, r1
 8013442:	f47f aebe 	bne.w	80131c2 <_strtod_l+0x72>
 8013446:	2b00      	cmp	r3, #0
 8013448:	f47f aed6 	bne.w	80131f8 <_strtod_l+0xa8>
 801344c:	2a69      	cmp	r2, #105	@ 0x69
 801344e:	d028      	beq.n	80134a2 <_strtod_l+0x352>
 8013450:	dc25      	bgt.n	801349e <_strtod_l+0x34e>
 8013452:	2a49      	cmp	r2, #73	@ 0x49
 8013454:	d025      	beq.n	80134a2 <_strtod_l+0x352>
 8013456:	2a4e      	cmp	r2, #78	@ 0x4e
 8013458:	f47f aece 	bne.w	80131f8 <_strtod_l+0xa8>
 801345c:	499b      	ldr	r1, [pc, #620]	@ (80136cc <_strtod_l+0x57c>)
 801345e:	a819      	add	r0, sp, #100	@ 0x64
 8013460:	f001 f9ee 	bl	8014840 <__match>
 8013464:	2800      	cmp	r0, #0
 8013466:	f43f aec7 	beq.w	80131f8 <_strtod_l+0xa8>
 801346a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	2b28      	cmp	r3, #40	@ 0x28
 8013470:	d12e      	bne.n	80134d0 <_strtod_l+0x380>
 8013472:	4997      	ldr	r1, [pc, #604]	@ (80136d0 <_strtod_l+0x580>)
 8013474:	aa1c      	add	r2, sp, #112	@ 0x70
 8013476:	a819      	add	r0, sp, #100	@ 0x64
 8013478:	f001 f9f6 	bl	8014868 <__hexnan>
 801347c:	2805      	cmp	r0, #5
 801347e:	d127      	bne.n	80134d0 <_strtod_l+0x380>
 8013480:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013482:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013486:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801348a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801348e:	e698      	b.n	80131c2 <_strtod_l+0x72>
 8013490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013492:	fb08 2101 	mla	r1, r8, r1, r2
 8013496:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801349a:	920e      	str	r2, [sp, #56]	@ 0x38
 801349c:	e7b5      	b.n	801340a <_strtod_l+0x2ba>
 801349e:	2a6e      	cmp	r2, #110	@ 0x6e
 80134a0:	e7da      	b.n	8013458 <_strtod_l+0x308>
 80134a2:	498c      	ldr	r1, [pc, #560]	@ (80136d4 <_strtod_l+0x584>)
 80134a4:	a819      	add	r0, sp, #100	@ 0x64
 80134a6:	f001 f9cb 	bl	8014840 <__match>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	f43f aea4 	beq.w	80131f8 <_strtod_l+0xa8>
 80134b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134b2:	4989      	ldr	r1, [pc, #548]	@ (80136d8 <_strtod_l+0x588>)
 80134b4:	3b01      	subs	r3, #1
 80134b6:	a819      	add	r0, sp, #100	@ 0x64
 80134b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80134ba:	f001 f9c1 	bl	8014840 <__match>
 80134be:	b910      	cbnz	r0, 80134c6 <_strtod_l+0x376>
 80134c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134c2:	3301      	adds	r3, #1
 80134c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80134c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80136e8 <_strtod_l+0x598>
 80134ca:	f04f 0a00 	mov.w	sl, #0
 80134ce:	e678      	b.n	80131c2 <_strtod_l+0x72>
 80134d0:	4882      	ldr	r0, [pc, #520]	@ (80136dc <_strtod_l+0x58c>)
 80134d2:	f000 fef1 	bl	80142b8 <nan>
 80134d6:	ec5b ab10 	vmov	sl, fp, d0
 80134da:	e672      	b.n	80131c2 <_strtod_l+0x72>
 80134dc:	eba8 0309 	sub.w	r3, r8, r9
 80134e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80134e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	bf08      	it	eq
 80134e8:	462f      	moveq	r7, r5
 80134ea:	2d10      	cmp	r5, #16
 80134ec:	462c      	mov	r4, r5
 80134ee:	bfa8      	it	ge
 80134f0:	2410      	movge	r4, #16
 80134f2:	f7ed f82f 	bl	8000554 <__aeabi_ui2d>
 80134f6:	2d09      	cmp	r5, #9
 80134f8:	4682      	mov	sl, r0
 80134fa:	468b      	mov	fp, r1
 80134fc:	dc13      	bgt.n	8013526 <_strtod_l+0x3d6>
 80134fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013500:	2b00      	cmp	r3, #0
 8013502:	f43f ae5e 	beq.w	80131c2 <_strtod_l+0x72>
 8013506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013508:	dd78      	ble.n	80135fc <_strtod_l+0x4ac>
 801350a:	2b16      	cmp	r3, #22
 801350c:	dc5f      	bgt.n	80135ce <_strtod_l+0x47e>
 801350e:	4974      	ldr	r1, [pc, #464]	@ (80136e0 <_strtod_l+0x590>)
 8013510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013518:	4652      	mov	r2, sl
 801351a:	465b      	mov	r3, fp
 801351c:	f7ed f894 	bl	8000648 <__aeabi_dmul>
 8013520:	4682      	mov	sl, r0
 8013522:	468b      	mov	fp, r1
 8013524:	e64d      	b.n	80131c2 <_strtod_l+0x72>
 8013526:	4b6e      	ldr	r3, [pc, #440]	@ (80136e0 <_strtod_l+0x590>)
 8013528:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801352c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013530:	f7ed f88a 	bl	8000648 <__aeabi_dmul>
 8013534:	4682      	mov	sl, r0
 8013536:	9808      	ldr	r0, [sp, #32]
 8013538:	468b      	mov	fp, r1
 801353a:	f7ed f80b 	bl	8000554 <__aeabi_ui2d>
 801353e:	4602      	mov	r2, r0
 8013540:	460b      	mov	r3, r1
 8013542:	4650      	mov	r0, sl
 8013544:	4659      	mov	r1, fp
 8013546:	f7ec fec9 	bl	80002dc <__adddf3>
 801354a:	2d0f      	cmp	r5, #15
 801354c:	4682      	mov	sl, r0
 801354e:	468b      	mov	fp, r1
 8013550:	ddd5      	ble.n	80134fe <_strtod_l+0x3ae>
 8013552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013554:	1b2c      	subs	r4, r5, r4
 8013556:	441c      	add	r4, r3
 8013558:	2c00      	cmp	r4, #0
 801355a:	f340 8096 	ble.w	801368a <_strtod_l+0x53a>
 801355e:	f014 030f 	ands.w	r3, r4, #15
 8013562:	d00a      	beq.n	801357a <_strtod_l+0x42a>
 8013564:	495e      	ldr	r1, [pc, #376]	@ (80136e0 <_strtod_l+0x590>)
 8013566:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801356a:	4652      	mov	r2, sl
 801356c:	465b      	mov	r3, fp
 801356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013572:	f7ed f869 	bl	8000648 <__aeabi_dmul>
 8013576:	4682      	mov	sl, r0
 8013578:	468b      	mov	fp, r1
 801357a:	f034 040f 	bics.w	r4, r4, #15
 801357e:	d073      	beq.n	8013668 <_strtod_l+0x518>
 8013580:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013584:	dd48      	ble.n	8013618 <_strtod_l+0x4c8>
 8013586:	2400      	movs	r4, #0
 8013588:	46a0      	mov	r8, r4
 801358a:	940a      	str	r4, [sp, #40]	@ 0x28
 801358c:	46a1      	mov	r9, r4
 801358e:	9a05      	ldr	r2, [sp, #20]
 8013590:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80136e8 <_strtod_l+0x598>
 8013594:	2322      	movs	r3, #34	@ 0x22
 8013596:	6013      	str	r3, [r2, #0]
 8013598:	f04f 0a00 	mov.w	sl, #0
 801359c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f43f ae0f 	beq.w	80131c2 <_strtod_l+0x72>
 80135a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80135a6:	9805      	ldr	r0, [sp, #20]
 80135a8:	f7ff f942 	bl	8012830 <_Bfree>
 80135ac:	9805      	ldr	r0, [sp, #20]
 80135ae:	4649      	mov	r1, r9
 80135b0:	f7ff f93e 	bl	8012830 <_Bfree>
 80135b4:	9805      	ldr	r0, [sp, #20]
 80135b6:	4641      	mov	r1, r8
 80135b8:	f7ff f93a 	bl	8012830 <_Bfree>
 80135bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80135be:	9805      	ldr	r0, [sp, #20]
 80135c0:	f7ff f936 	bl	8012830 <_Bfree>
 80135c4:	9805      	ldr	r0, [sp, #20]
 80135c6:	4621      	mov	r1, r4
 80135c8:	f7ff f932 	bl	8012830 <_Bfree>
 80135cc:	e5f9      	b.n	80131c2 <_strtod_l+0x72>
 80135ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80135d4:	4293      	cmp	r3, r2
 80135d6:	dbbc      	blt.n	8013552 <_strtod_l+0x402>
 80135d8:	4c41      	ldr	r4, [pc, #260]	@ (80136e0 <_strtod_l+0x590>)
 80135da:	f1c5 050f 	rsb	r5, r5, #15
 80135de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80135e2:	4652      	mov	r2, sl
 80135e4:	465b      	mov	r3, fp
 80135e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ea:	f7ed f82d 	bl	8000648 <__aeabi_dmul>
 80135ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135f0:	1b5d      	subs	r5, r3, r5
 80135f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80135f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80135fa:	e78f      	b.n	801351c <_strtod_l+0x3cc>
 80135fc:	3316      	adds	r3, #22
 80135fe:	dba8      	blt.n	8013552 <_strtod_l+0x402>
 8013600:	4b37      	ldr	r3, [pc, #220]	@ (80136e0 <_strtod_l+0x590>)
 8013602:	eba9 0808 	sub.w	r8, r9, r8
 8013606:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801360a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801360e:	4650      	mov	r0, sl
 8013610:	4659      	mov	r1, fp
 8013612:	f7ed f943 	bl	800089c <__aeabi_ddiv>
 8013616:	e783      	b.n	8013520 <_strtod_l+0x3d0>
 8013618:	4b32      	ldr	r3, [pc, #200]	@ (80136e4 <_strtod_l+0x594>)
 801361a:	9308      	str	r3, [sp, #32]
 801361c:	2300      	movs	r3, #0
 801361e:	1124      	asrs	r4, r4, #4
 8013620:	4650      	mov	r0, sl
 8013622:	4659      	mov	r1, fp
 8013624:	461e      	mov	r6, r3
 8013626:	2c01      	cmp	r4, #1
 8013628:	dc21      	bgt.n	801366e <_strtod_l+0x51e>
 801362a:	b10b      	cbz	r3, 8013630 <_strtod_l+0x4e0>
 801362c:	4682      	mov	sl, r0
 801362e:	468b      	mov	fp, r1
 8013630:	492c      	ldr	r1, [pc, #176]	@ (80136e4 <_strtod_l+0x594>)
 8013632:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013636:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801363a:	4652      	mov	r2, sl
 801363c:	465b      	mov	r3, fp
 801363e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013642:	f7ed f801 	bl	8000648 <__aeabi_dmul>
 8013646:	4b28      	ldr	r3, [pc, #160]	@ (80136e8 <_strtod_l+0x598>)
 8013648:	460a      	mov	r2, r1
 801364a:	400b      	ands	r3, r1
 801364c:	4927      	ldr	r1, [pc, #156]	@ (80136ec <_strtod_l+0x59c>)
 801364e:	428b      	cmp	r3, r1
 8013650:	4682      	mov	sl, r0
 8013652:	d898      	bhi.n	8013586 <_strtod_l+0x436>
 8013654:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013658:	428b      	cmp	r3, r1
 801365a:	bf86      	itte	hi
 801365c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80136f0 <_strtod_l+0x5a0>
 8013660:	f04f 3aff 	movhi.w	sl, #4294967295
 8013664:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013668:	2300      	movs	r3, #0
 801366a:	9308      	str	r3, [sp, #32]
 801366c:	e07a      	b.n	8013764 <_strtod_l+0x614>
 801366e:	07e2      	lsls	r2, r4, #31
 8013670:	d505      	bpl.n	801367e <_strtod_l+0x52e>
 8013672:	9b08      	ldr	r3, [sp, #32]
 8013674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013678:	f7ec ffe6 	bl	8000648 <__aeabi_dmul>
 801367c:	2301      	movs	r3, #1
 801367e:	9a08      	ldr	r2, [sp, #32]
 8013680:	3208      	adds	r2, #8
 8013682:	3601      	adds	r6, #1
 8013684:	1064      	asrs	r4, r4, #1
 8013686:	9208      	str	r2, [sp, #32]
 8013688:	e7cd      	b.n	8013626 <_strtod_l+0x4d6>
 801368a:	d0ed      	beq.n	8013668 <_strtod_l+0x518>
 801368c:	4264      	negs	r4, r4
 801368e:	f014 020f 	ands.w	r2, r4, #15
 8013692:	d00a      	beq.n	80136aa <_strtod_l+0x55a>
 8013694:	4b12      	ldr	r3, [pc, #72]	@ (80136e0 <_strtod_l+0x590>)
 8013696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801369a:	4650      	mov	r0, sl
 801369c:	4659      	mov	r1, fp
 801369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a2:	f7ed f8fb 	bl	800089c <__aeabi_ddiv>
 80136a6:	4682      	mov	sl, r0
 80136a8:	468b      	mov	fp, r1
 80136aa:	1124      	asrs	r4, r4, #4
 80136ac:	d0dc      	beq.n	8013668 <_strtod_l+0x518>
 80136ae:	2c1f      	cmp	r4, #31
 80136b0:	dd20      	ble.n	80136f4 <_strtod_l+0x5a4>
 80136b2:	2400      	movs	r4, #0
 80136b4:	46a0      	mov	r8, r4
 80136b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80136b8:	46a1      	mov	r9, r4
 80136ba:	9a05      	ldr	r2, [sp, #20]
 80136bc:	2322      	movs	r3, #34	@ 0x22
 80136be:	f04f 0a00 	mov.w	sl, #0
 80136c2:	f04f 0b00 	mov.w	fp, #0
 80136c6:	6013      	str	r3, [r2, #0]
 80136c8:	e768      	b.n	801359c <_strtod_l+0x44c>
 80136ca:	bf00      	nop
 80136cc:	08015b81 	.word	0x08015b81
 80136d0:	08015d94 	.word	0x08015d94
 80136d4:	08015b79 	.word	0x08015b79
 80136d8:	08015bb0 	.word	0x08015bb0
 80136dc:	08015f3d 	.word	0x08015f3d
 80136e0:	08015cc8 	.word	0x08015cc8
 80136e4:	08015ca0 	.word	0x08015ca0
 80136e8:	7ff00000 	.word	0x7ff00000
 80136ec:	7ca00000 	.word	0x7ca00000
 80136f0:	7fefffff 	.word	0x7fefffff
 80136f4:	f014 0310 	ands.w	r3, r4, #16
 80136f8:	bf18      	it	ne
 80136fa:	236a      	movne	r3, #106	@ 0x6a
 80136fc:	4ea9      	ldr	r6, [pc, #676]	@ (80139a4 <_strtod_l+0x854>)
 80136fe:	9308      	str	r3, [sp, #32]
 8013700:	4650      	mov	r0, sl
 8013702:	4659      	mov	r1, fp
 8013704:	2300      	movs	r3, #0
 8013706:	07e2      	lsls	r2, r4, #31
 8013708:	d504      	bpl.n	8013714 <_strtod_l+0x5c4>
 801370a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801370e:	f7ec ff9b 	bl	8000648 <__aeabi_dmul>
 8013712:	2301      	movs	r3, #1
 8013714:	1064      	asrs	r4, r4, #1
 8013716:	f106 0608 	add.w	r6, r6, #8
 801371a:	d1f4      	bne.n	8013706 <_strtod_l+0x5b6>
 801371c:	b10b      	cbz	r3, 8013722 <_strtod_l+0x5d2>
 801371e:	4682      	mov	sl, r0
 8013720:	468b      	mov	fp, r1
 8013722:	9b08      	ldr	r3, [sp, #32]
 8013724:	b1b3      	cbz	r3, 8013754 <_strtod_l+0x604>
 8013726:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801372a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801372e:	2b00      	cmp	r3, #0
 8013730:	4659      	mov	r1, fp
 8013732:	dd0f      	ble.n	8013754 <_strtod_l+0x604>
 8013734:	2b1f      	cmp	r3, #31
 8013736:	dd55      	ble.n	80137e4 <_strtod_l+0x694>
 8013738:	2b34      	cmp	r3, #52	@ 0x34
 801373a:	bfde      	ittt	le
 801373c:	f04f 33ff 	movle.w	r3, #4294967295
 8013740:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013744:	4093      	lslle	r3, r2
 8013746:	f04f 0a00 	mov.w	sl, #0
 801374a:	bfcc      	ite	gt
 801374c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013750:	ea03 0b01 	andle.w	fp, r3, r1
 8013754:	2200      	movs	r2, #0
 8013756:	2300      	movs	r3, #0
 8013758:	4650      	mov	r0, sl
 801375a:	4659      	mov	r1, fp
 801375c:	f7ed f9dc 	bl	8000b18 <__aeabi_dcmpeq>
 8013760:	2800      	cmp	r0, #0
 8013762:	d1a6      	bne.n	80136b2 <_strtod_l+0x562>
 8013764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801376a:	9805      	ldr	r0, [sp, #20]
 801376c:	462b      	mov	r3, r5
 801376e:	463a      	mov	r2, r7
 8013770:	f7ff f8c6 	bl	8012900 <__s2b>
 8013774:	900a      	str	r0, [sp, #40]	@ 0x28
 8013776:	2800      	cmp	r0, #0
 8013778:	f43f af05 	beq.w	8013586 <_strtod_l+0x436>
 801377c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801377e:	2a00      	cmp	r2, #0
 8013780:	eba9 0308 	sub.w	r3, r9, r8
 8013784:	bfa8      	it	ge
 8013786:	2300      	movge	r3, #0
 8013788:	9312      	str	r3, [sp, #72]	@ 0x48
 801378a:	2400      	movs	r4, #0
 801378c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013790:	9316      	str	r3, [sp, #88]	@ 0x58
 8013792:	46a0      	mov	r8, r4
 8013794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013796:	9805      	ldr	r0, [sp, #20]
 8013798:	6859      	ldr	r1, [r3, #4]
 801379a:	f7ff f809 	bl	80127b0 <_Balloc>
 801379e:	4681      	mov	r9, r0
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f43f aef4 	beq.w	801358e <_strtod_l+0x43e>
 80137a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137a8:	691a      	ldr	r2, [r3, #16]
 80137aa:	3202      	adds	r2, #2
 80137ac:	f103 010c 	add.w	r1, r3, #12
 80137b0:	0092      	lsls	r2, r2, #2
 80137b2:	300c      	adds	r0, #12
 80137b4:	f000 fd72 	bl	801429c <memcpy>
 80137b8:	ec4b ab10 	vmov	d0, sl, fp
 80137bc:	9805      	ldr	r0, [sp, #20]
 80137be:	aa1c      	add	r2, sp, #112	@ 0x70
 80137c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80137c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80137c6:	f7ff fbd7 	bl	8012f78 <__d2b>
 80137ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80137cc:	2800      	cmp	r0, #0
 80137ce:	f43f aede 	beq.w	801358e <_strtod_l+0x43e>
 80137d2:	9805      	ldr	r0, [sp, #20]
 80137d4:	2101      	movs	r1, #1
 80137d6:	f7ff f929 	bl	8012a2c <__i2b>
 80137da:	4680      	mov	r8, r0
 80137dc:	b948      	cbnz	r0, 80137f2 <_strtod_l+0x6a2>
 80137de:	f04f 0800 	mov.w	r8, #0
 80137e2:	e6d4      	b.n	801358e <_strtod_l+0x43e>
 80137e4:	f04f 32ff 	mov.w	r2, #4294967295
 80137e8:	fa02 f303 	lsl.w	r3, r2, r3
 80137ec:	ea03 0a0a 	and.w	sl, r3, sl
 80137f0:	e7b0      	b.n	8013754 <_strtod_l+0x604>
 80137f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80137f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80137f6:	2d00      	cmp	r5, #0
 80137f8:	bfab      	itete	ge
 80137fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80137fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80137fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013800:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013802:	bfac      	ite	ge
 8013804:	18ef      	addge	r7, r5, r3
 8013806:	1b5e      	sublt	r6, r3, r5
 8013808:	9b08      	ldr	r3, [sp, #32]
 801380a:	1aed      	subs	r5, r5, r3
 801380c:	4415      	add	r5, r2
 801380e:	4b66      	ldr	r3, [pc, #408]	@ (80139a8 <_strtod_l+0x858>)
 8013810:	3d01      	subs	r5, #1
 8013812:	429d      	cmp	r5, r3
 8013814:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013818:	da50      	bge.n	80138bc <_strtod_l+0x76c>
 801381a:	1b5b      	subs	r3, r3, r5
 801381c:	2b1f      	cmp	r3, #31
 801381e:	eba2 0203 	sub.w	r2, r2, r3
 8013822:	f04f 0101 	mov.w	r1, #1
 8013826:	dc3d      	bgt.n	80138a4 <_strtod_l+0x754>
 8013828:	fa01 f303 	lsl.w	r3, r1, r3
 801382c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801382e:	2300      	movs	r3, #0
 8013830:	9310      	str	r3, [sp, #64]	@ 0x40
 8013832:	18bd      	adds	r5, r7, r2
 8013834:	9b08      	ldr	r3, [sp, #32]
 8013836:	42af      	cmp	r7, r5
 8013838:	4416      	add	r6, r2
 801383a:	441e      	add	r6, r3
 801383c:	463b      	mov	r3, r7
 801383e:	bfa8      	it	ge
 8013840:	462b      	movge	r3, r5
 8013842:	42b3      	cmp	r3, r6
 8013844:	bfa8      	it	ge
 8013846:	4633      	movge	r3, r6
 8013848:	2b00      	cmp	r3, #0
 801384a:	bfc2      	ittt	gt
 801384c:	1aed      	subgt	r5, r5, r3
 801384e:	1af6      	subgt	r6, r6, r3
 8013850:	1aff      	subgt	r7, r7, r3
 8013852:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013854:	2b00      	cmp	r3, #0
 8013856:	dd16      	ble.n	8013886 <_strtod_l+0x736>
 8013858:	4641      	mov	r1, r8
 801385a:	9805      	ldr	r0, [sp, #20]
 801385c:	461a      	mov	r2, r3
 801385e:	f7ff f9a5 	bl	8012bac <__pow5mult>
 8013862:	4680      	mov	r8, r0
 8013864:	2800      	cmp	r0, #0
 8013866:	d0ba      	beq.n	80137de <_strtod_l+0x68e>
 8013868:	4601      	mov	r1, r0
 801386a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801386c:	9805      	ldr	r0, [sp, #20]
 801386e:	f7ff f8f3 	bl	8012a58 <__multiply>
 8013872:	900e      	str	r0, [sp, #56]	@ 0x38
 8013874:	2800      	cmp	r0, #0
 8013876:	f43f ae8a 	beq.w	801358e <_strtod_l+0x43e>
 801387a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801387c:	9805      	ldr	r0, [sp, #20]
 801387e:	f7fe ffd7 	bl	8012830 <_Bfree>
 8013882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013884:	931a      	str	r3, [sp, #104]	@ 0x68
 8013886:	2d00      	cmp	r5, #0
 8013888:	dc1d      	bgt.n	80138c6 <_strtod_l+0x776>
 801388a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801388c:	2b00      	cmp	r3, #0
 801388e:	dd23      	ble.n	80138d8 <_strtod_l+0x788>
 8013890:	4649      	mov	r1, r9
 8013892:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013894:	9805      	ldr	r0, [sp, #20]
 8013896:	f7ff f989 	bl	8012bac <__pow5mult>
 801389a:	4681      	mov	r9, r0
 801389c:	b9e0      	cbnz	r0, 80138d8 <_strtod_l+0x788>
 801389e:	f04f 0900 	mov.w	r9, #0
 80138a2:	e674      	b.n	801358e <_strtod_l+0x43e>
 80138a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80138a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80138ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80138b0:	35e2      	adds	r5, #226	@ 0xe2
 80138b2:	fa01 f305 	lsl.w	r3, r1, r5
 80138b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80138b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80138ba:	e7ba      	b.n	8013832 <_strtod_l+0x6e2>
 80138bc:	2300      	movs	r3, #0
 80138be:	9310      	str	r3, [sp, #64]	@ 0x40
 80138c0:	2301      	movs	r3, #1
 80138c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80138c4:	e7b5      	b.n	8013832 <_strtod_l+0x6e2>
 80138c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80138c8:	9805      	ldr	r0, [sp, #20]
 80138ca:	462a      	mov	r2, r5
 80138cc:	f7ff f9c8 	bl	8012c60 <__lshift>
 80138d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d1d9      	bne.n	801388a <_strtod_l+0x73a>
 80138d6:	e65a      	b.n	801358e <_strtod_l+0x43e>
 80138d8:	2e00      	cmp	r6, #0
 80138da:	dd07      	ble.n	80138ec <_strtod_l+0x79c>
 80138dc:	4649      	mov	r1, r9
 80138de:	9805      	ldr	r0, [sp, #20]
 80138e0:	4632      	mov	r2, r6
 80138e2:	f7ff f9bd 	bl	8012c60 <__lshift>
 80138e6:	4681      	mov	r9, r0
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d0d8      	beq.n	801389e <_strtod_l+0x74e>
 80138ec:	2f00      	cmp	r7, #0
 80138ee:	dd08      	ble.n	8013902 <_strtod_l+0x7b2>
 80138f0:	4641      	mov	r1, r8
 80138f2:	9805      	ldr	r0, [sp, #20]
 80138f4:	463a      	mov	r2, r7
 80138f6:	f7ff f9b3 	bl	8012c60 <__lshift>
 80138fa:	4680      	mov	r8, r0
 80138fc:	2800      	cmp	r0, #0
 80138fe:	f43f ae46 	beq.w	801358e <_strtod_l+0x43e>
 8013902:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013904:	9805      	ldr	r0, [sp, #20]
 8013906:	464a      	mov	r2, r9
 8013908:	f7ff fa32 	bl	8012d70 <__mdiff>
 801390c:	4604      	mov	r4, r0
 801390e:	2800      	cmp	r0, #0
 8013910:	f43f ae3d 	beq.w	801358e <_strtod_l+0x43e>
 8013914:	68c3      	ldr	r3, [r0, #12]
 8013916:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013918:	2300      	movs	r3, #0
 801391a:	60c3      	str	r3, [r0, #12]
 801391c:	4641      	mov	r1, r8
 801391e:	f7ff fa0b 	bl	8012d38 <__mcmp>
 8013922:	2800      	cmp	r0, #0
 8013924:	da46      	bge.n	80139b4 <_strtod_l+0x864>
 8013926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013928:	ea53 030a 	orrs.w	r3, r3, sl
 801392c:	d16c      	bne.n	8013a08 <_strtod_l+0x8b8>
 801392e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013932:	2b00      	cmp	r3, #0
 8013934:	d168      	bne.n	8013a08 <_strtod_l+0x8b8>
 8013936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801393a:	0d1b      	lsrs	r3, r3, #20
 801393c:	051b      	lsls	r3, r3, #20
 801393e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013942:	d961      	bls.n	8013a08 <_strtod_l+0x8b8>
 8013944:	6963      	ldr	r3, [r4, #20]
 8013946:	b913      	cbnz	r3, 801394e <_strtod_l+0x7fe>
 8013948:	6923      	ldr	r3, [r4, #16]
 801394a:	2b01      	cmp	r3, #1
 801394c:	dd5c      	ble.n	8013a08 <_strtod_l+0x8b8>
 801394e:	4621      	mov	r1, r4
 8013950:	2201      	movs	r2, #1
 8013952:	9805      	ldr	r0, [sp, #20]
 8013954:	f7ff f984 	bl	8012c60 <__lshift>
 8013958:	4641      	mov	r1, r8
 801395a:	4604      	mov	r4, r0
 801395c:	f7ff f9ec 	bl	8012d38 <__mcmp>
 8013960:	2800      	cmp	r0, #0
 8013962:	dd51      	ble.n	8013a08 <_strtod_l+0x8b8>
 8013964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013968:	9a08      	ldr	r2, [sp, #32]
 801396a:	0d1b      	lsrs	r3, r3, #20
 801396c:	051b      	lsls	r3, r3, #20
 801396e:	2a00      	cmp	r2, #0
 8013970:	d06b      	beq.n	8013a4a <_strtod_l+0x8fa>
 8013972:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013976:	d868      	bhi.n	8013a4a <_strtod_l+0x8fa>
 8013978:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801397c:	f67f ae9d 	bls.w	80136ba <_strtod_l+0x56a>
 8013980:	4b0a      	ldr	r3, [pc, #40]	@ (80139ac <_strtod_l+0x85c>)
 8013982:	4650      	mov	r0, sl
 8013984:	4659      	mov	r1, fp
 8013986:	2200      	movs	r2, #0
 8013988:	f7ec fe5e 	bl	8000648 <__aeabi_dmul>
 801398c:	4b08      	ldr	r3, [pc, #32]	@ (80139b0 <_strtod_l+0x860>)
 801398e:	400b      	ands	r3, r1
 8013990:	4682      	mov	sl, r0
 8013992:	468b      	mov	fp, r1
 8013994:	2b00      	cmp	r3, #0
 8013996:	f47f ae05 	bne.w	80135a4 <_strtod_l+0x454>
 801399a:	9a05      	ldr	r2, [sp, #20]
 801399c:	2322      	movs	r3, #34	@ 0x22
 801399e:	6013      	str	r3, [r2, #0]
 80139a0:	e600      	b.n	80135a4 <_strtod_l+0x454>
 80139a2:	bf00      	nop
 80139a4:	08015dc0 	.word	0x08015dc0
 80139a8:	fffffc02 	.word	0xfffffc02
 80139ac:	39500000 	.word	0x39500000
 80139b0:	7ff00000 	.word	0x7ff00000
 80139b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80139b8:	d165      	bne.n	8013a86 <_strtod_l+0x936>
 80139ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80139bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80139c0:	b35a      	cbz	r2, 8013a1a <_strtod_l+0x8ca>
 80139c2:	4a9f      	ldr	r2, [pc, #636]	@ (8013c40 <_strtod_l+0xaf0>)
 80139c4:	4293      	cmp	r3, r2
 80139c6:	d12b      	bne.n	8013a20 <_strtod_l+0x8d0>
 80139c8:	9b08      	ldr	r3, [sp, #32]
 80139ca:	4651      	mov	r1, sl
 80139cc:	b303      	cbz	r3, 8013a10 <_strtod_l+0x8c0>
 80139ce:	4b9d      	ldr	r3, [pc, #628]	@ (8013c44 <_strtod_l+0xaf4>)
 80139d0:	465a      	mov	r2, fp
 80139d2:	4013      	ands	r3, r2
 80139d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80139d8:	f04f 32ff 	mov.w	r2, #4294967295
 80139dc:	d81b      	bhi.n	8013a16 <_strtod_l+0x8c6>
 80139de:	0d1b      	lsrs	r3, r3, #20
 80139e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80139e4:	fa02 f303 	lsl.w	r3, r2, r3
 80139e8:	4299      	cmp	r1, r3
 80139ea:	d119      	bne.n	8013a20 <_strtod_l+0x8d0>
 80139ec:	4b96      	ldr	r3, [pc, #600]	@ (8013c48 <_strtod_l+0xaf8>)
 80139ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d102      	bne.n	80139fa <_strtod_l+0x8aa>
 80139f4:	3101      	adds	r1, #1
 80139f6:	f43f adca 	beq.w	801358e <_strtod_l+0x43e>
 80139fa:	4b92      	ldr	r3, [pc, #584]	@ (8013c44 <_strtod_l+0xaf4>)
 80139fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139fe:	401a      	ands	r2, r3
 8013a00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013a04:	f04f 0a00 	mov.w	sl, #0
 8013a08:	9b08      	ldr	r3, [sp, #32]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1b8      	bne.n	8013980 <_strtod_l+0x830>
 8013a0e:	e5c9      	b.n	80135a4 <_strtod_l+0x454>
 8013a10:	f04f 33ff 	mov.w	r3, #4294967295
 8013a14:	e7e8      	b.n	80139e8 <_strtod_l+0x898>
 8013a16:	4613      	mov	r3, r2
 8013a18:	e7e6      	b.n	80139e8 <_strtod_l+0x898>
 8013a1a:	ea53 030a 	orrs.w	r3, r3, sl
 8013a1e:	d0a1      	beq.n	8013964 <_strtod_l+0x814>
 8013a20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a22:	b1db      	cbz	r3, 8013a5c <_strtod_l+0x90c>
 8013a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a26:	4213      	tst	r3, r2
 8013a28:	d0ee      	beq.n	8013a08 <_strtod_l+0x8b8>
 8013a2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a2c:	9a08      	ldr	r2, [sp, #32]
 8013a2e:	4650      	mov	r0, sl
 8013a30:	4659      	mov	r1, fp
 8013a32:	b1bb      	cbz	r3, 8013a64 <_strtod_l+0x914>
 8013a34:	f7ff fb6e 	bl	8013114 <sulp>
 8013a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a3c:	ec53 2b10 	vmov	r2, r3, d0
 8013a40:	f7ec fc4c 	bl	80002dc <__adddf3>
 8013a44:	4682      	mov	sl, r0
 8013a46:	468b      	mov	fp, r1
 8013a48:	e7de      	b.n	8013a08 <_strtod_l+0x8b8>
 8013a4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013a4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013a52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013a56:	f04f 3aff 	mov.w	sl, #4294967295
 8013a5a:	e7d5      	b.n	8013a08 <_strtod_l+0x8b8>
 8013a5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a5e:	ea13 0f0a 	tst.w	r3, sl
 8013a62:	e7e1      	b.n	8013a28 <_strtod_l+0x8d8>
 8013a64:	f7ff fb56 	bl	8013114 <sulp>
 8013a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a6c:	ec53 2b10 	vmov	r2, r3, d0
 8013a70:	f7ec fc32 	bl	80002d8 <__aeabi_dsub>
 8013a74:	2200      	movs	r2, #0
 8013a76:	2300      	movs	r3, #0
 8013a78:	4682      	mov	sl, r0
 8013a7a:	468b      	mov	fp, r1
 8013a7c:	f7ed f84c 	bl	8000b18 <__aeabi_dcmpeq>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d0c1      	beq.n	8013a08 <_strtod_l+0x8b8>
 8013a84:	e619      	b.n	80136ba <_strtod_l+0x56a>
 8013a86:	4641      	mov	r1, r8
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f7ff facd 	bl	8013028 <__ratio>
 8013a8e:	ec57 6b10 	vmov	r6, r7, d0
 8013a92:	2200      	movs	r2, #0
 8013a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a98:	4630      	mov	r0, r6
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	f7ed f850 	bl	8000b40 <__aeabi_dcmple>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d06f      	beq.n	8013b84 <_strtod_l+0xa34>
 8013aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d17a      	bne.n	8013ba0 <_strtod_l+0xa50>
 8013aaa:	f1ba 0f00 	cmp.w	sl, #0
 8013aae:	d158      	bne.n	8013b62 <_strtod_l+0xa12>
 8013ab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d15a      	bne.n	8013b70 <_strtod_l+0xa20>
 8013aba:	4b64      	ldr	r3, [pc, #400]	@ (8013c4c <_strtod_l+0xafc>)
 8013abc:	2200      	movs	r2, #0
 8013abe:	4630      	mov	r0, r6
 8013ac0:	4639      	mov	r1, r7
 8013ac2:	f7ed f833 	bl	8000b2c <__aeabi_dcmplt>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d159      	bne.n	8013b7e <_strtod_l+0xa2e>
 8013aca:	4630      	mov	r0, r6
 8013acc:	4639      	mov	r1, r7
 8013ace:	4b60      	ldr	r3, [pc, #384]	@ (8013c50 <_strtod_l+0xb00>)
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	f7ec fdb9 	bl	8000648 <__aeabi_dmul>
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	460f      	mov	r7, r1
 8013ada:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013ade:	9606      	str	r6, [sp, #24]
 8013ae0:	9307      	str	r3, [sp, #28]
 8013ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ae6:	4d57      	ldr	r5, [pc, #348]	@ (8013c44 <_strtod_l+0xaf4>)
 8013ae8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013aee:	401d      	ands	r5, r3
 8013af0:	4b58      	ldr	r3, [pc, #352]	@ (8013c54 <_strtod_l+0xb04>)
 8013af2:	429d      	cmp	r5, r3
 8013af4:	f040 80b2 	bne.w	8013c5c <_strtod_l+0xb0c>
 8013af8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013afa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013afe:	ec4b ab10 	vmov	d0, sl, fp
 8013b02:	f7ff f9c9 	bl	8012e98 <__ulp>
 8013b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b0a:	ec51 0b10 	vmov	r0, r1, d0
 8013b0e:	f7ec fd9b 	bl	8000648 <__aeabi_dmul>
 8013b12:	4652      	mov	r2, sl
 8013b14:	465b      	mov	r3, fp
 8013b16:	f7ec fbe1 	bl	80002dc <__adddf3>
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4949      	ldr	r1, [pc, #292]	@ (8013c44 <_strtod_l+0xaf4>)
 8013b1e:	4a4e      	ldr	r2, [pc, #312]	@ (8013c58 <_strtod_l+0xb08>)
 8013b20:	4019      	ands	r1, r3
 8013b22:	4291      	cmp	r1, r2
 8013b24:	4682      	mov	sl, r0
 8013b26:	d942      	bls.n	8013bae <_strtod_l+0xa5e>
 8013b28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013b2a:	4b47      	ldr	r3, [pc, #284]	@ (8013c48 <_strtod_l+0xaf8>)
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d103      	bne.n	8013b38 <_strtod_l+0x9e8>
 8013b30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b32:	3301      	adds	r3, #1
 8013b34:	f43f ad2b 	beq.w	801358e <_strtod_l+0x43e>
 8013b38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013c48 <_strtod_l+0xaf8>
 8013b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8013b40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b42:	9805      	ldr	r0, [sp, #20]
 8013b44:	f7fe fe74 	bl	8012830 <_Bfree>
 8013b48:	9805      	ldr	r0, [sp, #20]
 8013b4a:	4649      	mov	r1, r9
 8013b4c:	f7fe fe70 	bl	8012830 <_Bfree>
 8013b50:	9805      	ldr	r0, [sp, #20]
 8013b52:	4641      	mov	r1, r8
 8013b54:	f7fe fe6c 	bl	8012830 <_Bfree>
 8013b58:	9805      	ldr	r0, [sp, #20]
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	f7fe fe68 	bl	8012830 <_Bfree>
 8013b60:	e618      	b.n	8013794 <_strtod_l+0x644>
 8013b62:	f1ba 0f01 	cmp.w	sl, #1
 8013b66:	d103      	bne.n	8013b70 <_strtod_l+0xa20>
 8013b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	f43f ada5 	beq.w	80136ba <_strtod_l+0x56a>
 8013b70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013c20 <_strtod_l+0xad0>
 8013b74:	4f35      	ldr	r7, [pc, #212]	@ (8013c4c <_strtod_l+0xafc>)
 8013b76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b7a:	2600      	movs	r6, #0
 8013b7c:	e7b1      	b.n	8013ae2 <_strtod_l+0x992>
 8013b7e:	4f34      	ldr	r7, [pc, #208]	@ (8013c50 <_strtod_l+0xb00>)
 8013b80:	2600      	movs	r6, #0
 8013b82:	e7aa      	b.n	8013ada <_strtod_l+0x98a>
 8013b84:	4b32      	ldr	r3, [pc, #200]	@ (8013c50 <_strtod_l+0xb00>)
 8013b86:	4630      	mov	r0, r6
 8013b88:	4639      	mov	r1, r7
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f7ec fd5c 	bl	8000648 <__aeabi_dmul>
 8013b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b92:	4606      	mov	r6, r0
 8013b94:	460f      	mov	r7, r1
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d09f      	beq.n	8013ada <_strtod_l+0x98a>
 8013b9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013b9e:	e7a0      	b.n	8013ae2 <_strtod_l+0x992>
 8013ba0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013c28 <_strtod_l+0xad8>
 8013ba4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ba8:	ec57 6b17 	vmov	r6, r7, d7
 8013bac:	e799      	b.n	8013ae2 <_strtod_l+0x992>
 8013bae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013bb2:	9b08      	ldr	r3, [sp, #32]
 8013bb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d1c1      	bne.n	8013b40 <_strtod_l+0x9f0>
 8013bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013bc0:	0d1b      	lsrs	r3, r3, #20
 8013bc2:	051b      	lsls	r3, r3, #20
 8013bc4:	429d      	cmp	r5, r3
 8013bc6:	d1bb      	bne.n	8013b40 <_strtod_l+0x9f0>
 8013bc8:	4630      	mov	r0, r6
 8013bca:	4639      	mov	r1, r7
 8013bcc:	f7ed f89c 	bl	8000d08 <__aeabi_d2lz>
 8013bd0:	f7ec fd0c 	bl	80005ec <__aeabi_l2d>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	4630      	mov	r0, r6
 8013bda:	4639      	mov	r1, r7
 8013bdc:	f7ec fb7c 	bl	80002d8 <__aeabi_dsub>
 8013be0:	460b      	mov	r3, r1
 8013be2:	4602      	mov	r2, r0
 8013be4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013be8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bee:	ea46 060a 	orr.w	r6, r6, sl
 8013bf2:	431e      	orrs	r6, r3
 8013bf4:	d06f      	beq.n	8013cd6 <_strtod_l+0xb86>
 8013bf6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c30 <_strtod_l+0xae0>)
 8013bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfc:	f7ec ff96 	bl	8000b2c <__aeabi_dcmplt>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	f47f accf 	bne.w	80135a4 <_strtod_l+0x454>
 8013c06:	a30c      	add	r3, pc, #48	@ (adr r3, 8013c38 <_strtod_l+0xae8>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c10:	f7ec ffaa 	bl	8000b68 <__aeabi_dcmpgt>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d093      	beq.n	8013b40 <_strtod_l+0x9f0>
 8013c18:	e4c4      	b.n	80135a4 <_strtod_l+0x454>
 8013c1a:	bf00      	nop
 8013c1c:	f3af 8000 	nop.w
 8013c20:	00000000 	.word	0x00000000
 8013c24:	bff00000 	.word	0xbff00000
 8013c28:	00000000 	.word	0x00000000
 8013c2c:	3ff00000 	.word	0x3ff00000
 8013c30:	94a03595 	.word	0x94a03595
 8013c34:	3fdfffff 	.word	0x3fdfffff
 8013c38:	35afe535 	.word	0x35afe535
 8013c3c:	3fe00000 	.word	0x3fe00000
 8013c40:	000fffff 	.word	0x000fffff
 8013c44:	7ff00000 	.word	0x7ff00000
 8013c48:	7fefffff 	.word	0x7fefffff
 8013c4c:	3ff00000 	.word	0x3ff00000
 8013c50:	3fe00000 	.word	0x3fe00000
 8013c54:	7fe00000 	.word	0x7fe00000
 8013c58:	7c9fffff 	.word	0x7c9fffff
 8013c5c:	9b08      	ldr	r3, [sp, #32]
 8013c5e:	b323      	cbz	r3, 8013caa <_strtod_l+0xb5a>
 8013c60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013c64:	d821      	bhi.n	8013caa <_strtod_l+0xb5a>
 8013c66:	a328      	add	r3, pc, #160	@ (adr r3, 8013d08 <_strtod_l+0xbb8>)
 8013c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	4639      	mov	r1, r7
 8013c70:	f7ec ff66 	bl	8000b40 <__aeabi_dcmple>
 8013c74:	b1a0      	cbz	r0, 8013ca0 <_strtod_l+0xb50>
 8013c76:	4639      	mov	r1, r7
 8013c78:	4630      	mov	r0, r6
 8013c7a:	f7ec ffbd 	bl	8000bf8 <__aeabi_d2uiz>
 8013c7e:	2801      	cmp	r0, #1
 8013c80:	bf38      	it	cc
 8013c82:	2001      	movcc	r0, #1
 8013c84:	f7ec fc66 	bl	8000554 <__aeabi_ui2d>
 8013c88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	460f      	mov	r7, r1
 8013c8e:	b9fb      	cbnz	r3, 8013cd0 <_strtod_l+0xb80>
 8013c90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c94:	9014      	str	r0, [sp, #80]	@ 0x50
 8013c96:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013c9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013ca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ca2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013ca6:	1b5b      	subs	r3, r3, r5
 8013ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013caa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013cae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013cb2:	f7ff f8f1 	bl	8012e98 <__ulp>
 8013cb6:	4650      	mov	r0, sl
 8013cb8:	ec53 2b10 	vmov	r2, r3, d0
 8013cbc:	4659      	mov	r1, fp
 8013cbe:	f7ec fcc3 	bl	8000648 <__aeabi_dmul>
 8013cc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013cc6:	f7ec fb09 	bl	80002dc <__adddf3>
 8013cca:	4682      	mov	sl, r0
 8013ccc:	468b      	mov	fp, r1
 8013cce:	e770      	b.n	8013bb2 <_strtod_l+0xa62>
 8013cd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013cd4:	e7e0      	b.n	8013c98 <_strtod_l+0xb48>
 8013cd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013d10 <_strtod_l+0xbc0>)
 8013cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cdc:	f7ec ff26 	bl	8000b2c <__aeabi_dcmplt>
 8013ce0:	e798      	b.n	8013c14 <_strtod_l+0xac4>
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ce6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013cea:	6013      	str	r3, [r2, #0]
 8013cec:	f7ff ba6d 	b.w	80131ca <_strtod_l+0x7a>
 8013cf0:	2a65      	cmp	r2, #101	@ 0x65
 8013cf2:	f43f ab66 	beq.w	80133c2 <_strtod_l+0x272>
 8013cf6:	2a45      	cmp	r2, #69	@ 0x45
 8013cf8:	f43f ab63 	beq.w	80133c2 <_strtod_l+0x272>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	f7ff bb9e 	b.w	801343e <_strtod_l+0x2ee>
 8013d02:	bf00      	nop
 8013d04:	f3af 8000 	nop.w
 8013d08:	ffc00000 	.word	0xffc00000
 8013d0c:	41dfffff 	.word	0x41dfffff
 8013d10:	94a03595 	.word	0x94a03595
 8013d14:	3fcfffff 	.word	0x3fcfffff

08013d18 <_strtod_r>:
 8013d18:	4b01      	ldr	r3, [pc, #4]	@ (8013d20 <_strtod_r+0x8>)
 8013d1a:	f7ff ba19 	b.w	8013150 <_strtod_l>
 8013d1e:	bf00      	nop
 8013d20:	200001e0 	.word	0x200001e0

08013d24 <_strtol_l.constprop.0>:
 8013d24:	2b24      	cmp	r3, #36	@ 0x24
 8013d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d2a:	4686      	mov	lr, r0
 8013d2c:	4690      	mov	r8, r2
 8013d2e:	d801      	bhi.n	8013d34 <_strtol_l.constprop.0+0x10>
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d106      	bne.n	8013d42 <_strtol_l.constprop.0+0x1e>
 8013d34:	f7fd fdba 	bl	80118ac <__errno>
 8013d38:	2316      	movs	r3, #22
 8013d3a:	6003      	str	r3, [r0, #0]
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d42:	4834      	ldr	r0, [pc, #208]	@ (8013e14 <_strtol_l.constprop.0+0xf0>)
 8013d44:	460d      	mov	r5, r1
 8013d46:	462a      	mov	r2, r5
 8013d48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d4c:	5d06      	ldrb	r6, [r0, r4]
 8013d4e:	f016 0608 	ands.w	r6, r6, #8
 8013d52:	d1f8      	bne.n	8013d46 <_strtol_l.constprop.0+0x22>
 8013d54:	2c2d      	cmp	r4, #45	@ 0x2d
 8013d56:	d12d      	bne.n	8013db4 <_strtol_l.constprop.0+0x90>
 8013d58:	782c      	ldrb	r4, [r5, #0]
 8013d5a:	2601      	movs	r6, #1
 8013d5c:	1c95      	adds	r5, r2, #2
 8013d5e:	f033 0210 	bics.w	r2, r3, #16
 8013d62:	d109      	bne.n	8013d78 <_strtol_l.constprop.0+0x54>
 8013d64:	2c30      	cmp	r4, #48	@ 0x30
 8013d66:	d12a      	bne.n	8013dbe <_strtol_l.constprop.0+0x9a>
 8013d68:	782a      	ldrb	r2, [r5, #0]
 8013d6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013d6e:	2a58      	cmp	r2, #88	@ 0x58
 8013d70:	d125      	bne.n	8013dbe <_strtol_l.constprop.0+0x9a>
 8013d72:	786c      	ldrb	r4, [r5, #1]
 8013d74:	2310      	movs	r3, #16
 8013d76:	3502      	adds	r5, #2
 8013d78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013d7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d80:	2200      	movs	r2, #0
 8013d82:	fbbc f9f3 	udiv	r9, ip, r3
 8013d86:	4610      	mov	r0, r2
 8013d88:	fb03 ca19 	mls	sl, r3, r9, ip
 8013d8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013d90:	2f09      	cmp	r7, #9
 8013d92:	d81b      	bhi.n	8013dcc <_strtol_l.constprop.0+0xa8>
 8013d94:	463c      	mov	r4, r7
 8013d96:	42a3      	cmp	r3, r4
 8013d98:	dd27      	ble.n	8013dea <_strtol_l.constprop.0+0xc6>
 8013d9a:	1c57      	adds	r7, r2, #1
 8013d9c:	d007      	beq.n	8013dae <_strtol_l.constprop.0+0x8a>
 8013d9e:	4581      	cmp	r9, r0
 8013da0:	d320      	bcc.n	8013de4 <_strtol_l.constprop.0+0xc0>
 8013da2:	d101      	bne.n	8013da8 <_strtol_l.constprop.0+0x84>
 8013da4:	45a2      	cmp	sl, r4
 8013da6:	db1d      	blt.n	8013de4 <_strtol_l.constprop.0+0xc0>
 8013da8:	fb00 4003 	mla	r0, r0, r3, r4
 8013dac:	2201      	movs	r2, #1
 8013dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013db2:	e7eb      	b.n	8013d8c <_strtol_l.constprop.0+0x68>
 8013db4:	2c2b      	cmp	r4, #43	@ 0x2b
 8013db6:	bf04      	itt	eq
 8013db8:	782c      	ldrbeq	r4, [r5, #0]
 8013dba:	1c95      	addeq	r5, r2, #2
 8013dbc:	e7cf      	b.n	8013d5e <_strtol_l.constprop.0+0x3a>
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d1da      	bne.n	8013d78 <_strtol_l.constprop.0+0x54>
 8013dc2:	2c30      	cmp	r4, #48	@ 0x30
 8013dc4:	bf0c      	ite	eq
 8013dc6:	2308      	moveq	r3, #8
 8013dc8:	230a      	movne	r3, #10
 8013dca:	e7d5      	b.n	8013d78 <_strtol_l.constprop.0+0x54>
 8013dcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013dd0:	2f19      	cmp	r7, #25
 8013dd2:	d801      	bhi.n	8013dd8 <_strtol_l.constprop.0+0xb4>
 8013dd4:	3c37      	subs	r4, #55	@ 0x37
 8013dd6:	e7de      	b.n	8013d96 <_strtol_l.constprop.0+0x72>
 8013dd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013ddc:	2f19      	cmp	r7, #25
 8013dde:	d804      	bhi.n	8013dea <_strtol_l.constprop.0+0xc6>
 8013de0:	3c57      	subs	r4, #87	@ 0x57
 8013de2:	e7d8      	b.n	8013d96 <_strtol_l.constprop.0+0x72>
 8013de4:	f04f 32ff 	mov.w	r2, #4294967295
 8013de8:	e7e1      	b.n	8013dae <_strtol_l.constprop.0+0x8a>
 8013dea:	1c53      	adds	r3, r2, #1
 8013dec:	d108      	bne.n	8013e00 <_strtol_l.constprop.0+0xdc>
 8013dee:	2322      	movs	r3, #34	@ 0x22
 8013df0:	f8ce 3000 	str.w	r3, [lr]
 8013df4:	4660      	mov	r0, ip
 8013df6:	f1b8 0f00 	cmp.w	r8, #0
 8013dfa:	d0a0      	beq.n	8013d3e <_strtol_l.constprop.0+0x1a>
 8013dfc:	1e69      	subs	r1, r5, #1
 8013dfe:	e006      	b.n	8013e0e <_strtol_l.constprop.0+0xea>
 8013e00:	b106      	cbz	r6, 8013e04 <_strtol_l.constprop.0+0xe0>
 8013e02:	4240      	negs	r0, r0
 8013e04:	f1b8 0f00 	cmp.w	r8, #0
 8013e08:	d099      	beq.n	8013d3e <_strtol_l.constprop.0+0x1a>
 8013e0a:	2a00      	cmp	r2, #0
 8013e0c:	d1f6      	bne.n	8013dfc <_strtol_l.constprop.0+0xd8>
 8013e0e:	f8c8 1000 	str.w	r1, [r8]
 8013e12:	e794      	b.n	8013d3e <_strtol_l.constprop.0+0x1a>
 8013e14:	08015de9 	.word	0x08015de9

08013e18 <_strtol_r>:
 8013e18:	f7ff bf84 	b.w	8013d24 <_strtol_l.constprop.0>

08013e1c <__ssputs_r>:
 8013e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e20:	688e      	ldr	r6, [r1, #8]
 8013e22:	461f      	mov	r7, r3
 8013e24:	42be      	cmp	r6, r7
 8013e26:	680b      	ldr	r3, [r1, #0]
 8013e28:	4682      	mov	sl, r0
 8013e2a:	460c      	mov	r4, r1
 8013e2c:	4690      	mov	r8, r2
 8013e2e:	d82d      	bhi.n	8013e8c <__ssputs_r+0x70>
 8013e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e38:	d026      	beq.n	8013e88 <__ssputs_r+0x6c>
 8013e3a:	6965      	ldr	r5, [r4, #20]
 8013e3c:	6909      	ldr	r1, [r1, #16]
 8013e3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e42:	eba3 0901 	sub.w	r9, r3, r1
 8013e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e4a:	1c7b      	adds	r3, r7, #1
 8013e4c:	444b      	add	r3, r9
 8013e4e:	106d      	asrs	r5, r5, #1
 8013e50:	429d      	cmp	r5, r3
 8013e52:	bf38      	it	cc
 8013e54:	461d      	movcc	r5, r3
 8013e56:	0553      	lsls	r3, r2, #21
 8013e58:	d527      	bpl.n	8013eaa <__ssputs_r+0x8e>
 8013e5a:	4629      	mov	r1, r5
 8013e5c:	f7fe fc1c 	bl	8012698 <_malloc_r>
 8013e60:	4606      	mov	r6, r0
 8013e62:	b360      	cbz	r0, 8013ebe <__ssputs_r+0xa2>
 8013e64:	6921      	ldr	r1, [r4, #16]
 8013e66:	464a      	mov	r2, r9
 8013e68:	f000 fa18 	bl	801429c <memcpy>
 8013e6c:	89a3      	ldrh	r3, [r4, #12]
 8013e6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e76:	81a3      	strh	r3, [r4, #12]
 8013e78:	6126      	str	r6, [r4, #16]
 8013e7a:	6165      	str	r5, [r4, #20]
 8013e7c:	444e      	add	r6, r9
 8013e7e:	eba5 0509 	sub.w	r5, r5, r9
 8013e82:	6026      	str	r6, [r4, #0]
 8013e84:	60a5      	str	r5, [r4, #8]
 8013e86:	463e      	mov	r6, r7
 8013e88:	42be      	cmp	r6, r7
 8013e8a:	d900      	bls.n	8013e8e <__ssputs_r+0x72>
 8013e8c:	463e      	mov	r6, r7
 8013e8e:	6820      	ldr	r0, [r4, #0]
 8013e90:	4632      	mov	r2, r6
 8013e92:	4641      	mov	r1, r8
 8013e94:	f000 f9c6 	bl	8014224 <memmove>
 8013e98:	68a3      	ldr	r3, [r4, #8]
 8013e9a:	1b9b      	subs	r3, r3, r6
 8013e9c:	60a3      	str	r3, [r4, #8]
 8013e9e:	6823      	ldr	r3, [r4, #0]
 8013ea0:	4433      	add	r3, r6
 8013ea2:	6023      	str	r3, [r4, #0]
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eaa:	462a      	mov	r2, r5
 8013eac:	f000 fd89 	bl	80149c2 <_realloc_r>
 8013eb0:	4606      	mov	r6, r0
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d1e0      	bne.n	8013e78 <__ssputs_r+0x5c>
 8013eb6:	6921      	ldr	r1, [r4, #16]
 8013eb8:	4650      	mov	r0, sl
 8013eba:	f7fe fb79 	bl	80125b0 <_free_r>
 8013ebe:	230c      	movs	r3, #12
 8013ec0:	f8ca 3000 	str.w	r3, [sl]
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eca:	81a3      	strh	r3, [r4, #12]
 8013ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed0:	e7e9      	b.n	8013ea6 <__ssputs_r+0x8a>
	...

08013ed4 <_svfiprintf_r>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	4698      	mov	r8, r3
 8013eda:	898b      	ldrh	r3, [r1, #12]
 8013edc:	061b      	lsls	r3, r3, #24
 8013ede:	b09d      	sub	sp, #116	@ 0x74
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	460d      	mov	r5, r1
 8013ee4:	4614      	mov	r4, r2
 8013ee6:	d510      	bpl.n	8013f0a <_svfiprintf_r+0x36>
 8013ee8:	690b      	ldr	r3, [r1, #16]
 8013eea:	b973      	cbnz	r3, 8013f0a <_svfiprintf_r+0x36>
 8013eec:	2140      	movs	r1, #64	@ 0x40
 8013eee:	f7fe fbd3 	bl	8012698 <_malloc_r>
 8013ef2:	6028      	str	r0, [r5, #0]
 8013ef4:	6128      	str	r0, [r5, #16]
 8013ef6:	b930      	cbnz	r0, 8013f06 <_svfiprintf_r+0x32>
 8013ef8:	230c      	movs	r3, #12
 8013efa:	603b      	str	r3, [r7, #0]
 8013efc:	f04f 30ff 	mov.w	r0, #4294967295
 8013f00:	b01d      	add	sp, #116	@ 0x74
 8013f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f06:	2340      	movs	r3, #64	@ 0x40
 8013f08:	616b      	str	r3, [r5, #20]
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f0e:	2320      	movs	r3, #32
 8013f10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f18:	2330      	movs	r3, #48	@ 0x30
 8013f1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80140b8 <_svfiprintf_r+0x1e4>
 8013f1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f22:	f04f 0901 	mov.w	r9, #1
 8013f26:	4623      	mov	r3, r4
 8013f28:	469a      	mov	sl, r3
 8013f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f2e:	b10a      	cbz	r2, 8013f34 <_svfiprintf_r+0x60>
 8013f30:	2a25      	cmp	r2, #37	@ 0x25
 8013f32:	d1f9      	bne.n	8013f28 <_svfiprintf_r+0x54>
 8013f34:	ebba 0b04 	subs.w	fp, sl, r4
 8013f38:	d00b      	beq.n	8013f52 <_svfiprintf_r+0x7e>
 8013f3a:	465b      	mov	r3, fp
 8013f3c:	4622      	mov	r2, r4
 8013f3e:	4629      	mov	r1, r5
 8013f40:	4638      	mov	r0, r7
 8013f42:	f7ff ff6b 	bl	8013e1c <__ssputs_r>
 8013f46:	3001      	adds	r0, #1
 8013f48:	f000 80a7 	beq.w	801409a <_svfiprintf_r+0x1c6>
 8013f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f4e:	445a      	add	r2, fp
 8013f50:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f52:	f89a 3000 	ldrb.w	r3, [sl]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	f000 809f 	beq.w	801409a <_svfiprintf_r+0x1c6>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f66:	f10a 0a01 	add.w	sl, sl, #1
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	9307      	str	r3, [sp, #28]
 8013f6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f72:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f74:	4654      	mov	r4, sl
 8013f76:	2205      	movs	r2, #5
 8013f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f7c:	484e      	ldr	r0, [pc, #312]	@ (80140b8 <_svfiprintf_r+0x1e4>)
 8013f7e:	f7ec f94f 	bl	8000220 <memchr>
 8013f82:	9a04      	ldr	r2, [sp, #16]
 8013f84:	b9d8      	cbnz	r0, 8013fbe <_svfiprintf_r+0xea>
 8013f86:	06d0      	lsls	r0, r2, #27
 8013f88:	bf44      	itt	mi
 8013f8a:	2320      	movmi	r3, #32
 8013f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f90:	0711      	lsls	r1, r2, #28
 8013f92:	bf44      	itt	mi
 8013f94:	232b      	movmi	r3, #43	@ 0x2b
 8013f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fa0:	d015      	beq.n	8013fce <_svfiprintf_r+0xfa>
 8013fa2:	9a07      	ldr	r2, [sp, #28]
 8013fa4:	4654      	mov	r4, sl
 8013fa6:	2000      	movs	r0, #0
 8013fa8:	f04f 0c0a 	mov.w	ip, #10
 8013fac:	4621      	mov	r1, r4
 8013fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fb2:	3b30      	subs	r3, #48	@ 0x30
 8013fb4:	2b09      	cmp	r3, #9
 8013fb6:	d94b      	bls.n	8014050 <_svfiprintf_r+0x17c>
 8013fb8:	b1b0      	cbz	r0, 8013fe8 <_svfiprintf_r+0x114>
 8013fba:	9207      	str	r2, [sp, #28]
 8013fbc:	e014      	b.n	8013fe8 <_svfiprintf_r+0x114>
 8013fbe:	eba0 0308 	sub.w	r3, r0, r8
 8013fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	9304      	str	r3, [sp, #16]
 8013fca:	46a2      	mov	sl, r4
 8013fcc:	e7d2      	b.n	8013f74 <_svfiprintf_r+0xa0>
 8013fce:	9b03      	ldr	r3, [sp, #12]
 8013fd0:	1d19      	adds	r1, r3, #4
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	9103      	str	r1, [sp, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	bfbb      	ittet	lt
 8013fda:	425b      	neglt	r3, r3
 8013fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8013fe0:	9307      	strge	r3, [sp, #28]
 8013fe2:	9307      	strlt	r3, [sp, #28]
 8013fe4:	bfb8      	it	lt
 8013fe6:	9204      	strlt	r2, [sp, #16]
 8013fe8:	7823      	ldrb	r3, [r4, #0]
 8013fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8013fec:	d10a      	bne.n	8014004 <_svfiprintf_r+0x130>
 8013fee:	7863      	ldrb	r3, [r4, #1]
 8013ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ff2:	d132      	bne.n	801405a <_svfiprintf_r+0x186>
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	1d1a      	adds	r2, r3, #4
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	9203      	str	r2, [sp, #12]
 8013ffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014000:	3402      	adds	r4, #2
 8014002:	9305      	str	r3, [sp, #20]
 8014004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80140c8 <_svfiprintf_r+0x1f4>
 8014008:	7821      	ldrb	r1, [r4, #0]
 801400a:	2203      	movs	r2, #3
 801400c:	4650      	mov	r0, sl
 801400e:	f7ec f907 	bl	8000220 <memchr>
 8014012:	b138      	cbz	r0, 8014024 <_svfiprintf_r+0x150>
 8014014:	9b04      	ldr	r3, [sp, #16]
 8014016:	eba0 000a 	sub.w	r0, r0, sl
 801401a:	2240      	movs	r2, #64	@ 0x40
 801401c:	4082      	lsls	r2, r0
 801401e:	4313      	orrs	r3, r2
 8014020:	3401      	adds	r4, #1
 8014022:	9304      	str	r3, [sp, #16]
 8014024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014028:	4824      	ldr	r0, [pc, #144]	@ (80140bc <_svfiprintf_r+0x1e8>)
 801402a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801402e:	2206      	movs	r2, #6
 8014030:	f7ec f8f6 	bl	8000220 <memchr>
 8014034:	2800      	cmp	r0, #0
 8014036:	d036      	beq.n	80140a6 <_svfiprintf_r+0x1d2>
 8014038:	4b21      	ldr	r3, [pc, #132]	@ (80140c0 <_svfiprintf_r+0x1ec>)
 801403a:	bb1b      	cbnz	r3, 8014084 <_svfiprintf_r+0x1b0>
 801403c:	9b03      	ldr	r3, [sp, #12]
 801403e:	3307      	adds	r3, #7
 8014040:	f023 0307 	bic.w	r3, r3, #7
 8014044:	3308      	adds	r3, #8
 8014046:	9303      	str	r3, [sp, #12]
 8014048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801404a:	4433      	add	r3, r6
 801404c:	9309      	str	r3, [sp, #36]	@ 0x24
 801404e:	e76a      	b.n	8013f26 <_svfiprintf_r+0x52>
 8014050:	fb0c 3202 	mla	r2, ip, r2, r3
 8014054:	460c      	mov	r4, r1
 8014056:	2001      	movs	r0, #1
 8014058:	e7a8      	b.n	8013fac <_svfiprintf_r+0xd8>
 801405a:	2300      	movs	r3, #0
 801405c:	3401      	adds	r4, #1
 801405e:	9305      	str	r3, [sp, #20]
 8014060:	4619      	mov	r1, r3
 8014062:	f04f 0c0a 	mov.w	ip, #10
 8014066:	4620      	mov	r0, r4
 8014068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801406c:	3a30      	subs	r2, #48	@ 0x30
 801406e:	2a09      	cmp	r2, #9
 8014070:	d903      	bls.n	801407a <_svfiprintf_r+0x1a6>
 8014072:	2b00      	cmp	r3, #0
 8014074:	d0c6      	beq.n	8014004 <_svfiprintf_r+0x130>
 8014076:	9105      	str	r1, [sp, #20]
 8014078:	e7c4      	b.n	8014004 <_svfiprintf_r+0x130>
 801407a:	fb0c 2101 	mla	r1, ip, r1, r2
 801407e:	4604      	mov	r4, r0
 8014080:	2301      	movs	r3, #1
 8014082:	e7f0      	b.n	8014066 <_svfiprintf_r+0x192>
 8014084:	ab03      	add	r3, sp, #12
 8014086:	9300      	str	r3, [sp, #0]
 8014088:	462a      	mov	r2, r5
 801408a:	4b0e      	ldr	r3, [pc, #56]	@ (80140c4 <_svfiprintf_r+0x1f0>)
 801408c:	a904      	add	r1, sp, #16
 801408e:	4638      	mov	r0, r7
 8014090:	f7fc fcc8 	bl	8010a24 <_printf_float>
 8014094:	1c42      	adds	r2, r0, #1
 8014096:	4606      	mov	r6, r0
 8014098:	d1d6      	bne.n	8014048 <_svfiprintf_r+0x174>
 801409a:	89ab      	ldrh	r3, [r5, #12]
 801409c:	065b      	lsls	r3, r3, #25
 801409e:	f53f af2d 	bmi.w	8013efc <_svfiprintf_r+0x28>
 80140a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140a4:	e72c      	b.n	8013f00 <_svfiprintf_r+0x2c>
 80140a6:	ab03      	add	r3, sp, #12
 80140a8:	9300      	str	r3, [sp, #0]
 80140aa:	462a      	mov	r2, r5
 80140ac:	4b05      	ldr	r3, [pc, #20]	@ (80140c4 <_svfiprintf_r+0x1f0>)
 80140ae:	a904      	add	r1, sp, #16
 80140b0:	4638      	mov	r0, r7
 80140b2:	f7fc ff4f 	bl	8010f54 <_printf_i>
 80140b6:	e7ed      	b.n	8014094 <_svfiprintf_r+0x1c0>
 80140b8:	08015ee9 	.word	0x08015ee9
 80140bc:	08015ef3 	.word	0x08015ef3
 80140c0:	08010a25 	.word	0x08010a25
 80140c4:	08013e1d 	.word	0x08013e1d
 80140c8:	08015eef 	.word	0x08015eef

080140cc <__sflush_r>:
 80140cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80140d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d4:	0716      	lsls	r6, r2, #28
 80140d6:	4605      	mov	r5, r0
 80140d8:	460c      	mov	r4, r1
 80140da:	d454      	bmi.n	8014186 <__sflush_r+0xba>
 80140dc:	684b      	ldr	r3, [r1, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	dc02      	bgt.n	80140e8 <__sflush_r+0x1c>
 80140e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	dd48      	ble.n	801417a <__sflush_r+0xae>
 80140e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140ea:	2e00      	cmp	r6, #0
 80140ec:	d045      	beq.n	801417a <__sflush_r+0xae>
 80140ee:	2300      	movs	r3, #0
 80140f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80140f4:	682f      	ldr	r7, [r5, #0]
 80140f6:	6a21      	ldr	r1, [r4, #32]
 80140f8:	602b      	str	r3, [r5, #0]
 80140fa:	d030      	beq.n	801415e <__sflush_r+0x92>
 80140fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80140fe:	89a3      	ldrh	r3, [r4, #12]
 8014100:	0759      	lsls	r1, r3, #29
 8014102:	d505      	bpl.n	8014110 <__sflush_r+0x44>
 8014104:	6863      	ldr	r3, [r4, #4]
 8014106:	1ad2      	subs	r2, r2, r3
 8014108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801410a:	b10b      	cbz	r3, 8014110 <__sflush_r+0x44>
 801410c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801410e:	1ad2      	subs	r2, r2, r3
 8014110:	2300      	movs	r3, #0
 8014112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014114:	6a21      	ldr	r1, [r4, #32]
 8014116:	4628      	mov	r0, r5
 8014118:	47b0      	blx	r6
 801411a:	1c43      	adds	r3, r0, #1
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	d106      	bne.n	801412e <__sflush_r+0x62>
 8014120:	6829      	ldr	r1, [r5, #0]
 8014122:	291d      	cmp	r1, #29
 8014124:	d82b      	bhi.n	801417e <__sflush_r+0xb2>
 8014126:	4a2a      	ldr	r2, [pc, #168]	@ (80141d0 <__sflush_r+0x104>)
 8014128:	410a      	asrs	r2, r1
 801412a:	07d6      	lsls	r6, r2, #31
 801412c:	d427      	bmi.n	801417e <__sflush_r+0xb2>
 801412e:	2200      	movs	r2, #0
 8014130:	6062      	str	r2, [r4, #4]
 8014132:	04d9      	lsls	r1, r3, #19
 8014134:	6922      	ldr	r2, [r4, #16]
 8014136:	6022      	str	r2, [r4, #0]
 8014138:	d504      	bpl.n	8014144 <__sflush_r+0x78>
 801413a:	1c42      	adds	r2, r0, #1
 801413c:	d101      	bne.n	8014142 <__sflush_r+0x76>
 801413e:	682b      	ldr	r3, [r5, #0]
 8014140:	b903      	cbnz	r3, 8014144 <__sflush_r+0x78>
 8014142:	6560      	str	r0, [r4, #84]	@ 0x54
 8014144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014146:	602f      	str	r7, [r5, #0]
 8014148:	b1b9      	cbz	r1, 801417a <__sflush_r+0xae>
 801414a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801414e:	4299      	cmp	r1, r3
 8014150:	d002      	beq.n	8014158 <__sflush_r+0x8c>
 8014152:	4628      	mov	r0, r5
 8014154:	f7fe fa2c 	bl	80125b0 <_free_r>
 8014158:	2300      	movs	r3, #0
 801415a:	6363      	str	r3, [r4, #52]	@ 0x34
 801415c:	e00d      	b.n	801417a <__sflush_r+0xae>
 801415e:	2301      	movs	r3, #1
 8014160:	4628      	mov	r0, r5
 8014162:	47b0      	blx	r6
 8014164:	4602      	mov	r2, r0
 8014166:	1c50      	adds	r0, r2, #1
 8014168:	d1c9      	bne.n	80140fe <__sflush_r+0x32>
 801416a:	682b      	ldr	r3, [r5, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d0c6      	beq.n	80140fe <__sflush_r+0x32>
 8014170:	2b1d      	cmp	r3, #29
 8014172:	d001      	beq.n	8014178 <__sflush_r+0xac>
 8014174:	2b16      	cmp	r3, #22
 8014176:	d11e      	bne.n	80141b6 <__sflush_r+0xea>
 8014178:	602f      	str	r7, [r5, #0]
 801417a:	2000      	movs	r0, #0
 801417c:	e022      	b.n	80141c4 <__sflush_r+0xf8>
 801417e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014182:	b21b      	sxth	r3, r3
 8014184:	e01b      	b.n	80141be <__sflush_r+0xf2>
 8014186:	690f      	ldr	r7, [r1, #16]
 8014188:	2f00      	cmp	r7, #0
 801418a:	d0f6      	beq.n	801417a <__sflush_r+0xae>
 801418c:	0793      	lsls	r3, r2, #30
 801418e:	680e      	ldr	r6, [r1, #0]
 8014190:	bf08      	it	eq
 8014192:	694b      	ldreq	r3, [r1, #20]
 8014194:	600f      	str	r7, [r1, #0]
 8014196:	bf18      	it	ne
 8014198:	2300      	movne	r3, #0
 801419a:	eba6 0807 	sub.w	r8, r6, r7
 801419e:	608b      	str	r3, [r1, #8]
 80141a0:	f1b8 0f00 	cmp.w	r8, #0
 80141a4:	dde9      	ble.n	801417a <__sflush_r+0xae>
 80141a6:	6a21      	ldr	r1, [r4, #32]
 80141a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80141aa:	4643      	mov	r3, r8
 80141ac:	463a      	mov	r2, r7
 80141ae:	4628      	mov	r0, r5
 80141b0:	47b0      	blx	r6
 80141b2:	2800      	cmp	r0, #0
 80141b4:	dc08      	bgt.n	80141c8 <__sflush_r+0xfc>
 80141b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141be:	81a3      	strh	r3, [r4, #12]
 80141c0:	f04f 30ff 	mov.w	r0, #4294967295
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	4407      	add	r7, r0
 80141ca:	eba8 0800 	sub.w	r8, r8, r0
 80141ce:	e7e7      	b.n	80141a0 <__sflush_r+0xd4>
 80141d0:	dfbffffe 	.word	0xdfbffffe

080141d4 <_fflush_r>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	690b      	ldr	r3, [r1, #16]
 80141d8:	4605      	mov	r5, r0
 80141da:	460c      	mov	r4, r1
 80141dc:	b913      	cbnz	r3, 80141e4 <_fflush_r+0x10>
 80141de:	2500      	movs	r5, #0
 80141e0:	4628      	mov	r0, r5
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	b118      	cbz	r0, 80141ee <_fflush_r+0x1a>
 80141e6:	6a03      	ldr	r3, [r0, #32]
 80141e8:	b90b      	cbnz	r3, 80141ee <_fflush_r+0x1a>
 80141ea:	f7fd fa73 	bl	80116d4 <__sinit>
 80141ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0f3      	beq.n	80141de <_fflush_r+0xa>
 80141f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80141f8:	07d0      	lsls	r0, r2, #31
 80141fa:	d404      	bmi.n	8014206 <_fflush_r+0x32>
 80141fc:	0599      	lsls	r1, r3, #22
 80141fe:	d402      	bmi.n	8014206 <_fflush_r+0x32>
 8014200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014202:	f7fd fb7e 	bl	8011902 <__retarget_lock_acquire_recursive>
 8014206:	4628      	mov	r0, r5
 8014208:	4621      	mov	r1, r4
 801420a:	f7ff ff5f 	bl	80140cc <__sflush_r>
 801420e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014210:	07da      	lsls	r2, r3, #31
 8014212:	4605      	mov	r5, r0
 8014214:	d4e4      	bmi.n	80141e0 <_fflush_r+0xc>
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	059b      	lsls	r3, r3, #22
 801421a:	d4e1      	bmi.n	80141e0 <_fflush_r+0xc>
 801421c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801421e:	f7fd fb71 	bl	8011904 <__retarget_lock_release_recursive>
 8014222:	e7dd      	b.n	80141e0 <_fflush_r+0xc>

08014224 <memmove>:
 8014224:	4288      	cmp	r0, r1
 8014226:	b510      	push	{r4, lr}
 8014228:	eb01 0402 	add.w	r4, r1, r2
 801422c:	d902      	bls.n	8014234 <memmove+0x10>
 801422e:	4284      	cmp	r4, r0
 8014230:	4623      	mov	r3, r4
 8014232:	d807      	bhi.n	8014244 <memmove+0x20>
 8014234:	1e43      	subs	r3, r0, #1
 8014236:	42a1      	cmp	r1, r4
 8014238:	d008      	beq.n	801424c <memmove+0x28>
 801423a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801423e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014242:	e7f8      	b.n	8014236 <memmove+0x12>
 8014244:	4402      	add	r2, r0
 8014246:	4601      	mov	r1, r0
 8014248:	428a      	cmp	r2, r1
 801424a:	d100      	bne.n	801424e <memmove+0x2a>
 801424c:	bd10      	pop	{r4, pc}
 801424e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014256:	e7f7      	b.n	8014248 <memmove+0x24>

08014258 <strncmp>:
 8014258:	b510      	push	{r4, lr}
 801425a:	b16a      	cbz	r2, 8014278 <strncmp+0x20>
 801425c:	3901      	subs	r1, #1
 801425e:	1884      	adds	r4, r0, r2
 8014260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014264:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014268:	429a      	cmp	r2, r3
 801426a:	d103      	bne.n	8014274 <strncmp+0x1c>
 801426c:	42a0      	cmp	r0, r4
 801426e:	d001      	beq.n	8014274 <strncmp+0x1c>
 8014270:	2a00      	cmp	r2, #0
 8014272:	d1f5      	bne.n	8014260 <strncmp+0x8>
 8014274:	1ad0      	subs	r0, r2, r3
 8014276:	bd10      	pop	{r4, pc}
 8014278:	4610      	mov	r0, r2
 801427a:	e7fc      	b.n	8014276 <strncmp+0x1e>

0801427c <_sbrk_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4d06      	ldr	r5, [pc, #24]	@ (8014298 <_sbrk_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4604      	mov	r4, r0
 8014284:	4608      	mov	r0, r1
 8014286:	602b      	str	r3, [r5, #0]
 8014288:	f7ee fcc6 	bl	8002c18 <_sbrk>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_sbrk_r+0x1a>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	b103      	cbz	r3, 8014296 <_sbrk_r+0x1a>
 8014294:	6023      	str	r3, [r4, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	200049cc 	.word	0x200049cc

0801429c <memcpy>:
 801429c:	440a      	add	r2, r1
 801429e:	4291      	cmp	r1, r2
 80142a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80142a4:	d100      	bne.n	80142a8 <memcpy+0xc>
 80142a6:	4770      	bx	lr
 80142a8:	b510      	push	{r4, lr}
 80142aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142b2:	4291      	cmp	r1, r2
 80142b4:	d1f9      	bne.n	80142aa <memcpy+0xe>
 80142b6:	bd10      	pop	{r4, pc}

080142b8 <nan>:
 80142b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80142c0 <nan+0x8>
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop
 80142c0:	00000000 	.word	0x00000000
 80142c4:	7ff80000 	.word	0x7ff80000

080142c8 <__assert_func>:
 80142c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142ca:	4614      	mov	r4, r2
 80142cc:	461a      	mov	r2, r3
 80142ce:	4b09      	ldr	r3, [pc, #36]	@ (80142f4 <__assert_func+0x2c>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	4605      	mov	r5, r0
 80142d4:	68d8      	ldr	r0, [r3, #12]
 80142d6:	b954      	cbnz	r4, 80142ee <__assert_func+0x26>
 80142d8:	4b07      	ldr	r3, [pc, #28]	@ (80142f8 <__assert_func+0x30>)
 80142da:	461c      	mov	r4, r3
 80142dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142e0:	9100      	str	r1, [sp, #0]
 80142e2:	462b      	mov	r3, r5
 80142e4:	4905      	ldr	r1, [pc, #20]	@ (80142fc <__assert_func+0x34>)
 80142e6:	f000 fba7 	bl	8014a38 <fiprintf>
 80142ea:	f000 fbb7 	bl	8014a5c <abort>
 80142ee:	4b04      	ldr	r3, [pc, #16]	@ (8014300 <__assert_func+0x38>)
 80142f0:	e7f4      	b.n	80142dc <__assert_func+0x14>
 80142f2:	bf00      	nop
 80142f4:	20000190 	.word	0x20000190
 80142f8:	08015f3d 	.word	0x08015f3d
 80142fc:	08015f0f 	.word	0x08015f0f
 8014300:	08015f02 	.word	0x08015f02

08014304 <_calloc_r>:
 8014304:	b570      	push	{r4, r5, r6, lr}
 8014306:	fba1 5402 	umull	r5, r4, r1, r2
 801430a:	b93c      	cbnz	r4, 801431c <_calloc_r+0x18>
 801430c:	4629      	mov	r1, r5
 801430e:	f7fe f9c3 	bl	8012698 <_malloc_r>
 8014312:	4606      	mov	r6, r0
 8014314:	b928      	cbnz	r0, 8014322 <_calloc_r+0x1e>
 8014316:	2600      	movs	r6, #0
 8014318:	4630      	mov	r0, r6
 801431a:	bd70      	pop	{r4, r5, r6, pc}
 801431c:	220c      	movs	r2, #12
 801431e:	6002      	str	r2, [r0, #0]
 8014320:	e7f9      	b.n	8014316 <_calloc_r+0x12>
 8014322:	462a      	mov	r2, r5
 8014324:	4621      	mov	r1, r4
 8014326:	f7fd fa6e 	bl	8011806 <memset>
 801432a:	e7f5      	b.n	8014318 <_calloc_r+0x14>

0801432c <rshift>:
 801432c:	6903      	ldr	r3, [r0, #16]
 801432e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014336:	ea4f 1261 	mov.w	r2, r1, asr #5
 801433a:	f100 0414 	add.w	r4, r0, #20
 801433e:	dd45      	ble.n	80143cc <rshift+0xa0>
 8014340:	f011 011f 	ands.w	r1, r1, #31
 8014344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801434c:	d10c      	bne.n	8014368 <rshift+0x3c>
 801434e:	f100 0710 	add.w	r7, r0, #16
 8014352:	4629      	mov	r1, r5
 8014354:	42b1      	cmp	r1, r6
 8014356:	d334      	bcc.n	80143c2 <rshift+0x96>
 8014358:	1a9b      	subs	r3, r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	1eea      	subs	r2, r5, #3
 801435e:	4296      	cmp	r6, r2
 8014360:	bf38      	it	cc
 8014362:	2300      	movcc	r3, #0
 8014364:	4423      	add	r3, r4
 8014366:	e015      	b.n	8014394 <rshift+0x68>
 8014368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801436c:	f1c1 0820 	rsb	r8, r1, #32
 8014370:	40cf      	lsrs	r7, r1
 8014372:	f105 0e04 	add.w	lr, r5, #4
 8014376:	46a1      	mov	r9, r4
 8014378:	4576      	cmp	r6, lr
 801437a:	46f4      	mov	ip, lr
 801437c:	d815      	bhi.n	80143aa <rshift+0x7e>
 801437e:	1a9a      	subs	r2, r3, r2
 8014380:	0092      	lsls	r2, r2, #2
 8014382:	3a04      	subs	r2, #4
 8014384:	3501      	adds	r5, #1
 8014386:	42ae      	cmp	r6, r5
 8014388:	bf38      	it	cc
 801438a:	2200      	movcc	r2, #0
 801438c:	18a3      	adds	r3, r4, r2
 801438e:	50a7      	str	r7, [r4, r2]
 8014390:	b107      	cbz	r7, 8014394 <rshift+0x68>
 8014392:	3304      	adds	r3, #4
 8014394:	1b1a      	subs	r2, r3, r4
 8014396:	42a3      	cmp	r3, r4
 8014398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801439c:	bf08      	it	eq
 801439e:	2300      	moveq	r3, #0
 80143a0:	6102      	str	r2, [r0, #16]
 80143a2:	bf08      	it	eq
 80143a4:	6143      	streq	r3, [r0, #20]
 80143a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143aa:	f8dc c000 	ldr.w	ip, [ip]
 80143ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80143b2:	ea4c 0707 	orr.w	r7, ip, r7
 80143b6:	f849 7b04 	str.w	r7, [r9], #4
 80143ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80143be:	40cf      	lsrs	r7, r1
 80143c0:	e7da      	b.n	8014378 <rshift+0x4c>
 80143c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80143c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80143ca:	e7c3      	b.n	8014354 <rshift+0x28>
 80143cc:	4623      	mov	r3, r4
 80143ce:	e7e1      	b.n	8014394 <rshift+0x68>

080143d0 <__hexdig_fun>:
 80143d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80143d4:	2b09      	cmp	r3, #9
 80143d6:	d802      	bhi.n	80143de <__hexdig_fun+0xe>
 80143d8:	3820      	subs	r0, #32
 80143da:	b2c0      	uxtb	r0, r0
 80143dc:	4770      	bx	lr
 80143de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80143e2:	2b05      	cmp	r3, #5
 80143e4:	d801      	bhi.n	80143ea <__hexdig_fun+0x1a>
 80143e6:	3847      	subs	r0, #71	@ 0x47
 80143e8:	e7f7      	b.n	80143da <__hexdig_fun+0xa>
 80143ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80143ee:	2b05      	cmp	r3, #5
 80143f0:	d801      	bhi.n	80143f6 <__hexdig_fun+0x26>
 80143f2:	3827      	subs	r0, #39	@ 0x27
 80143f4:	e7f1      	b.n	80143da <__hexdig_fun+0xa>
 80143f6:	2000      	movs	r0, #0
 80143f8:	4770      	bx	lr
	...

080143fc <__gethex>:
 80143fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014400:	b085      	sub	sp, #20
 8014402:	468a      	mov	sl, r1
 8014404:	9302      	str	r3, [sp, #8]
 8014406:	680b      	ldr	r3, [r1, #0]
 8014408:	9001      	str	r0, [sp, #4]
 801440a:	4690      	mov	r8, r2
 801440c:	1c9c      	adds	r4, r3, #2
 801440e:	46a1      	mov	r9, r4
 8014410:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014414:	2830      	cmp	r0, #48	@ 0x30
 8014416:	d0fa      	beq.n	801440e <__gethex+0x12>
 8014418:	eba9 0303 	sub.w	r3, r9, r3
 801441c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014420:	f7ff ffd6 	bl	80143d0 <__hexdig_fun>
 8014424:	4605      	mov	r5, r0
 8014426:	2800      	cmp	r0, #0
 8014428:	d168      	bne.n	80144fc <__gethex+0x100>
 801442a:	49a0      	ldr	r1, [pc, #640]	@ (80146ac <__gethex+0x2b0>)
 801442c:	2201      	movs	r2, #1
 801442e:	4648      	mov	r0, r9
 8014430:	f7ff ff12 	bl	8014258 <strncmp>
 8014434:	4607      	mov	r7, r0
 8014436:	2800      	cmp	r0, #0
 8014438:	d167      	bne.n	801450a <__gethex+0x10e>
 801443a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801443e:	4626      	mov	r6, r4
 8014440:	f7ff ffc6 	bl	80143d0 <__hexdig_fun>
 8014444:	2800      	cmp	r0, #0
 8014446:	d062      	beq.n	801450e <__gethex+0x112>
 8014448:	4623      	mov	r3, r4
 801444a:	7818      	ldrb	r0, [r3, #0]
 801444c:	2830      	cmp	r0, #48	@ 0x30
 801444e:	4699      	mov	r9, r3
 8014450:	f103 0301 	add.w	r3, r3, #1
 8014454:	d0f9      	beq.n	801444a <__gethex+0x4e>
 8014456:	f7ff ffbb 	bl	80143d0 <__hexdig_fun>
 801445a:	fab0 f580 	clz	r5, r0
 801445e:	096d      	lsrs	r5, r5, #5
 8014460:	f04f 0b01 	mov.w	fp, #1
 8014464:	464a      	mov	r2, r9
 8014466:	4616      	mov	r6, r2
 8014468:	3201      	adds	r2, #1
 801446a:	7830      	ldrb	r0, [r6, #0]
 801446c:	f7ff ffb0 	bl	80143d0 <__hexdig_fun>
 8014470:	2800      	cmp	r0, #0
 8014472:	d1f8      	bne.n	8014466 <__gethex+0x6a>
 8014474:	498d      	ldr	r1, [pc, #564]	@ (80146ac <__gethex+0x2b0>)
 8014476:	2201      	movs	r2, #1
 8014478:	4630      	mov	r0, r6
 801447a:	f7ff feed 	bl	8014258 <strncmp>
 801447e:	2800      	cmp	r0, #0
 8014480:	d13f      	bne.n	8014502 <__gethex+0x106>
 8014482:	b944      	cbnz	r4, 8014496 <__gethex+0x9a>
 8014484:	1c74      	adds	r4, r6, #1
 8014486:	4622      	mov	r2, r4
 8014488:	4616      	mov	r6, r2
 801448a:	3201      	adds	r2, #1
 801448c:	7830      	ldrb	r0, [r6, #0]
 801448e:	f7ff ff9f 	bl	80143d0 <__hexdig_fun>
 8014492:	2800      	cmp	r0, #0
 8014494:	d1f8      	bne.n	8014488 <__gethex+0x8c>
 8014496:	1ba4      	subs	r4, r4, r6
 8014498:	00a7      	lsls	r7, r4, #2
 801449a:	7833      	ldrb	r3, [r6, #0]
 801449c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80144a0:	2b50      	cmp	r3, #80	@ 0x50
 80144a2:	d13e      	bne.n	8014522 <__gethex+0x126>
 80144a4:	7873      	ldrb	r3, [r6, #1]
 80144a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80144a8:	d033      	beq.n	8014512 <__gethex+0x116>
 80144aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80144ac:	d034      	beq.n	8014518 <__gethex+0x11c>
 80144ae:	1c71      	adds	r1, r6, #1
 80144b0:	2400      	movs	r4, #0
 80144b2:	7808      	ldrb	r0, [r1, #0]
 80144b4:	f7ff ff8c 	bl	80143d0 <__hexdig_fun>
 80144b8:	1e43      	subs	r3, r0, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b18      	cmp	r3, #24
 80144be:	d830      	bhi.n	8014522 <__gethex+0x126>
 80144c0:	f1a0 0210 	sub.w	r2, r0, #16
 80144c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80144c8:	f7ff ff82 	bl	80143d0 <__hexdig_fun>
 80144cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80144d0:	fa5f fc8c 	uxtb.w	ip, ip
 80144d4:	f1bc 0f18 	cmp.w	ip, #24
 80144d8:	f04f 030a 	mov.w	r3, #10
 80144dc:	d91e      	bls.n	801451c <__gethex+0x120>
 80144de:	b104      	cbz	r4, 80144e2 <__gethex+0xe6>
 80144e0:	4252      	negs	r2, r2
 80144e2:	4417      	add	r7, r2
 80144e4:	f8ca 1000 	str.w	r1, [sl]
 80144e8:	b1ed      	cbz	r5, 8014526 <__gethex+0x12a>
 80144ea:	f1bb 0f00 	cmp.w	fp, #0
 80144ee:	bf0c      	ite	eq
 80144f0:	2506      	moveq	r5, #6
 80144f2:	2500      	movne	r5, #0
 80144f4:	4628      	mov	r0, r5
 80144f6:	b005      	add	sp, #20
 80144f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144fc:	2500      	movs	r5, #0
 80144fe:	462c      	mov	r4, r5
 8014500:	e7b0      	b.n	8014464 <__gethex+0x68>
 8014502:	2c00      	cmp	r4, #0
 8014504:	d1c7      	bne.n	8014496 <__gethex+0x9a>
 8014506:	4627      	mov	r7, r4
 8014508:	e7c7      	b.n	801449a <__gethex+0x9e>
 801450a:	464e      	mov	r6, r9
 801450c:	462f      	mov	r7, r5
 801450e:	2501      	movs	r5, #1
 8014510:	e7c3      	b.n	801449a <__gethex+0x9e>
 8014512:	2400      	movs	r4, #0
 8014514:	1cb1      	adds	r1, r6, #2
 8014516:	e7cc      	b.n	80144b2 <__gethex+0xb6>
 8014518:	2401      	movs	r4, #1
 801451a:	e7fb      	b.n	8014514 <__gethex+0x118>
 801451c:	fb03 0002 	mla	r0, r3, r2, r0
 8014520:	e7ce      	b.n	80144c0 <__gethex+0xc4>
 8014522:	4631      	mov	r1, r6
 8014524:	e7de      	b.n	80144e4 <__gethex+0xe8>
 8014526:	eba6 0309 	sub.w	r3, r6, r9
 801452a:	3b01      	subs	r3, #1
 801452c:	4629      	mov	r1, r5
 801452e:	2b07      	cmp	r3, #7
 8014530:	dc0a      	bgt.n	8014548 <__gethex+0x14c>
 8014532:	9801      	ldr	r0, [sp, #4]
 8014534:	f7fe f93c 	bl	80127b0 <_Balloc>
 8014538:	4604      	mov	r4, r0
 801453a:	b940      	cbnz	r0, 801454e <__gethex+0x152>
 801453c:	4b5c      	ldr	r3, [pc, #368]	@ (80146b0 <__gethex+0x2b4>)
 801453e:	4602      	mov	r2, r0
 8014540:	21e4      	movs	r1, #228	@ 0xe4
 8014542:	485c      	ldr	r0, [pc, #368]	@ (80146b4 <__gethex+0x2b8>)
 8014544:	f7ff fec0 	bl	80142c8 <__assert_func>
 8014548:	3101      	adds	r1, #1
 801454a:	105b      	asrs	r3, r3, #1
 801454c:	e7ef      	b.n	801452e <__gethex+0x132>
 801454e:	f100 0a14 	add.w	sl, r0, #20
 8014552:	2300      	movs	r3, #0
 8014554:	4655      	mov	r5, sl
 8014556:	469b      	mov	fp, r3
 8014558:	45b1      	cmp	r9, r6
 801455a:	d337      	bcc.n	80145cc <__gethex+0x1d0>
 801455c:	f845 bb04 	str.w	fp, [r5], #4
 8014560:	eba5 050a 	sub.w	r5, r5, sl
 8014564:	10ad      	asrs	r5, r5, #2
 8014566:	6125      	str	r5, [r4, #16]
 8014568:	4658      	mov	r0, fp
 801456a:	f7fe fa13 	bl	8012994 <__hi0bits>
 801456e:	016d      	lsls	r5, r5, #5
 8014570:	f8d8 6000 	ldr.w	r6, [r8]
 8014574:	1a2d      	subs	r5, r5, r0
 8014576:	42b5      	cmp	r5, r6
 8014578:	dd54      	ble.n	8014624 <__gethex+0x228>
 801457a:	1bad      	subs	r5, r5, r6
 801457c:	4629      	mov	r1, r5
 801457e:	4620      	mov	r0, r4
 8014580:	f7fe fda7 	bl	80130d2 <__any_on>
 8014584:	4681      	mov	r9, r0
 8014586:	b178      	cbz	r0, 80145a8 <__gethex+0x1ac>
 8014588:	1e6b      	subs	r3, r5, #1
 801458a:	1159      	asrs	r1, r3, #5
 801458c:	f003 021f 	and.w	r2, r3, #31
 8014590:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014594:	f04f 0901 	mov.w	r9, #1
 8014598:	fa09 f202 	lsl.w	r2, r9, r2
 801459c:	420a      	tst	r2, r1
 801459e:	d003      	beq.n	80145a8 <__gethex+0x1ac>
 80145a0:	454b      	cmp	r3, r9
 80145a2:	dc36      	bgt.n	8014612 <__gethex+0x216>
 80145a4:	f04f 0902 	mov.w	r9, #2
 80145a8:	4629      	mov	r1, r5
 80145aa:	4620      	mov	r0, r4
 80145ac:	f7ff febe 	bl	801432c <rshift>
 80145b0:	442f      	add	r7, r5
 80145b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80145b6:	42bb      	cmp	r3, r7
 80145b8:	da42      	bge.n	8014640 <__gethex+0x244>
 80145ba:	9801      	ldr	r0, [sp, #4]
 80145bc:	4621      	mov	r1, r4
 80145be:	f7fe f937 	bl	8012830 <_Bfree>
 80145c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145c4:	2300      	movs	r3, #0
 80145c6:	6013      	str	r3, [r2, #0]
 80145c8:	25a3      	movs	r5, #163	@ 0xa3
 80145ca:	e793      	b.n	80144f4 <__gethex+0xf8>
 80145cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80145d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80145d2:	d012      	beq.n	80145fa <__gethex+0x1fe>
 80145d4:	2b20      	cmp	r3, #32
 80145d6:	d104      	bne.n	80145e2 <__gethex+0x1e6>
 80145d8:	f845 bb04 	str.w	fp, [r5], #4
 80145dc:	f04f 0b00 	mov.w	fp, #0
 80145e0:	465b      	mov	r3, fp
 80145e2:	7830      	ldrb	r0, [r6, #0]
 80145e4:	9303      	str	r3, [sp, #12]
 80145e6:	f7ff fef3 	bl	80143d0 <__hexdig_fun>
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	f000 000f 	and.w	r0, r0, #15
 80145f0:	4098      	lsls	r0, r3
 80145f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80145f6:	3304      	adds	r3, #4
 80145f8:	e7ae      	b.n	8014558 <__gethex+0x15c>
 80145fa:	45b1      	cmp	r9, r6
 80145fc:	d8ea      	bhi.n	80145d4 <__gethex+0x1d8>
 80145fe:	492b      	ldr	r1, [pc, #172]	@ (80146ac <__gethex+0x2b0>)
 8014600:	9303      	str	r3, [sp, #12]
 8014602:	2201      	movs	r2, #1
 8014604:	4630      	mov	r0, r6
 8014606:	f7ff fe27 	bl	8014258 <strncmp>
 801460a:	9b03      	ldr	r3, [sp, #12]
 801460c:	2800      	cmp	r0, #0
 801460e:	d1e1      	bne.n	80145d4 <__gethex+0x1d8>
 8014610:	e7a2      	b.n	8014558 <__gethex+0x15c>
 8014612:	1ea9      	subs	r1, r5, #2
 8014614:	4620      	mov	r0, r4
 8014616:	f7fe fd5c 	bl	80130d2 <__any_on>
 801461a:	2800      	cmp	r0, #0
 801461c:	d0c2      	beq.n	80145a4 <__gethex+0x1a8>
 801461e:	f04f 0903 	mov.w	r9, #3
 8014622:	e7c1      	b.n	80145a8 <__gethex+0x1ac>
 8014624:	da09      	bge.n	801463a <__gethex+0x23e>
 8014626:	1b75      	subs	r5, r6, r5
 8014628:	4621      	mov	r1, r4
 801462a:	9801      	ldr	r0, [sp, #4]
 801462c:	462a      	mov	r2, r5
 801462e:	f7fe fb17 	bl	8012c60 <__lshift>
 8014632:	1b7f      	subs	r7, r7, r5
 8014634:	4604      	mov	r4, r0
 8014636:	f100 0a14 	add.w	sl, r0, #20
 801463a:	f04f 0900 	mov.w	r9, #0
 801463e:	e7b8      	b.n	80145b2 <__gethex+0x1b6>
 8014640:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014644:	42bd      	cmp	r5, r7
 8014646:	dd6f      	ble.n	8014728 <__gethex+0x32c>
 8014648:	1bed      	subs	r5, r5, r7
 801464a:	42ae      	cmp	r6, r5
 801464c:	dc34      	bgt.n	80146b8 <__gethex+0x2bc>
 801464e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014652:	2b02      	cmp	r3, #2
 8014654:	d022      	beq.n	801469c <__gethex+0x2a0>
 8014656:	2b03      	cmp	r3, #3
 8014658:	d024      	beq.n	80146a4 <__gethex+0x2a8>
 801465a:	2b01      	cmp	r3, #1
 801465c:	d115      	bne.n	801468a <__gethex+0x28e>
 801465e:	42ae      	cmp	r6, r5
 8014660:	d113      	bne.n	801468a <__gethex+0x28e>
 8014662:	2e01      	cmp	r6, #1
 8014664:	d10b      	bne.n	801467e <__gethex+0x282>
 8014666:	9a02      	ldr	r2, [sp, #8]
 8014668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801466c:	6013      	str	r3, [r2, #0]
 801466e:	2301      	movs	r3, #1
 8014670:	6123      	str	r3, [r4, #16]
 8014672:	f8ca 3000 	str.w	r3, [sl]
 8014676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014678:	2562      	movs	r5, #98	@ 0x62
 801467a:	601c      	str	r4, [r3, #0]
 801467c:	e73a      	b.n	80144f4 <__gethex+0xf8>
 801467e:	1e71      	subs	r1, r6, #1
 8014680:	4620      	mov	r0, r4
 8014682:	f7fe fd26 	bl	80130d2 <__any_on>
 8014686:	2800      	cmp	r0, #0
 8014688:	d1ed      	bne.n	8014666 <__gethex+0x26a>
 801468a:	9801      	ldr	r0, [sp, #4]
 801468c:	4621      	mov	r1, r4
 801468e:	f7fe f8cf 	bl	8012830 <_Bfree>
 8014692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014694:	2300      	movs	r3, #0
 8014696:	6013      	str	r3, [r2, #0]
 8014698:	2550      	movs	r5, #80	@ 0x50
 801469a:	e72b      	b.n	80144f4 <__gethex+0xf8>
 801469c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1f3      	bne.n	801468a <__gethex+0x28e>
 80146a2:	e7e0      	b.n	8014666 <__gethex+0x26a>
 80146a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d1dd      	bne.n	8014666 <__gethex+0x26a>
 80146aa:	e7ee      	b.n	801468a <__gethex+0x28e>
 80146ac:	08015d90 	.word	0x08015d90
 80146b0:	08015c29 	.word	0x08015c29
 80146b4:	08015f3e 	.word	0x08015f3e
 80146b8:	1e6f      	subs	r7, r5, #1
 80146ba:	f1b9 0f00 	cmp.w	r9, #0
 80146be:	d130      	bne.n	8014722 <__gethex+0x326>
 80146c0:	b127      	cbz	r7, 80146cc <__gethex+0x2d0>
 80146c2:	4639      	mov	r1, r7
 80146c4:	4620      	mov	r0, r4
 80146c6:	f7fe fd04 	bl	80130d2 <__any_on>
 80146ca:	4681      	mov	r9, r0
 80146cc:	117a      	asrs	r2, r7, #5
 80146ce:	2301      	movs	r3, #1
 80146d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80146d4:	f007 071f 	and.w	r7, r7, #31
 80146d8:	40bb      	lsls	r3, r7
 80146da:	4213      	tst	r3, r2
 80146dc:	4629      	mov	r1, r5
 80146de:	4620      	mov	r0, r4
 80146e0:	bf18      	it	ne
 80146e2:	f049 0902 	orrne.w	r9, r9, #2
 80146e6:	f7ff fe21 	bl	801432c <rshift>
 80146ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80146ee:	1b76      	subs	r6, r6, r5
 80146f0:	2502      	movs	r5, #2
 80146f2:	f1b9 0f00 	cmp.w	r9, #0
 80146f6:	d047      	beq.n	8014788 <__gethex+0x38c>
 80146f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d015      	beq.n	801472c <__gethex+0x330>
 8014700:	2b03      	cmp	r3, #3
 8014702:	d017      	beq.n	8014734 <__gethex+0x338>
 8014704:	2b01      	cmp	r3, #1
 8014706:	d109      	bne.n	801471c <__gethex+0x320>
 8014708:	f019 0f02 	tst.w	r9, #2
 801470c:	d006      	beq.n	801471c <__gethex+0x320>
 801470e:	f8da 3000 	ldr.w	r3, [sl]
 8014712:	ea49 0903 	orr.w	r9, r9, r3
 8014716:	f019 0f01 	tst.w	r9, #1
 801471a:	d10e      	bne.n	801473a <__gethex+0x33e>
 801471c:	f045 0510 	orr.w	r5, r5, #16
 8014720:	e032      	b.n	8014788 <__gethex+0x38c>
 8014722:	f04f 0901 	mov.w	r9, #1
 8014726:	e7d1      	b.n	80146cc <__gethex+0x2d0>
 8014728:	2501      	movs	r5, #1
 801472a:	e7e2      	b.n	80146f2 <__gethex+0x2f6>
 801472c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801472e:	f1c3 0301 	rsb	r3, r3, #1
 8014732:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014736:	2b00      	cmp	r3, #0
 8014738:	d0f0      	beq.n	801471c <__gethex+0x320>
 801473a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801473e:	f104 0314 	add.w	r3, r4, #20
 8014742:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014746:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801474a:	f04f 0c00 	mov.w	ip, #0
 801474e:	4618      	mov	r0, r3
 8014750:	f853 2b04 	ldr.w	r2, [r3], #4
 8014754:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014758:	d01b      	beq.n	8014792 <__gethex+0x396>
 801475a:	3201      	adds	r2, #1
 801475c:	6002      	str	r2, [r0, #0]
 801475e:	2d02      	cmp	r5, #2
 8014760:	f104 0314 	add.w	r3, r4, #20
 8014764:	d13c      	bne.n	80147e0 <__gethex+0x3e4>
 8014766:	f8d8 2000 	ldr.w	r2, [r8]
 801476a:	3a01      	subs	r2, #1
 801476c:	42b2      	cmp	r2, r6
 801476e:	d109      	bne.n	8014784 <__gethex+0x388>
 8014770:	1171      	asrs	r1, r6, #5
 8014772:	2201      	movs	r2, #1
 8014774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014778:	f006 061f 	and.w	r6, r6, #31
 801477c:	fa02 f606 	lsl.w	r6, r2, r6
 8014780:	421e      	tst	r6, r3
 8014782:	d13a      	bne.n	80147fa <__gethex+0x3fe>
 8014784:	f045 0520 	orr.w	r5, r5, #32
 8014788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801478a:	601c      	str	r4, [r3, #0]
 801478c:	9b02      	ldr	r3, [sp, #8]
 801478e:	601f      	str	r7, [r3, #0]
 8014790:	e6b0      	b.n	80144f4 <__gethex+0xf8>
 8014792:	4299      	cmp	r1, r3
 8014794:	f843 cc04 	str.w	ip, [r3, #-4]
 8014798:	d8d9      	bhi.n	801474e <__gethex+0x352>
 801479a:	68a3      	ldr	r3, [r4, #8]
 801479c:	459b      	cmp	fp, r3
 801479e:	db17      	blt.n	80147d0 <__gethex+0x3d4>
 80147a0:	6861      	ldr	r1, [r4, #4]
 80147a2:	9801      	ldr	r0, [sp, #4]
 80147a4:	3101      	adds	r1, #1
 80147a6:	f7fe f803 	bl	80127b0 <_Balloc>
 80147aa:	4681      	mov	r9, r0
 80147ac:	b918      	cbnz	r0, 80147b6 <__gethex+0x3ba>
 80147ae:	4b1a      	ldr	r3, [pc, #104]	@ (8014818 <__gethex+0x41c>)
 80147b0:	4602      	mov	r2, r0
 80147b2:	2184      	movs	r1, #132	@ 0x84
 80147b4:	e6c5      	b.n	8014542 <__gethex+0x146>
 80147b6:	6922      	ldr	r2, [r4, #16]
 80147b8:	3202      	adds	r2, #2
 80147ba:	f104 010c 	add.w	r1, r4, #12
 80147be:	0092      	lsls	r2, r2, #2
 80147c0:	300c      	adds	r0, #12
 80147c2:	f7ff fd6b 	bl	801429c <memcpy>
 80147c6:	4621      	mov	r1, r4
 80147c8:	9801      	ldr	r0, [sp, #4]
 80147ca:	f7fe f831 	bl	8012830 <_Bfree>
 80147ce:	464c      	mov	r4, r9
 80147d0:	6923      	ldr	r3, [r4, #16]
 80147d2:	1c5a      	adds	r2, r3, #1
 80147d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80147d8:	6122      	str	r2, [r4, #16]
 80147da:	2201      	movs	r2, #1
 80147dc:	615a      	str	r2, [r3, #20]
 80147de:	e7be      	b.n	801475e <__gethex+0x362>
 80147e0:	6922      	ldr	r2, [r4, #16]
 80147e2:	455a      	cmp	r2, fp
 80147e4:	dd0b      	ble.n	80147fe <__gethex+0x402>
 80147e6:	2101      	movs	r1, #1
 80147e8:	4620      	mov	r0, r4
 80147ea:	f7ff fd9f 	bl	801432c <rshift>
 80147ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80147f2:	3701      	adds	r7, #1
 80147f4:	42bb      	cmp	r3, r7
 80147f6:	f6ff aee0 	blt.w	80145ba <__gethex+0x1be>
 80147fa:	2501      	movs	r5, #1
 80147fc:	e7c2      	b.n	8014784 <__gethex+0x388>
 80147fe:	f016 061f 	ands.w	r6, r6, #31
 8014802:	d0fa      	beq.n	80147fa <__gethex+0x3fe>
 8014804:	4453      	add	r3, sl
 8014806:	f1c6 0620 	rsb	r6, r6, #32
 801480a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801480e:	f7fe f8c1 	bl	8012994 <__hi0bits>
 8014812:	42b0      	cmp	r0, r6
 8014814:	dbe7      	blt.n	80147e6 <__gethex+0x3ea>
 8014816:	e7f0      	b.n	80147fa <__gethex+0x3fe>
 8014818:	08015c29 	.word	0x08015c29

0801481c <L_shift>:
 801481c:	f1c2 0208 	rsb	r2, r2, #8
 8014820:	0092      	lsls	r2, r2, #2
 8014822:	b570      	push	{r4, r5, r6, lr}
 8014824:	f1c2 0620 	rsb	r6, r2, #32
 8014828:	6843      	ldr	r3, [r0, #4]
 801482a:	6804      	ldr	r4, [r0, #0]
 801482c:	fa03 f506 	lsl.w	r5, r3, r6
 8014830:	432c      	orrs	r4, r5
 8014832:	40d3      	lsrs	r3, r2
 8014834:	6004      	str	r4, [r0, #0]
 8014836:	f840 3f04 	str.w	r3, [r0, #4]!
 801483a:	4288      	cmp	r0, r1
 801483c:	d3f4      	bcc.n	8014828 <L_shift+0xc>
 801483e:	bd70      	pop	{r4, r5, r6, pc}

08014840 <__match>:
 8014840:	b530      	push	{r4, r5, lr}
 8014842:	6803      	ldr	r3, [r0, #0]
 8014844:	3301      	adds	r3, #1
 8014846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801484a:	b914      	cbnz	r4, 8014852 <__match+0x12>
 801484c:	6003      	str	r3, [r0, #0]
 801484e:	2001      	movs	r0, #1
 8014850:	bd30      	pop	{r4, r5, pc}
 8014852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014856:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801485a:	2d19      	cmp	r5, #25
 801485c:	bf98      	it	ls
 801485e:	3220      	addls	r2, #32
 8014860:	42a2      	cmp	r2, r4
 8014862:	d0f0      	beq.n	8014846 <__match+0x6>
 8014864:	2000      	movs	r0, #0
 8014866:	e7f3      	b.n	8014850 <__match+0x10>

08014868 <__hexnan>:
 8014868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486c:	680b      	ldr	r3, [r1, #0]
 801486e:	6801      	ldr	r1, [r0, #0]
 8014870:	115e      	asrs	r6, r3, #5
 8014872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014876:	f013 031f 	ands.w	r3, r3, #31
 801487a:	b087      	sub	sp, #28
 801487c:	bf18      	it	ne
 801487e:	3604      	addne	r6, #4
 8014880:	2500      	movs	r5, #0
 8014882:	1f37      	subs	r7, r6, #4
 8014884:	4682      	mov	sl, r0
 8014886:	4690      	mov	r8, r2
 8014888:	9301      	str	r3, [sp, #4]
 801488a:	f846 5c04 	str.w	r5, [r6, #-4]
 801488e:	46b9      	mov	r9, r7
 8014890:	463c      	mov	r4, r7
 8014892:	9502      	str	r5, [sp, #8]
 8014894:	46ab      	mov	fp, r5
 8014896:	784a      	ldrb	r2, [r1, #1]
 8014898:	1c4b      	adds	r3, r1, #1
 801489a:	9303      	str	r3, [sp, #12]
 801489c:	b342      	cbz	r2, 80148f0 <__hexnan+0x88>
 801489e:	4610      	mov	r0, r2
 80148a0:	9105      	str	r1, [sp, #20]
 80148a2:	9204      	str	r2, [sp, #16]
 80148a4:	f7ff fd94 	bl	80143d0 <__hexdig_fun>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d151      	bne.n	8014950 <__hexnan+0xe8>
 80148ac:	9a04      	ldr	r2, [sp, #16]
 80148ae:	9905      	ldr	r1, [sp, #20]
 80148b0:	2a20      	cmp	r2, #32
 80148b2:	d818      	bhi.n	80148e6 <__hexnan+0x7e>
 80148b4:	9b02      	ldr	r3, [sp, #8]
 80148b6:	459b      	cmp	fp, r3
 80148b8:	dd13      	ble.n	80148e2 <__hexnan+0x7a>
 80148ba:	454c      	cmp	r4, r9
 80148bc:	d206      	bcs.n	80148cc <__hexnan+0x64>
 80148be:	2d07      	cmp	r5, #7
 80148c0:	dc04      	bgt.n	80148cc <__hexnan+0x64>
 80148c2:	462a      	mov	r2, r5
 80148c4:	4649      	mov	r1, r9
 80148c6:	4620      	mov	r0, r4
 80148c8:	f7ff ffa8 	bl	801481c <L_shift>
 80148cc:	4544      	cmp	r4, r8
 80148ce:	d952      	bls.n	8014976 <__hexnan+0x10e>
 80148d0:	2300      	movs	r3, #0
 80148d2:	f1a4 0904 	sub.w	r9, r4, #4
 80148d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80148da:	f8cd b008 	str.w	fp, [sp, #8]
 80148de:	464c      	mov	r4, r9
 80148e0:	461d      	mov	r5, r3
 80148e2:	9903      	ldr	r1, [sp, #12]
 80148e4:	e7d7      	b.n	8014896 <__hexnan+0x2e>
 80148e6:	2a29      	cmp	r2, #41	@ 0x29
 80148e8:	d157      	bne.n	801499a <__hexnan+0x132>
 80148ea:	3102      	adds	r1, #2
 80148ec:	f8ca 1000 	str.w	r1, [sl]
 80148f0:	f1bb 0f00 	cmp.w	fp, #0
 80148f4:	d051      	beq.n	801499a <__hexnan+0x132>
 80148f6:	454c      	cmp	r4, r9
 80148f8:	d206      	bcs.n	8014908 <__hexnan+0xa0>
 80148fa:	2d07      	cmp	r5, #7
 80148fc:	dc04      	bgt.n	8014908 <__hexnan+0xa0>
 80148fe:	462a      	mov	r2, r5
 8014900:	4649      	mov	r1, r9
 8014902:	4620      	mov	r0, r4
 8014904:	f7ff ff8a 	bl	801481c <L_shift>
 8014908:	4544      	cmp	r4, r8
 801490a:	d936      	bls.n	801497a <__hexnan+0x112>
 801490c:	f1a8 0204 	sub.w	r2, r8, #4
 8014910:	4623      	mov	r3, r4
 8014912:	f853 1b04 	ldr.w	r1, [r3], #4
 8014916:	f842 1f04 	str.w	r1, [r2, #4]!
 801491a:	429f      	cmp	r7, r3
 801491c:	d2f9      	bcs.n	8014912 <__hexnan+0xaa>
 801491e:	1b3b      	subs	r3, r7, r4
 8014920:	f023 0303 	bic.w	r3, r3, #3
 8014924:	3304      	adds	r3, #4
 8014926:	3401      	adds	r4, #1
 8014928:	3e03      	subs	r6, #3
 801492a:	42b4      	cmp	r4, r6
 801492c:	bf88      	it	hi
 801492e:	2304      	movhi	r3, #4
 8014930:	4443      	add	r3, r8
 8014932:	2200      	movs	r2, #0
 8014934:	f843 2b04 	str.w	r2, [r3], #4
 8014938:	429f      	cmp	r7, r3
 801493a:	d2fb      	bcs.n	8014934 <__hexnan+0xcc>
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	b91b      	cbnz	r3, 8014948 <__hexnan+0xe0>
 8014940:	4547      	cmp	r7, r8
 8014942:	d128      	bne.n	8014996 <__hexnan+0x12e>
 8014944:	2301      	movs	r3, #1
 8014946:	603b      	str	r3, [r7, #0]
 8014948:	2005      	movs	r0, #5
 801494a:	b007      	add	sp, #28
 801494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014950:	3501      	adds	r5, #1
 8014952:	2d08      	cmp	r5, #8
 8014954:	f10b 0b01 	add.w	fp, fp, #1
 8014958:	dd06      	ble.n	8014968 <__hexnan+0x100>
 801495a:	4544      	cmp	r4, r8
 801495c:	d9c1      	bls.n	80148e2 <__hexnan+0x7a>
 801495e:	2300      	movs	r3, #0
 8014960:	f844 3c04 	str.w	r3, [r4, #-4]
 8014964:	2501      	movs	r5, #1
 8014966:	3c04      	subs	r4, #4
 8014968:	6822      	ldr	r2, [r4, #0]
 801496a:	f000 000f 	and.w	r0, r0, #15
 801496e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014972:	6020      	str	r0, [r4, #0]
 8014974:	e7b5      	b.n	80148e2 <__hexnan+0x7a>
 8014976:	2508      	movs	r5, #8
 8014978:	e7b3      	b.n	80148e2 <__hexnan+0x7a>
 801497a:	9b01      	ldr	r3, [sp, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d0dd      	beq.n	801493c <__hexnan+0xd4>
 8014980:	f1c3 0320 	rsb	r3, r3, #32
 8014984:	f04f 32ff 	mov.w	r2, #4294967295
 8014988:	40da      	lsrs	r2, r3
 801498a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801498e:	4013      	ands	r3, r2
 8014990:	f846 3c04 	str.w	r3, [r6, #-4]
 8014994:	e7d2      	b.n	801493c <__hexnan+0xd4>
 8014996:	3f04      	subs	r7, #4
 8014998:	e7d0      	b.n	801493c <__hexnan+0xd4>
 801499a:	2004      	movs	r0, #4
 801499c:	e7d5      	b.n	801494a <__hexnan+0xe2>

0801499e <__ascii_mbtowc>:
 801499e:	b082      	sub	sp, #8
 80149a0:	b901      	cbnz	r1, 80149a4 <__ascii_mbtowc+0x6>
 80149a2:	a901      	add	r1, sp, #4
 80149a4:	b142      	cbz	r2, 80149b8 <__ascii_mbtowc+0x1a>
 80149a6:	b14b      	cbz	r3, 80149bc <__ascii_mbtowc+0x1e>
 80149a8:	7813      	ldrb	r3, [r2, #0]
 80149aa:	600b      	str	r3, [r1, #0]
 80149ac:	7812      	ldrb	r2, [r2, #0]
 80149ae:	1e10      	subs	r0, r2, #0
 80149b0:	bf18      	it	ne
 80149b2:	2001      	movne	r0, #1
 80149b4:	b002      	add	sp, #8
 80149b6:	4770      	bx	lr
 80149b8:	4610      	mov	r0, r2
 80149ba:	e7fb      	b.n	80149b4 <__ascii_mbtowc+0x16>
 80149bc:	f06f 0001 	mvn.w	r0, #1
 80149c0:	e7f8      	b.n	80149b4 <__ascii_mbtowc+0x16>

080149c2 <_realloc_r>:
 80149c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c6:	4680      	mov	r8, r0
 80149c8:	4615      	mov	r5, r2
 80149ca:	460c      	mov	r4, r1
 80149cc:	b921      	cbnz	r1, 80149d8 <_realloc_r+0x16>
 80149ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149d2:	4611      	mov	r1, r2
 80149d4:	f7fd be60 	b.w	8012698 <_malloc_r>
 80149d8:	b92a      	cbnz	r2, 80149e6 <_realloc_r+0x24>
 80149da:	f7fd fde9 	bl	80125b0 <_free_r>
 80149de:	2400      	movs	r4, #0
 80149e0:	4620      	mov	r0, r4
 80149e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e6:	f000 f840 	bl	8014a6a <_malloc_usable_size_r>
 80149ea:	4285      	cmp	r5, r0
 80149ec:	4606      	mov	r6, r0
 80149ee:	d802      	bhi.n	80149f6 <_realloc_r+0x34>
 80149f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80149f4:	d8f4      	bhi.n	80149e0 <_realloc_r+0x1e>
 80149f6:	4629      	mov	r1, r5
 80149f8:	4640      	mov	r0, r8
 80149fa:	f7fd fe4d 	bl	8012698 <_malloc_r>
 80149fe:	4607      	mov	r7, r0
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d0ec      	beq.n	80149de <_realloc_r+0x1c>
 8014a04:	42b5      	cmp	r5, r6
 8014a06:	462a      	mov	r2, r5
 8014a08:	4621      	mov	r1, r4
 8014a0a:	bf28      	it	cs
 8014a0c:	4632      	movcs	r2, r6
 8014a0e:	f7ff fc45 	bl	801429c <memcpy>
 8014a12:	4621      	mov	r1, r4
 8014a14:	4640      	mov	r0, r8
 8014a16:	f7fd fdcb 	bl	80125b0 <_free_r>
 8014a1a:	463c      	mov	r4, r7
 8014a1c:	e7e0      	b.n	80149e0 <_realloc_r+0x1e>

08014a1e <__ascii_wctomb>:
 8014a1e:	4603      	mov	r3, r0
 8014a20:	4608      	mov	r0, r1
 8014a22:	b141      	cbz	r1, 8014a36 <__ascii_wctomb+0x18>
 8014a24:	2aff      	cmp	r2, #255	@ 0xff
 8014a26:	d904      	bls.n	8014a32 <__ascii_wctomb+0x14>
 8014a28:	228a      	movs	r2, #138	@ 0x8a
 8014a2a:	601a      	str	r2, [r3, #0]
 8014a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a30:	4770      	bx	lr
 8014a32:	700a      	strb	r2, [r1, #0]
 8014a34:	2001      	movs	r0, #1
 8014a36:	4770      	bx	lr

08014a38 <fiprintf>:
 8014a38:	b40e      	push	{r1, r2, r3}
 8014a3a:	b503      	push	{r0, r1, lr}
 8014a3c:	4601      	mov	r1, r0
 8014a3e:	ab03      	add	r3, sp, #12
 8014a40:	4805      	ldr	r0, [pc, #20]	@ (8014a58 <fiprintf+0x20>)
 8014a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a46:	6800      	ldr	r0, [r0, #0]
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	f000 f83f 	bl	8014acc <_vfiprintf_r>
 8014a4e:	b002      	add	sp, #8
 8014a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a54:	b003      	add	sp, #12
 8014a56:	4770      	bx	lr
 8014a58:	20000190 	.word	0x20000190

08014a5c <abort>:
 8014a5c:	b508      	push	{r3, lr}
 8014a5e:	2006      	movs	r0, #6
 8014a60:	f000 fa08 	bl	8014e74 <raise>
 8014a64:	2001      	movs	r0, #1
 8014a66:	f7ee f85f 	bl	8002b28 <_exit>

08014a6a <_malloc_usable_size_r>:
 8014a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a6e:	1f18      	subs	r0, r3, #4
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	bfbc      	itt	lt
 8014a74:	580b      	ldrlt	r3, [r1, r0]
 8014a76:	18c0      	addlt	r0, r0, r3
 8014a78:	4770      	bx	lr

08014a7a <__sfputc_r>:
 8014a7a:	6893      	ldr	r3, [r2, #8]
 8014a7c:	3b01      	subs	r3, #1
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	b410      	push	{r4}
 8014a82:	6093      	str	r3, [r2, #8]
 8014a84:	da08      	bge.n	8014a98 <__sfputc_r+0x1e>
 8014a86:	6994      	ldr	r4, [r2, #24]
 8014a88:	42a3      	cmp	r3, r4
 8014a8a:	db01      	blt.n	8014a90 <__sfputc_r+0x16>
 8014a8c:	290a      	cmp	r1, #10
 8014a8e:	d103      	bne.n	8014a98 <__sfputc_r+0x1e>
 8014a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a94:	f000 b932 	b.w	8014cfc <__swbuf_r>
 8014a98:	6813      	ldr	r3, [r2, #0]
 8014a9a:	1c58      	adds	r0, r3, #1
 8014a9c:	6010      	str	r0, [r2, #0]
 8014a9e:	7019      	strb	r1, [r3, #0]
 8014aa0:	4608      	mov	r0, r1
 8014aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <__sfputs_r>:
 8014aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aaa:	4606      	mov	r6, r0
 8014aac:	460f      	mov	r7, r1
 8014aae:	4614      	mov	r4, r2
 8014ab0:	18d5      	adds	r5, r2, r3
 8014ab2:	42ac      	cmp	r4, r5
 8014ab4:	d101      	bne.n	8014aba <__sfputs_r+0x12>
 8014ab6:	2000      	movs	r0, #0
 8014ab8:	e007      	b.n	8014aca <__sfputs_r+0x22>
 8014aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014abe:	463a      	mov	r2, r7
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	f7ff ffda 	bl	8014a7a <__sfputc_r>
 8014ac6:	1c43      	adds	r3, r0, #1
 8014ac8:	d1f3      	bne.n	8014ab2 <__sfputs_r+0xa>
 8014aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014acc <_vfiprintf_r>:
 8014acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad0:	460d      	mov	r5, r1
 8014ad2:	b09d      	sub	sp, #116	@ 0x74
 8014ad4:	4614      	mov	r4, r2
 8014ad6:	4698      	mov	r8, r3
 8014ad8:	4606      	mov	r6, r0
 8014ada:	b118      	cbz	r0, 8014ae4 <_vfiprintf_r+0x18>
 8014adc:	6a03      	ldr	r3, [r0, #32]
 8014ade:	b90b      	cbnz	r3, 8014ae4 <_vfiprintf_r+0x18>
 8014ae0:	f7fc fdf8 	bl	80116d4 <__sinit>
 8014ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ae6:	07d9      	lsls	r1, r3, #31
 8014ae8:	d405      	bmi.n	8014af6 <_vfiprintf_r+0x2a>
 8014aea:	89ab      	ldrh	r3, [r5, #12]
 8014aec:	059a      	lsls	r2, r3, #22
 8014aee:	d402      	bmi.n	8014af6 <_vfiprintf_r+0x2a>
 8014af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014af2:	f7fc ff06 	bl	8011902 <__retarget_lock_acquire_recursive>
 8014af6:	89ab      	ldrh	r3, [r5, #12]
 8014af8:	071b      	lsls	r3, r3, #28
 8014afa:	d501      	bpl.n	8014b00 <_vfiprintf_r+0x34>
 8014afc:	692b      	ldr	r3, [r5, #16]
 8014afe:	b99b      	cbnz	r3, 8014b28 <_vfiprintf_r+0x5c>
 8014b00:	4629      	mov	r1, r5
 8014b02:	4630      	mov	r0, r6
 8014b04:	f000 f938 	bl	8014d78 <__swsetup_r>
 8014b08:	b170      	cbz	r0, 8014b28 <_vfiprintf_r+0x5c>
 8014b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b0c:	07dc      	lsls	r4, r3, #31
 8014b0e:	d504      	bpl.n	8014b1a <_vfiprintf_r+0x4e>
 8014b10:	f04f 30ff 	mov.w	r0, #4294967295
 8014b14:	b01d      	add	sp, #116	@ 0x74
 8014b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1a:	89ab      	ldrh	r3, [r5, #12]
 8014b1c:	0598      	lsls	r0, r3, #22
 8014b1e:	d4f7      	bmi.n	8014b10 <_vfiprintf_r+0x44>
 8014b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b22:	f7fc feef 	bl	8011904 <__retarget_lock_release_recursive>
 8014b26:	e7f3      	b.n	8014b10 <_vfiprintf_r+0x44>
 8014b28:	2300      	movs	r3, #0
 8014b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b2c:	2320      	movs	r3, #32
 8014b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b36:	2330      	movs	r3, #48	@ 0x30
 8014b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ce8 <_vfiprintf_r+0x21c>
 8014b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b40:	f04f 0901 	mov.w	r9, #1
 8014b44:	4623      	mov	r3, r4
 8014b46:	469a      	mov	sl, r3
 8014b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b4c:	b10a      	cbz	r2, 8014b52 <_vfiprintf_r+0x86>
 8014b4e:	2a25      	cmp	r2, #37	@ 0x25
 8014b50:	d1f9      	bne.n	8014b46 <_vfiprintf_r+0x7a>
 8014b52:	ebba 0b04 	subs.w	fp, sl, r4
 8014b56:	d00b      	beq.n	8014b70 <_vfiprintf_r+0xa4>
 8014b58:	465b      	mov	r3, fp
 8014b5a:	4622      	mov	r2, r4
 8014b5c:	4629      	mov	r1, r5
 8014b5e:	4630      	mov	r0, r6
 8014b60:	f7ff ffa2 	bl	8014aa8 <__sfputs_r>
 8014b64:	3001      	adds	r0, #1
 8014b66:	f000 80a7 	beq.w	8014cb8 <_vfiprintf_r+0x1ec>
 8014b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b6c:	445a      	add	r2, fp
 8014b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b70:	f89a 3000 	ldrb.w	r3, [sl]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f000 809f 	beq.w	8014cb8 <_vfiprintf_r+0x1ec>
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b84:	f10a 0a01 	add.w	sl, sl, #1
 8014b88:	9304      	str	r3, [sp, #16]
 8014b8a:	9307      	str	r3, [sp, #28]
 8014b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b92:	4654      	mov	r4, sl
 8014b94:	2205      	movs	r2, #5
 8014b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b9a:	4853      	ldr	r0, [pc, #332]	@ (8014ce8 <_vfiprintf_r+0x21c>)
 8014b9c:	f7eb fb40 	bl	8000220 <memchr>
 8014ba0:	9a04      	ldr	r2, [sp, #16]
 8014ba2:	b9d8      	cbnz	r0, 8014bdc <_vfiprintf_r+0x110>
 8014ba4:	06d1      	lsls	r1, r2, #27
 8014ba6:	bf44      	itt	mi
 8014ba8:	2320      	movmi	r3, #32
 8014baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bae:	0713      	lsls	r3, r2, #28
 8014bb0:	bf44      	itt	mi
 8014bb2:	232b      	movmi	r3, #43	@ 0x2b
 8014bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8014bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bbe:	d015      	beq.n	8014bec <_vfiprintf_r+0x120>
 8014bc0:	9a07      	ldr	r2, [sp, #28]
 8014bc2:	4654      	mov	r4, sl
 8014bc4:	2000      	movs	r0, #0
 8014bc6:	f04f 0c0a 	mov.w	ip, #10
 8014bca:	4621      	mov	r1, r4
 8014bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bd0:	3b30      	subs	r3, #48	@ 0x30
 8014bd2:	2b09      	cmp	r3, #9
 8014bd4:	d94b      	bls.n	8014c6e <_vfiprintf_r+0x1a2>
 8014bd6:	b1b0      	cbz	r0, 8014c06 <_vfiprintf_r+0x13a>
 8014bd8:	9207      	str	r2, [sp, #28]
 8014bda:	e014      	b.n	8014c06 <_vfiprintf_r+0x13a>
 8014bdc:	eba0 0308 	sub.w	r3, r0, r8
 8014be0:	fa09 f303 	lsl.w	r3, r9, r3
 8014be4:	4313      	orrs	r3, r2
 8014be6:	9304      	str	r3, [sp, #16]
 8014be8:	46a2      	mov	sl, r4
 8014bea:	e7d2      	b.n	8014b92 <_vfiprintf_r+0xc6>
 8014bec:	9b03      	ldr	r3, [sp, #12]
 8014bee:	1d19      	adds	r1, r3, #4
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	9103      	str	r1, [sp, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	bfbb      	ittet	lt
 8014bf8:	425b      	neglt	r3, r3
 8014bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8014bfe:	9307      	strge	r3, [sp, #28]
 8014c00:	9307      	strlt	r3, [sp, #28]
 8014c02:	bfb8      	it	lt
 8014c04:	9204      	strlt	r2, [sp, #16]
 8014c06:	7823      	ldrb	r3, [r4, #0]
 8014c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c0a:	d10a      	bne.n	8014c22 <_vfiprintf_r+0x156>
 8014c0c:	7863      	ldrb	r3, [r4, #1]
 8014c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c10:	d132      	bne.n	8014c78 <_vfiprintf_r+0x1ac>
 8014c12:	9b03      	ldr	r3, [sp, #12]
 8014c14:	1d1a      	adds	r2, r3, #4
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	9203      	str	r2, [sp, #12]
 8014c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c1e:	3402      	adds	r4, #2
 8014c20:	9305      	str	r3, [sp, #20]
 8014c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014cf8 <_vfiprintf_r+0x22c>
 8014c26:	7821      	ldrb	r1, [r4, #0]
 8014c28:	2203      	movs	r2, #3
 8014c2a:	4650      	mov	r0, sl
 8014c2c:	f7eb faf8 	bl	8000220 <memchr>
 8014c30:	b138      	cbz	r0, 8014c42 <_vfiprintf_r+0x176>
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	eba0 000a 	sub.w	r0, r0, sl
 8014c38:	2240      	movs	r2, #64	@ 0x40
 8014c3a:	4082      	lsls	r2, r0
 8014c3c:	4313      	orrs	r3, r2
 8014c3e:	3401      	adds	r4, #1
 8014c40:	9304      	str	r3, [sp, #16]
 8014c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c46:	4829      	ldr	r0, [pc, #164]	@ (8014cec <_vfiprintf_r+0x220>)
 8014c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c4c:	2206      	movs	r2, #6
 8014c4e:	f7eb fae7 	bl	8000220 <memchr>
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d03f      	beq.n	8014cd6 <_vfiprintf_r+0x20a>
 8014c56:	4b26      	ldr	r3, [pc, #152]	@ (8014cf0 <_vfiprintf_r+0x224>)
 8014c58:	bb1b      	cbnz	r3, 8014ca2 <_vfiprintf_r+0x1d6>
 8014c5a:	9b03      	ldr	r3, [sp, #12]
 8014c5c:	3307      	adds	r3, #7
 8014c5e:	f023 0307 	bic.w	r3, r3, #7
 8014c62:	3308      	adds	r3, #8
 8014c64:	9303      	str	r3, [sp, #12]
 8014c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c68:	443b      	add	r3, r7
 8014c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c6c:	e76a      	b.n	8014b44 <_vfiprintf_r+0x78>
 8014c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c72:	460c      	mov	r4, r1
 8014c74:	2001      	movs	r0, #1
 8014c76:	e7a8      	b.n	8014bca <_vfiprintf_r+0xfe>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	3401      	adds	r4, #1
 8014c7c:	9305      	str	r3, [sp, #20]
 8014c7e:	4619      	mov	r1, r3
 8014c80:	f04f 0c0a 	mov.w	ip, #10
 8014c84:	4620      	mov	r0, r4
 8014c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c8a:	3a30      	subs	r2, #48	@ 0x30
 8014c8c:	2a09      	cmp	r2, #9
 8014c8e:	d903      	bls.n	8014c98 <_vfiprintf_r+0x1cc>
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d0c6      	beq.n	8014c22 <_vfiprintf_r+0x156>
 8014c94:	9105      	str	r1, [sp, #20]
 8014c96:	e7c4      	b.n	8014c22 <_vfiprintf_r+0x156>
 8014c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e7f0      	b.n	8014c84 <_vfiprintf_r+0x1b8>
 8014ca2:	ab03      	add	r3, sp, #12
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	462a      	mov	r2, r5
 8014ca8:	4b12      	ldr	r3, [pc, #72]	@ (8014cf4 <_vfiprintf_r+0x228>)
 8014caa:	a904      	add	r1, sp, #16
 8014cac:	4630      	mov	r0, r6
 8014cae:	f7fb feb9 	bl	8010a24 <_printf_float>
 8014cb2:	4607      	mov	r7, r0
 8014cb4:	1c78      	adds	r0, r7, #1
 8014cb6:	d1d6      	bne.n	8014c66 <_vfiprintf_r+0x19a>
 8014cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014cba:	07d9      	lsls	r1, r3, #31
 8014cbc:	d405      	bmi.n	8014cca <_vfiprintf_r+0x1fe>
 8014cbe:	89ab      	ldrh	r3, [r5, #12]
 8014cc0:	059a      	lsls	r2, r3, #22
 8014cc2:	d402      	bmi.n	8014cca <_vfiprintf_r+0x1fe>
 8014cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014cc6:	f7fc fe1d 	bl	8011904 <__retarget_lock_release_recursive>
 8014cca:	89ab      	ldrh	r3, [r5, #12]
 8014ccc:	065b      	lsls	r3, r3, #25
 8014cce:	f53f af1f 	bmi.w	8014b10 <_vfiprintf_r+0x44>
 8014cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cd4:	e71e      	b.n	8014b14 <_vfiprintf_r+0x48>
 8014cd6:	ab03      	add	r3, sp, #12
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	462a      	mov	r2, r5
 8014cdc:	4b05      	ldr	r3, [pc, #20]	@ (8014cf4 <_vfiprintf_r+0x228>)
 8014cde:	a904      	add	r1, sp, #16
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7fc f937 	bl	8010f54 <_printf_i>
 8014ce6:	e7e4      	b.n	8014cb2 <_vfiprintf_r+0x1e6>
 8014ce8:	08015ee9 	.word	0x08015ee9
 8014cec:	08015ef3 	.word	0x08015ef3
 8014cf0:	08010a25 	.word	0x08010a25
 8014cf4:	08014aa9 	.word	0x08014aa9
 8014cf8:	08015eef 	.word	0x08015eef

08014cfc <__swbuf_r>:
 8014cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cfe:	460e      	mov	r6, r1
 8014d00:	4614      	mov	r4, r2
 8014d02:	4605      	mov	r5, r0
 8014d04:	b118      	cbz	r0, 8014d0e <__swbuf_r+0x12>
 8014d06:	6a03      	ldr	r3, [r0, #32]
 8014d08:	b90b      	cbnz	r3, 8014d0e <__swbuf_r+0x12>
 8014d0a:	f7fc fce3 	bl	80116d4 <__sinit>
 8014d0e:	69a3      	ldr	r3, [r4, #24]
 8014d10:	60a3      	str	r3, [r4, #8]
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	071a      	lsls	r2, r3, #28
 8014d16:	d501      	bpl.n	8014d1c <__swbuf_r+0x20>
 8014d18:	6923      	ldr	r3, [r4, #16]
 8014d1a:	b943      	cbnz	r3, 8014d2e <__swbuf_r+0x32>
 8014d1c:	4621      	mov	r1, r4
 8014d1e:	4628      	mov	r0, r5
 8014d20:	f000 f82a 	bl	8014d78 <__swsetup_r>
 8014d24:	b118      	cbz	r0, 8014d2e <__swbuf_r+0x32>
 8014d26:	f04f 37ff 	mov.w	r7, #4294967295
 8014d2a:	4638      	mov	r0, r7
 8014d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d2e:	6823      	ldr	r3, [r4, #0]
 8014d30:	6922      	ldr	r2, [r4, #16]
 8014d32:	1a98      	subs	r0, r3, r2
 8014d34:	6963      	ldr	r3, [r4, #20]
 8014d36:	b2f6      	uxtb	r6, r6
 8014d38:	4283      	cmp	r3, r0
 8014d3a:	4637      	mov	r7, r6
 8014d3c:	dc05      	bgt.n	8014d4a <__swbuf_r+0x4e>
 8014d3e:	4621      	mov	r1, r4
 8014d40:	4628      	mov	r0, r5
 8014d42:	f7ff fa47 	bl	80141d4 <_fflush_r>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d1ed      	bne.n	8014d26 <__swbuf_r+0x2a>
 8014d4a:	68a3      	ldr	r3, [r4, #8]
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	60a3      	str	r3, [r4, #8]
 8014d50:	6823      	ldr	r3, [r4, #0]
 8014d52:	1c5a      	adds	r2, r3, #1
 8014d54:	6022      	str	r2, [r4, #0]
 8014d56:	701e      	strb	r6, [r3, #0]
 8014d58:	6962      	ldr	r2, [r4, #20]
 8014d5a:	1c43      	adds	r3, r0, #1
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d004      	beq.n	8014d6a <__swbuf_r+0x6e>
 8014d60:	89a3      	ldrh	r3, [r4, #12]
 8014d62:	07db      	lsls	r3, r3, #31
 8014d64:	d5e1      	bpl.n	8014d2a <__swbuf_r+0x2e>
 8014d66:	2e0a      	cmp	r6, #10
 8014d68:	d1df      	bne.n	8014d2a <__swbuf_r+0x2e>
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	f7ff fa31 	bl	80141d4 <_fflush_r>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	d0d9      	beq.n	8014d2a <__swbuf_r+0x2e>
 8014d76:	e7d6      	b.n	8014d26 <__swbuf_r+0x2a>

08014d78 <__swsetup_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4b29      	ldr	r3, [pc, #164]	@ (8014e20 <__swsetup_r+0xa8>)
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	6818      	ldr	r0, [r3, #0]
 8014d80:	460c      	mov	r4, r1
 8014d82:	b118      	cbz	r0, 8014d8c <__swsetup_r+0x14>
 8014d84:	6a03      	ldr	r3, [r0, #32]
 8014d86:	b90b      	cbnz	r3, 8014d8c <__swsetup_r+0x14>
 8014d88:	f7fc fca4 	bl	80116d4 <__sinit>
 8014d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d90:	0719      	lsls	r1, r3, #28
 8014d92:	d422      	bmi.n	8014dda <__swsetup_r+0x62>
 8014d94:	06da      	lsls	r2, r3, #27
 8014d96:	d407      	bmi.n	8014da8 <__swsetup_r+0x30>
 8014d98:	2209      	movs	r2, #9
 8014d9a:	602a      	str	r2, [r5, #0]
 8014d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014da0:	81a3      	strh	r3, [r4, #12]
 8014da2:	f04f 30ff 	mov.w	r0, #4294967295
 8014da6:	e033      	b.n	8014e10 <__swsetup_r+0x98>
 8014da8:	0758      	lsls	r0, r3, #29
 8014daa:	d512      	bpl.n	8014dd2 <__swsetup_r+0x5a>
 8014dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014dae:	b141      	cbz	r1, 8014dc2 <__swsetup_r+0x4a>
 8014db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014db4:	4299      	cmp	r1, r3
 8014db6:	d002      	beq.n	8014dbe <__swsetup_r+0x46>
 8014db8:	4628      	mov	r0, r5
 8014dba:	f7fd fbf9 	bl	80125b0 <_free_r>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014dc8:	81a3      	strh	r3, [r4, #12]
 8014dca:	2300      	movs	r3, #0
 8014dcc:	6063      	str	r3, [r4, #4]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	6023      	str	r3, [r4, #0]
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f043 0308 	orr.w	r3, r3, #8
 8014dd8:	81a3      	strh	r3, [r4, #12]
 8014dda:	6923      	ldr	r3, [r4, #16]
 8014ddc:	b94b      	cbnz	r3, 8014df2 <__swsetup_r+0x7a>
 8014dde:	89a3      	ldrh	r3, [r4, #12]
 8014de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014de8:	d003      	beq.n	8014df2 <__swsetup_r+0x7a>
 8014dea:	4621      	mov	r1, r4
 8014dec:	4628      	mov	r0, r5
 8014dee:	f000 f883 	bl	8014ef8 <__smakebuf_r>
 8014df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014df6:	f013 0201 	ands.w	r2, r3, #1
 8014dfa:	d00a      	beq.n	8014e12 <__swsetup_r+0x9a>
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	60a2      	str	r2, [r4, #8]
 8014e00:	6962      	ldr	r2, [r4, #20]
 8014e02:	4252      	negs	r2, r2
 8014e04:	61a2      	str	r2, [r4, #24]
 8014e06:	6922      	ldr	r2, [r4, #16]
 8014e08:	b942      	cbnz	r2, 8014e1c <__swsetup_r+0xa4>
 8014e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e0e:	d1c5      	bne.n	8014d9c <__swsetup_r+0x24>
 8014e10:	bd38      	pop	{r3, r4, r5, pc}
 8014e12:	0799      	lsls	r1, r3, #30
 8014e14:	bf58      	it	pl
 8014e16:	6962      	ldrpl	r2, [r4, #20]
 8014e18:	60a2      	str	r2, [r4, #8]
 8014e1a:	e7f4      	b.n	8014e06 <__swsetup_r+0x8e>
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	e7f7      	b.n	8014e10 <__swsetup_r+0x98>
 8014e20:	20000190 	.word	0x20000190

08014e24 <_raise_r>:
 8014e24:	291f      	cmp	r1, #31
 8014e26:	b538      	push	{r3, r4, r5, lr}
 8014e28:	4605      	mov	r5, r0
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	d904      	bls.n	8014e38 <_raise_r+0x14>
 8014e2e:	2316      	movs	r3, #22
 8014e30:	6003      	str	r3, [r0, #0]
 8014e32:	f04f 30ff 	mov.w	r0, #4294967295
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
 8014e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014e3a:	b112      	cbz	r2, 8014e42 <_raise_r+0x1e>
 8014e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e40:	b94b      	cbnz	r3, 8014e56 <_raise_r+0x32>
 8014e42:	4628      	mov	r0, r5
 8014e44:	f000 f830 	bl	8014ea8 <_getpid_r>
 8014e48:	4622      	mov	r2, r4
 8014e4a:	4601      	mov	r1, r0
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e52:	f000 b817 	b.w	8014e84 <_kill_r>
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d00a      	beq.n	8014e70 <_raise_r+0x4c>
 8014e5a:	1c59      	adds	r1, r3, #1
 8014e5c:	d103      	bne.n	8014e66 <_raise_r+0x42>
 8014e5e:	2316      	movs	r3, #22
 8014e60:	6003      	str	r3, [r0, #0]
 8014e62:	2001      	movs	r0, #1
 8014e64:	e7e7      	b.n	8014e36 <_raise_r+0x12>
 8014e66:	2100      	movs	r1, #0
 8014e68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	4798      	blx	r3
 8014e70:	2000      	movs	r0, #0
 8014e72:	e7e0      	b.n	8014e36 <_raise_r+0x12>

08014e74 <raise>:
 8014e74:	4b02      	ldr	r3, [pc, #8]	@ (8014e80 <raise+0xc>)
 8014e76:	4601      	mov	r1, r0
 8014e78:	6818      	ldr	r0, [r3, #0]
 8014e7a:	f7ff bfd3 	b.w	8014e24 <_raise_r>
 8014e7e:	bf00      	nop
 8014e80:	20000190 	.word	0x20000190

08014e84 <_kill_r>:
 8014e84:	b538      	push	{r3, r4, r5, lr}
 8014e86:	4d07      	ldr	r5, [pc, #28]	@ (8014ea4 <_kill_r+0x20>)
 8014e88:	2300      	movs	r3, #0
 8014e8a:	4604      	mov	r4, r0
 8014e8c:	4608      	mov	r0, r1
 8014e8e:	4611      	mov	r1, r2
 8014e90:	602b      	str	r3, [r5, #0]
 8014e92:	f7ed fe39 	bl	8002b08 <_kill>
 8014e96:	1c43      	adds	r3, r0, #1
 8014e98:	d102      	bne.n	8014ea0 <_kill_r+0x1c>
 8014e9a:	682b      	ldr	r3, [r5, #0]
 8014e9c:	b103      	cbz	r3, 8014ea0 <_kill_r+0x1c>
 8014e9e:	6023      	str	r3, [r4, #0]
 8014ea0:	bd38      	pop	{r3, r4, r5, pc}
 8014ea2:	bf00      	nop
 8014ea4:	200049cc 	.word	0x200049cc

08014ea8 <_getpid_r>:
 8014ea8:	f7ed be26 	b.w	8002af8 <_getpid>

08014eac <__swhatbuf_r>:
 8014eac:	b570      	push	{r4, r5, r6, lr}
 8014eae:	460c      	mov	r4, r1
 8014eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	b096      	sub	sp, #88	@ 0x58
 8014eb8:	4615      	mov	r5, r2
 8014eba:	461e      	mov	r6, r3
 8014ebc:	da0d      	bge.n	8014eda <__swhatbuf_r+0x2e>
 8014ebe:	89a3      	ldrh	r3, [r4, #12]
 8014ec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014ec4:	f04f 0100 	mov.w	r1, #0
 8014ec8:	bf14      	ite	ne
 8014eca:	2340      	movne	r3, #64	@ 0x40
 8014ecc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	6031      	str	r1, [r6, #0]
 8014ed4:	602b      	str	r3, [r5, #0]
 8014ed6:	b016      	add	sp, #88	@ 0x58
 8014ed8:	bd70      	pop	{r4, r5, r6, pc}
 8014eda:	466a      	mov	r2, sp
 8014edc:	f000 f848 	bl	8014f70 <_fstat_r>
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	dbec      	blt.n	8014ebe <__swhatbuf_r+0x12>
 8014ee4:	9901      	ldr	r1, [sp, #4]
 8014ee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014eea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014eee:	4259      	negs	r1, r3
 8014ef0:	4159      	adcs	r1, r3
 8014ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ef6:	e7eb      	b.n	8014ed0 <__swhatbuf_r+0x24>

08014ef8 <__smakebuf_r>:
 8014ef8:	898b      	ldrh	r3, [r1, #12]
 8014efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014efc:	079d      	lsls	r5, r3, #30
 8014efe:	4606      	mov	r6, r0
 8014f00:	460c      	mov	r4, r1
 8014f02:	d507      	bpl.n	8014f14 <__smakebuf_r+0x1c>
 8014f04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014f08:	6023      	str	r3, [r4, #0]
 8014f0a:	6123      	str	r3, [r4, #16]
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	6163      	str	r3, [r4, #20]
 8014f10:	b003      	add	sp, #12
 8014f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f14:	ab01      	add	r3, sp, #4
 8014f16:	466a      	mov	r2, sp
 8014f18:	f7ff ffc8 	bl	8014eac <__swhatbuf_r>
 8014f1c:	9f00      	ldr	r7, [sp, #0]
 8014f1e:	4605      	mov	r5, r0
 8014f20:	4639      	mov	r1, r7
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7fd fbb8 	bl	8012698 <_malloc_r>
 8014f28:	b948      	cbnz	r0, 8014f3e <__smakebuf_r+0x46>
 8014f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f2e:	059a      	lsls	r2, r3, #22
 8014f30:	d4ee      	bmi.n	8014f10 <__smakebuf_r+0x18>
 8014f32:	f023 0303 	bic.w	r3, r3, #3
 8014f36:	f043 0302 	orr.w	r3, r3, #2
 8014f3a:	81a3      	strh	r3, [r4, #12]
 8014f3c:	e7e2      	b.n	8014f04 <__smakebuf_r+0xc>
 8014f3e:	89a3      	ldrh	r3, [r4, #12]
 8014f40:	6020      	str	r0, [r4, #0]
 8014f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f46:	81a3      	strh	r3, [r4, #12]
 8014f48:	9b01      	ldr	r3, [sp, #4]
 8014f4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014f4e:	b15b      	cbz	r3, 8014f68 <__smakebuf_r+0x70>
 8014f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f54:	4630      	mov	r0, r6
 8014f56:	f000 f81d 	bl	8014f94 <_isatty_r>
 8014f5a:	b128      	cbz	r0, 8014f68 <__smakebuf_r+0x70>
 8014f5c:	89a3      	ldrh	r3, [r4, #12]
 8014f5e:	f023 0303 	bic.w	r3, r3, #3
 8014f62:	f043 0301 	orr.w	r3, r3, #1
 8014f66:	81a3      	strh	r3, [r4, #12]
 8014f68:	89a3      	ldrh	r3, [r4, #12]
 8014f6a:	431d      	orrs	r5, r3
 8014f6c:	81a5      	strh	r5, [r4, #12]
 8014f6e:	e7cf      	b.n	8014f10 <__smakebuf_r+0x18>

08014f70 <_fstat_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	4d07      	ldr	r5, [pc, #28]	@ (8014f90 <_fstat_r+0x20>)
 8014f74:	2300      	movs	r3, #0
 8014f76:	4604      	mov	r4, r0
 8014f78:	4608      	mov	r0, r1
 8014f7a:	4611      	mov	r1, r2
 8014f7c:	602b      	str	r3, [r5, #0]
 8014f7e:	f7ed fe23 	bl	8002bc8 <_fstat>
 8014f82:	1c43      	adds	r3, r0, #1
 8014f84:	d102      	bne.n	8014f8c <_fstat_r+0x1c>
 8014f86:	682b      	ldr	r3, [r5, #0]
 8014f88:	b103      	cbz	r3, 8014f8c <_fstat_r+0x1c>
 8014f8a:	6023      	str	r3, [r4, #0]
 8014f8c:	bd38      	pop	{r3, r4, r5, pc}
 8014f8e:	bf00      	nop
 8014f90:	200049cc 	.word	0x200049cc

08014f94 <_isatty_r>:
 8014f94:	b538      	push	{r3, r4, r5, lr}
 8014f96:	4d06      	ldr	r5, [pc, #24]	@ (8014fb0 <_isatty_r+0x1c>)
 8014f98:	2300      	movs	r3, #0
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	4608      	mov	r0, r1
 8014f9e:	602b      	str	r3, [r5, #0]
 8014fa0:	f7ed fe22 	bl	8002be8 <_isatty>
 8014fa4:	1c43      	adds	r3, r0, #1
 8014fa6:	d102      	bne.n	8014fae <_isatty_r+0x1a>
 8014fa8:	682b      	ldr	r3, [r5, #0]
 8014faa:	b103      	cbz	r3, 8014fae <_isatty_r+0x1a>
 8014fac:	6023      	str	r3, [r4, #0]
 8014fae:	bd38      	pop	{r3, r4, r5, pc}
 8014fb0:	200049cc 	.word	0x200049cc

08014fb4 <cosf>:
 8014fb4:	ee10 3a10 	vmov	r3, s0
 8014fb8:	b507      	push	{r0, r1, r2, lr}
 8014fba:	4a1e      	ldr	r2, [pc, #120]	@ (8015034 <cosf+0x80>)
 8014fbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014fc0:	4293      	cmp	r3, r2
 8014fc2:	d806      	bhi.n	8014fd2 <cosf+0x1e>
 8014fc4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8015038 <cosf+0x84>
 8014fc8:	b003      	add	sp, #12
 8014fca:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fce:	f000 b87b 	b.w	80150c8 <__kernel_cosf>
 8014fd2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014fd6:	d304      	bcc.n	8014fe2 <cosf+0x2e>
 8014fd8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014fdc:	b003      	add	sp, #12
 8014fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fe2:	4668      	mov	r0, sp
 8014fe4:	f000 f910 	bl	8015208 <__ieee754_rem_pio2f>
 8014fe8:	f000 0003 	and.w	r0, r0, #3
 8014fec:	2801      	cmp	r0, #1
 8014fee:	d009      	beq.n	8015004 <cosf+0x50>
 8014ff0:	2802      	cmp	r0, #2
 8014ff2:	d010      	beq.n	8015016 <cosf+0x62>
 8014ff4:	b9b0      	cbnz	r0, 8015024 <cosf+0x70>
 8014ff6:	eddd 0a01 	vldr	s1, [sp, #4]
 8014ffa:	ed9d 0a00 	vldr	s0, [sp]
 8014ffe:	f000 f863 	bl	80150c8 <__kernel_cosf>
 8015002:	e7eb      	b.n	8014fdc <cosf+0x28>
 8015004:	eddd 0a01 	vldr	s1, [sp, #4]
 8015008:	ed9d 0a00 	vldr	s0, [sp]
 801500c:	f000 f8b4 	bl	8015178 <__kernel_sinf>
 8015010:	eeb1 0a40 	vneg.f32	s0, s0
 8015014:	e7e2      	b.n	8014fdc <cosf+0x28>
 8015016:	eddd 0a01 	vldr	s1, [sp, #4]
 801501a:	ed9d 0a00 	vldr	s0, [sp]
 801501e:	f000 f853 	bl	80150c8 <__kernel_cosf>
 8015022:	e7f5      	b.n	8015010 <cosf+0x5c>
 8015024:	eddd 0a01 	vldr	s1, [sp, #4]
 8015028:	ed9d 0a00 	vldr	s0, [sp]
 801502c:	2001      	movs	r0, #1
 801502e:	f000 f8a3 	bl	8015178 <__kernel_sinf>
 8015032:	e7d3      	b.n	8014fdc <cosf+0x28>
 8015034:	3f490fd8 	.word	0x3f490fd8
 8015038:	00000000 	.word	0x00000000

0801503c <sinf>:
 801503c:	ee10 3a10 	vmov	r3, s0
 8015040:	b507      	push	{r0, r1, r2, lr}
 8015042:	4a1f      	ldr	r2, [pc, #124]	@ (80150c0 <sinf+0x84>)
 8015044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015048:	4293      	cmp	r3, r2
 801504a:	d807      	bhi.n	801505c <sinf+0x20>
 801504c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80150c4 <sinf+0x88>
 8015050:	2000      	movs	r0, #0
 8015052:	b003      	add	sp, #12
 8015054:	f85d eb04 	ldr.w	lr, [sp], #4
 8015058:	f000 b88e 	b.w	8015178 <__kernel_sinf>
 801505c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015060:	d304      	bcc.n	801506c <sinf+0x30>
 8015062:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015066:	b003      	add	sp, #12
 8015068:	f85d fb04 	ldr.w	pc, [sp], #4
 801506c:	4668      	mov	r0, sp
 801506e:	f000 f8cb 	bl	8015208 <__ieee754_rem_pio2f>
 8015072:	f000 0003 	and.w	r0, r0, #3
 8015076:	2801      	cmp	r0, #1
 8015078:	d00a      	beq.n	8015090 <sinf+0x54>
 801507a:	2802      	cmp	r0, #2
 801507c:	d00f      	beq.n	801509e <sinf+0x62>
 801507e:	b9c0      	cbnz	r0, 80150b2 <sinf+0x76>
 8015080:	eddd 0a01 	vldr	s1, [sp, #4]
 8015084:	ed9d 0a00 	vldr	s0, [sp]
 8015088:	2001      	movs	r0, #1
 801508a:	f000 f875 	bl	8015178 <__kernel_sinf>
 801508e:	e7ea      	b.n	8015066 <sinf+0x2a>
 8015090:	eddd 0a01 	vldr	s1, [sp, #4]
 8015094:	ed9d 0a00 	vldr	s0, [sp]
 8015098:	f000 f816 	bl	80150c8 <__kernel_cosf>
 801509c:	e7e3      	b.n	8015066 <sinf+0x2a>
 801509e:	eddd 0a01 	vldr	s1, [sp, #4]
 80150a2:	ed9d 0a00 	vldr	s0, [sp]
 80150a6:	2001      	movs	r0, #1
 80150a8:	f000 f866 	bl	8015178 <__kernel_sinf>
 80150ac:	eeb1 0a40 	vneg.f32	s0, s0
 80150b0:	e7d9      	b.n	8015066 <sinf+0x2a>
 80150b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80150b6:	ed9d 0a00 	vldr	s0, [sp]
 80150ba:	f000 f805 	bl	80150c8 <__kernel_cosf>
 80150be:	e7f5      	b.n	80150ac <sinf+0x70>
 80150c0:	3f490fd8 	.word	0x3f490fd8
 80150c4:	00000000 	.word	0x00000000

080150c8 <__kernel_cosf>:
 80150c8:	ee10 3a10 	vmov	r3, s0
 80150cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80150d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80150d4:	eef0 6a40 	vmov.f32	s13, s0
 80150d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150dc:	d204      	bcs.n	80150e8 <__kernel_cosf+0x20>
 80150de:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80150e2:	ee17 2a90 	vmov	r2, s15
 80150e6:	b342      	cbz	r2, 801513a <__kernel_cosf+0x72>
 80150e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80150ec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8015158 <__kernel_cosf+0x90>
 80150f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801515c <__kernel_cosf+0x94>
 80150f4:	4a1a      	ldr	r2, [pc, #104]	@ (8015160 <__kernel_cosf+0x98>)
 80150f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80150fa:	4293      	cmp	r3, r2
 80150fc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015164 <__kernel_cosf+0x9c>
 8015100:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015104:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8015168 <__kernel_cosf+0xa0>
 8015108:	eea7 6a87 	vfma.f32	s12, s15, s14
 801510c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801516c <__kernel_cosf+0xa4>
 8015110:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015114:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8015170 <__kernel_cosf+0xa8>
 8015118:	eea7 6a87 	vfma.f32	s12, s15, s14
 801511c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8015120:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015124:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015128:	eee7 0a06 	vfma.f32	s1, s14, s12
 801512c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015130:	d804      	bhi.n	801513c <__kernel_cosf+0x74>
 8015132:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015136:	ee30 0a67 	vsub.f32	s0, s0, s15
 801513a:	4770      	bx	lr
 801513c:	4a0d      	ldr	r2, [pc, #52]	@ (8015174 <__kernel_cosf+0xac>)
 801513e:	4293      	cmp	r3, r2
 8015140:	bf9a      	itte	ls
 8015142:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8015146:	ee07 3a10 	vmovls	s14, r3
 801514a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801514e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015156:	e7ec      	b.n	8015132 <__kernel_cosf+0x6a>
 8015158:	ad47d74e 	.word	0xad47d74e
 801515c:	310f74f6 	.word	0x310f74f6
 8015160:	3e999999 	.word	0x3e999999
 8015164:	b493f27c 	.word	0xb493f27c
 8015168:	37d00d01 	.word	0x37d00d01
 801516c:	bab60b61 	.word	0xbab60b61
 8015170:	3d2aaaab 	.word	0x3d2aaaab
 8015174:	3f480000 	.word	0x3f480000

08015178 <__kernel_sinf>:
 8015178:	ee10 3a10 	vmov	r3, s0
 801517c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015180:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015184:	d204      	bcs.n	8015190 <__kernel_sinf+0x18>
 8015186:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801518a:	ee17 3a90 	vmov	r3, s15
 801518e:	b35b      	cbz	r3, 80151e8 <__kernel_sinf+0x70>
 8015190:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015194:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80151ec <__kernel_sinf+0x74>
 8015198:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80151f0 <__kernel_sinf+0x78>
 801519c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80151a0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80151f4 <__kernel_sinf+0x7c>
 80151a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80151a8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80151f8 <__kernel_sinf+0x80>
 80151ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80151b0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80151fc <__kernel_sinf+0x84>
 80151b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80151b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80151bc:	b930      	cbnz	r0, 80151cc <__kernel_sinf+0x54>
 80151be:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8015200 <__kernel_sinf+0x88>
 80151c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80151c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80151ca:	4770      	bx	lr
 80151cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80151d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80151d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80151d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80151dc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8015204 <__kernel_sinf+0x8c>
 80151e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80151e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80151e8:	4770      	bx	lr
 80151ea:	bf00      	nop
 80151ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80151f0:	b2d72f34 	.word	0xb2d72f34
 80151f4:	3638ef1b 	.word	0x3638ef1b
 80151f8:	b9500d01 	.word	0xb9500d01
 80151fc:	3c088889 	.word	0x3c088889
 8015200:	be2aaaab 	.word	0xbe2aaaab
 8015204:	3e2aaaab 	.word	0x3e2aaaab

08015208 <__ieee754_rem_pio2f>:
 8015208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801520a:	ee10 6a10 	vmov	r6, s0
 801520e:	4b88      	ldr	r3, [pc, #544]	@ (8015430 <__ieee754_rem_pio2f+0x228>)
 8015210:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8015214:	429d      	cmp	r5, r3
 8015216:	b087      	sub	sp, #28
 8015218:	4604      	mov	r4, r0
 801521a:	d805      	bhi.n	8015228 <__ieee754_rem_pio2f+0x20>
 801521c:	2300      	movs	r3, #0
 801521e:	ed80 0a00 	vstr	s0, [r0]
 8015222:	6043      	str	r3, [r0, #4]
 8015224:	2000      	movs	r0, #0
 8015226:	e022      	b.n	801526e <__ieee754_rem_pio2f+0x66>
 8015228:	4b82      	ldr	r3, [pc, #520]	@ (8015434 <__ieee754_rem_pio2f+0x22c>)
 801522a:	429d      	cmp	r5, r3
 801522c:	d83a      	bhi.n	80152a4 <__ieee754_rem_pio2f+0x9c>
 801522e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8015232:	2e00      	cmp	r6, #0
 8015234:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8015438 <__ieee754_rem_pio2f+0x230>
 8015238:	4a80      	ldr	r2, [pc, #512]	@ (801543c <__ieee754_rem_pio2f+0x234>)
 801523a:	f023 030f 	bic.w	r3, r3, #15
 801523e:	dd18      	ble.n	8015272 <__ieee754_rem_pio2f+0x6a>
 8015240:	4293      	cmp	r3, r2
 8015242:	ee70 7a47 	vsub.f32	s15, s0, s14
 8015246:	bf09      	itett	eq
 8015248:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8015440 <__ieee754_rem_pio2f+0x238>
 801524c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8015444 <__ieee754_rem_pio2f+0x23c>
 8015250:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8015448 <__ieee754_rem_pio2f+0x240>
 8015254:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8015258:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801525c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015260:	ed80 7a00 	vstr	s14, [r0]
 8015264:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015268:	edc0 7a01 	vstr	s15, [r0, #4]
 801526c:	2001      	movs	r0, #1
 801526e:	b007      	add	sp, #28
 8015270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015272:	4293      	cmp	r3, r2
 8015274:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015278:	bf09      	itett	eq
 801527a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8015440 <__ieee754_rem_pio2f+0x238>
 801527e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8015444 <__ieee754_rem_pio2f+0x23c>
 8015282:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8015448 <__ieee754_rem_pio2f+0x240>
 8015286:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801528a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801528e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015292:	ed80 7a00 	vstr	s14, [r0]
 8015296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801529a:	edc0 7a01 	vstr	s15, [r0, #4]
 801529e:	f04f 30ff 	mov.w	r0, #4294967295
 80152a2:	e7e4      	b.n	801526e <__ieee754_rem_pio2f+0x66>
 80152a4:	4b69      	ldr	r3, [pc, #420]	@ (801544c <__ieee754_rem_pio2f+0x244>)
 80152a6:	429d      	cmp	r5, r3
 80152a8:	d873      	bhi.n	8015392 <__ieee754_rem_pio2f+0x18a>
 80152aa:	f000 f8dd 	bl	8015468 <fabsf>
 80152ae:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8015450 <__ieee754_rem_pio2f+0x248>
 80152b2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80152b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80152ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80152be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80152c2:	ee17 0a90 	vmov	r0, s15
 80152c6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8015438 <__ieee754_rem_pio2f+0x230>
 80152ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 80152ce:	281f      	cmp	r0, #31
 80152d0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8015444 <__ieee754_rem_pio2f+0x23c>
 80152d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152d8:	eeb1 6a47 	vneg.f32	s12, s14
 80152dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80152e0:	ee16 1a90 	vmov	r1, s13
 80152e4:	dc09      	bgt.n	80152fa <__ieee754_rem_pio2f+0xf2>
 80152e6:	4a5b      	ldr	r2, [pc, #364]	@ (8015454 <__ieee754_rem_pio2f+0x24c>)
 80152e8:	1e47      	subs	r7, r0, #1
 80152ea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80152ee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80152f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d107      	bne.n	801530a <__ieee754_rem_pio2f+0x102>
 80152fa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80152fe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8015302:	2a08      	cmp	r2, #8
 8015304:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8015308:	dc14      	bgt.n	8015334 <__ieee754_rem_pio2f+0x12c>
 801530a:	6021      	str	r1, [r4, #0]
 801530c:	ed94 7a00 	vldr	s14, [r4]
 8015310:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015314:	2e00      	cmp	r6, #0
 8015316:	ee30 0a67 	vsub.f32	s0, s0, s15
 801531a:	ed84 0a01 	vstr	s0, [r4, #4]
 801531e:	daa6      	bge.n	801526e <__ieee754_rem_pio2f+0x66>
 8015320:	eeb1 7a47 	vneg.f32	s14, s14
 8015324:	eeb1 0a40 	vneg.f32	s0, s0
 8015328:	ed84 7a00 	vstr	s14, [r4]
 801532c:	ed84 0a01 	vstr	s0, [r4, #4]
 8015330:	4240      	negs	r0, r0
 8015332:	e79c      	b.n	801526e <__ieee754_rem_pio2f+0x66>
 8015334:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8015440 <__ieee754_rem_pio2f+0x238>
 8015338:	eef0 6a40 	vmov.f32	s13, s0
 801533c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8015340:	ee70 7a66 	vsub.f32	s15, s0, s13
 8015344:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015348:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8015448 <__ieee754_rem_pio2f+0x240>
 801534c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8015350:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8015354:	ee15 2a90 	vmov	r2, s11
 8015358:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801535c:	1a5b      	subs	r3, r3, r1
 801535e:	2b19      	cmp	r3, #25
 8015360:	dc04      	bgt.n	801536c <__ieee754_rem_pio2f+0x164>
 8015362:	edc4 5a00 	vstr	s11, [r4]
 8015366:	eeb0 0a66 	vmov.f32	s0, s13
 801536a:	e7cf      	b.n	801530c <__ieee754_rem_pio2f+0x104>
 801536c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8015458 <__ieee754_rem_pio2f+0x250>
 8015370:	eeb0 0a66 	vmov.f32	s0, s13
 8015374:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015378:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801537c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801545c <__ieee754_rem_pio2f+0x254>
 8015380:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015384:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015388:	ee30 7a67 	vsub.f32	s14, s0, s15
 801538c:	ed84 7a00 	vstr	s14, [r4]
 8015390:	e7bc      	b.n	801530c <__ieee754_rem_pio2f+0x104>
 8015392:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8015396:	d306      	bcc.n	80153a6 <__ieee754_rem_pio2f+0x19e>
 8015398:	ee70 7a40 	vsub.f32	s15, s0, s0
 801539c:	edc0 7a01 	vstr	s15, [r0, #4]
 80153a0:	edc0 7a00 	vstr	s15, [r0]
 80153a4:	e73e      	b.n	8015224 <__ieee754_rem_pio2f+0x1c>
 80153a6:	15ea      	asrs	r2, r5, #23
 80153a8:	3a86      	subs	r2, #134	@ 0x86
 80153aa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80153ae:	ee07 3a90 	vmov	s15, r3
 80153b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80153b6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8015460 <__ieee754_rem_pio2f+0x258>
 80153ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153c2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80153c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80153ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80153ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153d6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80153da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80153de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80153e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e6:	edcd 7a05 	vstr	s15, [sp, #20]
 80153ea:	d11e      	bne.n	801542a <__ieee754_rem_pio2f+0x222>
 80153ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80153f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f4:	bf0c      	ite	eq
 80153f6:	2301      	moveq	r3, #1
 80153f8:	2302      	movne	r3, #2
 80153fa:	491a      	ldr	r1, [pc, #104]	@ (8015464 <__ieee754_rem_pio2f+0x25c>)
 80153fc:	9101      	str	r1, [sp, #4]
 80153fe:	2102      	movs	r1, #2
 8015400:	9100      	str	r1, [sp, #0]
 8015402:	a803      	add	r0, sp, #12
 8015404:	4621      	mov	r1, r4
 8015406:	f000 f837 	bl	8015478 <__kernel_rem_pio2f>
 801540a:	2e00      	cmp	r6, #0
 801540c:	f6bf af2f 	bge.w	801526e <__ieee754_rem_pio2f+0x66>
 8015410:	edd4 7a00 	vldr	s15, [r4]
 8015414:	eef1 7a67 	vneg.f32	s15, s15
 8015418:	edc4 7a00 	vstr	s15, [r4]
 801541c:	edd4 7a01 	vldr	s15, [r4, #4]
 8015420:	eef1 7a67 	vneg.f32	s15, s15
 8015424:	edc4 7a01 	vstr	s15, [r4, #4]
 8015428:	e782      	b.n	8015330 <__ieee754_rem_pio2f+0x128>
 801542a:	2303      	movs	r3, #3
 801542c:	e7e5      	b.n	80153fa <__ieee754_rem_pio2f+0x1f2>
 801542e:	bf00      	nop
 8015430:	3f490fd8 	.word	0x3f490fd8
 8015434:	4016cbe3 	.word	0x4016cbe3
 8015438:	3fc90f80 	.word	0x3fc90f80
 801543c:	3fc90fd0 	.word	0x3fc90fd0
 8015440:	37354400 	.word	0x37354400
 8015444:	37354443 	.word	0x37354443
 8015448:	2e85a308 	.word	0x2e85a308
 801544c:	43490f80 	.word	0x43490f80
 8015450:	3f22f984 	.word	0x3f22f984
 8015454:	08015fa0 	.word	0x08015fa0
 8015458:	2e85a300 	.word	0x2e85a300
 801545c:	248d3132 	.word	0x248d3132
 8015460:	43800000 	.word	0x43800000
 8015464:	08016020 	.word	0x08016020

08015468 <fabsf>:
 8015468:	ee10 3a10 	vmov	r3, s0
 801546c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015470:	ee00 3a10 	vmov	s0, r3
 8015474:	4770      	bx	lr
	...

08015478 <__kernel_rem_pio2f>:
 8015478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547c:	ed2d 8b04 	vpush	{d8-d9}
 8015480:	b0d9      	sub	sp, #356	@ 0x164
 8015482:	4690      	mov	r8, r2
 8015484:	9001      	str	r0, [sp, #4]
 8015486:	4ab9      	ldr	r2, [pc, #740]	@ (801576c <__kernel_rem_pio2f+0x2f4>)
 8015488:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801548a:	f118 0f04 	cmn.w	r8, #4
 801548e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8015492:	460f      	mov	r7, r1
 8015494:	f103 3bff 	add.w	fp, r3, #4294967295
 8015498:	db27      	blt.n	80154ea <__kernel_rem_pio2f+0x72>
 801549a:	f1b8 0203 	subs.w	r2, r8, #3
 801549e:	bf48      	it	mi
 80154a0:	f108 0204 	addmi.w	r2, r8, #4
 80154a4:	10d2      	asrs	r2, r2, #3
 80154a6:	1c55      	adds	r5, r2, #1
 80154a8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80154aa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801577c <__kernel_rem_pio2f+0x304>
 80154ae:	00e8      	lsls	r0, r5, #3
 80154b0:	eba2 060b 	sub.w	r6, r2, fp
 80154b4:	9002      	str	r0, [sp, #8]
 80154b6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80154ba:	eb0a 0c0b 	add.w	ip, sl, fp
 80154be:	ac1c      	add	r4, sp, #112	@ 0x70
 80154c0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80154c4:	2000      	movs	r0, #0
 80154c6:	4560      	cmp	r0, ip
 80154c8:	dd11      	ble.n	80154ee <__kernel_rem_pio2f+0x76>
 80154ca:	a91c      	add	r1, sp, #112	@ 0x70
 80154cc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80154d0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80154d4:	f04f 0c00 	mov.w	ip, #0
 80154d8:	45d4      	cmp	ip, sl
 80154da:	dc27      	bgt.n	801552c <__kernel_rem_pio2f+0xb4>
 80154dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80154e0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801577c <__kernel_rem_pio2f+0x304>
 80154e4:	4606      	mov	r6, r0
 80154e6:	2400      	movs	r4, #0
 80154e8:	e016      	b.n	8015518 <__kernel_rem_pio2f+0xa0>
 80154ea:	2200      	movs	r2, #0
 80154ec:	e7db      	b.n	80154a6 <__kernel_rem_pio2f+0x2e>
 80154ee:	42c6      	cmn	r6, r0
 80154f0:	bf5d      	ittte	pl
 80154f2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80154f6:	ee07 1a90 	vmovpl	s15, r1
 80154fa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80154fe:	eef0 7a47 	vmovmi.f32	s15, s14
 8015502:	ece4 7a01 	vstmia	r4!, {s15}
 8015506:	3001      	adds	r0, #1
 8015508:	e7dd      	b.n	80154c6 <__kernel_rem_pio2f+0x4e>
 801550a:	ecfe 6a01 	vldmia	lr!, {s13}
 801550e:	ed96 7a00 	vldr	s14, [r6]
 8015512:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015516:	3401      	adds	r4, #1
 8015518:	455c      	cmp	r4, fp
 801551a:	f1a6 0604 	sub.w	r6, r6, #4
 801551e:	ddf4      	ble.n	801550a <__kernel_rem_pio2f+0x92>
 8015520:	ece9 7a01 	vstmia	r9!, {s15}
 8015524:	f10c 0c01 	add.w	ip, ip, #1
 8015528:	3004      	adds	r0, #4
 801552a:	e7d5      	b.n	80154d8 <__kernel_rem_pio2f+0x60>
 801552c:	a908      	add	r1, sp, #32
 801552e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015532:	9104      	str	r1, [sp, #16]
 8015534:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8015536:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8015778 <__kernel_rem_pio2f+0x300>
 801553a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8015774 <__kernel_rem_pio2f+0x2fc>
 801553e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8015542:	9203      	str	r2, [sp, #12]
 8015544:	4654      	mov	r4, sl
 8015546:	00a2      	lsls	r2, r4, #2
 8015548:	9205      	str	r2, [sp, #20]
 801554a:	aa58      	add	r2, sp, #352	@ 0x160
 801554c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8015550:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8015554:	a944      	add	r1, sp, #272	@ 0x110
 8015556:	aa08      	add	r2, sp, #32
 8015558:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801555c:	4694      	mov	ip, r2
 801555e:	4626      	mov	r6, r4
 8015560:	2e00      	cmp	r6, #0
 8015562:	f1a0 0004 	sub.w	r0, r0, #4
 8015566:	dc4c      	bgt.n	8015602 <__kernel_rem_pio2f+0x18a>
 8015568:	4628      	mov	r0, r5
 801556a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801556e:	f000 f9f5 	bl	801595c <scalbnf>
 8015572:	eeb0 8a40 	vmov.f32	s16, s0
 8015576:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801557a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801557e:	f000 fa53 	bl	8015a28 <floorf>
 8015582:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8015586:	eea0 8a67 	vfms.f32	s16, s0, s15
 801558a:	2d00      	cmp	r5, #0
 801558c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015590:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015594:	ee17 9a90 	vmov	r9, s15
 8015598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801559c:	ee38 8a67 	vsub.f32	s16, s16, s15
 80155a0:	dd41      	ble.n	8015626 <__kernel_rem_pio2f+0x1ae>
 80155a2:	f104 3cff 	add.w	ip, r4, #4294967295
 80155a6:	a908      	add	r1, sp, #32
 80155a8:	f1c5 0e08 	rsb	lr, r5, #8
 80155ac:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80155b0:	fa46 f00e 	asr.w	r0, r6, lr
 80155b4:	4481      	add	r9, r0
 80155b6:	fa00 f00e 	lsl.w	r0, r0, lr
 80155ba:	1a36      	subs	r6, r6, r0
 80155bc:	f1c5 0007 	rsb	r0, r5, #7
 80155c0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80155c4:	4106      	asrs	r6, r0
 80155c6:	2e00      	cmp	r6, #0
 80155c8:	dd3c      	ble.n	8015644 <__kernel_rem_pio2f+0x1cc>
 80155ca:	f04f 0e00 	mov.w	lr, #0
 80155ce:	f109 0901 	add.w	r9, r9, #1
 80155d2:	4670      	mov	r0, lr
 80155d4:	4574      	cmp	r4, lr
 80155d6:	dc68      	bgt.n	80156aa <__kernel_rem_pio2f+0x232>
 80155d8:	2d00      	cmp	r5, #0
 80155da:	dd03      	ble.n	80155e4 <__kernel_rem_pio2f+0x16c>
 80155dc:	2d01      	cmp	r5, #1
 80155de:	d074      	beq.n	80156ca <__kernel_rem_pio2f+0x252>
 80155e0:	2d02      	cmp	r5, #2
 80155e2:	d07d      	beq.n	80156e0 <__kernel_rem_pio2f+0x268>
 80155e4:	2e02      	cmp	r6, #2
 80155e6:	d12d      	bne.n	8015644 <__kernel_rem_pio2f+0x1cc>
 80155e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80155ec:	ee30 8a48 	vsub.f32	s16, s0, s16
 80155f0:	b340      	cbz	r0, 8015644 <__kernel_rem_pio2f+0x1cc>
 80155f2:	4628      	mov	r0, r5
 80155f4:	9306      	str	r3, [sp, #24]
 80155f6:	f000 f9b1 	bl	801595c <scalbnf>
 80155fa:	9b06      	ldr	r3, [sp, #24]
 80155fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015600:	e020      	b.n	8015644 <__kernel_rem_pio2f+0x1cc>
 8015602:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015606:	3e01      	subs	r6, #1
 8015608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015610:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015614:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015618:	ecac 0a01 	vstmia	ip!, {s0}
 801561c:	ed90 0a00 	vldr	s0, [r0]
 8015620:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015624:	e79c      	b.n	8015560 <__kernel_rem_pio2f+0xe8>
 8015626:	d105      	bne.n	8015634 <__kernel_rem_pio2f+0x1bc>
 8015628:	1e60      	subs	r0, r4, #1
 801562a:	a908      	add	r1, sp, #32
 801562c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8015630:	11f6      	asrs	r6, r6, #7
 8015632:	e7c8      	b.n	80155c6 <__kernel_rem_pio2f+0x14e>
 8015634:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015638:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801563c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015640:	da31      	bge.n	80156a6 <__kernel_rem_pio2f+0x22e>
 8015642:	2600      	movs	r6, #0
 8015644:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564c:	f040 8098 	bne.w	8015780 <__kernel_rem_pio2f+0x308>
 8015650:	1e60      	subs	r0, r4, #1
 8015652:	2200      	movs	r2, #0
 8015654:	4550      	cmp	r0, sl
 8015656:	da4b      	bge.n	80156f0 <__kernel_rem_pio2f+0x278>
 8015658:	2a00      	cmp	r2, #0
 801565a:	d065      	beq.n	8015728 <__kernel_rem_pio2f+0x2b0>
 801565c:	3c01      	subs	r4, #1
 801565e:	ab08      	add	r3, sp, #32
 8015660:	3d08      	subs	r5, #8
 8015662:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d0f8      	beq.n	801565c <__kernel_rem_pio2f+0x1e4>
 801566a:	4628      	mov	r0, r5
 801566c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015670:	f000 f974 	bl	801595c <scalbnf>
 8015674:	1c63      	adds	r3, r4, #1
 8015676:	aa44      	add	r2, sp, #272	@ 0x110
 8015678:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8015778 <__kernel_rem_pio2f+0x300>
 801567c:	0099      	lsls	r1, r3, #2
 801567e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015682:	4623      	mov	r3, r4
 8015684:	2b00      	cmp	r3, #0
 8015686:	f280 80a9 	bge.w	80157dc <__kernel_rem_pio2f+0x364>
 801568a:	4623      	mov	r3, r4
 801568c:	2b00      	cmp	r3, #0
 801568e:	f2c0 80c7 	blt.w	8015820 <__kernel_rem_pio2f+0x3a8>
 8015692:	aa44      	add	r2, sp, #272	@ 0x110
 8015694:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8015698:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8015770 <__kernel_rem_pio2f+0x2f8>
 801569c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801577c <__kernel_rem_pio2f+0x304>
 80156a0:	2000      	movs	r0, #0
 80156a2:	1ae2      	subs	r2, r4, r3
 80156a4:	e0b1      	b.n	801580a <__kernel_rem_pio2f+0x392>
 80156a6:	2602      	movs	r6, #2
 80156a8:	e78f      	b.n	80155ca <__kernel_rem_pio2f+0x152>
 80156aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80156ae:	b948      	cbnz	r0, 80156c4 <__kernel_rem_pio2f+0x24c>
 80156b0:	b121      	cbz	r1, 80156bc <__kernel_rem_pio2f+0x244>
 80156b2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80156b6:	f842 1c04 	str.w	r1, [r2, #-4]
 80156ba:	2101      	movs	r1, #1
 80156bc:	f10e 0e01 	add.w	lr, lr, #1
 80156c0:	4608      	mov	r0, r1
 80156c2:	e787      	b.n	80155d4 <__kernel_rem_pio2f+0x15c>
 80156c4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80156c8:	e7f5      	b.n	80156b6 <__kernel_rem_pio2f+0x23e>
 80156ca:	f104 3cff 	add.w	ip, r4, #4294967295
 80156ce:	aa08      	add	r2, sp, #32
 80156d0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80156d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80156d8:	a908      	add	r1, sp, #32
 80156da:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80156de:	e781      	b.n	80155e4 <__kernel_rem_pio2f+0x16c>
 80156e0:	f104 3cff 	add.w	ip, r4, #4294967295
 80156e4:	aa08      	add	r2, sp, #32
 80156e6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80156ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80156ee:	e7f3      	b.n	80156d8 <__kernel_rem_pio2f+0x260>
 80156f0:	a908      	add	r1, sp, #32
 80156f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80156f6:	3801      	subs	r0, #1
 80156f8:	430a      	orrs	r2, r1
 80156fa:	e7ab      	b.n	8015654 <__kernel_rem_pio2f+0x1dc>
 80156fc:	3201      	adds	r2, #1
 80156fe:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8015702:	2e00      	cmp	r6, #0
 8015704:	d0fa      	beq.n	80156fc <__kernel_rem_pio2f+0x284>
 8015706:	9905      	ldr	r1, [sp, #20]
 8015708:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801570c:	eb0d 0001 	add.w	r0, sp, r1
 8015710:	18e6      	adds	r6, r4, r3
 8015712:	a91c      	add	r1, sp, #112	@ 0x70
 8015714:	f104 0c01 	add.w	ip, r4, #1
 8015718:	384c      	subs	r0, #76	@ 0x4c
 801571a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801571e:	4422      	add	r2, r4
 8015720:	4562      	cmp	r2, ip
 8015722:	da04      	bge.n	801572e <__kernel_rem_pio2f+0x2b6>
 8015724:	4614      	mov	r4, r2
 8015726:	e70e      	b.n	8015546 <__kernel_rem_pio2f+0xce>
 8015728:	9804      	ldr	r0, [sp, #16]
 801572a:	2201      	movs	r2, #1
 801572c:	e7e7      	b.n	80156fe <__kernel_rem_pio2f+0x286>
 801572e:	9903      	ldr	r1, [sp, #12]
 8015730:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015734:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8015738:	9105      	str	r1, [sp, #20]
 801573a:	ee07 1a90 	vmov	s15, r1
 801573e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015742:	2400      	movs	r4, #0
 8015744:	ece6 7a01 	vstmia	r6!, {s15}
 8015748:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801577c <__kernel_rem_pio2f+0x304>
 801574c:	46b1      	mov	r9, r6
 801574e:	455c      	cmp	r4, fp
 8015750:	dd04      	ble.n	801575c <__kernel_rem_pio2f+0x2e4>
 8015752:	ece0 7a01 	vstmia	r0!, {s15}
 8015756:	f10c 0c01 	add.w	ip, ip, #1
 801575a:	e7e1      	b.n	8015720 <__kernel_rem_pio2f+0x2a8>
 801575c:	ecfe 6a01 	vldmia	lr!, {s13}
 8015760:	ed39 7a01 	vldmdb	r9!, {s14}
 8015764:	3401      	adds	r4, #1
 8015766:	eee6 7a87 	vfma.f32	s15, s13, s14
 801576a:	e7f0      	b.n	801574e <__kernel_rem_pio2f+0x2d6>
 801576c:	08016364 	.word	0x08016364
 8015770:	08016338 	.word	0x08016338
 8015774:	43800000 	.word	0x43800000
 8015778:	3b800000 	.word	0x3b800000
 801577c:	00000000 	.word	0x00000000
 8015780:	9b02      	ldr	r3, [sp, #8]
 8015782:	eeb0 0a48 	vmov.f32	s0, s16
 8015786:	eba3 0008 	sub.w	r0, r3, r8
 801578a:	f000 f8e7 	bl	801595c <scalbnf>
 801578e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8015774 <__kernel_rem_pio2f+0x2fc>
 8015792:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579a:	db19      	blt.n	80157d0 <__kernel_rem_pio2f+0x358>
 801579c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8015778 <__kernel_rem_pio2f+0x300>
 80157a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80157a4:	aa08      	add	r2, sp, #32
 80157a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157aa:	3508      	adds	r5, #8
 80157ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80157b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80157bc:	ee10 3a10 	vmov	r3, s0
 80157c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80157c4:	ee17 3a90 	vmov	r3, s15
 80157c8:	3401      	adds	r4, #1
 80157ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80157ce:	e74c      	b.n	801566a <__kernel_rem_pio2f+0x1f2>
 80157d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80157d4:	aa08      	add	r2, sp, #32
 80157d6:	ee10 3a10 	vmov	r3, s0
 80157da:	e7f6      	b.n	80157ca <__kernel_rem_pio2f+0x352>
 80157dc:	a808      	add	r0, sp, #32
 80157de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80157e2:	9001      	str	r0, [sp, #4]
 80157e4:	ee07 0a90 	vmov	s15, r0
 80157e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157ec:	3b01      	subs	r3, #1
 80157ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80157f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80157f6:	ed62 7a01 	vstmdb	r2!, {s15}
 80157fa:	e743      	b.n	8015684 <__kernel_rem_pio2f+0x20c>
 80157fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8015800:	ecb5 7a01 	vldmia	r5!, {s14}
 8015804:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015808:	3001      	adds	r0, #1
 801580a:	4550      	cmp	r0, sl
 801580c:	dc01      	bgt.n	8015812 <__kernel_rem_pio2f+0x39a>
 801580e:	4282      	cmp	r2, r0
 8015810:	daf4      	bge.n	80157fc <__kernel_rem_pio2f+0x384>
 8015812:	a858      	add	r0, sp, #352	@ 0x160
 8015814:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8015818:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801581c:	3b01      	subs	r3, #1
 801581e:	e735      	b.n	801568c <__kernel_rem_pio2f+0x214>
 8015820:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8015822:	2b02      	cmp	r3, #2
 8015824:	dc09      	bgt.n	801583a <__kernel_rem_pio2f+0x3c2>
 8015826:	2b00      	cmp	r3, #0
 8015828:	dc2b      	bgt.n	8015882 <__kernel_rem_pio2f+0x40a>
 801582a:	d044      	beq.n	80158b6 <__kernel_rem_pio2f+0x43e>
 801582c:	f009 0007 	and.w	r0, r9, #7
 8015830:	b059      	add	sp, #356	@ 0x164
 8015832:	ecbd 8b04 	vpop	{d8-d9}
 8015836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801583a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801583c:	2b03      	cmp	r3, #3
 801583e:	d1f5      	bne.n	801582c <__kernel_rem_pio2f+0x3b4>
 8015840:	aa30      	add	r2, sp, #192	@ 0xc0
 8015842:	1f0b      	subs	r3, r1, #4
 8015844:	4413      	add	r3, r2
 8015846:	461a      	mov	r2, r3
 8015848:	4620      	mov	r0, r4
 801584a:	2800      	cmp	r0, #0
 801584c:	f1a2 0204 	sub.w	r2, r2, #4
 8015850:	dc52      	bgt.n	80158f8 <__kernel_rem_pio2f+0x480>
 8015852:	4622      	mov	r2, r4
 8015854:	2a01      	cmp	r2, #1
 8015856:	f1a3 0304 	sub.w	r3, r3, #4
 801585a:	dc5d      	bgt.n	8015918 <__kernel_rem_pio2f+0x4a0>
 801585c:	ab30      	add	r3, sp, #192	@ 0xc0
 801585e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801577c <__kernel_rem_pio2f+0x304>
 8015862:	440b      	add	r3, r1
 8015864:	2c01      	cmp	r4, #1
 8015866:	dc67      	bgt.n	8015938 <__kernel_rem_pio2f+0x4c0>
 8015868:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801586c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8015870:	2e00      	cmp	r6, #0
 8015872:	d167      	bne.n	8015944 <__kernel_rem_pio2f+0x4cc>
 8015874:	edc7 6a00 	vstr	s13, [r7]
 8015878:	ed87 7a01 	vstr	s14, [r7, #4]
 801587c:	edc7 7a02 	vstr	s15, [r7, #8]
 8015880:	e7d4      	b.n	801582c <__kernel_rem_pio2f+0x3b4>
 8015882:	ab30      	add	r3, sp, #192	@ 0xc0
 8015884:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801577c <__kernel_rem_pio2f+0x304>
 8015888:	440b      	add	r3, r1
 801588a:	4622      	mov	r2, r4
 801588c:	2a00      	cmp	r2, #0
 801588e:	da24      	bge.n	80158da <__kernel_rem_pio2f+0x462>
 8015890:	b34e      	cbz	r6, 80158e6 <__kernel_rem_pio2f+0x46e>
 8015892:	eef1 7a47 	vneg.f32	s15, s14
 8015896:	edc7 7a00 	vstr	s15, [r7]
 801589a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801589e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80158a2:	aa31      	add	r2, sp, #196	@ 0xc4
 80158a4:	2301      	movs	r3, #1
 80158a6:	429c      	cmp	r4, r3
 80158a8:	da20      	bge.n	80158ec <__kernel_rem_pio2f+0x474>
 80158aa:	b10e      	cbz	r6, 80158b0 <__kernel_rem_pio2f+0x438>
 80158ac:	eef1 7a67 	vneg.f32	s15, s15
 80158b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80158b4:	e7ba      	b.n	801582c <__kernel_rem_pio2f+0x3b4>
 80158b6:	ab30      	add	r3, sp, #192	@ 0xc0
 80158b8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801577c <__kernel_rem_pio2f+0x304>
 80158bc:	440b      	add	r3, r1
 80158be:	2c00      	cmp	r4, #0
 80158c0:	da05      	bge.n	80158ce <__kernel_rem_pio2f+0x456>
 80158c2:	b10e      	cbz	r6, 80158c8 <__kernel_rem_pio2f+0x450>
 80158c4:	eef1 7a67 	vneg.f32	s15, s15
 80158c8:	edc7 7a00 	vstr	s15, [r7]
 80158cc:	e7ae      	b.n	801582c <__kernel_rem_pio2f+0x3b4>
 80158ce:	ed33 7a01 	vldmdb	r3!, {s14}
 80158d2:	3c01      	subs	r4, #1
 80158d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80158d8:	e7f1      	b.n	80158be <__kernel_rem_pio2f+0x446>
 80158da:	ed73 7a01 	vldmdb	r3!, {s15}
 80158de:	3a01      	subs	r2, #1
 80158e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158e4:	e7d2      	b.n	801588c <__kernel_rem_pio2f+0x414>
 80158e6:	eef0 7a47 	vmov.f32	s15, s14
 80158ea:	e7d4      	b.n	8015896 <__kernel_rem_pio2f+0x41e>
 80158ec:	ecb2 7a01 	vldmia	r2!, {s14}
 80158f0:	3301      	adds	r3, #1
 80158f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80158f6:	e7d6      	b.n	80158a6 <__kernel_rem_pio2f+0x42e>
 80158f8:	edd2 7a00 	vldr	s15, [r2]
 80158fc:	edd2 6a01 	vldr	s13, [r2, #4]
 8015900:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015904:	3801      	subs	r0, #1
 8015906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801590a:	ed82 7a00 	vstr	s14, [r2]
 801590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015912:	edc2 7a01 	vstr	s15, [r2, #4]
 8015916:	e798      	b.n	801584a <__kernel_rem_pio2f+0x3d2>
 8015918:	edd3 7a00 	vldr	s15, [r3]
 801591c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015920:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015924:	3a01      	subs	r2, #1
 8015926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801592a:	ed83 7a00 	vstr	s14, [r3]
 801592e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015932:	edc3 7a01 	vstr	s15, [r3, #4]
 8015936:	e78d      	b.n	8015854 <__kernel_rem_pio2f+0x3dc>
 8015938:	ed33 7a01 	vldmdb	r3!, {s14}
 801593c:	3c01      	subs	r4, #1
 801593e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015942:	e78f      	b.n	8015864 <__kernel_rem_pio2f+0x3ec>
 8015944:	eef1 6a66 	vneg.f32	s13, s13
 8015948:	eeb1 7a47 	vneg.f32	s14, s14
 801594c:	edc7 6a00 	vstr	s13, [r7]
 8015950:	ed87 7a01 	vstr	s14, [r7, #4]
 8015954:	eef1 7a67 	vneg.f32	s15, s15
 8015958:	e790      	b.n	801587c <__kernel_rem_pio2f+0x404>
 801595a:	bf00      	nop

0801595c <scalbnf>:
 801595c:	ee10 3a10 	vmov	r3, s0
 8015960:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8015964:	d02b      	beq.n	80159be <scalbnf+0x62>
 8015966:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801596a:	d302      	bcc.n	8015972 <scalbnf+0x16>
 801596c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015970:	4770      	bx	lr
 8015972:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8015976:	d123      	bne.n	80159c0 <scalbnf+0x64>
 8015978:	4b24      	ldr	r3, [pc, #144]	@ (8015a0c <scalbnf+0xb0>)
 801597a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015a10 <scalbnf+0xb4>
 801597e:	4298      	cmp	r0, r3
 8015980:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015984:	db17      	blt.n	80159b6 <scalbnf+0x5a>
 8015986:	ee10 3a10 	vmov	r3, s0
 801598a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801598e:	3a19      	subs	r2, #25
 8015990:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015994:	4288      	cmp	r0, r1
 8015996:	dd15      	ble.n	80159c4 <scalbnf+0x68>
 8015998:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8015a14 <scalbnf+0xb8>
 801599c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015a18 <scalbnf+0xbc>
 80159a0:	ee10 3a10 	vmov	r3, s0
 80159a4:	eeb0 7a67 	vmov.f32	s14, s15
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	bfb8      	it	lt
 80159ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80159b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80159b4:	4770      	bx	lr
 80159b6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015a1c <scalbnf+0xc0>
 80159ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80159be:	4770      	bx	lr
 80159c0:	0dd2      	lsrs	r2, r2, #23
 80159c2:	e7e5      	b.n	8015990 <scalbnf+0x34>
 80159c4:	4410      	add	r0, r2
 80159c6:	28fe      	cmp	r0, #254	@ 0xfe
 80159c8:	dce6      	bgt.n	8015998 <scalbnf+0x3c>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	dd06      	ble.n	80159dc <scalbnf+0x80>
 80159ce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80159d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80159d6:	ee00 3a10 	vmov	s0, r3
 80159da:	4770      	bx	lr
 80159dc:	f110 0f16 	cmn.w	r0, #22
 80159e0:	da09      	bge.n	80159f6 <scalbnf+0x9a>
 80159e2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8015a1c <scalbnf+0xc0>
 80159e6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015a20 <scalbnf+0xc4>
 80159ea:	ee10 3a10 	vmov	r3, s0
 80159ee:	eeb0 7a67 	vmov.f32	s14, s15
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	e7d9      	b.n	80159aa <scalbnf+0x4e>
 80159f6:	3019      	adds	r0, #25
 80159f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80159fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015a00:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8015a24 <scalbnf+0xc8>
 8015a04:	ee07 3a90 	vmov	s15, r3
 8015a08:	e7d7      	b.n	80159ba <scalbnf+0x5e>
 8015a0a:	bf00      	nop
 8015a0c:	ffff3cb0 	.word	0xffff3cb0
 8015a10:	4c000000 	.word	0x4c000000
 8015a14:	7149f2ca 	.word	0x7149f2ca
 8015a18:	f149f2ca 	.word	0xf149f2ca
 8015a1c:	0da24260 	.word	0x0da24260
 8015a20:	8da24260 	.word	0x8da24260
 8015a24:	33000000 	.word	0x33000000

08015a28 <floorf>:
 8015a28:	ee10 3a10 	vmov	r3, s0
 8015a2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015a30:	3a7f      	subs	r2, #127	@ 0x7f
 8015a32:	2a16      	cmp	r2, #22
 8015a34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8015a38:	dc2b      	bgt.n	8015a92 <floorf+0x6a>
 8015a3a:	2a00      	cmp	r2, #0
 8015a3c:	da12      	bge.n	8015a64 <floorf+0x3c>
 8015a3e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015aa4 <floorf+0x7c>
 8015a42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015a46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a4e:	dd06      	ble.n	8015a5e <floorf+0x36>
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	da24      	bge.n	8015a9e <floorf+0x76>
 8015a54:	2900      	cmp	r1, #0
 8015a56:	4b14      	ldr	r3, [pc, #80]	@ (8015aa8 <floorf+0x80>)
 8015a58:	bf08      	it	eq
 8015a5a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8015a5e:	ee00 3a10 	vmov	s0, r3
 8015a62:	4770      	bx	lr
 8015a64:	4911      	ldr	r1, [pc, #68]	@ (8015aac <floorf+0x84>)
 8015a66:	4111      	asrs	r1, r2
 8015a68:	420b      	tst	r3, r1
 8015a6a:	d0fa      	beq.n	8015a62 <floorf+0x3a>
 8015a6c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8015aa4 <floorf+0x7c>
 8015a70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015a74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7c:	ddef      	ble.n	8015a5e <floorf+0x36>
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	bfbe      	ittt	lt
 8015a82:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8015a86:	fa40 f202 	asrlt.w	r2, r0, r2
 8015a8a:	189b      	addlt	r3, r3, r2
 8015a8c:	ea23 0301 	bic.w	r3, r3, r1
 8015a90:	e7e5      	b.n	8015a5e <floorf+0x36>
 8015a92:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8015a96:	d3e4      	bcc.n	8015a62 <floorf+0x3a>
 8015a98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015a9c:	4770      	bx	lr
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	e7dd      	b.n	8015a5e <floorf+0x36>
 8015aa2:	bf00      	nop
 8015aa4:	7149f2ca 	.word	0x7149f2ca
 8015aa8:	bf800000 	.word	0xbf800000
 8015aac:	007fffff 	.word	0x007fffff

08015ab0 <_init>:
 8015ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab2:	bf00      	nop
 8015ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ab6:	bc08      	pop	{r3}
 8015ab8:	469e      	mov	lr, r3
 8015aba:	4770      	bx	lr

08015abc <_fini>:
 8015abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015abe:	bf00      	nop
 8015ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ac2:	bc08      	pop	{r3}
 8015ac4:	469e      	mov	lr, r3
 8015ac6:	4770      	bx	lr
