
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eef4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800f0d4  0800f0d4  000100d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f178  0800f178  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f178  0800f178  00010178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f180  0800f180  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f180  0800f180  00010180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f184  0800f184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f188  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063d0  200001d4  0800f35c  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065a4  0800f35c  000115a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1c4  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004397  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00032760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133e  00000000  00000000  000340a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b68e  00000000  00000000  000353de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eea4  00000000  00000000  00060a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113418  00000000  00000000  0007f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f4c  00000000  00000000  00192d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00199cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f0bc 	.word	0x0800f0bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800f0bc 	.word	0x0800f0bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b087      	sub	sp, #28
 80002c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f001 fd04 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f8d7 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fdd5 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 fd91 	bl	8000df8 <MX_DMA_Init>
  MX_TIM2_Init();
 80002d6:	f000 fb9f 	bl	8000a18 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002da:	f000 fc9f 	bl	8000c1c <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002de:	f00d fd43 	bl	800dd68 <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002e2:	f000 fc25 	bl	8000b30 <MX_TIM3_Init>
  MX_ADC1_Init();
 80002e6:	f000 f915 	bl	8000514 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002ea:	f000 f98d 	bl	8000608 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ee:	f000 f9f3 	bl	80006d8 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80002f2:	f000 fa6b 	bl	80007cc <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002f6:	f000 fa8f 	bl	8000818 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80002fa:	f000 fab3 	bl	8000864 <MX_TIM1_Init>
  MX_TIM15_Init();
 80002fe:	f000 fcdd 	bl	8000cbc <MX_TIM15_Init>





  HAL_OPAMP_Start(&hopamp1);
 8000302:	484d      	ldr	r0, [pc, #308]	@ (8000438 <main+0x178>)
 8000304:	f004 f9d2 	bl	80046ac <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000308:	484c      	ldr	r0, [pc, #304]	@ (800043c <main+0x17c>)
 800030a:	f004 f9cf 	bl	80046ac <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 800030e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000312:	494b      	ldr	r1, [pc, #300]	@ (8000440 <main+0x180>)
 8000314:	484b      	ldr	r0, [pc, #300]	@ (8000444 <main+0x184>)
 8000316:	f002 f9cb 	bl	80026b0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 800031a:	484b      	ldr	r0, [pc, #300]	@ (8000448 <main+0x188>)
 800031c:	f006 ff7a 	bl	8007214 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 8000320:	484a      	ldr	r0, [pc, #296]	@ (800044c <main+0x18c>)
 8000322:	f006 ff77 	bl	8007214 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000326:	484a      	ldr	r0, [pc, #296]	@ (8000450 <main+0x190>)
 8000328:	f006 ff74 	bl	8007214 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800032c:	4849      	ldr	r0, [pc, #292]	@ (8000454 <main+0x194>)
 800032e:	f006 ffe1 	bl	80072f4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000332:	210c      	movs	r1, #12
 8000334:	4845      	ldr	r0, [pc, #276]	@ (800044c <main+0x18c>)
 8000336:	f007 fa2b 	bl	8007790 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800033a:	2108      	movs	r1, #8
 800033c:	4843      	ldr	r0, [pc, #268]	@ (800044c <main+0x18c>)
 800033e:	f007 fa27 	bl	8007790 <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	4840      	ldr	r0, [pc, #256]	@ (8000448 <main+0x188>)
 8000346:	f007 f8af 	bl	80074a8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 800034a:	2104      	movs	r1, #4
 800034c:	483e      	ldr	r0, [pc, #248]	@ (8000448 <main+0x188>)
 800034e:	f007 f8ab 	bl	80074a8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000352:	2108      	movs	r1, #8
 8000354:	483c      	ldr	r0, [pc, #240]	@ (8000448 <main+0x188>)
 8000356:	f007 f8a7 	bl	80074a8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800035a:	210c      	movs	r1, #12
 800035c:	483a      	ldr	r0, [pc, #232]	@ (8000448 <main+0x188>)
 800035e:	f007 f8a3 	bl	80074a8 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000362:	2100      	movs	r1, #0
 8000364:	483c      	ldr	r0, [pc, #240]	@ (8000458 <main+0x198>)
 8000366:	f007 fdb3 	bl	8007ed0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 800036a:	2104      	movs	r1, #4
 800036c:	483a      	ldr	r0, [pc, #232]	@ (8000458 <main+0x198>)
 800036e:	f007 fdaf 	bl	8007ed0 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	2110      	movs	r1, #16
 8000376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037a:	f004 f8af 	bl	80044dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (WHILE_FLAG==2) {
 800037e:	4b37      	ldr	r3, [pc, #220]	@ (800045c <main+0x19c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b02      	cmp	r3, #2
 8000384:	d1fb      	bne.n	800037e <main+0xbe>

		 ws2812_set_all(rgb_to_color(0x00, 0x00, 0x0f));
 8000386:	220f      	movs	r2, #15
 8000388:	2100      	movs	r1, #0
 800038a:	2000      	movs	r0, #0
 800038c:	f001 fc46 	bl	8001c1c <rgb_to_color>
 8000390:	4603      	mov	r3, r0
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fc26 	bl	8001be4 <ws2812_set_all>
		 ws2812_gradient(10, 10);
 8000398:	210a      	movs	r1, #10
 800039a:	200a      	movs	r0, #10
 800039c:	f001 fb08 	bl	80019b0 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x00, 0x0f, 0x00));
 80003a0:	2200      	movs	r2, #0
 80003a2:	210f      	movs	r1, #15
 80003a4:	2000      	movs	r0, #0
 80003a6:	f001 fc39 	bl	8001c1c <rgb_to_color>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fc19 	bl	8001be4 <ws2812_set_all>
		 ws2812_gradient(10, 10);
 80003b2:	210a      	movs	r1, #10
 80003b4:	200a      	movs	r0, #10
 80003b6:	f001 fafb 	bl	80019b0 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x0f, 0x00, 0x00));
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	200f      	movs	r0, #15
 80003c0:	f001 fc2c 	bl	8001c1c <rgb_to_color>
 80003c4:	4603      	mov	r3, r0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fc0c 	bl	8001be4 <ws2812_set_all>
		 ws2812_gradient(10, 10);
 80003cc:	210a      	movs	r1, #10
 80003ce:	200a      	movs	r0, #10
 80003d0:	f001 faee 	bl	80019b0 <ws2812_gradient>
//	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
//	  CDC_Transmit_FS(CDC_BUFFER, 50);

		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	e01f      	b.n	800041a <main+0x15a>
		HAL_Delay(2);
 80003da:	2002      	movs	r0, #2
 80003dc:	f001 fcea 	bl	8001db4 <HAL_Delay>



		  sprintf(CDC_BUFFER,"Val:%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value);
 80003e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000460 <main+0x1a0>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <main+0x1a4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000468 <main+0x1a8>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	491e      	ldr	r1, [pc, #120]	@ (800046c <main+0x1ac>)
 80003f2:	6809      	ldr	r1, [r1, #0]
 80003f4:	481e      	ldr	r0, [pc, #120]	@ (8000470 <main+0x1b0>)
 80003f6:	6800      	ldr	r0, [r0, #0]
 80003f8:	9003      	str	r0, [sp, #12]
 80003fa:	9102      	str	r1, [sp, #8]
 80003fc:	9201      	str	r2, [sp, #4]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4622      	mov	r2, r4
 8000404:	491b      	ldr	r1, [pc, #108]	@ (8000474 <main+0x1b4>)
 8000406:	481c      	ldr	r0, [pc, #112]	@ (8000478 <main+0x1b8>)
 8000408:	f00e f9b8 	bl	800e77c <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 800040c:	2132      	movs	r1, #50	@ 0x32
 800040e:	481a      	ldr	r0, [pc, #104]	@ (8000478 <main+0x1b8>)
 8000410:	f00d fd68 	bl	800dee4 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3301      	adds	r3, #1
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000420:	dbdb      	blt.n	80003da <main+0x11a>



		}
		  HAL_TIM_Base_Start(&htim1);
 8000422:	4809      	ldr	r0, [pc, #36]	@ (8000448 <main+0x188>)
 8000424:	f006 fef6 	bl	8007214 <HAL_TIM_Base_Start>

		HAL_Delay(10);
 8000428:	200a      	movs	r0, #10
 800042a:	f001 fcc3 	bl	8001db4 <HAL_Delay>
		  WHILE_FLAG=0;
 800042e:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <main+0x19c>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==2) {
 8000434:	e7a3      	b.n	800037e <main+0xbe>
 8000436:	bf00      	nop
 8000438:	20000454 	.word	0x20000454
 800043c:	20000490 	.word	0x20000490
 8000440:	200006b8 	.word	0x200006b8
 8000444:	2000025c 	.word	0x2000025c
 8000448:	200004cc 	.word	0x200004cc
 800044c:	20000518 	.word	0x20000518
 8000450:	20000564 	.word	0x20000564
 8000454:	200005b0 	.word	0x200005b0
 8000458:	200005fc 	.word	0x200005fc
 800045c:	200026ec 	.word	0x200026ec
 8000460:	200016b8 	.word	0x200016b8
 8000464:	200006b4 	.word	0x200006b4
 8000468:	200006ac 	.word	0x200006ac
 800046c:	200006b0 	.word	0x200006b0
 8000470:	200006a8 	.word	0x200006a8
 8000474:	0800f0d4 	.word	0x0800f0d4
 8000478:	200026b8 	.word	0x200026b8

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b094      	sub	sp, #80	@ 0x50
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2238      	movs	r2, #56	@ 0x38
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f00e f996 	bl	800e7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800049e:	2000      	movs	r0, #0
 80004a0:	f005 fe68 	bl	8006174 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004a4:	2321      	movs	r3, #33	@ 0x21
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ae:	2301      	movs	r3, #1
 80004b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b6:	2303      	movs	r3, #3
 80004b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80004be:	2355      	movs	r3, #85	@ 0x55
 80004c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f005 ff02 	bl	80062dc <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004de:	f000 fdbd 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2303      	movs	r3, #3
 80004e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2104      	movs	r1, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fa00 	bl	8006900 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000506:	f000 fda9 	bl	800105c <Error_Handler>
  }
}
 800050a:	bf00      	nop
 800050c:	3750      	adds	r7, #80	@ 0x50
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	@ 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2220      	movs	r2, #32
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f00e f945 	bl	800e7bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000532:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000534:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053a:	4b31      	ldr	r3, [pc, #196]	@ (8000600 <MX_ADC1_Init+0xec>)
 800053c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000542:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <MX_ADC1_Init+0xec>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <MX_ADC1_Init+0xec>)
 800055c:	2204      	movs	r2, #4
 800055e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000566:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <MX_ADC1_Init+0xec>)
 800056e:	2201      	movs	r2, #1
 8000570:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <MX_ADC1_Init+0xec>)
 800057c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000580:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000588:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800058a:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <MX_ADC1_Init+0xec>)
 800058c:	2201      	movs	r2, #1
 800058e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_ADC1_Init+0xec>)
 8000594:	2200      	movs	r2, #0
 8000596:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000598:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <MX_ADC1_Init+0xec>)
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	4817      	ldr	r0, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xec>)
 80005a2:	f001 fec9 	bl	8002338 <HAL_ADC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005ac:	f000 fd56 	bl	800105c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	@ (8000600 <MX_ADC1_Init+0xec>)
 80005bc:	f003 f982 	bl	80038c4 <HAL_ADCEx_MultiModeConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005c6:	f000 fd49 	bl	800105c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_ADC1_Init+0xf0>)
 80005cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2306      	movs	r3, #6
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d6:	237f      	movs	r3, #127	@ 0x7f
 80005d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005da:	2304      	movs	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <MX_ADC1_Init+0xec>)
 80005e8:	f002 fbaa 	bl	8002d40 <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005f2:	f000 fd33 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3730      	adds	r7, #48	@ 0x30
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0
 8000604:	b6902000 	.word	0xb6902000

08000608 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00e f8d1 	bl	800e7bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800061a:	4b2c      	ldr	r3, [pc, #176]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800061c:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <MX_ADC2_Init+0xc8>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000622:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000626:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063a:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000642:	2204      	movs	r2, #4
 8000644:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000648:	2200      	movs	r2, #0
 800064a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800064e:	2200      	movs	r2, #0
 8000650:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000654:	2201      	movs	r2, #1
 8000656:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000662:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800066a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000672:	2201      	movs	r2, #1
 8000674:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_ADC2_Init+0xc4>)
 800067a:	2200      	movs	r2, #0
 800067c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000686:	4811      	ldr	r0, [pc, #68]	@ (80006cc <MX_ADC2_Init+0xc4>)
 8000688:	f001 fe56 	bl	8002338 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 fce3 	bl	800105c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_ADC2_Init+0xcc>)
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <MX_ADC2_Init+0xc4>)
 80006b4:	f002 fb44 	bl	8002d40 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006be:	f000 fccd 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000025c 	.word	0x2000025c
 80006d0:	50000100 	.word	0x50000100
 80006d4:	cb8c0000 	.word	0xcb8c0000

080006d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00e f863 	bl	800e7bc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006f6:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 80006f8:	4a32      	ldr	r2, [pc, #200]	@ (80007c4 <MX_ADC3_Init+0xec>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 80006fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000702:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000710:	4b2b      	ldr	r3, [pc, #172]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800071e:	2204      	movs	r2, #4
 8000720:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800072e:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000730:	2201      	movs	r2, #1
 8000732:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800073e:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800074e:	2201      	movs	r2, #1
 8000750:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000762:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 8000764:	f001 fde8 	bl	8002338 <HAL_ADC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800076e:	f000 fc75 	bl	800105c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4810      	ldr	r0, [pc, #64]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 800077e:	f003 f8a1 	bl	80038c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000788:	f000 fc68 	bl	800105c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_ADC3_Init+0xf0>)
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2306      	movs	r3, #6
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000798:	237f      	movs	r3, #127	@ 0x7f
 800079a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079c:	2304      	movs	r3, #4
 800079e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_ADC3_Init+0xe8>)
 80007aa:	f002 fac9 	bl	8002d40 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80007b4:	f000 fc52 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	@ 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200002c8 	.word	0x200002c8
 80007c4:	50000400 	.word	0x50000400
 80007c8:	b6982000 	.word	0xb6982000

080007cc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_OPAMP1_Init+0x48>)
 80007d4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007de:	2260      	movs	r2, #96	@ 0x60
 80007e0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_OPAMP1_Init+0x44>)
 80007fc:	f003 fe86 	bl	800450c <HAL_OPAMP_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000806:	f000 fc29 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000454 	.word	0x20000454
 8000814:	40010300 	.word	0x40010300

08000818 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_OPAMP3_Init+0x44>)
 800081e:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <MX_OPAMP3_Init+0x48>)
 8000820:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_OPAMP3_Init+0x44>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_OPAMP3_Init+0x44>)
 800082a:	2260      	movs	r2, #96	@ 0x60
 800082c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_OPAMP3_Init+0x44>)
 8000830:	2208      	movs	r2, #8
 8000832:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_OPAMP3_Init+0x44>)
 8000836:	2201      	movs	r2, #1
 8000838:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_OPAMP3_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_OPAMP3_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_OPAMP3_Init+0x44>)
 8000848:	f003 fe60 	bl	800450c <HAL_OPAMP_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000852:	f000 fc03 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000490 	.word	0x20000490
 8000860:	40010308 	.word	0x40010308

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	@ 0x70
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2234      	movs	r2, #52	@ 0x34
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00d ff8c 	bl	800e7bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008a6:	4a5b      	ldr	r2, [pc, #364]	@ (8000a14 <MX_TIM1_Init+0x1b0>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80008aa:	4b59      	ldr	r3, [pc, #356]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b57      	ldr	r3, [pc, #348]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 80008b6:	4b56      	ldr	r3, [pc, #344]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b54      	ldr	r3, [pc, #336]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c2:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b51      	ldr	r3, [pc, #324]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ce:	4850      	ldr	r0, [pc, #320]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008d0:	f006 fc48 	bl	8007164 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008da:	f000 fbbf 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008e8:	4619      	mov	r1, r3
 80008ea:	4849      	ldr	r0, [pc, #292]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008ec:	f007 ffba 	bl	8008864 <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008f6:	f000 fbb1 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008fa:	4845      	ldr	r0, [pc, #276]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80008fc:	f006 fd72 	bl	80073e4 <HAL_TIM_OC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000906:	f000 fba9 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090a:	2320      	movs	r3, #32
 800090c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800091a:	4619      	mov	r1, r3
 800091c:	483c      	ldr	r0, [pc, #240]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 800091e:	f009 f8f5 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000928:	f000 fb98 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800092c:	2330      	movs	r3, #48	@ 0x30
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	482f      	ldr	r0, [pc, #188]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 8000952:	f007 fd5d 	bl	8008410 <HAL_TIM_OC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800095c:	f000 fb7e 	bl	800105c <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000964:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000968:	2204      	movs	r2, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4828      	ldr	r0, [pc, #160]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 800096e:	f007 fd4f 	bl	8008410 <HAL_TIM_OC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000978:	f000 fb70 	bl	800105c <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000984:	2208      	movs	r2, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 800098a:	f007 fd41 	bl	8008410 <HAL_TIM_OC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000994:	f000 fb62 	bl	800105c <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 8000998:	2303      	movs	r3, #3
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800099c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a0:	220c      	movs	r2, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	481a      	ldr	r0, [pc, #104]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80009a6:	f007 fd33 	bl	8008410 <HAL_TIM_OC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80009b0:	f000 fb54 	bl	800105c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 80009f2:	f009 f921 	bl	8009c38 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80009fc:	f000 fb2e 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MX_TIM1_Init+0x1ac>)
 8000a02:	f000 fdf7 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3770      	adds	r7, #112	@ 0x70
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200004cc 	.word	0x200004cc
 8000a14:	40012c00 	.word	0x40012c00

08000a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4a:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a52:	4b35      	ldr	r3, [pc, #212]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b33      	ldr	r3, [pc, #204]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a72:	482d      	ldr	r0, [pc, #180]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a74:	f006 fb76 	bl	8007164 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 faed 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4823      	ldr	r0, [pc, #140]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000a9c:	f007 fee2 	bl	8008864 <HAL_TIM_ConfigClockSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000aa6:	f000 fad9 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aaa:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000aac:	f006 fe0e 	bl	80076cc <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000ab6:	f000 fad1 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000aca:	f009 f81f 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 fac2 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	@ 0x60
 8000ada:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000adc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2208      	movs	r2, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000af2:	f007 fda3 	bl	800863c <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000afc:	f000 faae 	bl	800105c <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_TIM2_Init+0x114>)
 8000b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	220c      	movs	r2, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000b0c:	f007 fd96 	bl	800863c <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000b16:	f000 faa1 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b1a:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <MX_TIM2_Init+0x110>)
 8000b1c:	f000 fd6a 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3738      	adds	r7, #56	@ 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000518 	.word	0x20000518
 8000b2c:	000f4240 	.word	0x000f4240

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b62:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b64:	4a2c      	ldr	r2, [pc, #176]	@ (8000c18 <MX_TIM3_Init+0xe8>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000b74:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b76:	22c8      	movs	r2, #200	@ 0xc8
 8000b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b86:	4823      	ldr	r0, [pc, #140]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000b88:	f006 faec 	bl	8007164 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b92:	f000 fa63 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481c      	ldr	r0, [pc, #112]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000ba4:	f007 fe5e 	bl	8008864 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bae:	f000 fa55 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bb2:	4818      	ldr	r0, [pc, #96]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000bb4:	f006 fd8a 	bl	80076cc <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bbe:	f000 fa4d 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4810      	ldr	r0, [pc, #64]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000bd2:	f008 ff9b 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bdc:	f000 fa3e 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000bf8:	f007 fd20 	bl	800863c <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c02:	f000 fa2b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c06:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <MX_TIM3_Init+0xe4>)
 8000c08:	f000 fcf4 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	@ 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000564 	.word	0x20000564
 8000c18:	40000400 	.word	0x40000400

08000c1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb8 <MX_TIM4_Init+0x9c>)
 8000c3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c42:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000c46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c50:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c62:	4814      	ldr	r0, [pc, #80]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c64:	f006 fa7e 	bl	8007164 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c6e:	f000 f9f5 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c80:	f007 fdf0 	bl	8008864 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000c8a:	f000 f9e7 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <MX_TIM4_Init+0x98>)
 8000c9c:	f008 ff36 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000ca6:	f000 f9d9 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200005b0 	.word	0x200005b0
 8000cb8:	40000800 	.word	0x40000800

08000cbc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	@ (8000df4 <MX_TIM15_Init+0x138>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b3a      	ldr	r3, [pc, #232]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b37      	ldr	r3, [pc, #220]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d18:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d24:	4832      	ldr	r0, [pc, #200]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d26:	f006 fa1d 	bl	8007164 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000d30:	f000 f994 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d38:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482b      	ldr	r0, [pc, #172]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d42:	f007 fd8f 	bl	8008864 <HAL_TIM_ConfigClockSource>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000d4c:	f000 f986 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d50:	4827      	ldr	r0, [pc, #156]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d52:	f007 f85b 	bl	8007e0c <HAL_TIM_IC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000d5c:	f000 f97e 	bl	800105c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d60:	2304      	movs	r3, #4
 8000d62:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d64:	2350      	movs	r3, #80	@ 0x50
 8000d66:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	481e      	ldr	r0, [pc, #120]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d78:	f007 fe8a 	bl	8008a90 <HAL_TIM_SlaveConfigSynchro>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8000d82:	f000 f96b 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000d96:	f008 feb9 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8000da0:	f000 f95c 	bl	800105c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000da4:	2302      	movs	r3, #2
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000da8:	2301      	movs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000dbc:	f007 fba2 	bl	8008504 <HAL_TIM_IC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000dc6:	f000 f949 	bl	800105c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_TIM15_Init+0x134>)
 8000dda:	f007 fb93 	bl	8008504 <HAL_TIM_IC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000de4:	f000 f93a 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3740      	adds	r7, #64	@ 0x40
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200005fc 	.word	0x200005fc
 8000df4:	40014000 	.word	0x40014000

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e02:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_DMA_Init+0x80>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	200b      	movs	r0, #11
 8000e34:	f002 ff29 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e38:	200b      	movs	r0, #11
 8000e3a:	f002 ff40 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	200c      	movs	r0, #12
 8000e44:	f002 ff21 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e48:	200c      	movs	r0, #12
 8000e4a:	f002 ff38 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200d      	movs	r0, #13
 8000e54:	f002 ff19 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e58:	200d      	movs	r0, #13
 8000e5a:	f002 ff30 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200e      	movs	r0, #14
 8000e64:	f002 ff11 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e68:	200e      	movs	r0, #14
 8000e6a:	f002 ff28 	bl	8003cbe <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e92:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a24      	ldr	r2, [pc, #144]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a1e      	ldr	r2, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_GPIO_Init+0xac>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f003 faee 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8000f00:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f003 f95c 	bl	80041d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d114      	bne.n	8000f66 <HAL_ADC_ConvHalfCpltCallback+0x3a>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e00a      	b.n	8000f58 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000f42:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4a:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f5e:	d3f0      	bcc.n	8000f42 <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]


#endif


}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200026ec 	.word	0x200026ec
 8000f78:	200006b8 	.word	0x200006b8
 8000f7c:	200016b8 	.word	0x200016b8

08000f80 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d115      	bne.n	8000fbc <HAL_ADC_ConvCpltCallback+0x3c>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e00a      	b.n	8000fae <HAL_ADC_ConvCpltCallback+0x2e>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa0:	490b      	ldr	r1, [pc, #44]	@ (8000fd0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb4:	d3f0      	bcc.n	8000f98 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	200026ec 	.word	0x200026ec
 8000fcc:	200006b8 	.word	0x200006b8
 8000fd0:	200016b8 	.word	0x200016b8

08000fd4 <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12d      	bne.n	8001042 <HAL_TIM_IC_CaptureCallback+0x6e>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7f1b      	ldrb	r3, [r3, #28]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d129      	bne.n	8001042 <HAL_TIM_IC_CaptureCallback+0x6e>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f007 fd8f 	bl	8008b14 <HAL_TIM_ReadCapturedValue>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000ffa:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d018      	beq.n	8001036 <HAL_TIM_IC_CaptureCallback+0x62>
       {
         /* Duty cycle computation */
         uwDutyCycle = ((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 10000) / uwIC2Value;
 8001004:	2104      	movs	r1, #4
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f007 fd84 	bl	8008b14 <HAL_TIM_ReadCapturedValue>
 800100c:	4603      	mov	r3, r0
 800100e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001012:	fb03 f202 	mul.w	r2, r3, r2
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001020:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 8001022:	f005 fda9 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8001026:	4602      	mov	r2, r0
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001032:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 8001034:	e005      	b.n	8001042 <HAL_TIM_IC_CaptureCallback+0x6e>
         uwDutyCycle = 0;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_TIM_IC_CaptureCallback+0x84>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 }
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40014000 	.word	0x40014000
 8001050:	200006a8 	.word	0x200006a8
 8001054:	200006ac 	.word	0x200006ac
 8001058:	200006b0 	.word	0x200006b0

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2110      	movs	r1, #16
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f003 fa38 	bl	80044dc <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_MspInit+0x58>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_MspInit+0x58>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	@ 0x60
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_MspInit+0x58>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_MspInit+0x58>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <HAL_MspInit+0x58>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	@ 0x58
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_MspInit+0x58>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 fece 	bl	8001e48 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 fea3 	bl	8001df8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80010b2:	f000 fedd 	bl	8001e70 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 feb2 	bl	8001e20 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010bc:	f005 f8fe 	bl	80062bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0a0      	sub	sp, #128	@ 0x80
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	2254      	movs	r2, #84	@ 0x54
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00d fb65 	bl	800e7bc <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010fa:	d158      	bne.n	80011ae <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001102:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001106:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fddb 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001118:	f7ff ffa0 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800111c:	4b87      	ldr	r3, [pc, #540]	@ (800133c <HAL_ADC_MspInit+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a86      	ldr	r2, [pc, #536]	@ (800133c <HAL_ADC_MspInit+0x270>)
 8001124:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001126:	4b85      	ldr	r3, [pc, #532]	@ (800133c <HAL_ADC_MspInit+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800112e:	4b84      	ldr	r3, [pc, #528]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a83      	ldr	r2, [pc, #524]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 8001134:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b81      	ldr	r3, [pc, #516]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001146:	4b7f      	ldr	r3, [pc, #508]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001148:	4a7f      	ldr	r2, [pc, #508]	@ (8001348 <HAL_ADC_MspInit+0x27c>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800114c:	4b7d      	ldr	r3, [pc, #500]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 800114e:	2205      	movs	r2, #5
 8001150:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001152:	4b7c      	ldr	r3, [pc, #496]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b7a      	ldr	r3, [pc, #488]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b79      	ldr	r3, [pc, #484]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001164:	4b77      	ldr	r3, [pc, #476]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800116c:	4b75      	ldr	r3, [pc, #468]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 800116e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001172:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001174:	4b73      	ldr	r3, [pc, #460]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001176:	2220      	movs	r2, #32
 8001178:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001180:	4870      	ldr	r0, [pc, #448]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001182:	f002 fdb7 	bl	8003cf4 <HAL_DMA_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800118c:	f7ff ff66 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a6c      	ldr	r2, [pc, #432]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001194:	655a      	str	r2, [r3, #84]	@ 0x54
 8001196:	4a6b      	ldr	r2, [pc, #428]	@ (8001344 <HAL_ADC_MspInit+0x278>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2012      	movs	r0, #18
 80011a2:	f002 fd72 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011a6:	2012      	movs	r0, #18
 80011a8:	f002 fd89 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011ac:	e0c2      	b.n	8001334 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a66      	ldr	r2, [pc, #408]	@ (800134c <HAL_ADC_MspInit+0x280>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d171      	bne.n	800129c <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fd7d 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 80011d4:	f7ff ff42 	bl	800105c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011d8:	4b58      	ldr	r3, [pc, #352]	@ (800133c <HAL_ADC_MspInit+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a57      	ldr	r2, [pc, #348]	@ (800133c <HAL_ADC_MspInit+0x270>)
 80011e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011e2:	4b56      	ldr	r3, [pc, #344]	@ (800133c <HAL_ADC_MspInit+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10b      	bne.n	8001202 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ea:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a54      	ldr	r2, [pc, #336]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80011f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a4e      	ldr	r2, [pc, #312]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800121a:	2302      	movs	r3, #2
 800121c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f002 ffd2 	bl	80041d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8001234:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001236:	4a47      	ldr	r2, [pc, #284]	@ (8001354 <HAL_ADC_MspInit+0x288>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800123a:	4b45      	ldr	r3, [pc, #276]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 800123c:	2224      	movs	r2, #36	@ 0x24
 800123e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001240:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b40      	ldr	r3, [pc, #256]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001258:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800125a:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 800125c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001260:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001262:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800126e:	4838      	ldr	r0, [pc, #224]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001270:	f002 fd40 	bl	8003cf4 <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 800127a:	f7ff feef 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a33      	ldr	r2, [pc, #204]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001282:	655a      	str	r2, [r3, #84]	@ 0x54
 8001284:	4a32      	ldr	r2, [pc, #200]	@ (8001350 <HAL_ADC_MspInit+0x284>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2012      	movs	r0, #18
 8001290:	f002 fcfb 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001294:	2012      	movs	r0, #18
 8001296:	f002 fd12 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 800129a:	e04b      	b.n	8001334 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001358 <HAL_ADC_MspInit+0x28c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d146      	bne.n	8001334 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80012ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012b0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fd06 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 80012c2:	f7ff fecb 	bl	800105c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_ADC_MspInit+0x274>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <HAL_ADC_MspInit+0x294>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012e6:	2225      	movs	r2, #37	@ 0x25
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_ADC_MspInit+0x290>)
 80012fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001302:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_ADC_MspInit+0x290>)
 8001306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800130a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_ADC_MspInit+0x290>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_ADC_MspInit+0x290>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <HAL_ADC_MspInit+0x290>)
 800131a:	f002 fceb 	bl	8003cf4 <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8001324:	f7ff fe9a 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_ADC_MspInit+0x290>)
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54
 800132e:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_ADC_MspInit+0x290>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001334:	bf00      	nop
 8001336:	3780      	adds	r7, #128	@ 0x80
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200026f0 	.word	0x200026f0
 8001340:	40021000 	.word	0x40021000
 8001344:	20000334 	.word	0x20000334
 8001348:	4002001c 	.word	0x4002001c
 800134c:	50000100 	.word	0x50000100
 8001350:	20000394 	.word	0x20000394
 8001354:	40020030 	.word	0x40020030
 8001358:	50000400 	.word	0x50000400
 800135c:	200003f4 	.word	0x200003f4
 8001360:	40020044 	.word	0x40020044

08001364 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_OPAMP_MspInit+0x9c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d119      	bne.n	80013ba <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b4:	f002 ff10 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80013b8:	e01d      	b.n	80013f6 <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <HAL_OPAMP_MspInit+0xa4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d118      	bne.n	80013f6 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <HAL_OPAMP_MspInit+0xa0>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013dc:	2302      	movs	r3, #2
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e0:	2303      	movs	r3, #3
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f002 fef1 	bl	80041d8 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	@ 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010300 	.word	0x40010300
 8001404:	40021000 	.word	0x40021000
 8001408:	40010308 	.word	0x40010308

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	@ 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6b      	ldr	r2, [pc, #428]	@ (80015d8 <HAL_TIM_Base_MspInit+0x1cc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d114      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	4b6b      	ldr	r3, [pc, #428]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	4a6a      	ldr	r2, [pc, #424]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001434:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001438:	6613      	str	r3, [r2, #96]	@ 0x60
 800143a:	4b68      	ldr	r3, [pc, #416]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2018      	movs	r0, #24
 800144c:	f002 fc1d 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001450:	2018      	movs	r0, #24
 8001452:	f002 fc34 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001456:	e0bb      	b.n	80015d0 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001460:	d129      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	4b5e      	ldr	r3, [pc, #376]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	4a5d      	ldr	r2, [pc, #372]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6593      	str	r3, [r2, #88]	@ 0x58
 800146e:	4b5b      	ldr	r3, [pc, #364]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a57      	ldr	r2, [pc, #348]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b55      	ldr	r3, [pc, #340]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80014a2:	230e      	movs	r3, #14
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b0:	f002 fe92 	bl	80041d8 <HAL_GPIO_Init>
}
 80014b4:	e08c      	b.n	80015d0 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a49      	ldr	r2, [pc, #292]	@ (80015e0 <HAL_TIM_Base_MspInit+0x1d4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d137      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c0:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c4:	4a45      	ldr	r2, [pc, #276]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 80014d8:	4b42      	ldr	r3, [pc, #264]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014da:	4a43      	ldr	r2, [pc, #268]	@ (80015e8 <HAL_TIM_Base_MspInit+0x1dc>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e4:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014e6:	2210      	movs	r2, #16
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 80014f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014fe:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 8001500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001504:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001512:	4834      	ldr	r0, [pc, #208]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 8001514:	f002 fbee 	bl	8003cf4 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 800151e:	f7ff fd9d 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 8001526:	631a      	str	r2, [r3, #48]	@ 0x30
 8001528:	4a2e      	ldr	r2, [pc, #184]	@ (80015e4 <HAL_TIM_Base_MspInit+0x1d8>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800152e:	e04f      	b.n	80015d0 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_TIM_Base_MspInit+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d114      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201e      	movs	r0, #30
 8001558:	f002 fb97 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800155c:	201e      	movs	r0, #30
 800155e:	f002 fbae 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 8001562:	e035      	b.n	80015d0 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <HAL_TIM_Base_MspInit+0x1e4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d130      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6613      	str	r3, [r2, #96]	@ 0x60
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_TIM_Base_MspInit+0x1d0>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80015ae:	2309      	movs	r3, #9
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015bc:	f002 fe0c 	bl	80041d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2018      	movs	r0, #24
 80015c6:	f002 fb60 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80015ca:	2018      	movs	r0, #24
 80015cc:	f002 fb77 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40000400 	.word	0x40000400
 80015e4:	20000648 	.word	0x20000648
 80015e8:	40020008 	.word	0x40020008
 80015ec:	40000800 	.word	0x40000800
 80015f0:	40014000 	.word	0x40014000

080015f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <HAL_TIM_MspPostInit+0xec>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d11c      	bne.n	8001650 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a32      	ldr	r2, [pc, #200]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800162e:	230f      	movs	r3, #15
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800163e:	2302      	movs	r3, #2
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4827      	ldr	r0, [pc, #156]	@ (80016e8 <HAL_TIM_MspPostInit+0xf4>)
 800164a:	f002 fdc5 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800164e:	e043      	b.n	80016d8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001658:	d11d      	bne.n	8001696 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001672:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4817      	ldr	r0, [pc, #92]	@ (80016ec <HAL_TIM_MspPostInit+0xf8>)
 8001690:	f002 fda2 	bl	80041d8 <HAL_GPIO_Init>
}
 8001694:	e020      	b.n	80016d8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <HAL_TIM_MspPostInit+0xfc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d11b      	bne.n	80016d8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_TIM_MspPostInit+0xf0>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80016c8:	230a      	movs	r3, #10
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <HAL_TIM_MspPostInit+0xf8>)
 80016d4:	f002 fd80 	bl	80041d8 <HAL_GPIO_Init>
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	@ 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40012c00 	.word	0x40012c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000400 	.word	0x48000400
 80016f0:	40000400 	.word	0x40000400

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <NMI_Handler+0x4>

080016fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <MemManage_Handler+0x4>

0800170c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <UsageFault_Handler+0x4>

0800171c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174a:	f000 fb15 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <DMA1_Channel1_IRQHandler+0x10>)
 800175a:	f002 fbee 	bl	8003f3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000648 	.word	0x20000648

08001768 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <DMA1_Channel2_IRQHandler+0x10>)
 800176e:	f002 fbe4 	bl	8003f3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000334 	.word	0x20000334

0800177c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <DMA1_Channel3_IRQHandler+0x10>)
 8001782:	f002 fbda 	bl	8003f3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000394 	.word	0x20000394

08001790 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Channel4_IRQHandler+0x10>)
 8001796:	f002 fbd0 	bl	8003f3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003f4 	.word	0x200003f4

080017a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a8:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <ADC1_2_IRQHandler+0x14>)
 80017aa:	f001 f855 	bl	8002858 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <ADC1_2_IRQHandler+0x18>)
 80017b0:	f001 f852 	bl	8002858 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200001f0 	.word	0x200001f0
 80017bc:	2000025c 	.word	0x2000025c

080017c0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <USB_LP_IRQHandler+0x10>)
 80017c6:	f003 f892 	bl	80048ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20005f60 	.word	0x20005f60

080017d4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80017da:	f006 fcc9 	bl	8008170 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80017de:	4803      	ldr	r0, [pc, #12]	@ (80017ec <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80017e0:	f006 fcc6 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200004cc 	.word	0x200004cc
 80017ec:	200005fc 	.word	0x200005fc

080017f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 80017f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <TIM4_IRQHandler+0x20>)
 80017fc:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 80017fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <TIM4_IRQHandler+0x24>)
 8001808:	f006 fcb2 	bl	8008170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200006b4 	.word	0x200006b4
 8001814:	200005b0 	.word	0x200005b0

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f00c ffc0 	bl	800e7cc <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20020000 	.word	0x20020000
 8001878:	00000400 	.word	0x00000400
 800187c:	200026f4 	.word	0x200026f4
 8001880:	200065a8 	.word	0x200065a8

08001884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e061      	b.n	8001978 <ws2812_update+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4936      	ldr	r1, [pc, #216]	@ (8001994 <ws2812_update+0xec>)
 80018ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <ws2812_update+0xf0>)
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4a34      	ldr	r2, [pc, #208]	@ (8001998 <ws2812_update+0xf0>)
 80018c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018cc:	4b33      	ldr	r3, [pc, #204]	@ (800199c <ws2812_update+0xf4>)
 80018ce:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <ws2812_update+0xf8>)
 80018d0:	4934      	ldr	r1, [pc, #208]	@ (80019a4 <ws2812_update+0xfc>)
 80018d2:	f000 f9b9 	bl	8001c48 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80018e4:	4a30      	ldr	r2, [pc, #192]	@ (80019a8 <ws2812_update+0x100>)
 80018e6:	4413      	add	r3, r2
 80018e8:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	71bb      	strb	r3, [r7, #6]
 80018ee:	e03d      	b.n	800196c <ws2812_update+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <ws2812_update+0xfc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <ws2812_update+0x60>
 8001904:	218c      	movs	r1, #140	@ 0x8c
 8001906:	e000      	b.n	800190a <ws2812_update+0x62>
 8001908:	2146      	movs	r1, #70	@ 0x46
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	4413      	add	r3, r2
 8001912:	460a      	mov	r2, r1
 8001914:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <ws2812_update+0xf8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <ws2812_update+0x86>
 800192a:	218c      	movs	r1, #140	@ 0x8c
 800192c:	e000      	b.n	8001930 <ws2812_update+0x88>
 800192e:	2146      	movs	r1, #70	@ 0x46
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	3308      	adds	r3, #8
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	460a      	mov	r2, r1
 800193c:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800193e:	4b17      	ldr	r3, [pc, #92]	@ (800199c <ws2812_update+0xf4>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <ws2812_update+0xae>
 8001952:	218c      	movs	r1, #140	@ 0x8c
 8001954:	e000      	b.n	8001958 <ws2812_update+0xb0>
 8001956:	2146      	movs	r1, #70	@ 0x46
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	3310      	adds	r3, #16
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	460a      	mov	r2, r1
 8001964:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001966:	79bb      	ldrb	r3, [r7, #6]
 8001968:	3301      	adds	r3, #1
 800196a:	71bb      	strb	r3, [r7, #6]
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	2b07      	cmp	r3, #7
 8001970:	d9be      	bls.n	80018f0 <ws2812_update+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3301      	adds	r3, #1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b63      	cmp	r3, #99	@ 0x63
 800197c:	d99a      	bls.n	80018b4 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 800197e:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <ws2812_update+0x100>)
 8001984:	210c      	movs	r1, #12
 8001986:	4809      	ldr	r0, [pc, #36]	@ (80019ac <ws2812_update+0x104>)
 8001988:	f006 f814 	bl	80079b4 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200026f8 	.word	0x200026f8
 8001998:	20002888 	.word	0x20002888
 800199c:	20002a1a 	.word	0x20002a1a
 80019a0:	20002a19 	.word	0x20002a19
 80019a4:	20002a18 	.word	0x20002a18
 80019a8:	20002a1c 	.word	0x20002a1c
 80019ac:	20000564 	.word	0x20000564

080019b0 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
 80019c4:	e062      	b.n	8001a8c <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <ws2812_gradient+0x1d4>)
 80019ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	4a6d      	ldr	r2, [pc, #436]	@ (8001b88 <ws2812_gradient+0x1d8>)
 80019d2:	1899      	adds	r1, r3, r2
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	4a6d      	ldr	r2, [pc, #436]	@ (8001b8c <ws2812_gradient+0x1dc>)
 80019d8:	441a      	add	r2, r3
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	4c6c      	ldr	r4, [pc, #432]	@ (8001b90 <ws2812_gradient+0x1e0>)
 80019de:	4423      	add	r3, r4
 80019e0:	f000 f932 	bl	8001c48 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001b94 <ws2812_gradient+0x1e4>)
 80019e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ec:	f107 030f 	add.w	r3, r7, #15
 80019f0:	f107 0210 	add.w	r2, r7, #16
 80019f4:	f107 0111 	add.w	r1, r7, #17
 80019f8:	f000 f926 	bl	8001c48 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 80019fc:	7c7b      	ldrb	r3, [r7, #17]
 80019fe:	4619      	mov	r1, r3
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	4a61      	ldr	r2, [pc, #388]	@ (8001b88 <ws2812_gradient+0x1d8>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	1acb      	subs	r3, r1, r3
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a20:	4a5d      	ldr	r2, [pc, #372]	@ (8001b98 <ws2812_gradient+0x1e8>)
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	4a56      	ldr	r2, [pc, #344]	@ (8001b8c <ws2812_gradient+0x1dc>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	1acb      	subs	r3, r1, r3
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	4a53      	ldr	r2, [pc, #332]	@ (8001b9c <ws2812_gradient+0x1ec>)
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b90 <ws2812_gradient+0x1e0>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	1acb      	subs	r3, r1, r3
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7c:	4a48      	ldr	r2, [pc, #288]	@ (8001ba0 <ws2812_gradient+0x1f0>)
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b63      	cmp	r3, #99	@ 0x63
 8001a90:	d999      	bls.n	80019c6 <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8001a92:	2301      	movs	r3, #1
 8001a94:	75bb      	strb	r3, [r7, #22]
 8001a96:	e06b      	b.n	8001b70 <ws2812_gradient+0x1c0>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	757b      	strb	r3, [r7, #21]
 8001a9c:	e05c      	b.n	8001b58 <ws2812_gradient+0x1a8>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8001a9e:	7d7b      	ldrb	r3, [r7, #21]
 8001aa0:	4a39      	ldr	r2, [pc, #228]	@ (8001b88 <ws2812_gradient+0x1d8>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aac:	7d7b      	ldrb	r3, [r7, #21]
 8001aae:	4a3a      	ldr	r2, [pc, #232]	@ (8001b98 <ws2812_gradient+0x1e8>)
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	edd3 6a00 	vldr	s13, [r3]
 8001ab8:	7dbb      	ldrb	r3, [r7, #22]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ace:	edc7 7a00 	vstr	s15, [r7]
 8001ad2:	783b      	ldrb	r3, [r7, #0]
 8001ad4:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8001ad6:	7d7b      	ldrb	r3, [r7, #21]
 8001ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b8c <ws2812_gradient+0x1dc>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae4:	7d7b      	ldrb	r3, [r7, #21]
 8001ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b9c <ws2812_gradient+0x1ec>)
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	edd3 6a00 	vldr	s13, [r3]
 8001af0:	7dbb      	ldrb	r3, [r7, #22]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b06:	edc7 7a00 	vstr	s15, [r7]
 8001b0a:	783b      	ldrb	r3, [r7, #0]
 8001b0c:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8001b0e:	7d7b      	ldrb	r3, [r7, #21]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <ws2812_gradient+0x1e0>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1c:	7d7b      	ldrb	r3, [r7, #21]
 8001b1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ba0 <ws2812_gradient+0x1f0>)
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	edd3 6a00 	vldr	s13, [r3]
 8001b28:	7dbb      	ldrb	r3, [r7, #22]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3e:	edc7 7a00 	vstr	s15, [r7]
 8001b42:	783b      	ldrb	r3, [r7, #0]
 8001b44:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8001b46:	7cbb      	ldrb	r3, [r7, #18]
 8001b48:	7cfa      	ldrb	r2, [r7, #19]
 8001b4a:	7d39      	ldrb	r1, [r7, #20]
 8001b4c:	7d78      	ldrb	r0, [r7, #21]
 8001b4e:	f000 f829 	bl	8001ba4 <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	3301      	adds	r3, #1
 8001b56:	757b      	strb	r3, [r7, #21]
 8001b58:	7d7b      	ldrb	r3, [r7, #21]
 8001b5a:	2b63      	cmp	r3, #99	@ 0x63
 8001b5c:	d99f      	bls.n	8001a9e <ws2812_gradient+0xee>
		}

		ws2812_update();
 8001b5e:	f7ff fea3 	bl	80018a8 <ws2812_update>
		HAL_Delay(delay_ms);
 8001b62:	88bb      	ldrh	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f925 	bl	8001db4 <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8001b6a:	7dbb      	ldrb	r3, [r7, #22]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	75bb      	strb	r3, [r7, #22]
 8001b70:	7dba      	ldrb	r2, [r7, #22]
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d98f      	bls.n	8001a98 <ws2812_gradient+0xe8>
	}
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20002888 	.word	0x20002888
 8001b88:	200044ac 	.word	0x200044ac
 8001b8c:	20004510 	.word	0x20004510
 8001b90:	20004574 	.word	0x20004574
 8001b94:	200026f8 	.word	0x200026f8
 8001b98:	200045d8 	.word	0x200045d8
 8001b9c:	20004768 	.word	0x20004768
 8001ba0:	200048f8 	.word	0x200048f8

08001ba4 <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	71fb      	strb	r3, [r7, #7]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71bb      	strb	r3, [r7, #6]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	717b      	strb	r3, [r7, #5]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 8001bc2:	79fc      	ldrb	r4, [r7, #7]
 8001bc4:	793a      	ldrb	r2, [r7, #4]
 8001bc6:	7979      	ldrb	r1, [r7, #5]
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f826 	bl	8001c1c <rgb_to_color>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a03      	ldr	r2, [pc, #12]	@ (8001be0 <ws2812_set_rgb+0x3c>)
 8001bd4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}
 8001be0:	200026f8 	.word	0x200026f8

08001be4 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e007      	b.n	8001c02 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <ws2812_set_all+0x34>)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b63      	cmp	r3, #99	@ 0x63
 8001c06:	d9f4      	bls.n	8001bf2 <ws2812_set_all+0xe>
	}
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200026f8 	.word	0x200026f8

08001c1c <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	460b      	mov	r3, r1
 8001c28:	71bb      	strb	r3, [r7, #6]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	431a      	orrs	r2, r3
 8001c38:	797b      	ldrb	r3, [r7, #5]
 8001c3a:	4313      	orrs	r3, r2
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c84:	f7ff fdfe 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f00c fd93 	bl	800e7d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7fe fb05 	bl	80002c0 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   r0, =_estack
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cc4:	0800f188 	.word	0x0800f188
  ldr r2, =_sbss
 8001cc8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ccc:	200065a4 	.word	0x200065a4

08001cd0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC3_IRQHandler>

08001cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f001 ffc9 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f80e 	bl	8001d04 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf4:	f7ff f9bc 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_InitTick+0x68>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d022      	beq.n	8001d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_InitTick+0x6c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_InitTick+0x68>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 ffd4 	bl	8003cda <HAL_SYSTICK_Config>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d809      	bhi.n	8001d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
 8001d46:	f001 ffa0 	bl	8003c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_InitTick+0x70>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e004      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_IncTick+0x20>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <HAL_IncTick+0x1c>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20004a88 	.word	0x20004a88
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20004a88 	.word	0x20004a88

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d004      	beq.n	8001dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_Delay+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd8:	bf00      	nop
 8001dda:	f7ff ffdf 	bl	8001d9c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f7      	bhi.n	8001dda <HAL_Delay+0x26>
  {
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e08:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40010030 	.word	0x40010030

08001e20 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 0202 	bic.w	r2, r3, #2
 8001e30:	4904      	ldr	r1, [pc, #16]	@ (8001e44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40010030 	.word	0x40010030

08001e48 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001e58:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40010030 	.word	0x40010030

08001e70 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e82:	f7ff ff8b 	bl	8001d9c <HAL_GetTick>
 8001e86:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001e88:	e008      	b.n	8001e9c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001e8a:	f7ff ff87 	bl	8001d9c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d901      	bls.n	8001e9c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e006      	b.n	8001eaa <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40010030 	.word	0x40010030

08001eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	@ 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <LL_ADC_SetOffset+0x44>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	03fff000 	.word	0x03fff000

08001f68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3360      	adds	r3, #96	@ 0x60
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3360      	adds	r3, #96	@ 0x60
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3360      	adds	r3, #96	@ 0x60
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3360      	adds	r3, #96	@ 0x60
 8002010:	461a      	mov	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	615a      	str	r2, [r3, #20]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3330      	adds	r3, #48	@ 0x30
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	4413      	add	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	211f      	movs	r1, #31
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	f003 011f 	and.w	r1, r3, #31
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	431a      	orrs	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3314      	adds	r3, #20
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	0e5b      	lsrs	r3, r3, #25
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	4413      	add	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0d1b      	lsrs	r3, r3, #20
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2107      	movs	r1, #7
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0d1b      	lsrs	r3, r3, #20
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0318 	and.w	r3, r3, #24
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <LL_ADC_SetChannelSingleDiff+0x44>)
 800217c:	40d9      	lsrs	r1, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	400b      	ands	r3, r1
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	431a      	orrs	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	0007ffff 	.word	0x0007ffff

080021a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 031f 	and.w	r3, r3, #31
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6093      	str	r3, [r2, #8]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800220c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002210:	d101      	bne.n	8002216 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002234:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002238:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_IsEnabled+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_IsEnabled+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d101      	bne.n	8002302 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b08      	cmp	r3, #8
 8002322:	d101      	bne.n	8002328 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1a9      	b.n	80026a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe feb3 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff3f 	bl	80021fc <LL_ADC_IsDeepPowerDownEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff25 	bl	80021d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff5a 	bl	800224c <LL_ADC_IsInternalRegulatorEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff3e 	bl	8002224 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a8:	4b9c      	ldr	r3, [pc, #624]	@ (800261c <HAL_ADC_Init+0x2e4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002620 <HAL_ADC_Init+0x2e8>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	099b      	lsrs	r3, r3, #6
 80023b6:	3301      	adds	r3, #1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff3c 	bl	800224c <LL_ADC_IsInternalRegulatorEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff75 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 8002400:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8142 	bne.w	8002694 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 813e 	bne.w	8002694 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff35 	bl	800229c <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d141      	bne.n	80024bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002440:	d004      	beq.n	800244c <HAL_ADC_Init+0x114>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_ADC_Init+0x2ec>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10f      	bne.n	800246c <HAL_ADC_Init+0x134>
 800244c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002450:	f7ff ff24 	bl	800229c <LL_ADC_IsEnabled>
 8002454:	4604      	mov	r4, r0
 8002456:	4873      	ldr	r0, [pc, #460]	@ (8002624 <HAL_ADC_Init+0x2ec>)
 8002458:	f7ff ff20 	bl	800229c <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e012      	b.n	8002492 <HAL_ADC_Init+0x15a>
 800246c:	486e      	ldr	r0, [pc, #440]	@ (8002628 <HAL_ADC_Init+0x2f0>)
 800246e:	f7ff ff15 	bl	800229c <LL_ADC_IsEnabled>
 8002472:	4604      	mov	r4, r0
 8002474:	486d      	ldr	r0, [pc, #436]	@ (800262c <HAL_ADC_Init+0x2f4>)
 8002476:	f7ff ff11 	bl	800229c <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	431c      	orrs	r4, r3
 800247e:	486c      	ldr	r0, [pc, #432]	@ (8002630 <HAL_ADC_Init+0x2f8>)
 8002480:	f7ff ff0c 	bl	800229c <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	4323      	orrs	r3, r4
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Init+0x172>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002624 <HAL_ADC_Init+0x2ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x176>
 80024aa:	4a62      	ldr	r2, [pc, #392]	@ (8002634 <HAL_ADC_Init+0x2fc>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_Init+0x178>
 80024ae:	4a62      	ldr	r2, [pc, #392]	@ (8002638 <HAL_ADC_Init+0x300>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff fcfe 	bl	8001eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f5b      	ldrb	r3, [r3, #29]
 80024c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d106      	bne.n	80024f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	045b      	lsls	r3, r3, #17
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b48      	ldr	r3, [pc, #288]	@ (800263c <HAL_ADC_Init+0x304>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	430b      	orrs	r3, r1
 8002526:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fee4 	bl	8002310 <LL_ADC_INJ_IsConversionOngoing>
 8002548:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d17f      	bne.n	8002650 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d17c      	bne.n	8002650 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800255a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002562:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002572:	f023 0302 	bic.w	r3, r3, #2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	430b      	orrs	r3, r1
 800257e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002596:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6911      	ldr	r1, [r2, #16]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025b6:	e013      	b.n	80025e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d12a      	bne.n	8002640 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800260c:	430a      	orrs	r2, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	611a      	str	r2, [r3, #16]
 800261a:	e019      	b.n	8002650 <HAL_ADC_Init+0x318>
 800261c:	20000000 	.word	0x20000000
 8002620:	053e2d63 	.word	0x053e2d63
 8002624:	50000100 	.word	0x50000100
 8002628:	50000400 	.word	0x50000400
 800262c:	50000500 	.word	0x50000500
 8002630:	50000600 	.word	0x50000600
 8002634:	50000300 	.word	0x50000300
 8002638:	50000700 	.word	0x50000700
 800263c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10c      	bne.n	8002672 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f023 010f 	bic.w	r1, r3, #15
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002670:	e007      	b.n	8002682 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 020f 	bic.w	r2, r2, #15
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002692:	e007      	b.n	80026a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	f043 0210 	orr.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	bf00      	nop

080026b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c4:	d004      	beq.n	80026d0 <HAL_ADC_Start_DMA+0x20>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002834 <HAL_ADC_Start_DMA+0x184>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_Start_DMA+0x24>
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_ADC_Start_DMA+0x188>)
 80026d2:	e000      	b.n	80026d6 <HAL_ADC_Start_DMA+0x26>
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <HAL_ADC_Start_DMA+0x18c>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fd62 	bl	80021a0 <LL_ADC_GetMultimode>
 80026dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fe01 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 809b 	bne.w	8002826 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Start_DMA+0x4e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e096      	b.n	800282c <HAL_ADC_Start_DMA+0x17c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a4d      	ldr	r2, [pc, #308]	@ (8002840 <HAL_ADC_Start_DMA+0x190>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d008      	beq.n	8002722 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d002      	beq.n	8002722 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b09      	cmp	r3, #9
 8002720:	d17a      	bne.n	8002818 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 ff4c 	bl	80035c0 <ADC_Enable>
 8002728:	4603      	mov	r3, r0
 800272a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d16d      	bne.n	800280e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3a      	ldr	r2, [pc, #232]	@ (8002834 <HAL_ADC_Start_DMA+0x184>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_ADC_Start_DMA+0xb4>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3b      	ldr	r2, [pc, #236]	@ (8002844 <HAL_ADC_Start_DMA+0x194>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d002      	beq.n	8002760 <HAL_ADC_Start_DMA+0xb0>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e003      	b.n	8002768 <HAL_ADC_Start_DMA+0xb8>
 8002760:	4b39      	ldr	r3, [pc, #228]	@ (8002848 <HAL_ADC_Start_DMA+0x198>)
 8002762:	e001      	b.n	8002768 <HAL_ADC_Start_DMA+0xb8>
 8002764:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4293      	cmp	r3, r2
 800276e:	d002      	beq.n	8002776 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	f023 0206 	bic.w	r2, r3, #6
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	661a      	str	r2, [r3, #96]	@ 0x60
 800279a:	e002      	b.n	80027a2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a6:	4a29      	ldr	r2, [pc, #164]	@ (800284c <HAL_ADC_Start_DMA+0x19c>)
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <HAL_ADC_Start_DMA+0x1a0>)
 80027b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <HAL_ADC_Start_DMA+0x1a4>)
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	221c      	movs	r2, #28
 80027c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0210 	orr.w	r2, r2, #16
 80027d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3340      	adds	r3, #64	@ 0x40
 80027f4:	4619      	mov	r1, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f001 fb23 	bl	8003e44 <HAL_DMA_Start_IT>
 80027fe:	4603      	mov	r3, r0
 8002800:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fd5b 	bl	80022c2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800280c:	e00d      	b.n	800282a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002816:	e008      	b.n	800282a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002824:	e001      	b.n	800282a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	50000100 	.word	0x50000100
 8002838:	50000300 	.word	0x50000300
 800283c:	50000700 	.word	0x50000700
 8002840:	50000600 	.word	0x50000600
 8002844:	50000500 	.word	0x50000500
 8002848:	50000400 	.word	0x50000400
 800284c:	080036ed 	.word	0x080036ed
 8002850:	080037c5 	.word	0x080037c5
 8002854:	080037e1 	.word	0x080037e1

08002858 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287c:	d004      	beq.n	8002888 <HAL_ADC_IRQHandler+0x30>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a8e      	ldr	r2, [pc, #568]	@ (8002abc <HAL_ADC_IRQHandler+0x264>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_ADC_IRQHandler+0x34>
 8002888:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac0 <HAL_ADC_IRQHandler+0x268>)
 800288a:	e000      	b.n	800288e <HAL_ADC_IRQHandler+0x36>
 800288c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac4 <HAL_ADC_IRQHandler+0x26c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc86 	bl	80021a0 <LL_ADC_GetMultimode>
 8002894:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x78>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fff4 	bl	80038b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_IRQHandler+0x8c>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8094 	beq.w	8002a18 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 808e 	beq.w	8002a18 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fb9f 	bl	800205c <LL_ADC_REG_IsTriggerSourceSWStart>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d072      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a64      	ldr	r2, [pc, #400]	@ (8002abc <HAL_ADC_IRQHandler+0x264>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_ADC_IRQHandler+0xea>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a65      	ldr	r2, [pc, #404]	@ (8002ac8 <HAL_ADC_IRQHandler+0x270>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d002      	beq.n	800293e <HAL_ADC_IRQHandler+0xe6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	e003      	b.n	8002946 <HAL_ADC_IRQHandler+0xee>
 800293e:	4b63      	ldr	r3, [pc, #396]	@ (8002acc <HAL_ADC_IRQHandler+0x274>)
 8002940:	e001      	b.n	8002946 <HAL_ADC_IRQHandler+0xee>
 8002942:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4293      	cmp	r3, r2
 800294c:	d008      	beq.n	8002960 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d002      	beq.n	8002960 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d104      	bne.n	800296a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e014      	b.n	8002994 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a53      	ldr	r2, [pc, #332]	@ (8002abc <HAL_ADC_IRQHandler+0x264>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_ADC_IRQHandler+0x130>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a53      	ldr	r2, [pc, #332]	@ (8002ac8 <HAL_ADC_IRQHandler+0x270>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d002      	beq.n	8002984 <HAL_ADC_IRQHandler+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e003      	b.n	800298c <HAL_ADC_IRQHandler+0x134>
 8002984:	4b51      	ldr	r3, [pc, #324]	@ (8002acc <HAL_ADC_IRQHandler+0x274>)
 8002986:	e001      	b.n	800298c <HAL_ADC_IRQHandler+0x134>
 8002988:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800298c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d135      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d12e      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fc9a 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11a      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020c 	bic.w	r2, r2, #12
 80029ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029f0:	e00b      	b.n	8002a0a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fab8 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	220c      	movs	r2, #12
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_ADC_IRQHandler+0x1d4>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80b3 	beq.w	8002b9e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80ad 	beq.w	8002b9e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fb3a 	bl	80020da <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff faf5 	bl	800205c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_ADC_IRQHandler+0x264>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_ADC_IRQHandler+0x23a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a11      	ldr	r2, [pc, #68]	@ (8002ac8 <HAL_ADC_IRQHandler+0x270>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x236>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_IRQHandler+0x23e>
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_ADC_IRQHandler+0x274>)
 8002a90:	e001      	b.n	8002a96 <HAL_ADC_IRQHandler+0x23e>
 8002a92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d008      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d002      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b07      	cmp	r3, #7
 8002aae:	d10f      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	e01f      	b.n	8002afa <HAL_ADC_IRQHandler+0x2a2>
 8002aba:	bf00      	nop
 8002abc:	50000100 	.word	0x50000100
 8002ac0:	50000300 	.word	0x50000300
 8002ac4:	50000700 	.word	0x50000700
 8002ac8:	50000500 	.word	0x50000500
 8002acc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a8b      	ldr	r2, [pc, #556]	@ (8002d04 <HAL_ADC_IRQHandler+0x4ac>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_ADC_IRQHandler+0x296>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8a      	ldr	r2, [pc, #552]	@ (8002d08 <HAL_ADC_IRQHandler+0x4b0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d002      	beq.n	8002aea <HAL_ADC_IRQHandler+0x292>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_IRQHandler+0x29a>
 8002aea:	4b88      	ldr	r3, [pc, #544]	@ (8002d0c <HAL_ADC_IRQHandler+0x4b4>)
 8002aec:	e001      	b.n	8002af2 <HAL_ADC_IRQHandler+0x29a>
 8002aee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002af2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d047      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x2c2>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03f      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d13a      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b24:	2b40      	cmp	r3, #64	@ 0x40
 8002b26:	d133      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12e      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fbea 	bl	8002310 <LL_ADC_INJ_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11a      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b50:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d112      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b76:	e00b      	b.n	8002b90 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f043 0210 	orr.w	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fe65 	bl	8003860 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2260      	movs	r2, #96	@ 0x60
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d011      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x374>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8aa 	bl	8002d18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x3a4>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fe4b 	bl	8003888 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x3d4>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fe3d 	bl	800389c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d043      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x466>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03e      	beq.n	8002cbe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4c:	e021      	b.n	8002c92 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x410>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a28      	ldr	r2, [pc, #160]	@ (8002d04 <HAL_ADC_IRQHandler+0x4ac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_IRQHandler+0x414>
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <HAL_ADC_IRQHandler+0x4b8>)
 8002c6a:	e000      	b.n	8002c6e <HAL_ADC_IRQHandler+0x416>
 8002c6c:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <HAL_ADC_IRQHandler+0x4bc>)
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff faa4 	bl	80021bc <LL_ADC_GetMultiDMATransfer>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7e:	e008      	b.n	8002c92 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10e      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	f043 0202 	orr.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f83b 	bl	8002d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2210      	movs	r2, #16
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x4a2>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	f043 0208 	orr.w	r2, r3, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fdbd 	bl	8003874 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	@ 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000500 	.word	0x50000500
 8002d0c:	50000400 	.word	0x50000400
 8002d10:	50000300 	.word	0x50000300
 8002d14:	50000700 	.word	0x50000700

08002d18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b0b6      	sub	sp, #216	@ 0xd8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x24>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f000 bc13 	b.w	800358a <HAL_ADC_ConfigChannel+0x84a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff faba 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 83f3 	bne.w	8003564 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f7ff f979 	bl	8002082 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff faa8 	bl	80022ea <LL_ADC_REG_IsConversionOngoing>
 8002d9a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fab4 	bl	8002310 <LL_ADC_INJ_IsConversionOngoing>
 8002da8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 81d9 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 81d4 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dc8:	d10f      	bne.n	8002dea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7ff f993 	bl	8002100 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f927 	bl	8002036 <LL_ADC_SetSamplingTimeCommonConfig>
 8002de8:	e00e      	b.n	8002e08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7ff f982 	bl	8002100 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f917 	bl	8002036 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d022      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e3a:	f7ff f871 	bl	8001f20 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6919      	ldr	r1, [r3, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7ff f8bd 	bl	8001fca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x126>
 8002e60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x128>
 8002e66:	2300      	movs	r3, #0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff f8c9 	bl	8002000 <LL_ADC_SetOffsetSaturation>
 8002e6e:	e17b      	b.n	8003168 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f876 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x15c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f86b 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	e01e      	b.n	8002eda <HAL_ADC_ConfigChannel+0x19a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f860 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e004      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	e018      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x1e4>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e004      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f82f 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff f813 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x222>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f808 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	e01e      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x260>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fffd 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e004      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x278>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2aa>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002fcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ffcc 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ffb0 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x2e8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe ffa5 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	f003 021f 	and.w	r2, r3, #31
 8003026:	e01e      	b.n	8003066 <HAL_ADC_ConfigChannel+0x326>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ff9a 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800304a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800304e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e004      	b.n	8003064 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800305a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <HAL_ADC_ConfigChannel+0x33e>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	e016      	b.n	80030ac <HAL_ADC_ConfigChannel+0x36c>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003096:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e004      	b.n	80030ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe ff6b 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2103      	movs	r1, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe ff4f 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x3aa>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2103      	movs	r1, #3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe ff44 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	e017      	b.n	800311a <HAL_ADC_ConfigChannel+0x3da>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2103      	movs	r1, #3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe ff39 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003104:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x3f2>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	e011      	b.n	8003156 <HAL_ADC_ConfigChannel+0x416>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003142:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800314e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	2103      	movs	r1, #3
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe ff16 	bl	8001f94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f895 	bl	800229c <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 813d 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f7fe ffe6 	bl	8002158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4aa2      	ldr	r2, [pc, #648]	@ (800341c <HAL_ADC_ConfigChannel+0x6dc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f040 812e 	bne.w	80033f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x480>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e019      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x4b4>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80031dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	bf94      	ite	ls
 80031ee:	2301      	movls	r3, #1
 80031f0:	2300      	movhi	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d079      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x4d4>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003212:	e015      	b.n	8003240 <HAL_ADC_ConfigChannel+0x500>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003224:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x520>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	e017      	b.n	8003290 <HAL_ADC_ConfigChannel+0x550>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800326e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003270:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800327c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x576>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
 80032b4:	e018      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x5a8>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80032d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e8:	430b      	orrs	r3, r1
 80032ea:	e07e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5c8>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003306:	e015      	b.n	8003334 <HAL_ADC_ConfigChannel+0x5f4>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e003      	b.n	800332c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3301      	adds	r3, #1
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x614>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	e017      	b.n	8003384 <HAL_ADC_ConfigChannel+0x644>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	61fb      	str	r3, [r7, #28]
  return result;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x670>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	3b1e      	subs	r3, #30
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	e01b      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x6a8>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	613b      	str	r3, [r7, #16]
  return result;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e003      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ee:	4619      	mov	r1, r3
 80033f0:	f7fe fe86 	bl	8002100 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_ADC_ConfigChannel+0x6e0>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80be 	beq.w	800357e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340a:	d004      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x6d6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_ADC_ConfigChannel+0x6e4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x6ec>
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_ADC_ConfigChannel+0x6e8>)
 8003418:	e009      	b.n	800342e <HAL_ADC_ConfigChannel+0x6ee>
 800341a:	bf00      	nop
 800341c:	407f0000 	.word	0x407f0000
 8003420:	80080000 	.word	0x80080000
 8003424:	50000100 	.word	0x50000100
 8003428:	50000300 	.word	0x50000300
 800342c:	4b59      	ldr	r3, [pc, #356]	@ (8003594 <HAL_ADC_ConfigChannel+0x854>)
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fd68 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 8003434:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a56      	ldr	r2, [pc, #344]	@ (8003598 <HAL_ADC_ConfigChannel+0x858>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_ADC_ConfigChannel+0x70c>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a55      	ldr	r2, [pc, #340]	@ (800359c <HAL_ADC_ConfigChannel+0x85c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d13a      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800344c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d134      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003460:	d005      	beq.n	800346e <HAL_ADC_ConfigChannel+0x72e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4e      	ldr	r2, [pc, #312]	@ (80035a0 <HAL_ADC_ConfigChannel+0x860>)
 8003468:	4293      	cmp	r3, r2
 800346a:	f040 8085 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003476:	d004      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x742>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a49      	ldr	r2, [pc, #292]	@ (80035a4 <HAL_ADC_ConfigChannel+0x864>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x746>
 8003482:	4a49      	ldr	r2, [pc, #292]	@ (80035a8 <HAL_ADC_ConfigChannel+0x868>)
 8003484:	e000      	b.n	8003488 <HAL_ADC_ConfigChannel+0x748>
 8003486:	4a43      	ldr	r2, [pc, #268]	@ (8003594 <HAL_ADC_ConfigChannel+0x854>)
 8003488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800348c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f7fe fd23 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003498:	4b44      	ldr	r3, [pc, #272]	@ (80035ac <HAL_ADC_ConfigChannel+0x86c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <HAL_ADC_ConfigChannel+0x870>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034b2:	e002      	b.n	80034ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f9      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034c0:	e05a      	b.n	8003578 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <HAL_ADC_ConfigChannel+0x874>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11f      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a31      	ldr	r2, [pc, #196]	@ (80035a4 <HAL_ADC_ConfigChannel+0x864>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d104      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x7ac>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a34      	ldr	r2, [pc, #208]	@ (80035b8 <HAL_ADC_ConfigChannel+0x878>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d047      	beq.n	800357c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034f4:	d004      	beq.n	8003500 <HAL_ADC_ConfigChannel+0x7c0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_ADC_ConfigChannel+0x864>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x7c4>
 8003500:	4a29      	ldr	r2, [pc, #164]	@ (80035a8 <HAL_ADC_ConfigChannel+0x868>)
 8003502:	e000      	b.n	8003506 <HAL_ADC_ConfigChannel+0x7c6>
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_ADC_ConfigChannel+0x854>)
 8003506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fce4 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003516:	e031      	b.n	800357c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a27      	ldr	r2, [pc, #156]	@ (80035bc <HAL_ADC_ConfigChannel+0x87c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12d      	bne.n	800357e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d127      	bne.n	800357e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <HAL_ADC_ConfigChannel+0x864>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADC_ConfigChannel+0x80c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_ADC_ConfigChannel+0x864>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x810>
 800354c:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <HAL_ADC_ConfigChannel+0x868>)
 800354e:	e000      	b.n	8003552 <HAL_ADC_ConfigChannel+0x812>
 8003550:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <HAL_ADC_ConfigChannel+0x854>)
 8003552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003556:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fcbe 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
 8003562:	e00c      	b.n	800357e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003576:	e002      	b.n	800357e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800357c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003586:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800358a:	4618      	mov	r0, r3
 800358c:	37d8      	adds	r7, #216	@ 0xd8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	50000700 	.word	0x50000700
 8003598:	c3210000 	.word	0xc3210000
 800359c:	90c00010 	.word	0x90c00010
 80035a0:	50000600 	.word	0x50000600
 80035a4:	50000100 	.word	0x50000100
 80035a8:	50000300 	.word	0x50000300
 80035ac:	20000000 	.word	0x20000000
 80035b0:	053e2d63 	.word	0x053e2d63
 80035b4:	c7520000 	.word	0xc7520000
 80035b8:	50000500 	.word	0x50000500
 80035bc:	cb840000 	.word	0xcb840000

080035c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fe63 	bl	800229c <LL_ADC_IsEnabled>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d176      	bne.n	80036ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	4b3c      	ldr	r3, [pc, #240]	@ (80036d4 <ADC_Enable+0x114>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e062      	b.n	80036cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe32 	bl	8002274 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003618:	d004      	beq.n	8003624 <ADC_Enable+0x64>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <ADC_Enable+0x118>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <ADC_Enable+0x68>
 8003624:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <ADC_Enable+0x11c>)
 8003626:	e000      	b.n	800362a <ADC_Enable+0x6a>
 8003628:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <ADC_Enable+0x120>)
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fc6a 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 8003630:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003636:	2b00      	cmp	r3, #0
 8003638:	d013      	beq.n	8003662 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800363a:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <ADC_Enable+0x124>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <ADC_Enable+0x128>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003654:	e002      	b.n	800365c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003662:	f7fe fb9b 	bl	8001d9c <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003668:	e028      	b.n	80036bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fe14 	bl	800229c <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fdf8 	bl	8002274 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003684:	f7fe fb8a 	bl	8001d9c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d914      	bls.n	80036bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d00d      	beq.n	80036bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e007      	b.n	80036cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d1cf      	bne.n	800366a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	8000003f 	.word	0x8000003f
 80036d8:	50000100 	.word	0x50000100
 80036dc:	50000300 	.word	0x50000300
 80036e0:	50000700 	.word	0x50000700
 80036e4:	20000000 	.word	0x20000000
 80036e8:	053e2d63 	.word	0x053e2d63

080036ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14b      	bne.n	800379e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fc99 	bl	800205c <LL_ADC_REG_IsTriggerSourceSWStart>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d032      	beq.n	8003796 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12b      	bne.n	8003796 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11f      	bne.n	8003796 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003762:	e018      	b.n	8003796 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d111      	bne.n	8003796 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7fd fbf2 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800379c:	e00e      	b.n	80037bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff fabe 	bl	8002d2c <HAL_ADC_ErrorCallback>
}
 80037b0:	e004      	b.n	80037bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7fd fbaa 	bl	8000f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	f043 0204 	orr.w	r2, r3, #4
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fa90 	bl	8002d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <LL_ADC_IsEnabled>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <LL_ADC_IsEnabled+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_IsEnabled+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_IsConversionOngoing>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d101      	bne.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b0a1      	sub	sp, #132	@ 0x84
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0e7      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038ea:	2300      	movs	r3, #0
 80038ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ee:	2300      	movs	r3, #0
 80038f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038fa:	d102      	bne.n	8003902 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	e009      	b.n	8003916 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d102      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800390c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	e001      	b.n	8003916 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0be      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff7f 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 800393c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff79 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 80a0 	bne.w	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 809c 	bne.w	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a55      	ldr	r2, [pc, #340]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800396c:	4b56      	ldr	r3, [pc, #344]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800396e:	e000      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003970:	4b56      	ldr	r3, [pc, #344]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003972:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d04b      	beq.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800397c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800398e:	035b      	lsls	r3, r3, #13
 8003990:	430b      	orrs	r3, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003996:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a0:	d004      	beq.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a45      	ldr	r2, [pc, #276]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10f      	bne.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80039ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039b0:	f7ff ff30 	bl	8003814 <LL_ADC_IsEnabled>
 80039b4:	4604      	mov	r4, r0
 80039b6:	4841      	ldr	r0, [pc, #260]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b8:	f7ff ff2c 	bl	8003814 <LL_ADC_IsEnabled>
 80039bc:	4603      	mov	r3, r0
 80039be:	4323      	orrs	r3, r4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80039cc:	483c      	ldr	r0, [pc, #240]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039ce:	f7ff ff21 	bl	8003814 <LL_ADC_IsEnabled>
 80039d2:	4604      	mov	r4, r0
 80039d4:	483b      	ldr	r0, [pc, #236]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039d6:	f7ff ff1d 	bl	8003814 <LL_ADC_IsEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	431c      	orrs	r4, r3
 80039de:	483c      	ldr	r0, [pc, #240]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039e0:	f7ff ff18 	bl	8003814 <LL_ADC_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4323      	orrs	r3, r4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d056      	beq.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039fe:	f023 030f 	bic.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6811      	ldr	r1, [r2, #0]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a10:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a12:	e047      	b.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a28:	d004      	beq.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10f      	bne.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a38:	f7ff feec 	bl	8003814 <LL_ADC_IsEnabled>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	481f      	ldr	r0, [pc, #124]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a40:	f7ff fee8 	bl	8003814 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4323      	orrs	r3, r4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e012      	b.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a54:	481a      	ldr	r0, [pc, #104]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a56:	f7ff fedd 	bl	8003814 <LL_ADC_IsEnabled>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4819      	ldr	r0, [pc, #100]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a5e:	f7ff fed9 	bl	8003814 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	431c      	orrs	r4, r3
 8003a66:	481a      	ldr	r0, [pc, #104]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a68:	f7ff fed4 	bl	8003814 <LL_ADC_IsEnabled>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4323      	orrs	r3, r4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8e:	e009      	b.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3784      	adds	r7, #132	@ 0x84
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	50000100 	.word	0x50000100
 8003ac0:	50000400 	.word	0x50000400
 8003ac4:	50000500 	.word	0x50000500
 8003ac8:	50000300 	.word	0x50000300
 8003acc:	50000700 	.word	0x50000700
 8003ad0:	50000600 	.word	0x50000600

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	@ (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	@ (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	@ (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff8e 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff29 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c98:	f7ff ff40 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff ff90 	bl	8003bc8 <NVIC_EncodePriority>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff5f 	bl	8003b74 <__NVIC_SetPriority>
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff33 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffa4 	bl	8003c30 <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e08d      	b.n	8003e22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <HAL_DMA_Init+0x138>)
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d80f      	bhi.n	8003d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_DMA_Init+0x13c>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4a45      	ldr	r2, [pc, #276]	@ (8003e34 <HAL_DMA_Init+0x140>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	@ (8003e38 <HAL_DMA_Init+0x144>)
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d30:	e00e      	b.n	8003d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b40      	ldr	r3, [pc, #256]	@ (8003e3c <HAL_DMA_Init+0x148>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e34 <HAL_DMA_Init+0x140>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e40 <HAL_DMA_Init+0x14c>)
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9b6 	bl	8004114 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003db0:	d102      	bne.n	8003db8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_DMA_Init+0x104>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d80c      	bhi.n	8003df8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9d6 	bl	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e008      	b.n	8003e0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40020407 	.word	0x40020407
 8003e30:	bffdfff8 	.word	0xbffdfff8
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	bffdfbf8 	.word	0xbffdfbf8
 8003e40:	40020400 	.word	0x40020400

08003e44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_DMA_Start_IT+0x20>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e066      	b.n	8003f32 <HAL_DMA_Start_IT+0xee>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d155      	bne.n	8003f24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8fb 	bl	8004098 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 020e 	orr.w	r2, r2, #14
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e00f      	b.n	8003edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 020a 	orr.w	r2, r2, #10
 8003eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e005      	b.n	8003f30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d026      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x7a>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d021      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0204 	bic.w	r2, r2, #4
 8003f8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d071      	beq.n	800408e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fb2:	e06c      	b.n	800408e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02e      	beq.n	8004026 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d029      	beq.n	8004026 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 020a 	bic.w	r2, r2, #10
 8003fee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	2102      	movs	r1, #2
 8004006:	fa01 f202 	lsl.w	r2, r1, r2
 800400a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d038      	beq.n	800408e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004024:	e033      	b.n	800408e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2208      	movs	r2, #8
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d025      	beq.n	8004090 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f202 	lsl.w	r2, r1, r2
 8004066:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800408e:	bf00      	nop
 8004090:	bf00      	nop
}
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f003 021f 	and.w	r2, r3, #31
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040f6:	e007      	b.n	8004108 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b16      	ldr	r3, [pc, #88]	@ (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004124:	429a      	cmp	r2, r3
 8004126:	d802      	bhi.n	800412e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004128:	4b15      	ldr	r3, [pc, #84]	@ (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e001      	b.n	8004132 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800412e:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004130:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3b08      	subs	r3, #8
 800413e:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a0b      	ldr	r2, [pc, #44]	@ (800418c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800415e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2201      	movs	r2, #1
 8004168:	409a      	lsls	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40020407 	.word	0x40020407
 8004180:	40020800 	.word	0x40020800
 8004184:	40020820 	.word	0x40020820
 8004188:	cccccccd 	.word	0xcccccccd
 800418c:	40020880 	.word	0x40020880

08004190 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	1000823f 	.word	0x1000823f
 80041d4:	40020940 	.word	0x40020940

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041e6:	e15a      	b.n	800449e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2101      	movs	r1, #1
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 814c 	beq.w	8004498 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d005      	beq.n	8004218 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004214:	2b02      	cmp	r3, #2
 8004216:	d130      	bne.n	800427a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800424e:	2201      	movs	r2, #1
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 0201 	and.w	r2, r3, #1
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b03      	cmp	r3, #3
 8004284:	d017      	beq.n	80042b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	2203      	movs	r2, #3
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d123      	bne.n	800430a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	08da      	lsrs	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3208      	adds	r2, #8
 80042ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	08da      	lsrs	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3208      	adds	r2, #8
 8004304:	6939      	ldr	r1, [r7, #16]
 8004306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0203 	and.w	r2, r3, #3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a6 	beq.w	8004498 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434c:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <HAL_GPIO_Init+0x2e4>)
 800434e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004350:	4a5a      	ldr	r2, [pc, #360]	@ (80044bc <HAL_GPIO_Init+0x2e4>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6613      	str	r3, [r2, #96]	@ 0x60
 8004358:	4b58      	ldr	r3, [pc, #352]	@ (80044bc <HAL_GPIO_Init+0x2e4>)
 800435a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004364:	4a56      	ldr	r2, [pc, #344]	@ (80044c0 <HAL_GPIO_Init+0x2e8>)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	3302      	adds	r3, #2
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800438e:	d01f      	beq.n	80043d0 <HAL_GPIO_Init+0x1f8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a4c      	ldr	r2, [pc, #304]	@ (80044c4 <HAL_GPIO_Init+0x2ec>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d019      	beq.n	80043cc <HAL_GPIO_Init+0x1f4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a4b      	ldr	r2, [pc, #300]	@ (80044c8 <HAL_GPIO_Init+0x2f0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_GPIO_Init+0x1f0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a4a      	ldr	r2, [pc, #296]	@ (80044cc <HAL_GPIO_Init+0x2f4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00d      	beq.n	80043c4 <HAL_GPIO_Init+0x1ec>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a49      	ldr	r2, [pc, #292]	@ (80044d0 <HAL_GPIO_Init+0x2f8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <HAL_GPIO_Init+0x1e8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a48      	ldr	r2, [pc, #288]	@ (80044d4 <HAL_GPIO_Init+0x2fc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <HAL_GPIO_Init+0x1e4>
 80043b8:	2305      	movs	r3, #5
 80043ba:	e00a      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043bc:	2306      	movs	r3, #6
 80043be:	e008      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043c0:	2304      	movs	r3, #4
 80043c2:	e006      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043c4:	2303      	movs	r3, #3
 80043c6:	e004      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e002      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_GPIO_Init+0x1fa>
 80043d0:	2300      	movs	r3, #0
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	f002 0203 	and.w	r2, r2, #3
 80043d8:	0092      	lsls	r2, r2, #2
 80043da:	4093      	lsls	r3, r2
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043e2:	4937      	ldr	r1, [pc, #220]	@ (80044c0 <HAL_GPIO_Init+0x2e8>)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043f0:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004414:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800441a:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43db      	mvns	r3, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800443e:	4a26      	ldr	r2, [pc, #152]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004444:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	43db      	mvns	r3, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800446e:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	43db      	mvns	r3, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004492:	4a11      	ldr	r2, [pc, #68]	@ (80044d8 <HAL_GPIO_Init+0x300>)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3301      	adds	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f47f ae9d 	bne.w	80041e8 <HAL_GPIO_Init+0x10>
  }
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40010000 	.word	0x40010000
 80044c4:	48000400 	.word	0x48000400
 80044c8:	48000800 	.word	0x48000800
 80044cc:	48000c00 	.word	0x48000c00
 80044d0:	48001000 	.word	0x48001000
 80044d4:	48001400 	.word	0x48001400
 80044d8:	40010400 	.word	0x40010400

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044f8:	e002      	b.n	8004500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0bb      	b.n	800469a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b05      	cmp	r3, #5
 800452c:	d101      	bne.n	8004532 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0b3      	b.n	800469a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d101      	bne.n	8004542 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0ab      	b.n	800469a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004542:	4b58      	ldr	r3, [pc, #352]	@ (80046a4 <HAL_OPAMP_Init+0x198>)
 8004544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004546:	4a57      	ldr	r2, [pc, #348]	@ (80046a4 <HAL_OPAMP_Init+0x198>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6613      	str	r3, [r2, #96]	@ 0x60
 800454e:	4b55      	ldr	r3, [pc, #340]	@ (80046a4 <HAL_OPAMP_Init+0x198>)
 8004550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fef8 	bl	8001364 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d003      	beq.n	8004584 <HAL_OPAMP_Init+0x78>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d133      	bne.n	80045ec <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0110 	bic.w	r1, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <HAL_OPAMP_Init+0x19c>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6851      	ldr	r1, [r2, #4]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	4311      	orrs	r1, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6912      	ldr	r2, [r2, #16]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	7d09      	ldrb	r1, [r1, #20]
 80045b8:	2901      	cmp	r1, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_OPAMP_Init+0xb6>
 80045bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045c0:	e000      	b.n	80045c4 <HAL_OPAMP_Init+0xb8>
 80045c2:	2100      	movs	r1, #0
 80045c4:	4311      	orrs	r1, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ca:	4311      	orrs	r1, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045d0:	4311      	orrs	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045d6:	04d2      	lsls	r2, r2, #19
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045de:	0612      	lsls	r2, r2, #24
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e035      	b.n	8004658 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0110 	bic.w	r1, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b27      	ldr	r3, [pc, #156]	@ (80046a8 <HAL_OPAMP_Init+0x19c>)
 800460a:	4013      	ands	r3, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6851      	ldr	r1, [r2, #4]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	4311      	orrs	r1, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	4311      	orrs	r1, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6912      	ldr	r2, [r2, #16]
 8004620:	430a      	orrs	r2, r1
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	7d09      	ldrb	r1, [r1, #20]
 8004626:	2901      	cmp	r1, #1
 8004628:	d102      	bne.n	8004630 <HAL_OPAMP_Init+0x124>
 800462a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800462e:	e000      	b.n	8004632 <HAL_OPAMP_Init+0x126>
 8004630:	2100      	movs	r1, #0
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800463e:	4311      	orrs	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004644:	04d2      	lsls	r2, r2, #19
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800464c:	0612      	lsls	r2, r2, #24
 800464e:	4311      	orrs	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	db10      	blt.n	8004684 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	e0003e11 	.word	0xe0003e11

080046ac <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e01d      	b.n	8004700 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b05      	cmp	r3, #5
 80046ce:	d102      	bne.n	80046d6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e014      	b.n	8004700 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10c      	bne.n	80046fc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80046fa:	e001      	b.n	8004700 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0c0      	b.n	80048a2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f009 fd1d 	bl	800e174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f005 fb67 	bl	8009e1a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e03e      	b.n	80047d0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	440b      	add	r3, r1
 8004760:	3311      	adds	r3, #17
 8004762:	2201      	movs	r2, #1
 8004764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	440b      	add	r3, r1
 8004774:	3310      	adds	r3, #16
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	3313      	adds	r3, #19
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	3320      	adds	r3, #32
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	440b      	add	r3, r1
 80047b0:	3324      	adds	r3, #36	@ 0x24
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3301      	adds	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3bb      	bcc.n	8004752 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e044      	b.n	800486a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	440b      	add	r3, r1
 8004804:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	440b      	add	r3, r1
 8004846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	440b      	add	r3, r1
 800485c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	3301      	adds	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3b5      	bcc.n	80047e0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004880:	f005 fae6 	bl	8009e50 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7a9b      	ldrb	r3, [r3, #10]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 fc40 	bl	8006120 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_PCD_Start+0x16>
 80048bc:	2302      	movs	r3, #2
 80048be:	e012      	b.n	80048e6 <HAL_PCD_Start+0x3c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 fa8d 	bl	8009dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f007 fd4d 	bl	800c376 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f007 fd52 	bl	800c3a4 <USB_ReadInterrupts>
 8004900:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fb04 	bl	8004f1a <PCD_EP_ISR_Handler>

    return;
 8004912:	e110      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491a:	2b00      	cmp	r3, #0
 800491c:	d013      	beq.n	8004946 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004930:	b292      	uxth	r2, r2
 8004932:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f009 fcad 	bl	800e296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800493c:	2100      	movs	r1, #0
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8fc 	bl	8004b3c <HAL_PCD_SetAddress>

    return;
 8004944:	e0f7      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004962:	b292      	uxth	r2, r2
 8004964:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004968:	e0e5      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004986:	b292      	uxth	r2, r2
 8004988:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800498c:	e0d3      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d034      	beq.n	8004a02 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	b292      	uxth	r2, r2
 80049ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0208 	bic.w	r2, r2, #8
 80049c2:	b292      	uxth	r2, r2
 80049c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049da:	2100      	movs	r1, #0
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f009 fe4d 	bl	800e67c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f009 fc90 	bl	800e308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049fa:	b292      	uxth	r2, r2
 80049fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004a00:	e099      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d027      	beq.n	8004a5c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0208 	orr.w	r2, r2, #8
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a36:	b292      	uxth	r2, r2
 8004a38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0204 	orr.w	r2, r2, #4
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f009 fc3d 	bl	800e2d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a5a:	e06c      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d040      	beq.n	8004ae8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d12b      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0204 	orr.w	r2, r2, #4
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f009 fdcf 	bl	800e67c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004ade:	e02a      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f009 fbf7 	bl	800e2d4 <HAL_PCD_SuspendCallback>
    return;
 8004ae6:	e026      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b04:	b292      	uxth	r2, r2
 8004b06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f009 fbb5 	bl	800e27a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004b10:	e011      	b.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b34:	bf00      	nop
  }
}
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_PCD_SetAddress+0x1a>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e012      	b.n	8004b7c <HAL_PCD_SetAddress+0x40>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f007 fbee 	bl	800c34e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	70fb      	strb	r3, [r7, #3]
 8004b96:	460b      	mov	r3, r1
 8004b98:	803b      	strh	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da0e      	bge.n	8004bc8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 0207 	and.w	r2, r3, #7
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	3310      	adds	r3, #16
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	705a      	strb	r2, [r3, #1]
 8004bc6:	e00e      	b.n	8004be6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bf2:	883a      	ldrh	r2, [r7, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	78ba      	ldrb	r2, [r7, #2]
 8004bfc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bfe:	78bb      	ldrb	r3, [r7, #2]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d102      	bne.n	8004c0a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_PCD_EP_Open+0x94>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e00e      	b.n	8004c36 <HAL_PCD_EP_Open+0xb2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f005 f930 	bl	8009e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004c34:	7afb      	ldrb	r3, [r7, #11]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da0e      	bge.n	8004c70 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	f003 0207 	and.w	r2, r3, #7
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3310      	adds	r3, #16
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	705a      	strb	r2, [r3, #1]
 8004c6e:	e00e      	b.n	8004c8e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 0207 	and.w	r2, r3, #7
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_PCD_EP_Close+0x6a>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e00e      	b.n	8004cc6 <HAL_PCD_EP_Close+0x88>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f005 fcac 	bl	800a614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cde:	7afb      	ldrb	r3, [r7, #11]
 8004ce0:	f003 0207 	and.w	r2, r3, #7
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0e:	7afb      	ldrb	r3, [r7, #11]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6979      	ldr	r1, [r7, #20]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f005 fe64 	bl	800a9ee <USB_EPStartXfer>

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	f003 0207 	and.w	r2, r3, #7
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	3310      	adds	r3, #16
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2201      	movs	r2, #1
 8004daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dac:	7afb      	ldrb	r3, [r7, #11]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 fe15 	bl	800a9ee <USB_EPStartXfer>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	7912      	ldrb	r2, [r2, #4]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e03e      	b.n	8004e6a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	da0e      	bge.n	8004e12 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	f003 0207 	and.w	r2, r3, #7
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	3310      	adds	r3, #16
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	705a      	strb	r2, [r3, #1]
 8004e10:	e00c      	b.n	8004e2c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_PCD_EP_SetStall+0x7e>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e00e      	b.n	8004e6a <HAL_PCD_EP_SetStall+0x9c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f007 f978 	bl	800c150 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	7912      	ldrb	r2, [r2, #4]
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e040      	b.n	8004f12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da0e      	bge.n	8004eb6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	f003 0207 	and.w	r2, r3, #7
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	705a      	strb	r2, [r3, #1]
 8004eb4:	e00e      	b.n	8004ed4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 0207 	and.w	r2, r3, #7
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_PCD_EP_ClrStall+0x82>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e00e      	b.n	8004f12 <HAL_PCD_EP_ClrStall+0xa0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f007 f975 	bl	800c1f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b096      	sub	sp, #88	@ 0x58
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f22:	e3ad      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004f3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 816f 	bne.w	8005226 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d14c      	bne.n	8004fee <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f64:	81fb      	strh	r3, [r7, #14]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	4413      	add	r3, r2
 8004f98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	441a      	add	r2, r3
 8004fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f009 f945 	bl	800e246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	7b1b      	ldrb	r3, [r3, #12]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 835c 	beq.w	8005680 <PCD_EP_ISR_Handler+0x766>
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 8357 	bne.w	8005680 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7b1b      	ldrb	r3, [r3, #12]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	731a      	strb	r2, [r3, #12]
 8004fec:	e348      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ff4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005008:	2b00      	cmp	r3, #0
 800500a:	d032      	beq.n	8005072 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005014:	b29b      	uxth	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	4413      	add	r3, r2
 8005026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005032:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800503e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005040:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005044:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005046:	b29b      	uxth	r3, r3
 8005048:	f007 f9fe 	bl	800c448 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29a      	uxth	r2, r3
 8005054:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005058:	4013      	ands	r3, r2
 800505a:	823b      	strh	r3, [r7, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	8a3a      	ldrh	r2, [r7, #16]
 8005062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005066:	b292      	uxth	r2, r2
 8005068:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f009 f8be 	bl	800e1ec <HAL_PCD_SetupStageCallback>
 8005070:	e306      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005072:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005076:	2b00      	cmp	r3, #0
 8005078:	f280 8302 	bge.w	8005680 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29a      	uxth	r2, r3
 8005084:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005088:	4013      	ands	r3, r2
 800508a:	83fb      	strh	r3, [r7, #30]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	8bfa      	ldrh	r2, [r7, #30]
 8005092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005096:	b292      	uxth	r2, r2
 8005098:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d019      	beq.n	80050fe <PCD_EP_ISR_Handler+0x1e4>
 80050ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d015      	beq.n	80050fe <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	6959      	ldr	r1, [r3, #20]
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f007 f9b0 	bl	800c448 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	441a      	add	r2, r3
 80050f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050f6:	2100      	movs	r1, #0
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f009 f889 	bl	800e210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005108:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800510c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 82b5 	bne.w	8005680 <PCD_EP_ISR_Handler+0x766>
 8005116:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800511a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800511e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005122:	f000 82ad 	beq.w	8005680 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005134:	b29b      	uxth	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	4413      	add	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005150:	b29a      	uxth	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b3e      	cmp	r3, #62	@ 0x3e
 800515c:	d91d      	bls.n	800519a <PCD_EP_ISR_Handler+0x280>
 800515e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <PCD_EP_ISR_Handler+0x25e>
 8005172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005174:	3b01      	subs	r3, #1
 8005176:	647b      	str	r3, [r7, #68]	@ 0x44
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29a      	uxth	r2, r3
 800517e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005180:	b29b      	uxth	r3, r3
 8005182:	029b      	lsls	r3, r3, #10
 8005184:	b29b      	uxth	r3, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	b29b      	uxth	r3, r3
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	b29a      	uxth	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e026      	b.n	80051e8 <PCD_EP_ISR_Handler+0x2ce>
 800519a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <PCD_EP_ISR_Handler+0x29e>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e017      	b.n	80051e8 <PCD_EP_ISR_Handler+0x2ce>
 80051b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <PCD_EP_ISR_Handler+0x2b8>
 80051cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ce:	3301      	adds	r3, #1
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f8:	827b      	strh	r3, [r7, #18]
 80051fa:	8a7b      	ldrh	r3, [r7, #18]
 80051fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005200:	827b      	strh	r3, [r7, #18]
 8005202:	8a7b      	ldrh	r3, [r7, #18]
 8005204:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005208:	827b      	strh	r3, [r7, #18]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	8a7b      	ldrh	r3, [r7, #18]
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800521c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
 8005224:	e22c      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800523a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800523e:	2b00      	cmp	r3, #0
 8005240:	f280 80f6 	bge.w	8005430 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29a      	uxth	r2, r3
 8005256:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800525a:	4013      	ands	r3, r2
 800525c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005276:	b292      	uxth	r2, r2
 8005278:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800527a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005292:	7b1b      	ldrb	r3, [r3, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d123      	bne.n	80052e0 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052bc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80052c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 808e 	beq.w	80053e6 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d0:	6959      	ldr	r1, [r3, #20]
 80052d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d4:	88da      	ldrh	r2, [r3, #6]
 80052d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80052da:	f007 f8b5 	bl	800c448 <USB_ReadPMA>
 80052de:	e082      	b.n	80053e6 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80052e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e2:	78db      	ldrb	r3, [r3, #3]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d10a      	bne.n	80052fe <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052ec:	461a      	mov	r2, r3
 80052ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f9d3 	bl	800569c <HAL_PCD_EP_DB_Receive>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80052fc:	e073      	b.n	80053e6 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005318:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800533a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d022      	beq.n	80053a2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	4413      	add	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	4413      	add	r3, r2
 8005376:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005380:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005384:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02c      	beq.n	80053e6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005392:	6959      	ldr	r1, [r3, #20]
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	891a      	ldrh	r2, [r3, #8]
 8005398:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800539c:	f007 f854 	bl	800c448 <USB_ReadPMA>
 80053a0:	e021      	b.n	80053e6 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80053ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d8:	6959      	ldr	r1, [r3, #20]
 80053da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053dc:	895a      	ldrh	r2, [r3, #10]
 80053de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053e2:	f007 f831 	bl	800c448 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80053e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053ee:	441a      	add	r2, r3
 80053f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053fc:	441a      	add	r2, r3
 80053fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005400:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <PCD_EP_ISR_Handler+0x4fc>
 800540a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800540e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d206      	bcs.n	8005424 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f008 fef7 	bl	800e210 <HAL_PCD_DataOutStageCallback>
 8005422:	e005      	b.n	8005430 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800542a:	4618      	mov	r0, r3
 800542c:	f005 fadf 	bl	800a9ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8121 	beq.w	8005680 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800543e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	3310      	adds	r3, #16
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800548e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b01      	cmp	r3, #1
 8005494:	f040 80a2 	bne.w	80055dc <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800549e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a0:	7b1b      	ldrb	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8093 	beq.w	80055ce <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d046      	beq.n	8005542 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d126      	bne.n	800550a <PCD_EP_ISR_Handler+0x5f0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	4413      	add	r3, r2
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	00da      	lsls	r2, r3, #3
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	4413      	add	r3, r2
 80054de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054e2:	623b      	str	r3, [r7, #32]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005502:	b29a      	uxth	r2, r3
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	e061      	b.n	80055ce <PCD_EP_ISR_Handler+0x6b4>
 800550a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d15d      	bne.n	80055ce <PCD_EP_ISR_Handler+0x6b4>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	4413      	add	r3, r2
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	00da      	lsls	r2, r3, #3
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	4413      	add	r3, r2
 8005534:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	2200      	movs	r2, #0
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e045      	b.n	80055ce <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d126      	bne.n	800559e <PCD_EP_ISR_Handler+0x684>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	637b      	str	r3, [r7, #52]	@ 0x34
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	4413      	add	r3, r2
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
 8005568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	00da      	lsls	r2, r3, #3
 800556e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005570:	4413      	add	r3, r2
 8005572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005576:	633b      	str	r3, [r7, #48]	@ 0x30
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005582:	b29a      	uxth	r2, r3
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005596:	b29a      	uxth	r2, r3
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e017      	b.n	80055ce <PCD_EP_ISR_Handler+0x6b4>
 800559e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d113      	bne.n	80055ce <PCD_EP_ISR_Handler+0x6b4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b4:	4413      	add	r3, r2
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	00da      	lsls	r2, r3, #3
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	4413      	add	r3, r2
 80055c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2200      	movs	r2, #0
 80055cc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f008 fe36 	bl	800e246 <HAL_PCD_DataInStageCallback>
 80055da:	e051      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80055dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80055e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d144      	bne.n	8005672 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005618:	429a      	cmp	r2, r3
 800561a:	d907      	bls.n	800562c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	e002      	b.n	8005632 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800562c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800563a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f008 fe00 	bl	800e246 <HAL_PCD_DataInStageCallback>
 8005646:	e01b      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005650:	441a      	add	r2, r3
 8005652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005654:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800565e:	441a      	add	r2, r3
 8005660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005662:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800566a:	4618      	mov	r0, r3
 800566c:	f005 f9bf 	bl	800a9ee <USB_EPStartXfer>
 8005670:	e006      	b.n	8005680 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005676:	461a      	mov	r2, r3
 8005678:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f917 	bl	80058ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005688:	b29b      	uxth	r3, r3
 800568a:	b21b      	sxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	f6ff ac49 	blt.w	8004f24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3758      	adds	r7, #88	@ 0x58
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d07c      	beq.n	80057ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	8b7b      	ldrh	r3, [r7, #26]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d306      	bcc.n	80056f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	8b7b      	ldrh	r3, [r7, #26]
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	619a      	str	r2, [r3, #24]
 80056f0:	e002      	b.n	80056f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d123      	bne.n	8005748 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571a:	833b      	strh	r3, [r7, #24]
 800571c:	8b3b      	ldrh	r3, [r7, #24]
 800571e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005722:	833b      	strh	r3, [r7, #24]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8b3b      	ldrh	r3, [r7, #24]
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01f      	beq.n	8005792 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576c:	82fb      	strh	r3, [r7, #22]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	8afb      	ldrh	r3, [r7, #22]
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800578a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005792:	8b7b      	ldrh	r3, [r7, #26]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8085 	beq.w	80058a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6959      	ldr	r1, [r3, #20]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	891a      	ldrh	r2, [r3, #8]
 80057a6:	8b7b      	ldrh	r3, [r7, #26]
 80057a8:	f006 fe4e 	bl	800c448 <USB_ReadPMA>
 80057ac:	e07a      	b.n	80058a4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	8b7b      	ldrh	r3, [r7, #26]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d306      	bcc.n	80057ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	8b7b      	ldrh	r3, [r7, #26]
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	619a      	str	r2, [r3, #24]
 80057ea:	e002      	b.n	80057f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d123      	bne.n	8005842 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005814:	83fb      	strh	r3, [r7, #30]
 8005816:	8bfb      	ldrh	r3, [r7, #30]
 8005818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800581c:	83fb      	strh	r3, [r7, #30]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	8bfb      	ldrh	r3, [r7, #30]
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11f      	bne.n	800588c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	83bb      	strh	r3, [r7, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	8bbb      	ldrh	r3, [r7, #28]
 8005878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005884:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005888:	b29b      	uxth	r3, r3
 800588a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6959      	ldr	r1, [r3, #20]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	895a      	ldrh	r2, [r3, #10]
 800589e:	8b7b      	ldrh	r3, [r7, #26]
 80058a0:	f006 fdd2 	bl	800c448 <USB_ReadPMA>
    }
  }

  return count;
 80058a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b0a4      	sub	sp, #144	@ 0x90
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 81db 	beq.w	8005c7e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ec:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d907      	bls.n	800590c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e002      	b.n	8005912 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 80b9 	bne.w	8005a8e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d126      	bne.n	8005972 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005932:	b29b      	uxth	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	4413      	add	r3, r2
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	00da      	lsls	r2, r3, #3
 8005942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005944:	4413      	add	r3, r2
 8005946:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005956:	b29a      	uxth	r2, r3
 8005958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596a:	b29a      	uxth	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e01a      	b.n	80059a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d116      	bne.n	80059a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598e:	4413      	add	r3, r2
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	00da      	lsls	r2, r3, #3
 8005998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599a:	4413      	add	r3, r2
 800599c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2200      	movs	r2, #0
 80059a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d126      	bne.n	8005a04 <HAL_PCD_EP_DB_Transmit+0x156>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00da      	lsls	r2, r3, #3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	e017      	b.n	8005a34 <HAL_PCD_EP_DB_Transmit+0x186>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d113      	bne.n	8005a34 <HAL_PCD_EP_DB_Transmit+0x186>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	4413      	add	r3, r2
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	00da      	lsls	r2, r3, #3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2200      	movs	r2, #0
 8005a32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f008 fc03 	bl	800e246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 82fa 	beq.w	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a66:	82fb      	strh	r3, [r7, #22]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
 8005a8c:	e2d8      	b.n	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d021      	beq.n	8005adc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	f040 82ac 	bne.w	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005af0:	441a      	add	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005afe:	441a      	add	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d30b      	bcc.n	8005b28 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	621a      	str	r2, [r3, #32]
 8005b26:	e017      	b.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d108      	bne.n	8005b42 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005b30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005b40:	e00a      	b.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d165      	bne.n	8005c2c <HAL_PCD_EP_DB_Transmit+0x37e>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b74:	4413      	add	r3, r2
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	00da      	lsls	r2, r3, #3
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b9e:	d91d      	bls.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x32e>
 8005ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <HAL_PCD_EP_DB_Transmit+0x30c>
 8005bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e044      	b.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x34c>
 8005be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e035      	b.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x366>
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c10:	3301      	adds	r3, #1
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e01c      	b.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d118      	bne.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c48:	4413      	add	r3, r2
 8005c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c54:	4413      	add	r3, r2
 8005c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c64:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6959      	ldr	r1, [r3, #20]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	891a      	ldrh	r2, [r3, #8]
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f006 fba4 	bl	800c3c4 <USB_WritePMA>
 8005c7c:	e1e0      	b.n	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d307      	bcc.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	619a      	str	r2, [r3, #24]
 8005cc0:	e002      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 80c0 	bne.w	8005e52 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d126      	bne.n	8005d28 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cee:	4413      	add	r3, r2
 8005cf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	00da      	lsls	r2, r3, #3
 8005cf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e01a      	b.n	8005d5e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d116      	bne.n	8005d5e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d44:	4413      	add	r3, r2
 8005d46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00da      	lsls	r2, r3, #3
 8005d4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d12b      	bne.n	8005dc4 <HAL_PCD_EP_DB_Transmit+0x516>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d80:	4413      	add	r3, r2
 8005d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	e017      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x546>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d113      	bne.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x546>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dda:	4413      	add	r3, r2
 8005ddc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	00da      	lsls	r2, r3, #3
 8005de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005df0:	2200      	movs	r2, #0
 8005df2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f008 fa23 	bl	800e246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 811a 	bne.w	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e26:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	441a      	add	r2, r3
 8005e38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
 8005e50:	e0f6      	b.n	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d121      	bne.n	8005ea0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f040 80ca 	bne.w	8006040 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d30b      	bcc.n	8005eec <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	621a      	str	r2, [r3, #32]
 8005eea:	e017      	b.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d108      	bne.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005ef4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f04:	e00a      	b.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d165      	bne.n	8005ff6 <HAL_PCD_EP_DB_Transmit+0x748>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f3e:	4413      	add	r3, r2
 8005f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	00da      	lsls	r2, r3, #3
 8005f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f66:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f68:	d91d      	bls.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005f7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f80:	3b01      	subs	r3, #1
 8005f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e041      	b.n	800602a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x716>
 8005fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e032      	b.n	800602a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_PCD_EP_DB_Transmit+0x730>
 8005fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fda:	3301      	adds	r3, #1
 8005fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	029b      	lsls	r3, r3, #10
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4313      	orrs	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e019      	b.n	800602a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d115      	bne.n	800602a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600c:	4413      	add	r3, r2
 800600e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	00da      	lsls	r2, r3, #3
 8006016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006018:	4413      	add	r3, r2
 800601a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800601e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006024:	b29a      	uxth	r2, r3
 8006026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006028:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6959      	ldr	r1, [r3, #20]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	895a      	ldrh	r2, [r3, #10]
 8006036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800603a:	b29b      	uxth	r3, r3
 800603c:	f006 f9c2 	bl	800c3c4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800605a:	82bb      	strh	r3, [r7, #20]
 800605c:	8abb      	ldrh	r3, [r7, #20]
 800605e:	f083 0310 	eor.w	r3, r3, #16
 8006062:	82bb      	strh	r3, [r7, #20]
 8006064:	8abb      	ldrh	r3, [r7, #20]
 8006066:	f083 0320 	eor.w	r3, r3, #32
 800606a:	82bb      	strh	r3, [r7, #20]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	8abb      	ldrh	r3, [r7, #20]
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3790      	adds	r7, #144	@ 0x90
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800609a:	b480      	push	{r7}
 800609c:	b087      	sub	sp, #28
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b8:	897b      	ldrh	r3, [r7, #10]
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	3310      	adds	r3, #16
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	e009      	b.n	80060e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060d0:	897a      	ldrh	r2, [r7, #10]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	80da      	strh	r2, [r3, #6]
 80060f8:	e00b      	b.n	8006112 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2201      	movs	r2, #1
 80060fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	b29a      	uxth	r2, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	b29a      	uxth	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006144:	b29b      	uxth	r3, r3
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006158:	b29b      	uxth	r3, r3
 800615a:	f043 0302 	orr.w	r3, r3, #2
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d141      	bne.n	8006206 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006182:	4b4b      	ldr	r3, [pc, #300]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618e:	d131      	bne.n	80061f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006190:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006196:	4a46      	ldr	r2, [pc, #280]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061a0:	4b43      	ldr	r3, [pc, #268]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061a8:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061b0:	4b40      	ldr	r3, [pc, #256]	@ (80062b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2232      	movs	r2, #50	@ 0x32
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	4a3f      	ldr	r2, [pc, #252]	@ (80062b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	0c9b      	lsrs	r3, r3, #18
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061c6:	e002      	b.n	80061ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061ce:	4b38      	ldr	r3, [pc, #224]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061da:	d102      	bne.n	80061e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f2      	bne.n	80061c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061e2:	4b33      	ldr	r3, [pc, #204]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ee:	d158      	bne.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e057      	b.n	80062a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061f4:	4b2e      	ldr	r3, [pc, #184]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fa:	4a2d      	ldr	r2, [pc, #180]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006204:	e04d      	b.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620c:	d141      	bne.n	8006292 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800620e:	4b28      	ldr	r3, [pc, #160]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621a:	d131      	bne.n	8006280 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800621c:	4b24      	ldr	r3, [pc, #144]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800621e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006222:	4a23      	ldr	r2, [pc, #140]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800622c:	4b20      	ldr	r3, [pc, #128]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006234:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800623a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800623c:	4b1d      	ldr	r3, [pc, #116]	@ (80062b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2232      	movs	r2, #50	@ 0x32
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	0c9b      	lsrs	r3, r3, #18
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006252:	e002      	b.n	800625a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b01      	subs	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800625a:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006266:	d102      	bne.n	800626e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f2      	bne.n	8006254 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800626e:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627a:	d112      	bne.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e011      	b.n	80062a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006280:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006286:	4a0a      	ldr	r2, [pc, #40]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006290:	e007      	b.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006292:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800629a:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40007000 	.word	0x40007000
 80062b4:	20000000 	.word	0x20000000
 80062b8:	431bde83 	.word	0x431bde83

080062bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4a04      	ldr	r2, [pc, #16]	@ (80062d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062ca:	6093      	str	r3, [r2, #8]
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40007000 	.word	0x40007000

080062dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e2fe      	b.n	80068ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d075      	beq.n	80063e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062fa:	4b97      	ldr	r3, [pc, #604]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006304:	4b94      	ldr	r3, [pc, #592]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d102      	bne.n	800631a <HAL_RCC_OscConfig+0x3e>
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d002      	beq.n	8006320 <HAL_RCC_OscConfig+0x44>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b08      	cmp	r3, #8
 800631e:	d10b      	bne.n	8006338 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	4b8d      	ldr	r3, [pc, #564]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05b      	beq.n	80063e4 <HAL_RCC_OscConfig+0x108>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d157      	bne.n	80063e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e2d9      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006340:	d106      	bne.n	8006350 <HAL_RCC_OscConfig+0x74>
 8006342:	4b85      	ldr	r3, [pc, #532]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a84      	ldr	r2, [pc, #528]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0x98>
 800635a:	4b7f      	ldr	r3, [pc, #508]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7e      	ldr	r2, [pc, #504]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b7c      	ldr	r3, [pc, #496]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a7b      	ldr	r2, [pc, #492]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e00b      	b.n	800638c <HAL_RCC_OscConfig+0xb0>
 8006374:	4b78      	ldr	r3, [pc, #480]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a77      	ldr	r2, [pc, #476]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b75      	ldr	r3, [pc, #468]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a74      	ldr	r2, [pc, #464]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800638a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb fd02 	bl	8001d9c <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639c:	f7fb fcfe 	bl	8001d9c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	@ 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e29e      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0xc0>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fb fcee 	bl	8001d9c <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fb fcea 	bl	8001d9c <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e28a      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063d6:	4b60      	ldr	r3, [pc, #384]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0xe8>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d075      	beq.n	80064de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f2:	4b59      	ldr	r3, [pc, #356]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063fc:	4b56      	ldr	r3, [pc, #344]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d102      	bne.n	8006412 <HAL_RCC_OscConfig+0x136>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <HAL_RCC_OscConfig+0x13c>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d11f      	bne.n	8006458 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006418:	4b4f      	ldr	r3, [pc, #316]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_OscConfig+0x154>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e25d      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006430:	4b49      	ldr	r3, [pc, #292]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	4946      	ldr	r1, [pc, #280]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006444:	4b45      	ldr	r3, [pc, #276]	@ (800655c <HAL_RCC_OscConfig+0x280>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7fb fc5b 	bl	8001d04 <HAL_InitTick>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d043      	beq.n	80064dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e249      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d023      	beq.n	80064a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006460:	4b3d      	ldr	r3, [pc, #244]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a3c      	ldr	r2, [pc, #240]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fb fc96 	bl	8001d9c <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fb fc92 	bl	8001d9c <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e232      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006486:	4b34      	ldr	r3, [pc, #208]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006492:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	492d      	ldr	r1, [pc, #180]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	604b      	str	r3, [r1, #4]
 80064a6:	e01a      	b.n	80064de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fb fc72 	bl	8001d9c <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064bc:	f7fb fc6e 	bl	8001d9c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e20e      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064ce:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x1e0>
 80064da:	e000      	b.n	80064de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d041      	beq.n	800656e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01c      	beq.n	800652c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064f2:	4b19      	ldr	r3, [pc, #100]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f8:	4a17      	ldr	r2, [pc, #92]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fb fc4b 	bl	8001d9c <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650a:	f7fb fc47 	bl	8001d9c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e1e7      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800651c:	4b0e      	ldr	r3, [pc, #56]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0ef      	beq.n	800650a <HAL_RCC_OscConfig+0x22e>
 800652a:	e020      	b.n	800656e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 800652e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006532:	4a09      	ldr	r2, [pc, #36]	@ (8006558 <HAL_RCC_OscConfig+0x27c>)
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653c:	f7fb fc2e 	bl	8001d9c <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006542:	e00d      	b.n	8006560 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006544:	f7fb fc2a 	bl	8001d9c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d906      	bls.n	8006560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e1ca      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
 8006556:	bf00      	nop
 8006558:	40021000 	.word	0x40021000
 800655c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006560:	4b8c      	ldr	r3, [pc, #560]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ea      	bne.n	8006544 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80a6 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800657c:	2300      	movs	r3, #0
 800657e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006580:	4b84      	ldr	r3, [pc, #528]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCC_OscConfig+0x2b4>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_RCC_OscConfig+0x2b6>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	4b7f      	ldr	r3, [pc, #508]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	4a7e      	ldr	r2, [pc, #504]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065ae:	2301      	movs	r3, #1
 80065b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b2:	4b79      	ldr	r3, [pc, #484]	@ (8006798 <HAL_RCC_OscConfig+0x4bc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d118      	bne.n	80065f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065be:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <HAL_RCC_OscConfig+0x4bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a75      	ldr	r2, [pc, #468]	@ (8006798 <HAL_RCC_OscConfig+0x4bc>)
 80065c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ca:	f7fb fbe7 	bl	8001d9c <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d2:	f7fb fbe3 	bl	8001d9c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e183      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e4:	4b6c      	ldr	r3, [pc, #432]	@ (8006798 <HAL_RCC_OscConfig+0x4bc>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d108      	bne.n	800660a <HAL_RCC_OscConfig+0x32e>
 80065f8:	4b66      	ldr	r3, [pc, #408]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	4a65      	ldr	r2, [pc, #404]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006608:	e024      	b.n	8006654 <HAL_RCC_OscConfig+0x378>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b05      	cmp	r3, #5
 8006610:	d110      	bne.n	8006634 <HAL_RCC_OscConfig+0x358>
 8006612:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006618:	4a5e      	ldr	r2, [pc, #376]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800661a:	f043 0304 	orr.w	r3, r3, #4
 800661e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006622:	4b5c      	ldr	r3, [pc, #368]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006628:	4a5a      	ldr	r2, [pc, #360]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006632:	e00f      	b.n	8006654 <HAL_RCC_OscConfig+0x378>
 8006634:	4b57      	ldr	r3, [pc, #348]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663a:	4a56      	ldr	r2, [pc, #344]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006644:	4b53      	ldr	r3, [pc, #332]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	4a52      	ldr	r2, [pc, #328]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800664c:	f023 0304 	bic.w	r3, r3, #4
 8006650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d016      	beq.n	800668a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665c:	f7fb fb9e 	bl	8001d9c <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006662:	e00a      	b.n	800667a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006664:	f7fb fb9a 	bl	8001d9c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e138      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800667a:	4b46      	ldr	r3, [pc, #280]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ed      	beq.n	8006664 <HAL_RCC_OscConfig+0x388>
 8006688:	e015      	b.n	80066b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668a:	f7fb fb87 	bl	8001d9c <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006690:	e00a      	b.n	80066a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006692:	f7fb fb83 	bl	8001d9c <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e121      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066a8:	4b3a      	ldr	r3, [pc, #232]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ed      	bne.n	8006692 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066b6:	7ffb      	ldrb	r3, [r7, #31]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b35      	ldr	r3, [pc, #212]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80066be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c0:	4a34      	ldr	r2, [pc, #208]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03c      	beq.n	800674e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01c      	beq.n	8006716 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80066de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fb fb56 	bl	8001d9c <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f4:	f7fb fb52 	bl	8001d9c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e0f2      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006706:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ef      	beq.n	80066f4 <HAL_RCC_OscConfig+0x418>
 8006714:	e01b      	b.n	800674e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006716:	4b1f      	ldr	r3, [pc, #124]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800671c:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006726:	f7fb fb39 	bl	8001d9c <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800672e:	f7fb fb35 	bl	8001d9c <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e0d5      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006740:	4b14      	ldr	r3, [pc, #80]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ef      	bne.n	800672e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80c9 	beq.w	80068ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006758:	4b0e      	ldr	r3, [pc, #56]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b0c      	cmp	r3, #12
 8006762:	f000 8083 	beq.w	800686c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d15e      	bne.n	800682c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676e:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a08      	ldr	r2, [pc, #32]	@ (8006794 <HAL_RCC_OscConfig+0x4b8>)
 8006774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677a:	f7fb fb0f 	bl	8001d9c <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006780:	e00c      	b.n	800679c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006782:	f7fb fb0b 	bl	8001d9c <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d905      	bls.n	800679c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e0ab      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
 8006794:	40021000 	.word	0x40021000
 8006798:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800679c:	4b55      	ldr	r3, [pc, #340]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1ec      	bne.n	8006782 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067a8:	4b52      	ldr	r3, [pc, #328]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	4b52      	ldr	r3, [pc, #328]	@ (80068f8 <HAL_RCC_OscConfig+0x61c>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6a11      	ldr	r1, [r2, #32]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067b8:	3a01      	subs	r2, #1
 80067ba:	0112      	lsls	r2, r2, #4
 80067bc:	4311      	orrs	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80067c2:	0212      	lsls	r2, r2, #8
 80067c4:	4311      	orrs	r1, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067ca:	0852      	lsrs	r2, r2, #1
 80067cc:	3a01      	subs	r2, #1
 80067ce:	0552      	lsls	r2, r2, #21
 80067d0:	4311      	orrs	r1, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067d6:	0852      	lsrs	r2, r2, #1
 80067d8:	3a01      	subs	r2, #1
 80067da:	0652      	lsls	r2, r2, #25
 80067dc:	4311      	orrs	r1, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067e2:	06d2      	lsls	r2, r2, #27
 80067e4:	430a      	orrs	r2, r1
 80067e6:	4943      	ldr	r1, [pc, #268]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ec:	4b41      	ldr	r3, [pc, #260]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a40      	ldr	r2, [pc, #256]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067f8:	4b3e      	ldr	r3, [pc, #248]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a3d      	ldr	r2, [pc, #244]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 80067fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006802:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fb faca 	bl	8001d9c <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fb fac6 	bl	8001d9c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e066      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681e:	4b35      	ldr	r3, [pc, #212]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x530>
 800682a:	e05e      	b.n	80068ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682c:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 8006832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fb fab0 	bl	8001d9c <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006840:	f7fb faac 	bl	8001d9c <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e04c      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006852:	4b28      	ldr	r3, [pc, #160]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800685e:	4b25      	ldr	r3, [pc, #148]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	4924      	ldr	r1, [pc, #144]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 8006864:	4b25      	ldr	r3, [pc, #148]	@ (80068fc <HAL_RCC_OscConfig+0x620>)
 8006866:	4013      	ands	r3, r2
 8006868:	60cb      	str	r3, [r1, #12]
 800686a:	e03e      	b.n	80068ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e039      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006878:	4b1e      	ldr	r3, [pc, #120]	@ (80068f4 <HAL_RCC_OscConfig+0x618>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f003 0203 	and.w	r2, r3, #3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	429a      	cmp	r2, r3
 800688a:	d12c      	bne.n	80068e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	3b01      	subs	r3, #1
 8006898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d123      	bne.n	80068e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d11b      	bne.n	80068e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d113      	bne.n	80068e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	3b01      	subs	r3, #1
 80068cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d109      	bne.n	80068e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	3b01      	subs	r3, #1
 80068e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d001      	beq.n	80068ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40021000 	.word	0x40021000
 80068f8:	019f800c 	.word	0x019f800c
 80068fc:	feeefffc 	.word	0xfeeefffc

08006900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e11e      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006918:	4b91      	ldr	r3, [pc, #580]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d910      	bls.n	8006948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006926:	4b8e      	ldr	r3, [pc, #568]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 020f 	bic.w	r2, r3, #15
 800692e:	498c      	ldr	r1, [pc, #560]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b8a      	ldr	r3, [pc, #552]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e106      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d073      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d129      	bne.n	80069b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800695c:	4b81      	ldr	r3, [pc, #516]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0f4      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800696c:	f000 f966 	bl	8006c3c <RCC_GetSysClockFreqFromPLLSource>
 8006970:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4a7c      	ldr	r2, [pc, #496]	@ (8006b68 <HAL_RCC_ClockConfig+0x268>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d93f      	bls.n	80069fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800697a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800698e:	2b00      	cmp	r3, #0
 8006990:	d033      	beq.n	80069fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006996:	2b00      	cmp	r3, #0
 8006998:	d12f      	bne.n	80069fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800699a:	4b72      	ldr	r3, [pc, #456]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069a2:	4a70      	ldr	r2, [pc, #448]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069aa:	2380      	movs	r3, #128	@ 0x80
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e024      	b.n	80069fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d109      	bne.n	80069d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0c6      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069c8:	4b66      	ldr	r3, [pc, #408]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0be      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80069d8:	f000 f8ce 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4a61      	ldr	r2, [pc, #388]	@ (8006b68 <HAL_RCC_ClockConfig+0x268>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d909      	bls.n	80069fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ee:	4a5d      	ldr	r2, [pc, #372]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069f6:	2380      	movs	r3, #128	@ 0x80
 80069f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f023 0203 	bic.w	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4957      	ldr	r1, [pc, #348]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a0c:	f7fb f9c6 	bl	8001d9c <HAL_GetTick>
 8006a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a14:	f7fb f9c2 	bl	8001d9c <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e095      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 020c 	and.w	r2, r3, #12
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d1eb      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d023      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a54:	4b43      	ldr	r3, [pc, #268]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	4a42      	ldr	r2, [pc, #264]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a74:	4a3b      	ldr	r2, [pc, #236]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a7c:	4b39      	ldr	r3, [pc, #228]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4936      	ldr	r1, [pc, #216]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b80      	cmp	r3, #128	@ 0x80
 8006a94:	d105      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a96:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4a32      	ldr	r2, [pc, #200]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006a9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d21d      	bcs.n	8006aec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f023 020f 	bic.w	r2, r3, #15
 8006ab8:	4929      	ldr	r1, [pc, #164]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ac0:	f7fb f96c 	bl	8001d9c <HAL_GetTick>
 8006ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	e00a      	b.n	8006ade <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac8:	f7fb f968 	bl	8001d9c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e03b      	b.n	8006b56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <HAL_RCC_ClockConfig+0x260>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d1ed      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4917      	ldr	r1, [pc, #92]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b16:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	490f      	ldr	r1, [pc, #60]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b2a:	f000 f825 	bl	8006b78 <HAL_RCC_GetSysClockFreq>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <HAL_RCC_ClockConfig+0x264>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	490c      	ldr	r1, [pc, #48]	@ (8006b6c <HAL_RCC_ClockConfig+0x26c>)
 8006b3c:	5ccb      	ldrb	r3, [r1, r3]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <HAL_RCC_ClockConfig+0x270>)
 8006b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <HAL_RCC_ClockConfig+0x274>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fb f8d8 	bl	8001d04 <HAL_InitTick>
 8006b54:	4603      	mov	r3, r0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40021000 	.word	0x40021000
 8006b68:	04c4b400 	.word	0x04c4b400
 8006b6c:	0800f134 	.word	0x0800f134
 8006b70:	20000000 	.word	0x20000000
 8006b74:	20000004 	.word	0x20000004

08006b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d102      	bne.n	8006b90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e047      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b90:	4b27      	ldr	r3, [pc, #156]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 030c 	and.w	r3, r3, #12
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d102      	bne.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b9c:	4b26      	ldr	r3, [pc, #152]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e03e      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ba2:	4b23      	ldr	r3, [pc, #140]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b0c      	cmp	r3, #12
 8006bac:	d136      	bne.n	8006c1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bae:	4b20      	ldr	r3, [pc, #128]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	091b      	lsrs	r3, r3, #4
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd4:	4a16      	ldr	r2, [pc, #88]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bd6:	68d2      	ldr	r2, [r2, #12]
 8006bd8:	0a12      	lsrs	r2, r2, #8
 8006bda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	617b      	str	r3, [r7, #20]
      break;
 8006be4:	e00c      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006be6:	4a13      	ldr	r2, [pc, #76]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	4a10      	ldr	r2, [pc, #64]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf0:	68d2      	ldr	r2, [r2, #12]
 8006bf2:	0a12      	lsrs	r2, r2, #8
 8006bf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bf8:	fb02 f303 	mul.w	r3, r2, r3
 8006bfc:	617b      	str	r3, [r7, #20]
      break;
 8006bfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c00:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	0e5b      	lsrs	r3, r3, #25
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e001      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c20:	693b      	ldr	r3, [r7, #16]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40021000 	.word	0x40021000
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	007a1200 	.word	0x007a1200

08006c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c42:	4b1e      	ldr	r3, [pc, #120]	@ (8006cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d10c      	bne.n	8006c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c60:	4a17      	ldr	r2, [pc, #92]	@ (8006cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	4a14      	ldr	r2, [pc, #80]	@ (8006cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c6a:	68d2      	ldr	r2, [r2, #12]
 8006c6c:	0a12      	lsrs	r2, r2, #8
 8006c6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	617b      	str	r3, [r7, #20]
    break;
 8006c78:	e00c      	b.n	8006c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c7a:	4a12      	ldr	r2, [pc, #72]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	4a0e      	ldr	r2, [pc, #56]	@ (8006cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c84:	68d2      	ldr	r2, [r2, #12]
 8006c86:	0a12      	lsrs	r2, r2, #8
 8006c88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]
    break;
 8006c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c94:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	0e5b      	lsrs	r3, r3, #25
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006cae:	687b      	ldr	r3, [r7, #4]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	007a1200 	.word	0x007a1200
 8006cc4:	00f42400 	.word	0x00f42400

08006cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8098 	beq.w	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cea:	4b43      	ldr	r3, [pc, #268]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf6:	4b40      	ldr	r3, [pc, #256]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d02:	4b3d      	ldr	r3, [pc, #244]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d0a:	60bb      	str	r3, [r7, #8]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d12:	4b3a      	ldr	r3, [pc, #232]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a39      	ldr	r2, [pc, #228]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d1e:	f7fb f83d 	bl	8001d9c <HAL_GetTick>
 8006d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d24:	e009      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d26:	f7fb f839 	bl	8001d9c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d902      	bls.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	74fb      	strb	r3, [r7, #19]
        break;
 8006d38:	e005      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d3a:	4b30      	ldr	r3, [pc, #192]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0ef      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d159      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01e      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d019      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d68:	4b23      	ldr	r3, [pc, #140]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d74:	4b20      	ldr	r3, [pc, #128]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d84:	4b1c      	ldr	r3, [pc, #112]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d94:	4a18      	ldr	r2, [pc, #96]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fa fff9 	bl	8001d9c <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dac:	e00b      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dae:	f7fa fff5 	bl	8001d9c <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d902      	bls.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8006dc4:	e006      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ec      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dda:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de8:	4903      	ldr	r1, [pc, #12]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006df0:	e008      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006df2:	7cfb      	ldrb	r3, [r7, #19]
 8006df4:	74bb      	strb	r3, [r7, #18]
 8006df6:	e005      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7cfb      	ldrb	r3, [r7, #19]
 8006e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e04:	7c7b      	ldrb	r3, [r7, #17]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e22:	4ba1      	ldr	r3, [pc, #644]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e28:	f023 0203 	bic.w	r2, r3, #3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	499d      	ldr	r1, [pc, #628]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e44:	4b98      	ldr	r3, [pc, #608]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f023 020c 	bic.w	r2, r3, #12
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	4995      	ldr	r1, [pc, #596]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e66:	4b90      	ldr	r3, [pc, #576]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	498c      	ldr	r1, [pc, #560]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e88:	4b87      	ldr	r3, [pc, #540]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4984      	ldr	r1, [pc, #528]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	497b      	ldr	r1, [pc, #492]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ecc:	4b76      	ldr	r3, [pc, #472]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	4973      	ldr	r1, [pc, #460]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eee:	4b6e      	ldr	r3, [pc, #440]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	496a      	ldr	r1, [pc, #424]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f10:	4b65      	ldr	r3, [pc, #404]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	4962      	ldr	r1, [pc, #392]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f32:	4b5d      	ldr	r3, [pc, #372]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	4959      	ldr	r1, [pc, #356]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f54:	4b54      	ldr	r3, [pc, #336]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	4951      	ldr	r1, [pc, #324]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f76:	4b4c      	ldr	r3, [pc, #304]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	4948      	ldr	r1, [pc, #288]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d015      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f98:	4b43      	ldr	r3, [pc, #268]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	4940      	ldr	r1, [pc, #256]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d015      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fd0:	4b35      	ldr	r3, [pc, #212]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fde:	4932      	ldr	r1, [pc, #200]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fee:	d105      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007008:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	4924      	ldr	r1, [pc, #144]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007026:	d105      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007028:	4b1f      	ldr	r3, [pc, #124]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a1e      	ldr	r2, [pc, #120]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800702e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007032:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007040:	4b19      	ldr	r3, [pc, #100]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	4916      	ldr	r1, [pc, #88]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800705e:	d105      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007060:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a10      	ldr	r2, [pc, #64]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d019      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	4908      	ldr	r1, [pc, #32]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d109      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007098:	4b03      	ldr	r3, [pc, #12]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a02      	ldr	r2, [pc, #8]	@ (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070a2:	60d3      	str	r3, [r2, #12]
 80070a4:	e002      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d015      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070b8:	4b29      	ldr	r3, [pc, #164]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	4926      	ldr	r1, [pc, #152]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d6:	d105      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070d8:	4b21      	ldr	r3, [pc, #132]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4a20      	ldr	r2, [pc, #128]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80070f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070fe:	4918      	ldr	r1, [pc, #96]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007110:	4b13      	ldr	r3, [pc, #76]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a12      	ldr	r2, [pc, #72]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007128:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800712a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800712e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007136:	490a      	ldr	r1, [pc, #40]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a04      	ldr	r2, [pc, #16]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007154:	7cbb      	ldrb	r3, [r7, #18]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000

08007164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e049      	b.n	800720a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa f93e 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f001 fe08 	bl	8008db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e04c      	b.n	80072c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a26      	ldr	r2, [pc, #152]	@ (80072d4 <HAL_TIM_Base_Start+0xc0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007246:	d01d      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a22      	ldr	r2, [pc, #136]	@ (80072d8 <HAL_TIM_Base_Start+0xc4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	@ (80072dc <HAL_TIM_Base_Start+0xc8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1f      	ldr	r2, [pc, #124]	@ (80072e0 <HAL_TIM_Base_Start+0xcc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1e      	ldr	r2, [pc, #120]	@ (80072e4 <HAL_TIM_Base_Start+0xd0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1c      	ldr	r2, [pc, #112]	@ (80072e8 <HAL_TIM_Base_Start+0xd4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIM_Base_Start+0x70>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1b      	ldr	r2, [pc, #108]	@ (80072ec <HAL_TIM_Base_Start+0xd8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d115      	bne.n	80072b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	4b19      	ldr	r3, [pc, #100]	@ (80072f0 <HAL_TIM_Base_Start+0xdc>)
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b06      	cmp	r3, #6
 8007294:	d015      	beq.n	80072c2 <HAL_TIM_Base_Start+0xae>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800729c:	d011      	beq.n	80072c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ae:	e008      	b.n	80072c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e000      	b.n	80072c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40015000 	.word	0x40015000
 80072f0:	00010007 	.word	0x00010007

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e054      	b.n	80073b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a26      	ldr	r2, [pc, #152]	@ (80073c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d022      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007336:	d01d      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a22      	ldr	r2, [pc, #136]	@ (80073c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d018      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a21      	ldr	r2, [pc, #132]	@ (80073cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d013      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1f      	ldr	r2, [pc, #124]	@ (80073d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1e      	ldr	r2, [pc, #120]	@ (80073d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d009      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1c      	ldr	r2, [pc, #112]	@ (80073d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1b      	ldr	r2, [pc, #108]	@ (80073dc <HAL_TIM_Base_Start_IT+0xe8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d115      	bne.n	80073a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	4b19      	ldr	r3, [pc, #100]	@ (80073e0 <HAL_TIM_Base_Start_IT+0xec>)
 800737c:	4013      	ands	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d015      	beq.n	80073b2 <HAL_TIM_Base_Start_IT+0xbe>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738c:	d011      	beq.n	80073b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0201 	orr.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739e:	e008      	b.n	80073b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e000      	b.n	80073b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40015000 	.word	0x40015000
 80073e0:	00010007 	.word	0x00010007

080073e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e049      	b.n	800748a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f841 	bl	8007492 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f001 fcc8 	bl	8008db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_OC_Start+0x24>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e03c      	b.n	8007546 <HAL_TIM_OC_Start+0x9e>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d109      	bne.n	80074e6 <HAL_TIM_OC_Start+0x3e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	e02f      	b.n	8007546 <HAL_TIM_OC_Start+0x9e>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d109      	bne.n	8007500 <HAL_TIM_OC_Start+0x58>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	e022      	b.n	8007546 <HAL_TIM_OC_Start+0x9e>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d109      	bne.n	800751a <HAL_TIM_OC_Start+0x72>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e015      	b.n	8007546 <HAL_TIM_OC_Start+0x9e>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b10      	cmp	r3, #16
 800751e:	d109      	bne.n	8007534 <HAL_TIM_OC_Start+0x8c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e008      	b.n	8007546 <HAL_TIM_OC_Start+0x9e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e0a6      	b.n	800769c <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <HAL_TIM_OC_Start+0xb6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800755c:	e023      	b.n	80075a6 <HAL_TIM_OC_Start+0xfe>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d104      	bne.n	800756e <HAL_TIM_OC_Start+0xc6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756c:	e01b      	b.n	80075a6 <HAL_TIM_OC_Start+0xfe>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d104      	bne.n	800757e <HAL_TIM_OC_Start+0xd6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800757c:	e013      	b.n	80075a6 <HAL_TIM_OC_Start+0xfe>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d104      	bne.n	800758e <HAL_TIM_OC_Start+0xe6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800758c:	e00b      	b.n	80075a6 <HAL_TIM_OC_Start+0xfe>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b10      	cmp	r3, #16
 8007592:	d104      	bne.n	800759e <HAL_TIM_OC_Start+0xf6>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800759c:	e003      	b.n	80075a6 <HAL_TIM_OC_Start+0xfe>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f002 fa86 	bl	8009ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3a      	ldr	r2, [pc, #232]	@ (80076a4 <HAL_TIM_OC_Start+0x1fc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d018      	beq.n	80075f0 <HAL_TIM_OC_Start+0x148>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a39      	ldr	r2, [pc, #228]	@ (80076a8 <HAL_TIM_OC_Start+0x200>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d013      	beq.n	80075f0 <HAL_TIM_OC_Start+0x148>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a37      	ldr	r2, [pc, #220]	@ (80076ac <HAL_TIM_OC_Start+0x204>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00e      	beq.n	80075f0 <HAL_TIM_OC_Start+0x148>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a36      	ldr	r2, [pc, #216]	@ (80076b0 <HAL_TIM_OC_Start+0x208>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d009      	beq.n	80075f0 <HAL_TIM_OC_Start+0x148>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a34      	ldr	r2, [pc, #208]	@ (80076b4 <HAL_TIM_OC_Start+0x20c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <HAL_TIM_OC_Start+0x148>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a33      	ldr	r2, [pc, #204]	@ (80076b8 <HAL_TIM_OC_Start+0x210>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d101      	bne.n	80075f4 <HAL_TIM_OC_Start+0x14c>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_OC_Start+0x14e>
 80075f4:	2300      	movs	r3, #0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a25      	ldr	r2, [pc, #148]	@ (80076a4 <HAL_TIM_OC_Start+0x1fc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761c:	d01d      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a26      	ldr	r2, [pc, #152]	@ (80076bc <HAL_TIM_OC_Start+0x214>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a24      	ldr	r2, [pc, #144]	@ (80076c0 <HAL_TIM_OC_Start+0x218>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a23      	ldr	r2, [pc, #140]	@ (80076c4 <HAL_TIM_OC_Start+0x21c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a19      	ldr	r2, [pc, #100]	@ (80076a8 <HAL_TIM_OC_Start+0x200>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_TIM_OC_Start+0x204>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIM_OC_Start+0x1b2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <HAL_TIM_OC_Start+0x210>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d115      	bne.n	8007686 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	4b19      	ldr	r3, [pc, #100]	@ (80076c8 <HAL_TIM_OC_Start+0x220>)
 8007662:	4013      	ands	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d015      	beq.n	8007698 <HAL_TIM_OC_Start+0x1f0>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007672:	d011      	beq.n	8007698 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	e008      	b.n	8007698 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e000      	b.n	800769a <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	40015000 	.word	0x40015000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e049      	b.n	8007772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f841 	bl	800777a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f001 fb54 	bl	8008db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <HAL_TIM_PWM_Start+0x24>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	e03c      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d109      	bne.n	80077ce <HAL_TIM_PWM_Start+0x3e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	bf14      	ite	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	2300      	moveq	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e02f      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d109      	bne.n	80077e8 <HAL_TIM_PWM_Start+0x58>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	e022      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b0c      	cmp	r3, #12
 80077ec:	d109      	bne.n	8007802 <HAL_TIM_PWM_Start+0x72>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	bf14      	ite	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	2300      	moveq	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	e015      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b10      	cmp	r3, #16
 8007806:	d109      	bne.n	800781c <HAL_TIM_PWM_Start+0x8c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	e008      	b.n	800782e <HAL_TIM_PWM_Start+0x9e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf14      	ite	ne
 8007828:	2301      	movne	r3, #1
 800782a:	2300      	moveq	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0a6      	b.n	8007984 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <HAL_TIM_PWM_Start+0xb6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007844:	e023      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0xc6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007854:	e01b      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start+0xd6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007864:	e013      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b0c      	cmp	r3, #12
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0xe6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007874:	e00b      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b10      	cmp	r3, #16
 800787a:	d104      	bne.n	8007886 <HAL_TIM_PWM_Start+0xf6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007884:	e003      	b.n	800788e <HAL_TIM_PWM_Start+0xfe>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2202      	movs	r2, #2
 800788a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2201      	movs	r2, #1
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f002 f912 	bl	8009ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a3a      	ldr	r2, [pc, #232]	@ (800798c <HAL_TIM_PWM_Start+0x1fc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a39      	ldr	r2, [pc, #228]	@ (8007990 <HAL_TIM_PWM_Start+0x200>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a37      	ldr	r2, [pc, #220]	@ (8007994 <HAL_TIM_PWM_Start+0x204>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a36      	ldr	r2, [pc, #216]	@ (8007998 <HAL_TIM_PWM_Start+0x208>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a34      	ldr	r2, [pc, #208]	@ (800799c <HAL_TIM_PWM_Start+0x20c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x148>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a33      	ldr	r2, [pc, #204]	@ (80079a0 <HAL_TIM_PWM_Start+0x210>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d101      	bne.n	80078dc <HAL_TIM_PWM_Start+0x14c>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <HAL_TIM_PWM_Start+0x14e>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a25      	ldr	r2, [pc, #148]	@ (800798c <HAL_TIM_PWM_Start+0x1fc>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007904:	d01d      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a26      	ldr	r2, [pc, #152]	@ (80079a4 <HAL_TIM_PWM_Start+0x214>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a24      	ldr	r2, [pc, #144]	@ (80079a8 <HAL_TIM_PWM_Start+0x218>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a23      	ldr	r2, [pc, #140]	@ (80079ac <HAL_TIM_PWM_Start+0x21c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a19      	ldr	r2, [pc, #100]	@ (8007990 <HAL_TIM_PWM_Start+0x200>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a18      	ldr	r2, [pc, #96]	@ (8007994 <HAL_TIM_PWM_Start+0x204>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_TIM_PWM_Start+0x1b2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a18      	ldr	r2, [pc, #96]	@ (80079a0 <HAL_TIM_PWM_Start+0x210>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d115      	bne.n	800796e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	4b19      	ldr	r3, [pc, #100]	@ (80079b0 <HAL_TIM_PWM_Start+0x220>)
 800794a:	4013      	ands	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b06      	cmp	r3, #6
 8007952:	d015      	beq.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795a:	d011      	beq.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796c:	e008      	b.n	8007980 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e000      	b.n	8007982 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40013400 	.word	0x40013400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800
 80079a0:	40015000 	.word	0x40015000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	00010007 	.word	0x00010007

080079b4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e03c      	b.n	8007a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d109      	bne.n	80079fa <HAL_TIM_PWM_Start_DMA+0x46>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	bf0c      	ite	eq
 80079f2:	2301      	moveq	r3, #1
 80079f4:	2300      	movne	r3, #0
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	e02f      	b.n	8007a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d109      	bne.n	8007a14 <HAL_TIM_PWM_Start_DMA+0x60>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e022      	b.n	8007a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	d109      	bne.n	8007a2e <HAL_TIM_PWM_Start_DMA+0x7a>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	bf0c      	ite	eq
 8007a26:	2301      	moveq	r3, #1
 8007a28:	2300      	movne	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	e015      	b.n	8007a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d109      	bne.n	8007a48 <HAL_TIM_PWM_Start_DMA+0x94>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e008      	b.n	8007a5a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e1b5      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d109      	bne.n	8007a7c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e03c      	b.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d109      	bne.n	8007a96 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	bf0c      	ite	eq
 8007a8e:	2301      	moveq	r3, #1
 8007a90:	2300      	movne	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	e02f      	b.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d109      	bne.n	8007ab0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	bf0c      	ite	eq
 8007aa8:	2301      	moveq	r3, #1
 8007aaa:	2300      	movne	r3, #0
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	e022      	b.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b0c      	cmp	r3, #12
 8007ab4:	d109      	bne.n	8007aca <HAL_TIM_PWM_Start_DMA+0x116>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	2300      	movne	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	e015      	b.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b10      	cmp	r3, #16
 8007ace:	d109      	bne.n	8007ae4 <HAL_TIM_PWM_Start_DMA+0x130>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	bf0c      	ite	eq
 8007adc:	2301      	moveq	r3, #1
 8007ade:	2300      	movne	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	e008      	b.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	bf0c      	ite	eq
 8007af0:	2301      	moveq	r3, #1
 8007af2:	2300      	movne	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d034      	beq.n	8007b64 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_TIM_PWM_Start_DMA+0x152>
 8007b00:	887b      	ldrh	r3, [r7, #2]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e161      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x166>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b18:	e026      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d104      	bne.n	8007b2a <HAL_TIM_PWM_Start_DMA+0x176>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b28:	e01e      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start_DMA+0x186>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b38:	e016      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start_DMA+0x196>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b48:	e00e      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b58:	e006      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b62:	e001      	b.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e132      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b0c      	cmp	r3, #12
 8007b6c:	f200 80ae 	bhi.w	8007ccc <HAL_TIM_PWM_Start_DMA+0x318>
 8007b70:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007ccd 	.word	0x08007ccd
 8007b80:	08007ccd 	.word	0x08007ccd
 8007b84:	08007ccd 	.word	0x08007ccd
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007ccd 	.word	0x08007ccd
 8007b90:	08007ccd 	.word	0x08007ccd
 8007b94:	08007ccd 	.word	0x08007ccd
 8007b98:	08007c3d 	.word	0x08007c3d
 8007b9c:	08007ccd 	.word	0x08007ccd
 8007ba0:	08007ccd 	.word	0x08007ccd
 8007ba4:	08007ccd 	.word	0x08007ccd
 8007ba8:	08007c85 	.word	0x08007c85
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	4a89      	ldr	r2, [pc, #548]	@ (8007dd8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	4a88      	ldr	r2, [pc, #544]	@ (8007ddc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007bba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	4a87      	ldr	r2, [pc, #540]	@ (8007de0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007bc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3334      	adds	r3, #52	@ 0x34
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	887b      	ldrh	r3, [r7, #2]
 8007bd4:	f7fc f936 	bl	8003e44 <HAL_DMA_Start_IT>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e0f5      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf0:	60da      	str	r2, [r3, #12]
      break;
 8007bf2:	e06e      	b.n	8007cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	4a77      	ldr	r2, [pc, #476]	@ (8007dd8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	4a76      	ldr	r2, [pc, #472]	@ (8007ddc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	4a75      	ldr	r2, [pc, #468]	@ (8007de0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007c0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3338      	adds	r3, #56	@ 0x38
 8007c18:	461a      	mov	r2, r3
 8007c1a:	887b      	ldrh	r3, [r7, #2]
 8007c1c:	f7fc f912 	bl	8003e44 <HAL_DMA_Start_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e0d1      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c38:	60da      	str	r2, [r3, #12]
      break;
 8007c3a:	e04a      	b.n	8007cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	4a65      	ldr	r2, [pc, #404]	@ (8007dd8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	4a64      	ldr	r2, [pc, #400]	@ (8007ddc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4a63      	ldr	r2, [pc, #396]	@ (8007de0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007c52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	333c      	adds	r3, #60	@ 0x3c
 8007c60:	461a      	mov	r2, r3
 8007c62:	887b      	ldrh	r3, [r7, #2]
 8007c64:	f7fc f8ee 	bl	8003e44 <HAL_DMA_Start_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e0ad      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c80:	60da      	str	r2, [r3, #12]
      break;
 8007c82:	e026      	b.n	8007cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c88:	4a53      	ldr	r2, [pc, #332]	@ (8007dd8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c90:	4a52      	ldr	r2, [pc, #328]	@ (8007ddc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007c92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	4a51      	ldr	r2, [pc, #324]	@ (8007de0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007c9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3340      	adds	r3, #64	@ 0x40
 8007ca8:	461a      	mov	r2, r3
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	f7fc f8ca 	bl	8003e44 <HAL_DMA_Start_IT>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e089      	b.n	8007dce <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cc8:	60da      	str	r2, [r3, #12]
      break;
 8007cca:	e002      	b.n	8007cd2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d179      	bne.n	8007dcc <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f001 feed 	bl	8009ac0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a3e      	ldr	r2, [pc, #248]	@ (8007de4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x36e>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8007de8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x36e>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8007dec <HAL_TIM_PWM_Start_DMA+0x438>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x36e>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a39      	ldr	r2, [pc, #228]	@ (8007df0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x36e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a38      	ldr	r2, [pc, #224]	@ (8007df4 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x36e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a36      	ldr	r2, [pc, #216]	@ (8007df8 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d101      	bne.n	8007d26 <HAL_TIM_PWM_Start_DMA+0x372>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <HAL_TIM_PWM_Start_DMA+0x374>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a28      	ldr	r2, [pc, #160]	@ (8007de4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d022      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d4e:	d01d      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a29      	ldr	r2, [pc, #164]	@ (8007dfc <HAL_TIM_PWM_Start_DMA+0x448>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d018      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a28      	ldr	r2, [pc, #160]	@ (8007e00 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d013      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a26      	ldr	r2, [pc, #152]	@ (8007e04 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00e      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dec <HAL_TIM_PWM_Start_DMA+0x438>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d004      	beq.n	8007d8c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1c      	ldr	r2, [pc, #112]	@ (8007df8 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d115      	bne.n	8007db8 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	4b1d      	ldr	r3, [pc, #116]	@ (8007e08 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b06      	cmp	r3, #6
 8007d9c:	d015      	beq.n	8007dca <HAL_TIM_PWM_Start_DMA+0x416>
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da4:	d011      	beq.n	8007dca <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0201 	orr.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db6:	e008      	b.n	8007dca <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e000      	b.n	8007dcc <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	08008ca7 	.word	0x08008ca7
 8007ddc:	08008d4f 	.word	0x08008d4f
 8007de0:	08008c15 	.word	0x08008c15
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40014400 	.word	0x40014400
 8007df4:	40014800 	.word	0x40014800
 8007df8:	40015000 	.word	0x40015000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	00010007 	.word	0x00010007

08007e0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e049      	b.n	8007eb2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f841 	bl	8007eba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f000 ffb4 	bl	8008db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_IC_Start_IT+0x1e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	e023      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x66>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_IC_Start_IT+0x2e>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e01b      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x66>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_IC_Start_IT+0x3e>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	e013      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x66>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b0c      	cmp	r3, #12
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_IC_Start_IT+0x4e>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e00b      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x66>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_IC_Start_IT+0x5e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	e003      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x66>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <HAL_TIM_IC_Start_IT+0x78>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e013      	b.n	8007f70 <HAL_TIM_IC_Start_IT+0xa0>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d104      	bne.n	8007f58 <HAL_TIM_IC_Start_IT+0x88>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e00b      	b.n	8007f70 <HAL_TIM_IC_Start_IT+0xa0>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d104      	bne.n	8007f68 <HAL_TIM_IC_Start_IT+0x98>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	e003      	b.n	8007f70 <HAL_TIM_IC_Start_IT+0xa0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d102      	bne.n	8007f7e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f78:	7b7b      	ldrb	r3, [r7, #13]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d001      	beq.n	8007f82 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0e2      	b.n	8008148 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_IC_Start_IT+0xc2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f90:	e023      	b.n	8007fda <HAL_TIM_IC_Start_IT+0x10a>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_IC_Start_IT+0xd2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fa0:	e01b      	b.n	8007fda <HAL_TIM_IC_Start_IT+0x10a>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_IC_Start_IT+0xe2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fb0:	e013      	b.n	8007fda <HAL_TIM_IC_Start_IT+0x10a>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b0c      	cmp	r3, #12
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_IC_Start_IT+0xf2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fc0:	e00b      	b.n	8007fda <HAL_TIM_IC_Start_IT+0x10a>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d104      	bne.n	8007fd2 <HAL_TIM_IC_Start_IT+0x102>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd0:	e003      	b.n	8007fda <HAL_TIM_IC_Start_IT+0x10a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_IC_Start_IT+0x11a>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fe8:	e013      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x142>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d104      	bne.n	8007ffa <HAL_TIM_IC_Start_IT+0x12a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ff8:	e00b      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x142>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d104      	bne.n	800800a <HAL_TIM_IC_Start_IT+0x13a>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008008:	e003      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x142>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b0c      	cmp	r3, #12
 8008016:	d841      	bhi.n	800809c <HAL_TIM_IC_Start_IT+0x1cc>
 8008018:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <HAL_TIM_IC_Start_IT+0x150>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008055 	.word	0x08008055
 8008024:	0800809d 	.word	0x0800809d
 8008028:	0800809d 	.word	0x0800809d
 800802c:	0800809d 	.word	0x0800809d
 8008030:	08008067 	.word	0x08008067
 8008034:	0800809d 	.word	0x0800809d
 8008038:	0800809d 	.word	0x0800809d
 800803c:	0800809d 	.word	0x0800809d
 8008040:	08008079 	.word	0x08008079
 8008044:	0800809d 	.word	0x0800809d
 8008048:	0800809d 	.word	0x0800809d
 800804c:	0800809d 	.word	0x0800809d
 8008050:	0800808b 	.word	0x0800808b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0202 	orr.w	r2, r2, #2
 8008062:	60da      	str	r2, [r3, #12]
      break;
 8008064:	e01d      	b.n	80080a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0204 	orr.w	r2, r2, #4
 8008074:	60da      	str	r2, [r3, #12]
      break;
 8008076:	e014      	b.n	80080a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	60da      	str	r2, [r3, #12]
      break;
 8008088:	e00b      	b.n	80080a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0210 	orr.w	r2, r2, #16
 8008098:	60da      	str	r2, [r3, #12]
      break;
 800809a:	e002      	b.n	80080a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d14e      	bne.n	8008146 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2201      	movs	r2, #1
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fd05 	bl	8009ac0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a25      	ldr	r2, [pc, #148]	@ (8008150 <HAL_TIM_IC_Start_IT+0x280>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d022      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c8:	d01d      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a21      	ldr	r2, [pc, #132]	@ (8008154 <HAL_TIM_IC_Start_IT+0x284>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d018      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008158 <HAL_TIM_IC_Start_IT+0x288>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1e      	ldr	r2, [pc, #120]	@ (800815c <HAL_TIM_IC_Start_IT+0x28c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00e      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <HAL_TIM_IC_Start_IT+0x290>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008164 <HAL_TIM_IC_Start_IT+0x294>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d004      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x236>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a19      	ldr	r2, [pc, #100]	@ (8008168 <HAL_TIM_IC_Start_IT+0x298>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d115      	bne.n	8008132 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	4b17      	ldr	r3, [pc, #92]	@ (800816c <HAL_TIM_IC_Start_IT+0x29c>)
 800810e:	4013      	ands	r3, r2
 8008110:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b06      	cmp	r3, #6
 8008116:	d015      	beq.n	8008144 <HAL_TIM_IC_Start_IT+0x274>
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800811e:	d011      	beq.n	8008144 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	e008      	b.n	8008144 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e000      	b.n	8008146 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008144:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008146:	7bfb      	ldrb	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40012c00 	.word	0x40012c00
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40014000 	.word	0x40014000
 8008168:	40015000 	.word	0x40015000
 800816c:	00010007 	.word	0x00010007

08008170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d020      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01b      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0202 	mvn.w	r2, #2
 80081a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7f8 ff0a 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fcf4 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fcfb 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d020      	beq.n	8008220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01b      	beq.n	8008220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0204 	mvn.w	r2, #4
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7f8 fee4 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fcce 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fcd5 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d020      	beq.n	800826c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01b      	beq.n	800826c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0208 	mvn.w	r2, #8
 800823c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2204      	movs	r2, #4
 8008242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7f8 febe 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 8008258:	e005      	b.n	8008266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fca8 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fcaf 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	d020      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01b      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0210 	mvn.w	r2, #16
 8008288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2208      	movs	r2, #8
 800828e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7f8 fe98 	bl	8000fd4 <HAL_TIM_IC_CaptureCallback>
 80082a4:	e005      	b.n	80082b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fc82 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc89 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00c      	beq.n	80082dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0201 	mvn.w	r2, #1
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fc60 	bl	8008b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fd35 	bl	8009d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00c      	beq.n	800832e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d007      	beq.n	800832e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 fd2d 	bl	8009d88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800834a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fc4d 	bl	8008bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00c      	beq.n	8008376 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f06f 0220 	mvn.w	r2, #32
 800836e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fcf5 	bl	8009d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00c      	beq.n	800839a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fd01 	bl	8009d9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80083b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 fcf9 	bl	8009db0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00c      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80083da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fcf1 	bl	8009dc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00c      	beq.n	8008406 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80083fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fce9 	bl	8009dd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <HAL_TIM_OC_ConfigChannel+0x1e>
 800842a:	2302      	movs	r3, #2
 800842c:	e066      	b.n	80084fc <HAL_TIM_OC_ConfigChannel+0xec>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b14      	cmp	r3, #20
 800843a:	d857      	bhi.n	80084ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800843c:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <HAL_TIM_OC_ConfigChannel+0x34>)
 800843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008442:	bf00      	nop
 8008444:	08008499 	.word	0x08008499
 8008448:	080084ed 	.word	0x080084ed
 800844c:	080084ed 	.word	0x080084ed
 8008450:	080084ed 	.word	0x080084ed
 8008454:	080084a7 	.word	0x080084a7
 8008458:	080084ed 	.word	0x080084ed
 800845c:	080084ed 	.word	0x080084ed
 8008460:	080084ed 	.word	0x080084ed
 8008464:	080084b5 	.word	0x080084b5
 8008468:	080084ed 	.word	0x080084ed
 800846c:	080084ed 	.word	0x080084ed
 8008470:	080084ed 	.word	0x080084ed
 8008474:	080084c3 	.word	0x080084c3
 8008478:	080084ed 	.word	0x080084ed
 800847c:	080084ed 	.word	0x080084ed
 8008480:	080084ed 	.word	0x080084ed
 8008484:	080084d1 	.word	0x080084d1
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080084ed 	.word	0x080084ed
 8008490:	080084ed 	.word	0x080084ed
 8008494:	080084df 	.word	0x080084df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fd3e 	bl	8008f20 <TIM_OC1_SetConfig>
      break;
 80084a4:	e025      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fdd1 	bl	8009054 <TIM_OC2_SetConfig>
      break;
 80084b2:	e01e      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fe5e 	bl	800917c <TIM_OC3_SetConfig>
      break;
 80084c0:	e017      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fee9 	bl	80092a0 <TIM_OC4_SetConfig>
      break;
 80084ce:	e010      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 ff76 	bl	80093c8 <TIM_OC5_SetConfig>
      break;
 80084dc:	e009      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 ffd9 	bl	800949c <TIM_OC6_SetConfig>
      break;
 80084ea:	e002      	b.n	80084f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_TIM_IC_ConfigChannel+0x1e>
 800851e:	2302      	movs	r3, #2
 8008520:	e088      	b.n	8008634 <HAL_TIM_IC_ConfigChannel+0x130>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11b      	bne.n	8008568 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008540:	f001 f8f8 	bl	8009734 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 020c 	bic.w	r2, r2, #12
 8008552:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6999      	ldr	r1, [r3, #24]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	619a      	str	r2, [r3, #24]
 8008566:	e060      	b.n	800862a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b04      	cmp	r3, #4
 800856c:	d11c      	bne.n	80085a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800857e:	f001 f97c 	bl	800987a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008590:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6999      	ldr	r1, [r3, #24]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	619a      	str	r2, [r3, #24]
 80085a6:	e040      	b.n	800862a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d11b      	bne.n	80085e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80085be:	f001 f9c9 	bl	8009954 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 020c 	bic.w	r2, r2, #12
 80085d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69d9      	ldr	r1, [r3, #28]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
 80085e4:	e021      	b.n	800862a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b0c      	cmp	r3, #12
 80085ea:	d11c      	bne.n	8008626 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80085fc:	f001 f9e6 	bl	80099cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69da      	ldr	r2, [r3, #28]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800860e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69d9      	ldr	r1, [r3, #28]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	021a      	lsls	r2, r3, #8
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	61da      	str	r2, [r3, #28]
 8008624:	e001      	b.n	800862a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008656:	2302      	movs	r3, #2
 8008658:	e0ff      	b.n	800885a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b14      	cmp	r3, #20
 8008666:	f200 80f0 	bhi.w	800884a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800866a:	a201      	add	r2, pc, #4	@ (adr r2, 8008670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	080086c5 	.word	0x080086c5
 8008674:	0800884b 	.word	0x0800884b
 8008678:	0800884b 	.word	0x0800884b
 800867c:	0800884b 	.word	0x0800884b
 8008680:	08008705 	.word	0x08008705
 8008684:	0800884b 	.word	0x0800884b
 8008688:	0800884b 	.word	0x0800884b
 800868c:	0800884b 	.word	0x0800884b
 8008690:	08008747 	.word	0x08008747
 8008694:	0800884b 	.word	0x0800884b
 8008698:	0800884b 	.word	0x0800884b
 800869c:	0800884b 	.word	0x0800884b
 80086a0:	08008787 	.word	0x08008787
 80086a4:	0800884b 	.word	0x0800884b
 80086a8:	0800884b 	.word	0x0800884b
 80086ac:	0800884b 	.word	0x0800884b
 80086b0:	080087c9 	.word	0x080087c9
 80086b4:	0800884b 	.word	0x0800884b
 80086b8:	0800884b 	.word	0x0800884b
 80086bc:	0800884b 	.word	0x0800884b
 80086c0:	08008809 	.word	0x08008809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc28 	bl	8008f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0208 	orr.w	r2, r2, #8
 80086de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0204 	bic.w	r2, r2, #4
 80086ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6999      	ldr	r1, [r3, #24]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	619a      	str	r2, [r3, #24]
      break;
 8008702:	e0a5      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fca2 	bl	8009054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800871e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800872e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6999      	ldr	r1, [r3, #24]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	021a      	lsls	r2, r3, #8
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	619a      	str	r2, [r3, #24]
      break;
 8008744:	e084      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fd15 	bl	800917c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69da      	ldr	r2, [r3, #28]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0208 	orr.w	r2, r2, #8
 8008760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0204 	bic.w	r2, r2, #4
 8008770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69d9      	ldr	r1, [r3, #28]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	61da      	str	r2, [r3, #28]
      break;
 8008784:	e064      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68b9      	ldr	r1, [r7, #8]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fd87 	bl	80092a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69da      	ldr	r2, [r3, #28]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69d9      	ldr	r1, [r3, #28]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	021a      	lsls	r2, r3, #8
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	61da      	str	r2, [r3, #28]
      break;
 80087c6:	e043      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fdfa 	bl	80093c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0208 	orr.w	r2, r2, #8
 80087e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0204 	bic.w	r2, r2, #4
 80087f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008806:	e023      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68b9      	ldr	r1, [r7, #8]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fe44 	bl	800949c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008822:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008832:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	021a      	lsls	r2, r3, #8
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008848:	e002      	b.n	8008850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
      break;
 800884e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop

08008864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_TIM_ConfigClockSource+0x1c>
 800887c:	2302      	movs	r3, #2
 800887e:	e0f6      	b.n	8008a6e <HAL_TIM_ConfigClockSource+0x20a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800889e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80088a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a6f      	ldr	r2, [pc, #444]	@ (8008a78 <HAL_TIM_ConfigClockSource+0x214>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	f000 80c1 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 80088c0:	4a6d      	ldr	r2, [pc, #436]	@ (8008a78 <HAL_TIM_ConfigClockSource+0x214>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	f200 80c6 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80088c8:	4a6c      	ldr	r2, [pc, #432]	@ (8008a7c <HAL_TIM_ConfigClockSource+0x218>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	f000 80b9 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 80088d0:	4a6a      	ldr	r2, [pc, #424]	@ (8008a7c <HAL_TIM_ConfigClockSource+0x218>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	f200 80be 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80088d8:	4a69      	ldr	r2, [pc, #420]	@ (8008a80 <HAL_TIM_ConfigClockSource+0x21c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	f000 80b1 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 80088e0:	4a67      	ldr	r2, [pc, #412]	@ (8008a80 <HAL_TIM_ConfigClockSource+0x21c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	f200 80b6 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80088e8:	4a66      	ldr	r2, [pc, #408]	@ (8008a84 <HAL_TIM_ConfigClockSource+0x220>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	f000 80a9 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 80088f0:	4a64      	ldr	r2, [pc, #400]	@ (8008a84 <HAL_TIM_ConfigClockSource+0x220>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	f200 80ae 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 80088f8:	4a63      	ldr	r2, [pc, #396]	@ (8008a88 <HAL_TIM_ConfigClockSource+0x224>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	f000 80a1 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008900:	4a61      	ldr	r2, [pc, #388]	@ (8008a88 <HAL_TIM_ConfigClockSource+0x224>)
 8008902:	4293      	cmp	r3, r2
 8008904:	f200 80a6 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008908:	4a60      	ldr	r2, [pc, #384]	@ (8008a8c <HAL_TIM_ConfigClockSource+0x228>)
 800890a:	4293      	cmp	r3, r2
 800890c:	f000 8099 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008910:	4a5e      	ldr	r2, [pc, #376]	@ (8008a8c <HAL_TIM_ConfigClockSource+0x228>)
 8008912:	4293      	cmp	r3, r2
 8008914:	f200 809e 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008918:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800891c:	f000 8091 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008920:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008924:	f200 8096 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800892c:	f000 8089 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008930:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008934:	f200 808e 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800893c:	d03e      	beq.n	80089bc <HAL_TIM_ConfigClockSource+0x158>
 800893e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008942:	f200 8087 	bhi.w	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800894a:	f000 8086 	beq.w	8008a5a <HAL_TIM_ConfigClockSource+0x1f6>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008952:	d87f      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008954:	2b70      	cmp	r3, #112	@ 0x70
 8008956:	d01a      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x12a>
 8008958:	2b70      	cmp	r3, #112	@ 0x70
 800895a:	d87b      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800895c:	2b60      	cmp	r3, #96	@ 0x60
 800895e:	d050      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x19e>
 8008960:	2b60      	cmp	r3, #96	@ 0x60
 8008962:	d877      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008964:	2b50      	cmp	r3, #80	@ 0x50
 8008966:	d03c      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0x17e>
 8008968:	2b50      	cmp	r3, #80	@ 0x50
 800896a:	d873      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800896c:	2b40      	cmp	r3, #64	@ 0x40
 800896e:	d058      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0x1be>
 8008970:	2b40      	cmp	r3, #64	@ 0x40
 8008972:	d86f      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008974:	2b30      	cmp	r3, #48	@ 0x30
 8008976:	d064      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008978:	2b30      	cmp	r3, #48	@ 0x30
 800897a:	d86b      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 800897c:	2b20      	cmp	r3, #32
 800897e:	d060      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008980:	2b20      	cmp	r3, #32
 8008982:	d867      	bhi.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d05c      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 8008988:	2b10      	cmp	r3, #16
 800898a:	d05a      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x1de>
 800898c:	e062      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800899e:	f001 f86f 	bl	8009a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	609a      	str	r2, [r3, #8]
      break;
 80089ba:	e04f      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089cc:	f001 f858 	bl	8009a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089de:	609a      	str	r2, [r3, #8]
      break;
 80089e0:	e03c      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 ff14 	bl	800981c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2150      	movs	r1, #80	@ 0x50
 80089fa:	4618      	mov	r0, r3
 80089fc:	f001 f823 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 8008a00:	e02c      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f000 ff70 	bl	80098f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2160      	movs	r1, #96	@ 0x60
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 f813 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 8008a20:	e01c      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f000 fef4 	bl	800981c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2140      	movs	r1, #64	@ 0x40
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 f803 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 8008a40:	e00c      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f000 fffa 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 8008a52:	e003      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]
      break;
 8008a58:	e000      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	00100070 	.word	0x00100070
 8008a7c:	00100060 	.word	0x00100060
 8008a80:	00100050 	.word	0x00100050
 8008a84:	00100040 	.word	0x00100040
 8008a88:	00100030 	.word	0x00100030
 8008a8c:	00100020 	.word	0x00100020

08008a90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e031      	b.n	8008b0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fd5a 	bl	8009574 <TIM_SlaveTimer_SetConfig>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d009      	beq.n	8008ada <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e018      	b.n	8008b0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ae8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008af8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b0c      	cmp	r3, #12
 8008b26:	d831      	bhi.n	8008b8c <HAL_TIM_ReadCapturedValue+0x78>
 8008b28:	a201      	add	r2, pc, #4	@ (adr r2, 8008b30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b65 	.word	0x08008b65
 8008b34:	08008b8d 	.word	0x08008b8d
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008b8d 	.word	0x08008b8d
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b8d 	.word	0x08008b8d
 8008b48:	08008b8d 	.word	0x08008b8d
 8008b4c:	08008b8d 	.word	0x08008b8d
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008b8d 	.word	0x08008b8d
 8008b58:	08008b8d 	.word	0x08008b8d
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008b83 	.word	0x08008b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	60fb      	str	r3, [r7, #12]

      break;
 8008b6c:	e00f      	b.n	8008b8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b74:	60fb      	str	r3, [r7, #12]

      break;
 8008b76:	e00a      	b.n	8008b8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7e:	60fb      	str	r3, [r7, #12]

      break;
 8008b80:	e005      	b.n	8008b8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b88:	60fb      	str	r3, [r7, #12]

      break;
 8008b8a:	e000      	b.n	8008b8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008b8c:	bf00      	nop
  }

  return tmpreg;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d107      	bne.n	8008c3c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c3a:	e02a      	b.n	8008c92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d107      	bne.n	8008c56 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c54:	e01d      	b.n	8008c92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d107      	bne.n	8008c70 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2204      	movs	r2, #4
 8008c64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c6e:	e010      	b.n	8008c92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d107      	bne.n	8008c8a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c88:	e003      	b.n	8008c92 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff ffb4 	bl	8008c00 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	771a      	strb	r2, [r3, #28]
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d10b      	bne.n	8008cd6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d136      	bne.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cd4:	e031      	b.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d10b      	bne.n	8008cf8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d125      	bne.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cf6:	e020      	b.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d10b      	bne.n	8008d1a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2204      	movs	r2, #4
 8008d06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d114      	bne.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d18:	e00f      	b.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d10a      	bne.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2208      	movs	r2, #8
 8008d28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d103      	bne.n	8008d3a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff ff42 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]
}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d103      	bne.n	8008d6e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	771a      	strb	r2, [r3, #28]
 8008d6c:	e019      	b.n	8008da2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d103      	bne.n	8008d80 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	771a      	strb	r2, [r3, #28]
 8008d7e:	e010      	b.n	8008da2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d103      	bne.n	8008d92 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	771a      	strb	r2, [r3, #28]
 8008d90:	e007      	b.n	8008da2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d102      	bne.n	8008da2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2208      	movs	r2, #8
 8008da0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff ff18 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	771a      	strb	r2, [r3, #28]
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a4c      	ldr	r2, [pc, #304]	@ (8008efc <TIM_Base_SetConfig+0x144>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d017      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dd6:	d013      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a49      	ldr	r2, [pc, #292]	@ (8008f00 <TIM_Base_SetConfig+0x148>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00f      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a48      	ldr	r2, [pc, #288]	@ (8008f04 <TIM_Base_SetConfig+0x14c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00b      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a47      	ldr	r2, [pc, #284]	@ (8008f08 <TIM_Base_SetConfig+0x150>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d007      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a46      	ldr	r2, [pc, #280]	@ (8008f0c <TIM_Base_SetConfig+0x154>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_Base_SetConfig+0x48>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a45      	ldr	r2, [pc, #276]	@ (8008f10 <TIM_Base_SetConfig+0x158>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d108      	bne.n	8008e12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a39      	ldr	r2, [pc, #228]	@ (8008efc <TIM_Base_SetConfig+0x144>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d023      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e20:	d01f      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a36      	ldr	r2, [pc, #216]	@ (8008f00 <TIM_Base_SetConfig+0x148>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01b      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a35      	ldr	r2, [pc, #212]	@ (8008f04 <TIM_Base_SetConfig+0x14c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d017      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a34      	ldr	r2, [pc, #208]	@ (8008f08 <TIM_Base_SetConfig+0x150>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a33      	ldr	r2, [pc, #204]	@ (8008f0c <TIM_Base_SetConfig+0x154>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00f      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a33      	ldr	r2, [pc, #204]	@ (8008f14 <TIM_Base_SetConfig+0x15c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00b      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a32      	ldr	r2, [pc, #200]	@ (8008f18 <TIM_Base_SetConfig+0x160>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d007      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a31      	ldr	r2, [pc, #196]	@ (8008f1c <TIM_Base_SetConfig+0x164>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d003      	beq.n	8008e62 <TIM_Base_SetConfig+0xaa>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8008f10 <TIM_Base_SetConfig+0x158>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d108      	bne.n	8008e74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a18      	ldr	r2, [pc, #96]	@ (8008efc <TIM_Base_SetConfig+0x144>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d013      	beq.n	8008ec8 <TIM_Base_SetConfig+0x110>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8008f0c <TIM_Base_SetConfig+0x154>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00f      	beq.n	8008ec8 <TIM_Base_SetConfig+0x110>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8008f14 <TIM_Base_SetConfig+0x15c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <TIM_Base_SetConfig+0x110>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a19      	ldr	r2, [pc, #100]	@ (8008f18 <TIM_Base_SetConfig+0x160>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d007      	beq.n	8008ec8 <TIM_Base_SetConfig+0x110>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a18      	ldr	r2, [pc, #96]	@ (8008f1c <TIM_Base_SetConfig+0x164>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_Base_SetConfig+0x110>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a13      	ldr	r2, [pc, #76]	@ (8008f10 <TIM_Base_SetConfig+0x158>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d103      	bne.n	8008ed0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d105      	bne.n	8008eee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f023 0201 	bic.w	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	611a      	str	r2, [r3, #16]
  }
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40000400 	.word	0x40000400
 8008f04:	40000800 	.word	0x40000800
 8008f08:	40000c00 	.word	0x40000c00
 8008f0c:	40013400 	.word	0x40013400
 8008f10:	40015000 	.word	0x40015000
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40014400 	.word	0x40014400
 8008f1c:	40014800 	.word	0x40014800

08008f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f023 0201 	bic.w	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f023 0302 	bic.w	r3, r3, #2
 8008f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a30      	ldr	r2, [pc, #192]	@ (800903c <TIM_OC1_SetConfig+0x11c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x88>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a2f      	ldr	r2, [pc, #188]	@ (8009040 <TIM_OC1_SetConfig+0x120>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00f      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x88>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009044 <TIM_OC1_SetConfig+0x124>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00b      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x88>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a2d      	ldr	r2, [pc, #180]	@ (8009048 <TIM_OC1_SetConfig+0x128>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x88>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800904c <TIM_OC1_SetConfig+0x12c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_OC1_SetConfig+0x88>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8009050 <TIM_OC1_SetConfig+0x130>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d10c      	bne.n	8008fc2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 0308 	bic.w	r3, r3, #8
 8008fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f023 0304 	bic.w	r3, r3, #4
 8008fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800903c <TIM_OC1_SetConfig+0x11c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d013      	beq.n	8008ff2 <TIM_OC1_SetConfig+0xd2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8009040 <TIM_OC1_SetConfig+0x120>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00f      	beq.n	8008ff2 <TIM_OC1_SetConfig+0xd2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8009044 <TIM_OC1_SetConfig+0x124>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00b      	beq.n	8008ff2 <TIM_OC1_SetConfig+0xd2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8009048 <TIM_OC1_SetConfig+0x128>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d007      	beq.n	8008ff2 <TIM_OC1_SetConfig+0xd2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a19      	ldr	r2, [pc, #100]	@ (800904c <TIM_OC1_SetConfig+0x12c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d003      	beq.n	8008ff2 <TIM_OC1_SetConfig+0xd2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a18      	ldr	r2, [pc, #96]	@ (8009050 <TIM_OC1_SetConfig+0x130>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d111      	bne.n	8009016 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	621a      	str	r2, [r3, #32]
}
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40013400 	.word	0x40013400
 8009044:	40014000 	.word	0x40014000
 8009048:	40014400 	.word	0x40014400
 800904c:	40014800 	.word	0x40014800
 8009050:	40015000 	.word	0x40015000

08009054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f023 0210 	bic.w	r2, r3, #16
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800908e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f023 0320 	bic.w	r3, r3, #32
 80090a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009164 <TIM_OC2_SetConfig+0x110>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d007      	beq.n	80090c8 <TIM_OC2_SetConfig+0x74>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009168 <TIM_OC2_SetConfig+0x114>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d003      	beq.n	80090c8 <TIM_OC2_SetConfig+0x74>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2a      	ldr	r2, [pc, #168]	@ (800916c <TIM_OC2_SetConfig+0x118>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d10d      	bne.n	80090e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009164 <TIM_OC2_SetConfig+0x110>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <TIM_OC2_SetConfig+0xc0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009168 <TIM_OC2_SetConfig+0x114>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00f      	beq.n	8009114 <TIM_OC2_SetConfig+0xc0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009170 <TIM_OC2_SetConfig+0x11c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00b      	beq.n	8009114 <TIM_OC2_SetConfig+0xc0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009174 <TIM_OC2_SetConfig+0x120>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d007      	beq.n	8009114 <TIM_OC2_SetConfig+0xc0>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <TIM_OC2_SetConfig+0x124>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_OC2_SetConfig+0xc0>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a17      	ldr	r2, [pc, #92]	@ (800916c <TIM_OC2_SetConfig+0x118>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d113      	bne.n	800913c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800911a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4313      	orrs	r3, r2
 800912e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	621a      	str	r2, [r3, #32]
}
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40013400 	.word	0x40013400
 800916c:	40015000 	.word	0x40015000
 8009170:	40014000 	.word	0x40014000
 8009174:	40014400 	.word	0x40014400
 8009178:	40014800 	.word	0x40014800

0800917c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0303 	bic.w	r3, r3, #3
 80091b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2b      	ldr	r2, [pc, #172]	@ (8009288 <TIM_OC3_SetConfig+0x10c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d007      	beq.n	80091ee <TIM_OC3_SetConfig+0x72>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2a      	ldr	r2, [pc, #168]	@ (800928c <TIM_OC3_SetConfig+0x110>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d003      	beq.n	80091ee <TIM_OC3_SetConfig+0x72>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a29      	ldr	r2, [pc, #164]	@ (8009290 <TIM_OC3_SetConfig+0x114>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d10d      	bne.n	800920a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a1e      	ldr	r2, [pc, #120]	@ (8009288 <TIM_OC3_SetConfig+0x10c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <TIM_OC3_SetConfig+0xbe>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a1d      	ldr	r2, [pc, #116]	@ (800928c <TIM_OC3_SetConfig+0x110>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_OC3_SetConfig+0xbe>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1d      	ldr	r2, [pc, #116]	@ (8009294 <TIM_OC3_SetConfig+0x118>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_OC3_SetConfig+0xbe>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1c      	ldr	r2, [pc, #112]	@ (8009298 <TIM_OC3_SetConfig+0x11c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_OC3_SetConfig+0xbe>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a1b      	ldr	r2, [pc, #108]	@ (800929c <TIM_OC3_SetConfig+0x120>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_OC3_SetConfig+0xbe>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a16      	ldr	r2, [pc, #88]	@ (8009290 <TIM_OC3_SetConfig+0x114>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d113      	bne.n	8009262 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40013400 	.word	0x40013400
 8009290:	40015000 	.word	0x40015000
 8009294:	40014000 	.word	0x40014000
 8009298:	40014400 	.word	0x40014400
 800929c:	40014800 	.word	0x40014800

080092a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	031b      	lsls	r3, r3, #12
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a2c      	ldr	r2, [pc, #176]	@ (80093b0 <TIM_OC4_SetConfig+0x110>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <TIM_OC4_SetConfig+0x74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a2b      	ldr	r2, [pc, #172]	@ (80093b4 <TIM_OC4_SetConfig+0x114>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC4_SetConfig+0x74>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a2a      	ldr	r2, [pc, #168]	@ (80093b8 <TIM_OC4_SetConfig+0x118>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d10d      	bne.n	8009330 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	031b      	lsls	r3, r3, #12
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800932e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1f      	ldr	r2, [pc, #124]	@ (80093b0 <TIM_OC4_SetConfig+0x110>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d013      	beq.n	8009360 <TIM_OC4_SetConfig+0xc0>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a1e      	ldr	r2, [pc, #120]	@ (80093b4 <TIM_OC4_SetConfig+0x114>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_OC4_SetConfig+0xc0>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1e      	ldr	r2, [pc, #120]	@ (80093bc <TIM_OC4_SetConfig+0x11c>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_OC4_SetConfig+0xc0>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1d      	ldr	r2, [pc, #116]	@ (80093c0 <TIM_OC4_SetConfig+0x120>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_OC4_SetConfig+0xc0>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a1c      	ldr	r2, [pc, #112]	@ (80093c4 <TIM_OC4_SetConfig+0x124>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC4_SetConfig+0xc0>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a17      	ldr	r2, [pc, #92]	@ (80093b8 <TIM_OC4_SetConfig+0x118>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d113      	bne.n	8009388 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009366:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800936e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	019b      	lsls	r3, r3, #6
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	019b      	lsls	r3, r3, #6
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	4313      	orrs	r3, r2
 8009386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40013400 	.word	0x40013400
 80093b8:	40015000 	.word	0x40015000
 80093bc:	40014000 	.word	0x40014000
 80093c0:	40014400 	.word	0x40014400
 80093c4:	40014800 	.word	0x40014800

080093c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4313      	orrs	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800940c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a19      	ldr	r2, [pc, #100]	@ (8009484 <TIM_OC5_SetConfig+0xbc>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d013      	beq.n	800944a <TIM_OC5_SetConfig+0x82>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a18      	ldr	r2, [pc, #96]	@ (8009488 <TIM_OC5_SetConfig+0xc0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d00f      	beq.n	800944a <TIM_OC5_SetConfig+0x82>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a17      	ldr	r2, [pc, #92]	@ (800948c <TIM_OC5_SetConfig+0xc4>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00b      	beq.n	800944a <TIM_OC5_SetConfig+0x82>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a16      	ldr	r2, [pc, #88]	@ (8009490 <TIM_OC5_SetConfig+0xc8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d007      	beq.n	800944a <TIM_OC5_SetConfig+0x82>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <TIM_OC5_SetConfig+0xcc>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d003      	beq.n	800944a <TIM_OC5_SetConfig+0x82>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a14      	ldr	r2, [pc, #80]	@ (8009498 <TIM_OC5_SetConfig+0xd0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d109      	bne.n	800945e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	621a      	str	r2, [r3, #32]
}
 8009478:	bf00      	nop
 800947a:	371c      	adds	r7, #28
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	40012c00 	.word	0x40012c00
 8009488:	40013400 	.word	0x40013400
 800948c:	40014000 	.word	0x40014000
 8009490:	40014400 	.word	0x40014400
 8009494:	40014800 	.word	0x40014800
 8009498:	40015000 	.word	0x40015000

0800949c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	051b      	lsls	r3, r3, #20
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1a      	ldr	r2, [pc, #104]	@ (800955c <TIM_OC6_SetConfig+0xc0>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d013      	beq.n	8009520 <TIM_OC6_SetConfig+0x84>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a19      	ldr	r2, [pc, #100]	@ (8009560 <TIM_OC6_SetConfig+0xc4>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d00f      	beq.n	8009520 <TIM_OC6_SetConfig+0x84>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a18      	ldr	r2, [pc, #96]	@ (8009564 <TIM_OC6_SetConfig+0xc8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00b      	beq.n	8009520 <TIM_OC6_SetConfig+0x84>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <TIM_OC6_SetConfig+0xcc>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d007      	beq.n	8009520 <TIM_OC6_SetConfig+0x84>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a16      	ldr	r2, [pc, #88]	@ (800956c <TIM_OC6_SetConfig+0xd0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d003      	beq.n	8009520 <TIM_OC6_SetConfig+0x84>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a15      	ldr	r2, [pc, #84]	@ (8009570 <TIM_OC6_SetConfig+0xd4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d109      	bne.n	8009534 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	029b      	lsls	r3, r3, #10
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	4313      	orrs	r3, r2
 8009532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	621a      	str	r2, [r3, #32]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40013400 	.word	0x40013400
 8009564:	40014000 	.word	0x40014000
 8009568:	40014400 	.word	0x40014400
 800956c:	40014800 	.word	0x40014800
 8009570:	40015000 	.word	0x40015000

08009574 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009594:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095a6:	f023 0307 	bic.w	r3, r3, #7
 80095aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4a56      	ldr	r2, [pc, #344]	@ (800971c <TIM_SlaveTimer_SetConfig+0x1a8>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	f000 80a2 	beq.w	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 80095ca:	4a54      	ldr	r2, [pc, #336]	@ (800971c <TIM_SlaveTimer_SetConfig+0x1a8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	f200 809b 	bhi.w	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 80095d2:	4a53      	ldr	r2, [pc, #332]	@ (8009720 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	f000 809a 	beq.w	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 80095da:	4a51      	ldr	r2, [pc, #324]	@ (8009720 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	f200 8093 	bhi.w	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 80095e2:	4a50      	ldr	r2, [pc, #320]	@ (8009724 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f000 8092 	beq.w	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 80095ea:	4a4e      	ldr	r2, [pc, #312]	@ (8009724 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	f200 808b 	bhi.w	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 80095f2:	4a4d      	ldr	r2, [pc, #308]	@ (8009728 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	f000 808a 	beq.w	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 80095fa:	4a4b      	ldr	r2, [pc, #300]	@ (8009728 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	f200 8083 	bhi.w	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009602:	4a4a      	ldr	r2, [pc, #296]	@ (800972c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	f000 8082 	beq.w	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 800960a:	4a48      	ldr	r2, [pc, #288]	@ (800972c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d87b      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009610:	4a47      	ldr	r2, [pc, #284]	@ (8009730 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d07b      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 8009616:	4a46      	ldr	r2, [pc, #280]	@ (8009730 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d875      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 800961c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009620:	d075      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 8009622:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009626:	d86f      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800962c:	d06f      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 800962e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009632:	d869      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009634:	2b70      	cmp	r3, #112	@ 0x70
 8009636:	d01a      	beq.n	800966e <TIM_SlaveTimer_SetConfig+0xfa>
 8009638:	2b70      	cmp	r3, #112	@ 0x70
 800963a:	d865      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 800963c:	2b60      	cmp	r3, #96	@ 0x60
 800963e:	d059      	beq.n	80096f4 <TIM_SlaveTimer_SetConfig+0x180>
 8009640:	2b60      	cmp	r3, #96	@ 0x60
 8009642:	d861      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009644:	2b50      	cmp	r3, #80	@ 0x50
 8009646:	d04b      	beq.n	80096e0 <TIM_SlaveTimer_SetConfig+0x16c>
 8009648:	2b50      	cmp	r3, #80	@ 0x50
 800964a:	d85d      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 800964c:	2b40      	cmp	r3, #64	@ 0x40
 800964e:	d019      	beq.n	8009684 <TIM_SlaveTimer_SetConfig+0x110>
 8009650:	2b40      	cmp	r3, #64	@ 0x40
 8009652:	d859      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009654:	2b30      	cmp	r3, #48	@ 0x30
 8009656:	d05a      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 8009658:	2b30      	cmp	r3, #48	@ 0x30
 800965a:	d855      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 800965c:	2b20      	cmp	r3, #32
 800965e:	d056      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 8009660:	2b20      	cmp	r3, #32
 8009662:	d851      	bhi.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
 8009664:	2b00      	cmp	r3, #0
 8009666:	d052      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 8009668:	2b10      	cmp	r3, #16
 800966a:	d050      	beq.n	800970e <TIM_SlaveTimer_SetConfig+0x19a>
 800966c:	e04c      	b.n	8009708 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800967e:	f000 f9ff 	bl	8009a80 <TIM_ETR_SetConfig>
      break;
 8009682:	e045      	b.n	8009710 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b05      	cmp	r3, #5
 800968a:	d004      	beq.n	8009696 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009690:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009694:	d101      	bne.n	800969a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e03b      	b.n	8009712 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6a1a      	ldr	r2, [r3, #32]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	621a      	str	r2, [r3, #32]
      break;
 80096de:	e017      	b.n	8009710 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ec:	461a      	mov	r2, r3
 80096ee:	f000 f895 	bl	800981c <TIM_TI1_ConfigInputStage>
      break;
 80096f2:	e00d      	b.n	8009710 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009700:	461a      	mov	r2, r3
 8009702:	f000 f8f7 	bl	80098f4 <TIM_TI2_ConfigInputStage>
      break;
 8009706:	e003      	b.n	8009710 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	75fb      	strb	r3, [r7, #23]
      break;
 800970c:	e000      	b.n	8009710 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800970e:	bf00      	nop
  }

  return status;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	00100070 	.word	0x00100070
 8009720:	00100060 	.word	0x00100060
 8009724:	00100050 	.word	0x00100050
 8009728:	00100040 	.word	0x00100040
 800972c:	00100030 	.word	0x00100030
 8009730:	00100020 	.word	0x00100020

08009734 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	f023 0201 	bic.w	r2, r3, #1
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4a28      	ldr	r2, [pc, #160]	@ (8009800 <TIM_TI1_SetConfig+0xcc>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01b      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009768:	d017      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a25      	ldr	r2, [pc, #148]	@ (8009804 <TIM_TI1_SetConfig+0xd0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a24      	ldr	r2, [pc, #144]	@ (8009808 <TIM_TI1_SetConfig+0xd4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00f      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4a23      	ldr	r2, [pc, #140]	@ (800980c <TIM_TI1_SetConfig+0xd8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00b      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a22      	ldr	r2, [pc, #136]	@ (8009810 <TIM_TI1_SetConfig+0xdc>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d007      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a21      	ldr	r2, [pc, #132]	@ (8009814 <TIM_TI1_SetConfig+0xe0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d003      	beq.n	800979a <TIM_TI1_SetConfig+0x66>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a20      	ldr	r2, [pc, #128]	@ (8009818 <TIM_TI1_SetConfig+0xe4>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d101      	bne.n	800979e <TIM_TI1_SetConfig+0x6a>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <TIM_TI1_SetConfig+0x6c>
 800979e:	2300      	movs	r3, #0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d008      	beq.n	80097b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e003      	b.n	80097be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f023 030a 	bic.w	r3, r3, #10
 80097d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f003 030a 	and.w	r3, r3, #10
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40012c00 	.word	0x40012c00
 8009804:	40000400 	.word	0x40000400
 8009808:	40000800 	.word	0x40000800
 800980c:	40000c00 	.word	0x40000c00
 8009810:	40013400 	.word	0x40013400
 8009814:	40014000 	.word	0x40014000
 8009818:	40015000 	.word	0x40015000

0800981c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4313      	orrs	r3, r2
 8009850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f023 030a 	bic.w	r3, r3, #10
 8009858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800987a:	b480      	push	{r7}
 800987c:	b087      	sub	sp, #28
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	f023 0210 	bic.w	r2, r3, #16
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	031b      	lsls	r3, r3, #12
 80098be:	b29b      	uxth	r3, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	621a      	str	r2, [r3, #32]
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f023 0210 	bic.w	r2, r3, #16
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800991e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	031b      	lsls	r3, r3, #12
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4313      	orrs	r3, r2
 8009928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009930:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	621a      	str	r2, [r3, #32]
}
 8009948:	bf00      	nop
 800994a:	371c      	adds	r7, #28
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4313      	orrs	r3, r2
 8009988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009990:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	b2db      	uxtb	r3, r3
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80099a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	621a      	str	r2, [r3, #32]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	031b      	lsls	r3, r3, #12
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	031b      	lsls	r3, r3, #12
 8009a24:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f043 0307 	orr.w	r3, r3, #7
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	609a      	str	r2, [r3, #8]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	021a      	lsls	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	609a      	str	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
}
 8009afe:	bf00      	nop
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e074      	b.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a34      	ldr	r2, [pc, #208]	@ (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d009      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a33      	ldr	r2, [pc, #204]	@ (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a31      	ldr	r2, [pc, #196]	@ (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d108      	bne.n	8009b74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a21      	ldr	r2, [pc, #132]	@ (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d022      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ba4:	d01d      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a1f      	ldr	r2, [pc, #124]	@ (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d018      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00e      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a15      	ldr	r2, [pc, #84]	@ (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d009      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a18      	ldr	r2, [pc, #96]	@ (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d004      	beq.n	8009be2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a11      	ldr	r2, [pc, #68]	@ (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d10c      	bne.n	8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40012c00 	.word	0x40012c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40015000 	.word	0x40015000
 8009c28:	40000400 	.word	0x40000400
 8009c2c:	40000800 	.word	0x40000800
 8009c30:	40000c00 	.word	0x40000c00
 8009c34:	40014000 	.word	0x40014000

08009c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d101      	bne.n	8009c54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e078      	b.n	8009d46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	041b      	lsls	r3, r3, #16
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d009      	beq.n	8009cfa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1b      	ldr	r2, [pc, #108]	@ (8009d58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d004      	beq.n	8009cfa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a19      	ldr	r2, [pc, #100]	@ (8009d5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d11c      	bne.n	8009d34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d04:	051b      	lsls	r3, r3, #20
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	40012c00 	.word	0x40012c00
 8009d58:	40013400 	.word	0x40013400
 8009d5c:	40015000 	.word	0x40015000

08009d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009dfc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009e00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e22:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009e26:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	43db      	mvns	r3, r3
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	4013      	ands	r3, r2
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	1d3b      	adds	r3, r7, #4
 8009e5a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b09d      	sub	sp, #116	@ 0x74
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	78db      	ldrb	r3, [r3, #3]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d81f      	bhi.n	8009efe <USB_ActivateEndpoint+0x72>
 8009ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec4 <USB_ActivateEndpoint+0x38>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009ed5 	.word	0x08009ed5
 8009ec8:	08009ef1 	.word	0x08009ef1
 8009ecc:	08009f07 	.word	0x08009f07
 8009ed0:	08009ee3 	.word	0x08009ee3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ed4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ed8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009edc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009ee0:	e012      	b.n	8009f08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009ee2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ee6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009eea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009eee:	e00b      	b.n	8009f08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009ef0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009ef4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ef8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009efc:	e004      	b.n	8009f08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009f04:	e000      	b.n	8009f08 <USB_ActivateEndpoint+0x7c>
      break;
 8009f06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	441a      	add	r2, r3
 8009f12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	b21b      	sxth	r3, r3
 8009f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f42:	b21a      	sxth	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	b21b      	sxth	r3, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	b21b      	sxth	r3, r3
 8009f4e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	441a      	add	r2, r3
 8009f5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	7b1b      	ldrb	r3, [r3, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 8178 	bne.w	800a26e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8084 	beq.w	800a090 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	61bb      	str	r3, [r7, #24]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	461a      	mov	r2, r3
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	4413      	add	r3, r2
 8009f9a:	61bb      	str	r3, [r7, #24]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	00da      	lsls	r2, r3, #3
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	88db      	ldrh	r3, [r3, #6]
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	827b      	strh	r3, [r7, #18]
 8009fca:	8a7b      	ldrh	r3, [r7, #18]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01b      	beq.n	800a00c <USB_ActivateEndpoint+0x180>
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fea:	823b      	strh	r3, [r7, #16]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	441a      	add	r2, r3
 8009ff6:	8a3b      	ldrh	r3, [r7, #16]
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a004:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	78db      	ldrb	r3, [r3, #3]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d020      	beq.n	800a056 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a02a:	81bb      	strh	r3, [r7, #12]
 800a02c:	89bb      	ldrh	r3, [r7, #12]
 800a02e:	f083 0320 	eor.w	r3, r3, #32
 800a032:	81bb      	strh	r3, [r7, #12]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	441a      	add	r2, r3
 800a03e:	89bb      	ldrh	r3, [r7, #12]
 800a040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a050:	b29b      	uxth	r3, r3
 800a052:	8013      	strh	r3, [r2, #0]
 800a054:	e2d5      	b.n	800a602 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	b29b      	uxth	r3, r3
 800a064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a06c:	81fb      	strh	r3, [r7, #14]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	441a      	add	r2, r3
 800a078:	89fb      	ldrh	r3, [r7, #14]
 800a07a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a07e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	8013      	strh	r3, [r2, #0]
 800a08e:	e2b8      	b.n	800a602 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	633b      	str	r3, [r7, #48]	@ 0x30
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	4413      	add	r3, r2
 800a0a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	00da      	lsls	r2, r3, #3
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	88db      	ldrh	r3, [r3, #6]
 800a0b8:	085b      	lsrs	r3, r3, #1
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	4413      	add	r3, r2
 800a0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	00da      	lsls	r2, r3, #3
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0fe:	d91d      	bls.n	800a13c <USB_ActivateEndpoint+0x2b0>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	f003 031f 	and.w	r3, r3, #31
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <USB_ActivateEndpoint+0x28e>
 800a114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a116:	3b01      	subs	r3, #1
 800a118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29a      	uxth	r2, r3
 800a120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a122:	b29b      	uxth	r3, r3
 800a124:	029b      	lsls	r3, r3, #10
 800a126:	b29b      	uxth	r3, r3
 800a128:	4313      	orrs	r3, r2
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a134:	b29a      	uxth	r2, r3
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	e026      	b.n	800a18a <USB_ActivateEndpoint+0x2fe>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <USB_ActivateEndpoint+0x2ce>
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a152:	b29a      	uxth	r2, r3
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	e017      	b.n	800a18a <USB_ActivateEndpoint+0x2fe>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	085b      	lsrs	r3, r3, #1
 800a160:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <USB_ActivateEndpoint+0x2e8>
 800a16e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a170:	3301      	adds	r3, #1
 800a172:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	029b      	lsls	r3, r3, #10
 800a180:	b29b      	uxth	r3, r3
 800a182:	4313      	orrs	r3, r2
 800a184:	b29a      	uxth	r2, r3
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a198:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a19a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01b      	beq.n	800a1da <USB_ActivateEndpoint+0x34e>
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b8:	843b      	strh	r3, [r7, #32]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	441a      	add	r2, r3
 800a1c4:	8c3b      	ldrh	r3, [r7, #32]
 800a1c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d124      	bne.n	800a22c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f8:	83bb      	strh	r3, [r7, #28]
 800a1fa:	8bbb      	ldrh	r3, [r7, #28]
 800a1fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a200:	83bb      	strh	r3, [r7, #28]
 800a202:	8bbb      	ldrh	r3, [r7, #28]
 800a204:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a208:	83bb      	strh	r3, [r7, #28]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	441a      	add	r2, r3
 800a214:	8bbb      	ldrh	r3, [r7, #28]
 800a216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a21a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a21e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a226:	b29b      	uxth	r3, r3
 800a228:	8013      	strh	r3, [r2, #0]
 800a22a:	e1ea      	b.n	800a602 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a23e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a242:	83fb      	strh	r3, [r7, #30]
 800a244:	8bfb      	ldrh	r3, [r7, #30]
 800a246:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a24a:	83fb      	strh	r3, [r7, #30]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	441a      	add	r2, r3
 800a256:	8bfb      	ldrh	r3, [r7, #30]
 800a258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a25c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a268:	b29b      	uxth	r3, r3
 800a26a:	8013      	strh	r3, [r2, #0]
 800a26c:	e1c9      	b.n	800a602 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	78db      	ldrb	r3, [r3, #3]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d11e      	bne.n	800a2b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b29b      	uxth	r3, r3
 800a284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	441a      	add	r2, r3
 800a29a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a29e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	8013      	strh	r3, [r2, #0]
 800a2b2:	e01d      	b.n	800a2f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a2c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2ca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	441a      	add	r2, r3
 800a2d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a2dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a300:	4413      	add	r3, r2
 800a302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	00da      	lsls	r2, r3, #3
 800a30a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a312:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	891b      	ldrh	r3, [r3, #8]
 800a318:	085b      	lsrs	r3, r3, #1
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	657b      	str	r3, [r7, #84]	@ 0x54
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a32e:	b29b      	uxth	r3, r3
 800a330:	461a      	mov	r2, r3
 800a332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a334:	4413      	add	r3, r2
 800a336:	657b      	str	r3, [r7, #84]	@ 0x54
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	00da      	lsls	r2, r3, #3
 800a33e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a340:	4413      	add	r3, r2
 800a342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a346:	653b      	str	r3, [r7, #80]	@ 0x50
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	895b      	ldrh	r3, [r3, #10]
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a356:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 8093 	bne.w	800a488 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01b      	beq.n	800a3b6 <USB_ActivateEndpoint+0x52a>
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a394:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	441a      	add	r2, r3
 800a3a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a3c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01b      	beq.n	800a406 <USB_ActivateEndpoint+0x57a>
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	441a      	add	r2, r3
 800a3f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a402:	b29b      	uxth	r3, r3
 800a404:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a41e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a420:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a424:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a426:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a428:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a42c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	441a      	add	r2, r3
 800a438:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a43a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a43e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a464:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	441a      	add	r2, r3
 800a470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a47a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a482:	b29b      	uxth	r3, r3
 800a484:	8013      	strh	r3, [r2, #0]
 800a486:	e0bc      	b.n	800a602 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a49c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01d      	beq.n	800a4e0 <USB_ActivateEndpoint+0x654>
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ba:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	441a      	add	r2, r3
 800a4c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a4cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a4f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01d      	beq.n	800a538 <USB_ActivateEndpoint+0x6ac>
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a50e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a512:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	441a      	add	r2, r3
 800a520:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a52c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a530:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a534:	b29b      	uxth	r3, r3
 800a536:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d024      	beq.n	800a58a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a556:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a55a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a55e:	f083 0320 	eor.w	r3, r3, #32
 800a562:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a57c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a584:	b29b      	uxth	r3, r3
 800a586:	8013      	strh	r3, [r2, #0]
 800a588:	e01d      	b.n	800a5c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a59c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	441a      	add	r2, r3
 800a5ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a5b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5dc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	441a      	add	r2, r3
 800a5ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a5ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a602:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a606:	4618      	mov	r0, r3
 800a608:	3774      	adds	r7, #116	@ 0x74
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a614:	b480      	push	{r7}
 800a616:	b08d      	sub	sp, #52	@ 0x34
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	7b1b      	ldrb	r3, [r3, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f040 808e 	bne.w	800a744 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d044      	beq.n	800a6ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	81bb      	strh	r3, [r7, #12]
 800a63e:	89bb      	ldrh	r3, [r7, #12]
 800a640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01b      	beq.n	800a680 <USB_DeactivateEndpoint+0x6c>
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	b29b      	uxth	r3, r3
 800a656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a65e:	817b      	strh	r3, [r7, #10]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	441a      	add	r2, r3
 800a66a:	897b      	ldrh	r3, [r7, #10]
 800a66c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a678:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a696:	813b      	strh	r3, [r7, #8]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	441a      	add	r2, r3
 800a6a2:	893b      	ldrh	r3, [r7, #8]
 800a6a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	8013      	strh	r3, [r2, #0]
 800a6b8:	e192      	b.n	800a9e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	827b      	strh	r3, [r7, #18]
 800a6c8:	8a7b      	ldrh	r3, [r7, #18]
 800a6ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d01b      	beq.n	800a70a <USB_DeactivateEndpoint+0xf6>
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e8:	823b      	strh	r3, [r7, #16]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	441a      	add	r2, r3
 800a6f4:	8a3b      	ldrh	r3, [r7, #16]
 800a6f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a706:	b29b      	uxth	r3, r3
 800a708:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	b29b      	uxth	r3, r3
 800a718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a71c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a720:	81fb      	strh	r3, [r7, #14]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	441a      	add	r2, r3
 800a72c:	89fb      	ldrh	r3, [r7, #14]
 800a72e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a73e:	b29b      	uxth	r3, r3
 800a740:	8013      	strh	r3, [r2, #0]
 800a742:	e14d      	b.n	800a9e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 80a5 	bne.w	800a898 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	843b      	strh	r3, [r7, #32]
 800a75c:	8c3b      	ldrh	r3, [r7, #32]
 800a75e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01b      	beq.n	800a79e <USB_DeactivateEndpoint+0x18a>
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77c:	83fb      	strh	r3, [r7, #30]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	441a      	add	r2, r3
 800a788:	8bfb      	ldrh	r3, [r7, #30]
 800a78a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a78e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	83bb      	strh	r3, [r7, #28]
 800a7ac:	8bbb      	ldrh	r3, [r7, #28]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01b      	beq.n	800a7ee <USB_DeactivateEndpoint+0x1da>
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7cc:	837b      	strh	r3, [r7, #26]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	441a      	add	r2, r3
 800a7d8:	8b7b      	ldrh	r3, [r7, #26]
 800a7da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a804:	833b      	strh	r3, [r7, #24]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	441a      	add	r2, r3
 800a810:	8b3b      	ldrh	r3, [r7, #24]
 800a812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a81a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a81e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a822:	b29b      	uxth	r3, r3
 800a824:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29b      	uxth	r3, r3
 800a834:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a83c:	82fb      	strh	r3, [r7, #22]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	441a      	add	r2, r3
 800a848:	8afb      	ldrh	r3, [r7, #22]
 800a84a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a84e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a874:	82bb      	strh	r3, [r7, #20]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	441a      	add	r2, r3
 800a880:	8abb      	ldrh	r3, [r7, #20]
 800a882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a88a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a892:	b29b      	uxth	r3, r3
 800a894:	8013      	strh	r3, [r2, #0]
 800a896:	e0a3      	b.n	800a9e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a8a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a8a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01b      	beq.n	800a8e8 <USB_DeactivateEndpoint+0x2d4>
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	441a      	add	r2, r3
 800a8d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a8f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01b      	beq.n	800a938 <USB_DeactivateEndpoint+0x324>
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a916:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	441a      	add	r2, r3
 800a922:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a92c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a930:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a934:	b29b      	uxth	r3, r3
 800a936:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a94a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a94e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	441a      	add	r2, r3
 800a95a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a95c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a986:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	441a      	add	r2, r3
 800a992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a99c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9be:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	441a      	add	r2, r3
 800a9ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3734      	adds	r7, #52	@ 0x34
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b0c2      	sub	sp, #264	@ 0x108
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9fc:	6018      	str	r0, [r3, #0]
 800a9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa06:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	f040 86b7 	bne.w	800b788 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800aa1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d908      	bls.n	800aa48 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800aa36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aa46:	e007      	b.n	800aa58 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800aa58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	7b1b      	ldrb	r3, [r3, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d13a      	bne.n	800aade <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6959      	ldr	r1, [r3, #20]
 800aa74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	88da      	ldrh	r2, [r3, #6]
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa8e:	6800      	ldr	r0, [r0, #0]
 800aa90:	f001 fc98 	bl	800c3c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	461a      	mov	r2, r3
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	4413      	add	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aabc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	00da      	lsls	r2, r3, #3
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	4413      	add	r3, r2
 800aaca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	801a      	strh	r2, [r3, #0]
 800aada:	f000 be1f 	b.w	800b71c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	78db      	ldrb	r3, [r3, #3]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	f040 8462 	bne.w	800b3b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800aaf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6a1a      	ldr	r2, [r3, #32]
 800aafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	f240 83df 	bls.w	800b2cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ab0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab34:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ab38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	441a      	add	r2, r3
 800ab52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ab62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ab6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6a1a      	ldr	r2, [r3, #32]
 800ab76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 81c7 	beq.w	800af3e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	633b      	str	r3, [r7, #48]	@ 0x30
 800abbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	785b      	ldrb	r3, [r3, #1]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d177      	bne.n	800acbc <USB_EPStartXfer+0x2ce>
 800abcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abec:	4413      	add	r3, r2
 800abee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	00da      	lsls	r2, r3, #3
 800abfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac00:	4413      	add	r3, r2
 800ac02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac1e:	d921      	bls.n	800ac64 <USB_EPStartXfer+0x276>
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac24:	095b      	lsrs	r3, r3, #5
 800ac26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2e:	f003 031f 	and.w	r3, r3, #31
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d104      	bne.n	800ac40 <USB_EPStartXfer+0x252>
 800ac36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	029b      	lsls	r3, r3, #10
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	4313      	orrs	r3, r2
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e050      	b.n	800ad06 <USB_EPStartXfer+0x318>
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <USB_EPStartXfer+0x294>
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7e:	801a      	strh	r2, [r3, #0]
 800ac80:	e041      	b.n	800ad06 <USB_EPStartXfer+0x318>
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac86:	085b      	lsrs	r3, r3, #1
 800ac88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ac8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <USB_EPStartXfer+0x2b4>
 800ac98:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800acac:	b29b      	uxth	r3, r3
 800acae:	029b      	lsls	r3, r3, #10
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	e024      	b.n	800ad06 <USB_EPStartXfer+0x318>
 800acbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	785b      	ldrb	r3, [r3, #1]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d11c      	bne.n	800ad06 <USB_EPStartXfer+0x318>
 800accc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace0:	4413      	add	r3, r2
 800ace2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	00da      	lsls	r2, r3, #3
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	4413      	add	r3, r2
 800acf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ad06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	895b      	ldrh	r3, [r3, #10]
 800ad12:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6959      	ldr	r1, [r3, #20]
 800ad22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ad2c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ad30:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ad34:	6800      	ldr	r0, [r0, #0]
 800ad36:	f001 fb45 	bl	800c3c4 <USB_WritePMA>
            ep->xfer_buff += len;
 800ad3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	695a      	ldr	r2, [r3, #20]
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4a:	441a      	add	r2, r3
 800ad4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ad58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6a1a      	ldr	r2, [r3, #32]
 800ad64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d90f      	bls.n	800ad94 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ad74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6a1a      	ldr	r2, [r3, #32]
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	621a      	str	r2, [r3, #32]
 800ad92:	e00e      	b.n	800adb2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ada4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ada8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800adb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	785b      	ldrb	r3, [r3, #1]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d177      	bne.n	800aeb2 <USB_EPStartXfer+0x4c4>
 800adc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800add2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800addc:	b29b      	uxth	r3, r3
 800adde:	461a      	mov	r2, r3
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	4413      	add	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	00da      	lsls	r2, r3, #3
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	4413      	add	r3, r2
 800adf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae12:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae14:	d921      	bls.n	800ae5a <USB_EPStartXfer+0x46c>
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1a:	095b      	lsrs	r3, r3, #5
 800ae1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae24:	f003 031f 	and.w	r3, r3, #31
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d104      	bne.n	800ae36 <USB_EPStartXfer+0x448>
 800ae2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae30:	3b01      	subs	r3, #1
 800ae32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	029b      	lsls	r3, r3, #10
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	4313      	orrs	r3, r2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	e056      	b.n	800af08 <USB_EPStartXfer+0x51a>
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <USB_EPStartXfer+0x48a>
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	e047      	b.n	800af08 <USB_EPStartXfer+0x51a>
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7c:	085b      	lsrs	r3, r3, #1
 800ae7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <USB_EPStartXfer+0x4aa>
 800ae8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae92:	3301      	adds	r3, #1
 800ae94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	029b      	lsls	r3, r3, #10
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	801a      	strh	r2, [r3, #0]
 800aeb0:	e02a      	b.n	800af08 <USB_EPStartXfer+0x51a>
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d122      	bne.n	800af08 <USB_EPStartXfer+0x51a>
 800aec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	623b      	str	r3, [r7, #32]
 800aece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aedc:	b29b      	uxth	r3, r3
 800aede:	461a      	mov	r2, r3
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	4413      	add	r3, r2
 800aee4:	623b      	str	r3, [r7, #32]
 800aee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	00da      	lsls	r2, r3, #3
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	4413      	add	r3, r2
 800aef8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aefc:	61fb      	str	r3, [r7, #28]
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af02:	b29a      	uxth	r2, r3
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800af08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	891b      	ldrh	r3, [r3, #8]
 800af14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6959      	ldr	r1, [r3, #20]
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af28:	b29b      	uxth	r3, r3
 800af2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	f001 fa44 	bl	800c3c4 <USB_WritePMA>
 800af3c:	e3ee      	b.n	800b71c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d177      	bne.n	800b03e <USB_EPStartXfer+0x650>
 800af4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af68:	b29b      	uxth	r3, r3
 800af6a:	461a      	mov	r2, r3
 800af6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af6e:	4413      	add	r3, r2
 800af70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	00da      	lsls	r2, r3, #3
 800af80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af82:	4413      	add	r3, r2
 800af84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af88:	647b      	str	r3, [r7, #68]	@ 0x44
 800af8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af94:	b29a      	uxth	r2, r3
 800af96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af98:	801a      	strh	r2, [r3, #0]
 800af9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800afa0:	d921      	bls.n	800afe6 <USB_EPStartXfer+0x5f8>
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa6:	095b      	lsrs	r3, r3, #5
 800afa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	f003 031f 	and.w	r3, r3, #31
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d104      	bne.n	800afc2 <USB_EPStartXfer+0x5d4>
 800afb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afbc:	3b01      	subs	r3, #1
 800afbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afcc:	b29b      	uxth	r3, r3
 800afce:	029b      	lsls	r3, r3, #10
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afde:	b29a      	uxth	r2, r3
 800afe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	e056      	b.n	800b094 <USB_EPStartXfer+0x6a6>
 800afe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <USB_EPStartXfer+0x616>
 800afee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800affc:	b29a      	uxth	r2, r3
 800affe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b000:	801a      	strh	r2, [r3, #0]
 800b002:	e047      	b.n	800b094 <USB_EPStartXfer+0x6a6>
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d004      	beq.n	800b024 <USB_EPStartXfer+0x636>
 800b01a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b01e:	3301      	adds	r3, #1
 800b020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b02e:	b29b      	uxth	r3, r3
 800b030:	029b      	lsls	r3, r3, #10
 800b032:	b29b      	uxth	r3, r3
 800b034:	4313      	orrs	r3, r2
 800b036:	b29a      	uxth	r2, r3
 800b038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b03a:	801a      	strh	r2, [r3, #0]
 800b03c:	e02a      	b.n	800b094 <USB_EPStartXfer+0x6a6>
 800b03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	785b      	ldrb	r3, [r3, #1]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d122      	bne.n	800b094 <USB_EPStartXfer+0x6a6>
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	653b      	str	r3, [r7, #80]	@ 0x50
 800b05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b05e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b068:	b29b      	uxth	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b06e:	4413      	add	r3, r2
 800b070:	653b      	str	r3, [r7, #80]	@ 0x50
 800b072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	00da      	lsls	r2, r3, #3
 800b080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b082:	4413      	add	r3, r2
 800b084:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b08e:	b29a      	uxth	r2, r3
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	891b      	ldrh	r3, [r3, #8]
 800b0a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6959      	ldr	r1, [r3, #20]
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b0ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b0be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b0c2:	6800      	ldr	r0, [r0, #0]
 800b0c4:	f001 f97e 	bl	800c3c4 <USB_WritePMA>
            ep->xfer_buff += len;
 800b0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d8:	441a      	add	r2, r3
 800b0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6a1a      	ldr	r2, [r3, #32]
 800b0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d90f      	bls.n	800b122 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6a1a      	ldr	r2, [r3, #32]
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b112:	1ad2      	subs	r2, r2, r3
 800b114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	621a      	str	r2, [r3, #32]
 800b120:	e00e      	b.n	800b140 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2200      	movs	r2, #0
 800b13e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	785b      	ldrb	r3, [r3, #1]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d177      	bne.n	800b24c <USB_EPStartXfer+0x85e>
 800b15c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b16c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b176:	b29b      	uxth	r3, r3
 800b178:	461a      	mov	r2, r3
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	4413      	add	r3, r2
 800b17e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	00da      	lsls	r2, r3, #3
 800b18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b190:	4413      	add	r3, r2
 800b192:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b196:	637b      	str	r3, [r7, #52]	@ 0x34
 800b198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	801a      	strh	r2, [r3, #0]
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1ae:	d921      	bls.n	800b1f4 <USB_EPStartXfer+0x806>
 800b1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b4:	095b      	lsrs	r3, r3, #5
 800b1b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1be:	f003 031f 	and.w	r3, r3, #31
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <USB_EPStartXfer+0x7e2>
 800b1c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	029b      	lsls	r3, r3, #10
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	e050      	b.n	800b296 <USB_EPStartXfer+0x8a8>
 800b1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <USB_EPStartXfer+0x824>
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20e:	801a      	strh	r2, [r3, #0]
 800b210:	e041      	b.n	800b296 <USB_EPStartXfer+0x8a8>
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b216:	085b      	lsrs	r3, r3, #1
 800b218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <USB_EPStartXfer+0x844>
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b22c:	3301      	adds	r3, #1
 800b22e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	b29a      	uxth	r2, r3
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	029b      	lsls	r3, r3, #10
 800b240:	b29b      	uxth	r3, r3
 800b242:	4313      	orrs	r3, r2
 800b244:	b29a      	uxth	r2, r3
 800b246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b248:	801a      	strh	r2, [r3, #0]
 800b24a:	e024      	b.n	800b296 <USB_EPStartXfer+0x8a8>
 800b24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d11c      	bne.n	800b296 <USB_EPStartXfer+0x8a8>
 800b25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b270:	4413      	add	r3, r2
 800b272:	643b      	str	r3, [r7, #64]	@ 0x40
 800b274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	00da      	lsls	r2, r3, #3
 800b282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b284:	4413      	add	r3, r2
 800b286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b290:	b29a      	uxth	r2, r3
 800b292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b294:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	895b      	ldrh	r3, [r3, #10]
 800b2a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6959      	ldr	r1, [r3, #20]
 800b2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b2bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b2c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b2c4:	6800      	ldr	r0, [r0, #0]
 800b2c6:	f001 f87d 	bl	800c3c4 <USB_WritePMA>
 800b2ca:	e227      	b.n	800b71c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b2fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b302:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b30a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	441a      	add	r2, r3
 800b320:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b334:	b29b      	uxth	r3, r3
 800b336:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b352:	b29b      	uxth	r3, r3
 800b354:	461a      	mov	r2, r3
 800b356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b358:	4413      	add	r3, r2
 800b35a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	00da      	lsls	r2, r3, #3
 800b36a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b36c:	4413      	add	r3, r2
 800b36e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b372:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b378:	b29a      	uxth	r2, r3
 800b37a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b37c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b37e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	891b      	ldrh	r3, [r3, #8]
 800b38a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6959      	ldr	r1, [r3, #20]
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b3a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b3a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b3ac:	6800      	ldr	r0, [r0, #0]
 800b3ae:	f001 f809 	bl	800c3c4 <USB_WritePMA>
 800b3b2:	e1b3      	b.n	800b71c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c4:	1ad2      	subs	r2, r2, r3
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 80c6 	beq.w	800b586 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	673b      	str	r3, [r7, #112]	@ 0x70
 800b406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	785b      	ldrb	r3, [r3, #1]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d177      	bne.n	800b506 <USB_EPStartXfer+0xb18>
 800b416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b41a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b430:	b29b      	uxth	r3, r3
 800b432:	461a      	mov	r2, r3
 800b434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b436:	4413      	add	r3, r2
 800b438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	00da      	lsls	r2, r3, #3
 800b448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b44a:	4413      	add	r3, r2
 800b44c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b450:	667b      	str	r3, [r7, #100]	@ 0x64
 800b452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	b29b      	uxth	r3, r3
 800b458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b460:	801a      	strh	r2, [r3, #0]
 800b462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b466:	2b3e      	cmp	r3, #62	@ 0x3e
 800b468:	d921      	bls.n	800b4ae <USB_EPStartXfer+0xac0>
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b46e:	095b      	lsrs	r3, r3, #5
 800b470:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b478:	f003 031f 	and.w	r3, r3, #31
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d104      	bne.n	800b48a <USB_EPStartXfer+0xa9c>
 800b480:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b484:	3b01      	subs	r3, #1
 800b486:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b48a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b494:	b29b      	uxth	r3, r3
 800b496:	029b      	lsls	r3, r3, #10
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4313      	orrs	r3, r2
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4aa:	801a      	strh	r2, [r3, #0]
 800b4ac:	e050      	b.n	800b550 <USB_EPStartXfer+0xb62>
 800b4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10a      	bne.n	800b4cc <USB_EPStartXfer+0xade>
 800b4b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4c8:	801a      	strh	r2, [r3, #0]
 800b4ca:	e041      	b.n	800b550 <USB_EPStartXfer+0xb62>
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d0:	085b      	lsrs	r3, r3, #1
 800b4d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <USB_EPStartXfer+0xafe>
 800b4e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b4ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	029b      	lsls	r3, r3, #10
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	e024      	b.n	800b550 <USB_EPStartXfer+0xb62>
 800b506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	785b      	ldrb	r3, [r3, #1]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d11c      	bne.n	800b550 <USB_EPStartXfer+0xb62>
 800b516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b51a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b524:	b29b      	uxth	r3, r3
 800b526:	461a      	mov	r2, r3
 800b528:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b52a:	4413      	add	r3, r2
 800b52c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	00da      	lsls	r2, r3, #3
 800b53c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b53e:	4413      	add	r3, r2
 800b540:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b544:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b54e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	895b      	ldrh	r3, [r3, #10]
 800b55c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6959      	ldr	r1, [r3, #20]
 800b56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b570:	b29b      	uxth	r3, r3
 800b572:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b576:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b57a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b57e:	6800      	ldr	r0, [r0, #0]
 800b580:	f000 ff20 	bl	800c3c4 <USB_WritePMA>
 800b584:	e0ca      	b.n	800b71c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d177      	bne.n	800b686 <USB_EPStartXfer+0xc98>
 800b596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5b6:	4413      	add	r3, r2
 800b5b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	00da      	lsls	r2, r3, #3
 800b5c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5e0:	801a      	strh	r2, [r3, #0]
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5e8:	d921      	bls.n	800b62e <USB_EPStartXfer+0xc40>
 800b5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ee:	095b      	lsrs	r3, r3, #5
 800b5f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d104      	bne.n	800b60a <USB_EPStartXfer+0xc1c>
 800b600:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b604:	3b01      	subs	r3, #1
 800b606:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b60a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29a      	uxth	r2, r3
 800b610:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b614:	b29b      	uxth	r3, r3
 800b616:	029b      	lsls	r3, r3, #10
 800b618:	b29b      	uxth	r3, r3
 800b61a:	4313      	orrs	r3, r2
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b626:	b29a      	uxth	r2, r3
 800b628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	e05c      	b.n	800b6e8 <USB_EPStartXfer+0xcfa>
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <USB_EPStartXfer+0xc5e>
 800b636:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b644:	b29a      	uxth	r2, r3
 800b646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b648:	801a      	strh	r2, [r3, #0]
 800b64a:	e04d      	b.n	800b6e8 <USB_EPStartXfer+0xcfa>
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b650:	085b      	lsrs	r3, r3, #1
 800b652:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <USB_EPStartXfer+0xc7e>
 800b662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b666:	3301      	adds	r3, #1
 800b668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b66c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29a      	uxth	r2, r3
 800b672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b676:	b29b      	uxth	r3, r3
 800b678:	029b      	lsls	r3, r3, #10
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	4313      	orrs	r3, r2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b682:	801a      	strh	r2, [r3, #0]
 800b684:	e030      	b.n	800b6e8 <USB_EPStartXfer+0xcfa>
 800b686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d128      	bne.n	800b6e8 <USB_EPStartXfer+0xcfa>
 800b696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	00da      	lsls	r2, r3, #3
 800b6ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	891b      	ldrh	r3, [r3, #8]
 800b6f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6959      	ldr	r1, [r3, #20]
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b708:	b29b      	uxth	r3, r3
 800b70a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b70e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b712:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b716:	6800      	ldr	r0, [r0, #0]
 800b718:	f000 fe54 	bl	800c3c4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b71c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	881b      	ldrh	r3, [r3, #0]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b73e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b742:	817b      	strh	r3, [r7, #10]
 800b744:	897b      	ldrh	r3, [r7, #10]
 800b746:	f083 0310 	eor.w	r3, r3, #16
 800b74a:	817b      	strh	r3, [r7, #10]
 800b74c:	897b      	ldrh	r3, [r7, #10]
 800b74e:	f083 0320 	eor.w	r3, r3, #32
 800b752:	817b      	strh	r3, [r7, #10]
 800b754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	441a      	add	r2, r3
 800b76e:	897b      	ldrh	r3, [r7, #10]
 800b770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b780:	b29b      	uxth	r3, r3
 800b782:	8013      	strh	r3, [r2, #0]
 800b784:	f000 bcde 	b.w	800c144 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	7b1b      	ldrb	r3, [r3, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 80bb 	bne.w	800b910 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699a      	ldr	r2, [r3, #24]
 800b7a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d917      	bls.n	800b7e6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	699a      	ldr	r2, [r3, #24]
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d6:	1ad2      	subs	r2, r2, r3
 800b7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	619a      	str	r2, [r3, #24]
 800b7e4:	e00e      	b.n	800b804 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2200      	movs	r2, #0
 800b802:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b820:	b29b      	uxth	r3, r3
 800b822:	461a      	mov	r2, r3
 800b824:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b828:	4413      	add	r3, r2
 800b82a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	00da      	lsls	r2, r3, #3
 800b83c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b840:	4413      	add	r3, r2
 800b842:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b84a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	b29b      	uxth	r3, r3
 800b852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b856:	b29a      	uxth	r2, r3
 800b858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b85c:	801a      	strh	r2, [r3, #0]
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b862:	2b3e      	cmp	r3, #62	@ 0x3e
 800b864:	d924      	bls.n	800b8b0 <USB_EPStartXfer+0xec2>
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b86a:	095b      	lsrs	r3, r3, #5
 800b86c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b874:	f003 031f 	and.w	r3, r3, #31
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d104      	bne.n	800b886 <USB_EPStartXfer+0xe98>
 800b87c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b880:	3b01      	subs	r3, #1
 800b882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b892:	b29b      	uxth	r3, r3
 800b894:	029b      	lsls	r3, r3, #10
 800b896:	b29b      	uxth	r3, r3
 800b898:	4313      	orrs	r3, r2
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8aa:	801a      	strh	r2, [r3, #0]
 800b8ac:	f000 bc10 	b.w	800c0d0 <USB_EPStartXfer+0x16e2>
 800b8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10c      	bne.n	800b8d2 <USB_EPStartXfer+0xee4>
 800b8b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8ce:	801a      	strh	r2, [r3, #0]
 800b8d0:	e3fe      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d6:	085b      	lsrs	r3, r3, #1
 800b8d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <USB_EPStartXfer+0xf04>
 800b8e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	029b      	lsls	r3, r3, #10
 800b902:	b29b      	uxth	r3, r3
 800b904:	4313      	orrs	r3, r2
 800b906:	b29a      	uxth	r2, r3
 800b908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b90c:	801a      	strh	r2, [r3, #0]
 800b90e:	e3df      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	78db      	ldrb	r3, [r3, #3]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	f040 8218 	bne.w	800bd52 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f040 809d 	bne.w	800ba6e <USB_EPStartXfer+0x1080>
 800b934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b950:	b29b      	uxth	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b958:	4413      	add	r3, r2
 800b95a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	00da      	lsls	r2, r3, #3
 800b96c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b970:	4413      	add	r3, r2
 800b972:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b97a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b986:	b29a      	uxth	r2, r3
 800b988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b98c:	801a      	strh	r2, [r3, #0]
 800b98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b99c:	d92b      	bls.n	800b9f6 <USB_EPStartXfer+0x1008>
 800b99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	095b      	lsrs	r3, r3, #5
 800b9ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	f003 031f 	and.w	r3, r3, #31
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <USB_EPStartXfer+0xfe0>
 800b9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	029b      	lsls	r3, r3, #10
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	e070      	b.n	800bad8 <USB_EPStartXfer+0x10ea>
 800b9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <USB_EPStartXfer+0x1032>
 800ba06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba1c:	801a      	strh	r2, [r3, #0]
 800ba1e:	e05b      	b.n	800bad8 <USB_EPStartXfer+0x10ea>
 800ba20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <USB_EPStartXfer+0x1062>
 800ba46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	029b      	lsls	r3, r3, #10
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	4313      	orrs	r3, r2
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba6a:	801a      	strh	r2, [r3, #0]
 800ba6c:	e034      	b.n	800bad8 <USB_EPStartXfer+0x10ea>
 800ba6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d12c      	bne.n	800bad8 <USB_EPStartXfer+0x10ea>
 800ba7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800baa2:	4413      	add	r3, r2
 800baa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800baa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	00da      	lsls	r2, r3, #3
 800bab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800baba:	4413      	add	r3, r2
 800babc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bad6:	801a      	strh	r2, [r3, #0]
 800bad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800badc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f040 809d 	bne.w	800bc32 <USB_EPStartXfer+0x1244>
 800baf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	461a      	mov	r2, r3
 800bb18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	00da      	lsls	r2, r3, #3
 800bb30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bb34:	4413      	add	r3, r2
 800bb36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb50:	801a      	strh	r2, [r3, #0]
 800bb52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb60:	d92b      	bls.n	800bbba <USB_EPStartXfer+0x11cc>
 800bb62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	095b      	lsrs	r3, r3, #5
 800bb70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	f003 031f 	and.w	r3, r3, #31
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d104      	bne.n	800bb92 <USB_EPStartXfer+0x11a4>
 800bb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	029b      	lsls	r3, r3, #10
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	e069      	b.n	800bc8e <USB_EPStartXfer+0x12a0>
 800bbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10c      	bne.n	800bbe4 <USB_EPStartXfer+0x11f6>
 800bbca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbe0:	801a      	strh	r2, [r3, #0]
 800bbe2:	e054      	b.n	800bc8e <USB_EPStartXfer+0x12a0>
 800bbe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	085b      	lsrs	r3, r3, #1
 800bbf2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d004      	beq.n	800bc14 <USB_EPStartXfer+0x1226>
 800bc0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc0e:	3301      	adds	r3, #1
 800bc10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	029b      	lsls	r3, r3, #10
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc2e:	801a      	strh	r2, [r3, #0]
 800bc30:	e02d      	b.n	800bc8e <USB_EPStartXfer+0x12a0>
 800bc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d125      	bne.n	800bc8e <USB_EPStartXfer+0x12a0>
 800bc42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc58:	4413      	add	r3, r2
 800bc5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bc5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	00da      	lsls	r2, r3, #3
 800bc6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc70:	4413      	add	r3, r2
 800bc72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 8218 	beq.w	800c0d0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bcc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <USB_EPStartXfer+0x12ea>
 800bccc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10d      	bne.n	800bcf4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bcd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f040 81f5 	bne.w	800c0d0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bce6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bcea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f040 81ee 	bne.w	800c0d0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bcf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd1a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	441a      	add	r2, r3
 800bd38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	8013      	strh	r3, [r2, #0]
 800bd50:	e1be      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bd52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	78db      	ldrb	r3, [r3, #3]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	f040 81b4 	bne.w	800c0cc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bd64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	699a      	ldr	r2, [r3, #24]
 800bd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d917      	bls.n	800bdb0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bd80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda0:	1ad2      	subs	r2, r2, r3
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	619a      	str	r2, [r3, #24]
 800bdae:	e00e      	b.n	800bdce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800bdb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800bdc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bdce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8085 	bne.w	800beea <USB_EPStartXfer+0x14fc>
 800bde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bdee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800be04:	4413      	add	r3, r2
 800be06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	00da      	lsls	r2, r3, #3
 800be18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800be1c:	4413      	add	r3, r2
 800be1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be32:	b29a      	uxth	r2, r3
 800be34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be38:	801a      	strh	r2, [r3, #0]
 800be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800be40:	d923      	bls.n	800be8a <USB_EPStartXfer+0x149c>
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be46:	095b      	lsrs	r3, r3, #5
 800be48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be50:	f003 031f 	and.w	r3, r3, #31
 800be54:	2b00      	cmp	r3, #0
 800be56:	d104      	bne.n	800be62 <USB_EPStartXfer+0x1474>
 800be58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be5c:	3b01      	subs	r3, #1
 800be5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be6e:	b29b      	uxth	r3, r3
 800be70:	029b      	lsls	r3, r3, #10
 800be72:	b29b      	uxth	r3, r3
 800be74:	4313      	orrs	r3, r2
 800be76:	b29b      	uxth	r3, r3
 800be78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be80:	b29a      	uxth	r2, r3
 800be82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be86:	801a      	strh	r2, [r3, #0]
 800be88:	e060      	b.n	800bf4c <USB_EPStartXfer+0x155e>
 800be8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10c      	bne.n	800beac <USB_EPStartXfer+0x14be>
 800be92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bea8:	801a      	strh	r2, [r3, #0]
 800beaa:	e04f      	b.n	800bf4c <USB_EPStartXfer+0x155e>
 800beac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beb0:	085b      	lsrs	r3, r3, #1
 800beb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d004      	beq.n	800becc <USB_EPStartXfer+0x14de>
 800bec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bec6:	3301      	adds	r3, #1
 800bec8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800becc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bed8:	b29b      	uxth	r3, r3
 800beda:	029b      	lsls	r3, r3, #10
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4313      	orrs	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e030      	b.n	800bf4c <USB_EPStartXfer+0x155e>
 800beea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d128      	bne.n	800bf4c <USB_EPStartXfer+0x155e>
 800befa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800befe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf1e:	4413      	add	r3, r2
 800bf20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00da      	lsls	r2, r3, #3
 800bf32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf36:	4413      	add	r3, r2
 800bf38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	785b      	ldrb	r3, [r3, #1]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 8085 	bne.w	800c076 <USB_EPStartXfer+0x1688>
 800bf6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf90:	4413      	add	r3, r2
 800bf92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bf96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	00da      	lsls	r2, r3, #3
 800bfa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bfb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bfc4:	801a      	strh	r2, [r3, #0]
 800bfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfca:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfcc:	d923      	bls.n	800c016 <USB_EPStartXfer+0x1628>
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd2:	095b      	lsrs	r3, r3, #5
 800bfd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfdc:	f003 031f 	and.w	r3, r3, #31
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <USB_EPStartXfer+0x1600>
 800bfe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bfee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	029b      	lsls	r3, r3, #10
 800bffe:	b29b      	uxth	r3, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	b29b      	uxth	r3, r3
 800c004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c012:	801a      	strh	r2, [r3, #0]
 800c014:	e05c      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
 800c016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <USB_EPStartXfer+0x164a>
 800c01e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	b29b      	uxth	r3, r3
 800c026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c02a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c02e:	b29a      	uxth	r2, r3
 800c030:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c034:	801a      	strh	r2, [r3, #0]
 800c036:	e04b      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
 800c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <USB_EPStartXfer+0x166a>
 800c04e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c052:	3301      	adds	r3, #1
 800c054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	b29a      	uxth	r2, r3
 800c060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c064:	b29b      	uxth	r3, r3
 800c066:	029b      	lsls	r3, r3, #10
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4313      	orrs	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c072:	801a      	strh	r2, [r3, #0]
 800c074:	e02c      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
 800c076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d124      	bne.n	800c0d0 <USB_EPStartXfer+0x16e2>
 800c086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c08a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c094:	b29b      	uxth	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c09c:	4413      	add	r3, r2
 800c09e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	00da      	lsls	r2, r3, #3
 800c0b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c0ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0c8:	801a      	strh	r2, [r3, #0]
 800c0ca:	e001      	b.n	800c0d0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e03a      	b.n	800c146 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0f6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c0fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c102:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c106:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c10a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c10e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	441a      	add	r2, r3
 800c12c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c140:	b29b      	uxth	r3, r3
 800c142:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	785b      	ldrb	r3, [r3, #1]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d020      	beq.n	800c1a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c178:	81bb      	strh	r3, [r7, #12]
 800c17a:	89bb      	ldrh	r3, [r7, #12]
 800c17c:	f083 0310 	eor.w	r3, r3, #16
 800c180:	81bb      	strh	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	441a      	add	r2, r3
 800c18c:	89bb      	ldrh	r3, [r7, #12]
 800c18e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	8013      	strh	r3, [r2, #0]
 800c1a2:	e01f      	b.n	800c1e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ba:	81fb      	strh	r3, [r7, #14]
 800c1bc:	89fb      	ldrh	r3, [r7, #14]
 800c1be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c1c2:	81fb      	strh	r3, [r7, #14]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	441a      	add	r2, r3
 800c1ce:	89fb      	ldrh	r3, [r7, #14]
 800c1d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3714      	adds	r7, #20
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b087      	sub	sp, #28
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	7b1b      	ldrb	r3, [r3, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f040 809d 	bne.w	800c340 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d04c      	beq.n	800c2a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	823b      	strh	r3, [r7, #16]
 800c21c:	8a3b      	ldrh	r3, [r7, #16]
 800c21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01b      	beq.n	800c25e <USB_EPClearStall+0x6c>
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	b29b      	uxth	r3, r3
 800c234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23c:	81fb      	strh	r3, [r7, #14]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	441a      	add	r2, r3
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c256:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	78db      	ldrb	r3, [r3, #3]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d06c      	beq.n	800c340 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	b29b      	uxth	r3, r3
 800c274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c27c:	81bb      	strh	r3, [r7, #12]
 800c27e:	89bb      	ldrh	r3, [r7, #12]
 800c280:	f083 0320 	eor.w	r3, r3, #32
 800c284:	81bb      	strh	r3, [r7, #12]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	441a      	add	r2, r3
 800c290:	89bb      	ldrh	r3, [r7, #12]
 800c292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c29a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	8013      	strh	r3, [r2, #0]
 800c2a6:	e04b      	b.n	800c340 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	82fb      	strh	r3, [r7, #22]
 800c2b6:	8afb      	ldrh	r3, [r7, #22]
 800c2b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d01b      	beq.n	800c2f8 <USB_EPClearStall+0x106>
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2d6:	82bb      	strh	r3, [r7, #20]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	441a      	add	r2, r3
 800c2e2:	8abb      	ldrh	r3, [r7, #20]
 800c2e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	b29b      	uxth	r3, r3
 800c306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c30a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c30e:	827b      	strh	r3, [r7, #18]
 800c310:	8a7b      	ldrh	r3, [r7, #18]
 800c312:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c316:	827b      	strh	r3, [r7, #18]
 800c318:	8a7b      	ldrh	r3, [r7, #18]
 800c31a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c31e:	827b      	strh	r3, [r7, #18]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	441a      	add	r2, r3
 800c32a:	8a7b      	ldrh	r3, [r7, #18]
 800c32c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	371c      	adds	r7, #28
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	460b      	mov	r3, r1
 800c358:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d103      	bne.n	800c368 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2280      	movs	r2, #128	@ 0x80
 800c364:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c384:	b29b      	uxth	r3, r3
 800c386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c38e:	b29a      	uxth	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b08b      	sub	sp, #44	@ 0x2c
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	80fb      	strh	r3, [r7, #6]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c3da:	88bb      	ldrh	r3, [r7, #4]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c3ea:	88fa      	ldrh	r2, [r7, #6]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3fa:	e01b      	b.n	800c434 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	3301      	adds	r3, #1
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	b21a      	sxth	r2, r3
 800c40c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c410:	4313      	orrs	r3, r2
 800c412:	b21b      	sxth	r3, r3
 800c414:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	8a7a      	ldrh	r2, [r7, #18]
 800c41a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	3302      	adds	r3, #2
 800c420:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	3301      	adds	r3, #1
 800c426:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	3301      	adds	r3, #1
 800c42c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	3b01      	subs	r3, #1
 800c432:	627b      	str	r3, [r7, #36]	@ 0x24
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e0      	bne.n	800c3fc <USB_WritePMA+0x38>
  }
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	372c      	adds	r7, #44	@ 0x2c
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c448:	b480      	push	{r7}
 800c44a:	b08b      	sub	sp, #44	@ 0x2c
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4611      	mov	r1, r2
 800c454:	461a      	mov	r2, r3
 800c456:	460b      	mov	r3, r1
 800c458:	80fb      	strh	r3, [r7, #6]
 800c45a:	4613      	mov	r3, r2
 800c45c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c45e:	88bb      	ldrh	r3, [r7, #4]
 800c460:	085b      	lsrs	r3, r3, #1
 800c462:	b29b      	uxth	r3, r3
 800c464:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c46e:	88fa      	ldrh	r2, [r7, #6]
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c478:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c47e:	e018      	b.n	800c4b2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	b29b      	uxth	r3, r3
 800c486:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	3302      	adds	r3, #2
 800c48c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	b2da      	uxtb	r2, r3
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	3301      	adds	r3, #1
 800c49a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	0a1b      	lsrs	r3, r3, #8
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e3      	bne.n	800c480 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c4b8:	88bb      	ldrh	r3, [r7, #4]
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d007      	beq.n	800c4d4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	701a      	strb	r2, [r3, #0]
  }
}
 800c4d4:	bf00      	nop
 800c4d6:	372c      	adds	r7, #44	@ 0x2c
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c4f0:	f002 f8fa 	bl	800e6e8 <USBD_static_malloc>
 800c4f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d105      	bne.n	800c508 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c504:	2302      	movs	r3, #2
 800c506:	e066      	b.n	800c5d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7c1b      	ldrb	r3, [r3, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d119      	bne.n	800c54c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c51c:	2202      	movs	r2, #2
 800c51e:	2181      	movs	r1, #129	@ 0x81
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 ff88 	bl	800e436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c52c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c530:	2202      	movs	r2, #2
 800c532:	2101      	movs	r1, #1
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f001 ff7e 	bl	800e436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2210      	movs	r2, #16
 800c546:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c54a:	e016      	b.n	800c57a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c54c:	2340      	movs	r3, #64	@ 0x40
 800c54e:	2202      	movs	r2, #2
 800c550:	2181      	movs	r1, #129	@ 0x81
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f001 ff6f 	bl	800e436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c55e:	2340      	movs	r3, #64	@ 0x40
 800c560:	2202      	movs	r2, #2
 800c562:	2101      	movs	r1, #1
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f001 ff66 	bl	800e436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2210      	movs	r2, #16
 800c576:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c57a:	2308      	movs	r3, #8
 800c57c:	2203      	movs	r2, #3
 800c57e:	2182      	movs	r1, #130	@ 0x82
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f001 ff58 	bl	800e436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	7c1b      	ldrb	r3, [r3, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f002 f829 	bl	800e614 <USBD_LL_PrepareReceive>
 800c5c2:	e007      	b.n	800c5d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5ca:	2340      	movs	r3, #64	@ 0x40
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f002 f820 	bl	800e614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5ea:	2181      	movs	r1, #129	@ 0x81
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f001 ff48 	bl	800e482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 ff41 	bl	800e482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c608:	2182      	movs	r1, #130	@ 0x82
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f001 ff39 	bl	800e482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c63a:	4618      	mov	r0, r3
 800c63c:	f002 f862 	bl	800e704 <USBD_static_free>
    pdev->pClassData = NULL;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c664:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c678:	2303      	movs	r3, #3
 800c67a:	e0af      	b.n	800c7dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c684:	2b00      	cmp	r3, #0
 800c686:	d03f      	beq.n	800c708 <USBD_CDC_Setup+0xb4>
 800c688:	2b20      	cmp	r3, #32
 800c68a:	f040 809f 	bne.w	800c7cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	88db      	ldrh	r3, [r3, #6]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d02e      	beq.n	800c6f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	b25b      	sxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da16      	bge.n	800c6ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c6ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	88d2      	ldrh	r2, [r2, #6]
 800c6b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	88db      	ldrh	r3, [r3, #6]
 800c6b8:	2b07      	cmp	r3, #7
 800c6ba:	bf28      	it	cs
 800c6bc:	2307      	movcs	r3, #7
 800c6be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	89fa      	ldrh	r2, [r7, #14]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f001 facd 	bl	800dc66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c6cc:	e085      	b.n	800c7da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	785a      	ldrb	r2, [r3, #1]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	88db      	ldrh	r3, [r3, #6]
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c6e4:	6939      	ldr	r1, [r7, #16]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	88db      	ldrh	r3, [r3, #6]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f001 fae6 	bl	800dcbe <USBD_CtlPrepareRx>
      break;
 800c6f2:	e072      	b.n	800c7da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	7850      	ldrb	r0, [r2, #1]
 800c700:	2200      	movs	r2, #0
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	4798      	blx	r3
      break;
 800c706:	e068      	b.n	800c7da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	785b      	ldrb	r3, [r3, #1]
 800c70c:	2b0b      	cmp	r3, #11
 800c70e:	d852      	bhi.n	800c7b6 <USBD_CDC_Setup+0x162>
 800c710:	a201      	add	r2, pc, #4	@ (adr r2, 800c718 <USBD_CDC_Setup+0xc4>)
 800c712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c716:	bf00      	nop
 800c718:	0800c749 	.word	0x0800c749
 800c71c:	0800c7c5 	.word	0x0800c7c5
 800c720:	0800c7b7 	.word	0x0800c7b7
 800c724:	0800c7b7 	.word	0x0800c7b7
 800c728:	0800c7b7 	.word	0x0800c7b7
 800c72c:	0800c7b7 	.word	0x0800c7b7
 800c730:	0800c7b7 	.word	0x0800c7b7
 800c734:	0800c7b7 	.word	0x0800c7b7
 800c738:	0800c7b7 	.word	0x0800c7b7
 800c73c:	0800c7b7 	.word	0x0800c7b7
 800c740:	0800c773 	.word	0x0800c773
 800c744:	0800c79d 	.word	0x0800c79d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b03      	cmp	r3, #3
 800c752:	d107      	bne.n	800c764 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c754:	f107 030a 	add.w	r3, r7, #10
 800c758:	2202      	movs	r2, #2
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 fa82 	bl	800dc66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c762:	e032      	b.n	800c7ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f001 fa0c 	bl	800db84 <USBD_CtlError>
            ret = USBD_FAIL;
 800c76c:	2303      	movs	r3, #3
 800c76e:	75fb      	strb	r3, [r7, #23]
          break;
 800c770:	e02b      	b.n	800c7ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d107      	bne.n	800c78e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c77e:	f107 030d 	add.w	r3, r7, #13
 800c782:	2201      	movs	r2, #1
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 fa6d 	bl	800dc66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c78c:	e01d      	b.n	800c7ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f001 f9f7 	bl	800db84 <USBD_CtlError>
            ret = USBD_FAIL;
 800c796:	2303      	movs	r3, #3
 800c798:	75fb      	strb	r3, [r7, #23]
          break;
 800c79a:	e016      	b.n	800c7ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d00f      	beq.n	800c7c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 f9ea 	bl	800db84 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7b4:	e008      	b.n	800c7c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f9e3 	bl	800db84 <USBD_CtlError>
          ret = USBD_FAIL;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c7c2:	e002      	b.n	800c7ca <USBD_CDC_Setup+0x176>
          break;
 800c7c4:	bf00      	nop
 800c7c6:	e008      	b.n	800c7da <USBD_CDC_Setup+0x186>
          break;
 800c7c8:	bf00      	nop
      }
      break;
 800c7ca:	e006      	b.n	800c7da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 f9d8 	bl	800db84 <USBD_CtlError>
      ret = USBD_FAIL;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c7f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c802:	2303      	movs	r3, #3
 800c804:	e04f      	b.n	800c8a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c80c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c80e:	78fa      	ldrb	r2, [r7, #3]
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	3318      	adds	r3, #24
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d029      	beq.n	800c878 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c824:	78fa      	ldrb	r2, [r7, #3]
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	4613      	mov	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	440b      	add	r3, r1
 800c832:	3318      	adds	r3, #24
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	78f9      	ldrb	r1, [r7, #3]
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	460b      	mov	r3, r1
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	440b      	add	r3, r1
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	4403      	add	r3, r0
 800c844:	3320      	adds	r3, #32
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	fbb2 f1f3 	udiv	r1, r2, r3
 800c84c:	fb01 f303 	mul.w	r3, r1, r3
 800c850:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c852:	2b00      	cmp	r3, #0
 800c854:	d110      	bne.n	800c878 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c856:	78fa      	ldrb	r2, [r7, #3]
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	3318      	adds	r3, #24
 800c866:	2200      	movs	r2, #0
 800c868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c86a:	78f9      	ldrb	r1, [r7, #3]
 800c86c:	2300      	movs	r3, #0
 800c86e:	2200      	movs	r2, #0
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f001 feae 	bl	800e5d2 <USBD_LL_Transmit>
 800c876:	e015      	b.n	800c8a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00b      	beq.n	800c8a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c8a0:	78fa      	ldrb	r2, [r7, #3]
 800c8a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e015      	b.n	800c8fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f001 febe 	bl	800e656 <USBD_LL_GetRxDataSize>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c912:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e01a      	b.n	800c954 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d014      	beq.n	800c952 <USBD_CDC_EP0_RxReady+0x4e>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c92e:	2bff      	cmp	r3, #255	@ 0xff
 800c930:	d00f      	beq.n	800c952 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800c940:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c948:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	22ff      	movs	r2, #255	@ 0xff
 800c94e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2243      	movs	r2, #67	@ 0x43
 800c968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c96a:	4b03      	ldr	r3, [pc, #12]	@ (800c978 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	20000094 	.word	0x20000094

0800c97c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2243      	movs	r2, #67	@ 0x43
 800c988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c98a:	4b03      	ldr	r3, [pc, #12]	@ (800c998 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	20000050 	.word	0x20000050

0800c99c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2243      	movs	r2, #67	@ 0x43
 800c9a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c9aa:	4b03      	ldr	r3, [pc, #12]	@ (800c9b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	200000d8 	.word	0x200000d8

0800c9bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	220a      	movs	r2, #10
 800c9c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c9ca:	4b03      	ldr	r3, [pc, #12]	@ (800c9d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	2000000c 	.word	0x2000000c

0800c9dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e004      	b.n	800c9fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b087      	sub	sp, #28
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	60b9      	str	r1, [r7, #8]
 800ca10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e008      	b.n	800ca36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	e004      	b.n	800ca68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ca84:	2301      	movs	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e01a      	b.n	800cacc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d114      	bne.n	800caca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cabe:	2181      	movs	r1, #129	@ 0x81
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f001 fd86 	bl	800e5d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800caca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	e016      	b.n	800cb20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7c1b      	ldrb	r3, [r3, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d109      	bne.n	800cb0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cb00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb04:	2101      	movs	r1, #1
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fd84 	bl	800e614 <USBD_LL_PrepareReceive>
 800cb0c:	e007      	b.n	800cb1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cb14:	2340      	movs	r3, #64	@ 0x40
 800cb16:	2101      	movs	r1, #1
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 fd7b 	bl	800e614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e01f      	b.n	800cb80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	79fa      	ldrb	r2, [r7, #7]
 800cb72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f001 fbe3 	bl	800e340 <USBD_LL_Init>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e016      	b.n	800cbce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbbc:	f107 020e 	add.w	r2, r7, #14
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	4798      	blx	r3
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 fc0e 	bl	800e400 <USBD_LL_Start>
 800cbe4:	4603      	mov	r3, r0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b083      	sub	sp, #12
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cc10:	2303      	movs	r3, #3
 800cc12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d009      	beq.n	800cc32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	78fa      	ldrb	r2, [r7, #3]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d007      	beq.n	800cc62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	78fa      	ldrb	r2, [r7, #3]
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4798      	blx	r3
  }

  return USBD_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 ff46 	bl	800db10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cc92:	461a      	mov	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cca0:	f003 031f 	and.w	r3, r3, #31
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d01a      	beq.n	800ccde <USBD_LL_SetupStage+0x72>
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d822      	bhi.n	800ccf2 <USBD_LL_SetupStage+0x86>
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <USBD_LL_SetupStage+0x4a>
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d00a      	beq.n	800ccca <USBD_LL_SetupStage+0x5e>
 800ccb4:	e01d      	b.n	800ccf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f9ee 	bl	800d0a0 <USBD_StdDevReq>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc8:	e020      	b.n	800cd0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa52 	bl	800d17c <USBD_StdItfReq>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]
      break;
 800ccdc:	e016      	b.n	800cd0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fa91 	bl	800d20e <USBD_StdEPReq>
 800ccec:	4603      	mov	r3, r0
 800ccee:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf0:	e00c      	b.n	800cd0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ccf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 fbdd 	bl	800e4c0 <USBD_LL_StallEP>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]
      break;
 800cd0a:	bf00      	nop
  }

  return ret;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b086      	sub	sp, #24
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	607a      	str	r2, [r7, #4]
 800cd22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d138      	bne.n	800cd9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cd30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d14a      	bne.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d913      	bls.n	800cd70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	1ad2      	subs	r2, r2, r3
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	68da      	ldr	r2, [r3, #12]
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	bf28      	it	cs
 800cd62:	4613      	movcs	r3, r2
 800cd64:	461a      	mov	r2, r3
 800cd66:	6879      	ldr	r1, [r7, #4]
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f000 ffc5 	bl	800dcf8 <USBD_CtlContinueRx>
 800cd6e:	e030      	b.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b03      	cmp	r3, #3
 800cd7a:	d10b      	bne.n	800cd94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 ffc0 	bl	800dd1a <USBD_CtlSendStatus>
 800cd9a:	e01a      	b.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d114      	bne.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00e      	beq.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	7afa      	ldrb	r2, [r7, #11]
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	4798      	blx	r3
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	e000      	b.n	800cdd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	460b      	mov	r3, r1
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d16b      	bne.n	800cec8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3314      	adds	r3, #20
 800cdf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d156      	bne.n	800ceae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	689a      	ldr	r2, [r3, #8]
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d914      	bls.n	800ce36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	689a      	ldr	r2, [r3, #8]
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	1ad2      	subs	r2, r2, r3
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 ff3a 	bl	800dc9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f001 fbf0 	bl	800e614 <USBD_LL_PrepareReceive>
 800ce34:	e03b      	b.n	800ceae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d11c      	bne.n	800ce7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d316      	bcc.n	800ce7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d20f      	bcs.n	800ce7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2100      	movs	r1, #0
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 ff1b 	bl	800dc9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce6e:	2300      	movs	r3, #0
 800ce70:	2200      	movs	r2, #0
 800ce72:	2100      	movs	r1, #0
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f001 fbcd 	bl	800e614 <USBD_LL_PrepareReceive>
 800ce7a:	e018      	b.n	800ceae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d10b      	bne.n	800cea0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d005      	beq.n	800cea0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cea0:	2180      	movs	r1, #128	@ 0x80
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f001 fb0c 	bl	800e4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 ff49 	bl	800dd40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d122      	bne.n	800cefe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7ff fe98 	bl	800cbee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cec6:	e01a      	b.n	800cefe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d114      	bne.n	800cefe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00e      	beq.n	800cefe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	7afa      	ldrb	r2, [r7, #11]
 800ceea:	4611      	mov	r1, r2
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	4798      	blx	r3
 800cef0:	4603      	mov	r3, r0
 800cef2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	e000      	b.n	800cf00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3718      	adds	r7, #24
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e02f      	b.n	800cf9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00f      	beq.n	800cf66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6852      	ldr	r2, [r2, #4]
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	4611      	mov	r1, r2
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf66:	2340      	movs	r3, #64	@ 0x40
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 fa62 	bl	800e436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2240      	movs	r2, #64	@ 0x40
 800cf7e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf82:	2340      	movs	r3, #64	@ 0x40
 800cf84:	2200      	movs	r2, #0
 800cf86:	2180      	movs	r1, #128	@ 0x80
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 fa54 	bl	800e436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2240      	movs	r2, #64	@ 0x40
 800cf98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	78fa      	ldrb	r2, [r7, #3]
 800cfb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2204      	movs	r2, #4
 800cfde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b04      	cmp	r3, #4
 800d002:	d106      	bne.n	800d012 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d032:	2303      	movs	r3, #3
 800d034:	e012      	b.n	800d05c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d10b      	bne.n	800d05a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d054:	69db      	ldr	r3, [r3, #28]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	3301      	adds	r3, #1
 800d07a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d082:	8a3b      	ldrh	r3, [r7, #16]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	b21a      	sxth	r2, r3
 800d088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	b21b      	sxth	r3, r3
 800d090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d092:	89fb      	ldrh	r3, [r7, #14]
}
 800d094:	4618      	mov	r0, r3
 800d096:	371c      	adds	r7, #28
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0b6:	2b40      	cmp	r3, #64	@ 0x40
 800d0b8:	d005      	beq.n	800d0c6 <USBD_StdDevReq+0x26>
 800d0ba:	2b40      	cmp	r3, #64	@ 0x40
 800d0bc:	d853      	bhi.n	800d166 <USBD_StdDevReq+0xc6>
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00b      	beq.n	800d0da <USBD_StdDevReq+0x3a>
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	d14f      	bne.n	800d166 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	4798      	blx	r3
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d8:	e04a      	b.n	800d170 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	785b      	ldrb	r3, [r3, #1]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d83b      	bhi.n	800d15a <USBD_StdDevReq+0xba>
 800d0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e8 <USBD_StdDevReq+0x48>)
 800d0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d151 	.word	0x0800d151
 800d0f0:	0800d15b 	.word	0x0800d15b
 800d0f4:	0800d147 	.word	0x0800d147
 800d0f8:	0800d15b 	.word	0x0800d15b
 800d0fc:	0800d11b 	.word	0x0800d11b
 800d100:	0800d111 	.word	0x0800d111
 800d104:	0800d15b 	.word	0x0800d15b
 800d108:	0800d133 	.word	0x0800d133
 800d10c:	0800d125 	.word	0x0800d125
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f9de 	bl	800d4d4 <USBD_GetDescriptor>
          break;
 800d118:	e024      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fb6d 	bl	800d7fc <USBD_SetAddress>
          break;
 800d122:	e01f      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fbac 	bl	800d884 <USBD_SetConfig>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73fb      	strb	r3, [r7, #15]
          break;
 800d130:	e018      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fc4b 	bl	800d9d0 <USBD_GetConfig>
          break;
 800d13a:	e013      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fc7c 	bl	800da3c <USBD_GetStatus>
          break;
 800d144:	e00e      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fcab 	bl	800daa4 <USBD_SetFeature>
          break;
 800d14e:	e009      	b.n	800d164 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fcba 	bl	800dacc <USBD_ClrFeature>
          break;
 800d158:	e004      	b.n	800d164 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d15a:	6839      	ldr	r1, [r7, #0]
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fd11 	bl	800db84 <USBD_CtlError>
          break;
 800d162:	bf00      	nop
      }
      break;
 800d164:	e004      	b.n	800d170 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fd0b 	bl	800db84 <USBD_CtlError>
      break;
 800d16e:	bf00      	nop
  }

  return ret;
 800d170:	7bfb      	ldrb	r3, [r7, #15]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop

0800d17c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d186:	2300      	movs	r3, #0
 800d188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d192:	2b40      	cmp	r3, #64	@ 0x40
 800d194:	d005      	beq.n	800d1a2 <USBD_StdItfReq+0x26>
 800d196:	2b40      	cmp	r3, #64	@ 0x40
 800d198:	d82f      	bhi.n	800d1fa <USBD_StdItfReq+0x7e>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <USBD_StdItfReq+0x26>
 800d19e:	2b20      	cmp	r3, #32
 800d1a0:	d12b      	bne.n	800d1fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d81d      	bhi.n	800d1ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	889b      	ldrh	r3, [r3, #4]
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d813      	bhi.n	800d1e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	4798      	blx	r3
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	88db      	ldrh	r3, [r3, #6]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d110      	bne.n	800d1f6 <USBD_StdItfReq+0x7a>
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10d      	bne.n	800d1f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fd9d 	bl	800dd1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d1e0:	e009      	b.n	800d1f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d1e2:	6839      	ldr	r1, [r7, #0]
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 fccd 	bl	800db84 <USBD_CtlError>
          break;
 800d1ea:	e004      	b.n	800d1f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fcc8 	bl	800db84 <USBD_CtlError>
          break;
 800d1f4:	e000      	b.n	800d1f8 <USBD_StdItfReq+0x7c>
          break;
 800d1f6:	bf00      	nop
      }
      break;
 800d1f8:	e004      	b.n	800d204 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fcc1 	bl	800db84 <USBD_CtlError>
      break;
 800d202:	bf00      	nop
  }

  return ret;
 800d204:	7bfb      	ldrb	r3, [r7, #15]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	889b      	ldrh	r3, [r3, #4]
 800d220:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d22a:	2b40      	cmp	r3, #64	@ 0x40
 800d22c:	d007      	beq.n	800d23e <USBD_StdEPReq+0x30>
 800d22e:	2b40      	cmp	r3, #64	@ 0x40
 800d230:	f200 8145 	bhi.w	800d4be <USBD_StdEPReq+0x2b0>
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00c      	beq.n	800d252 <USBD_StdEPReq+0x44>
 800d238:	2b20      	cmp	r3, #32
 800d23a:	f040 8140 	bne.w	800d4be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	4798      	blx	r3
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]
      break;
 800d250:	e13a      	b.n	800d4c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	785b      	ldrb	r3, [r3, #1]
 800d256:	2b03      	cmp	r3, #3
 800d258:	d007      	beq.n	800d26a <USBD_StdEPReq+0x5c>
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	f300 8129 	bgt.w	800d4b2 <USBD_StdEPReq+0x2a4>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d07f      	beq.n	800d364 <USBD_StdEPReq+0x156>
 800d264:	2b01      	cmp	r3, #1
 800d266:	d03c      	beq.n	800d2e2 <USBD_StdEPReq+0xd4>
 800d268:	e123      	b.n	800d4b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b02      	cmp	r3, #2
 800d274:	d002      	beq.n	800d27c <USBD_StdEPReq+0x6e>
 800d276:	2b03      	cmp	r3, #3
 800d278:	d016      	beq.n	800d2a8 <USBD_StdEPReq+0x9a>
 800d27a:	e02c      	b.n	800d2d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00d      	beq.n	800d29e <USBD_StdEPReq+0x90>
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	2b80      	cmp	r3, #128	@ 0x80
 800d286:	d00a      	beq.n	800d29e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d288:	7bbb      	ldrb	r3, [r7, #14]
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f001 f917 	bl	800e4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d292:	2180      	movs	r1, #128	@ 0x80
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f001 f913 	bl	800e4c0 <USBD_LL_StallEP>
 800d29a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d29c:	e020      	b.n	800d2e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fc6f 	bl	800db84 <USBD_CtlError>
              break;
 800d2a6:	e01b      	b.n	800d2e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	885b      	ldrh	r3, [r3, #2]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10e      	bne.n	800d2ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00b      	beq.n	800d2ce <USBD_StdEPReq+0xc0>
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
 800d2b8:	2b80      	cmp	r3, #128	@ 0x80
 800d2ba:	d008      	beq.n	800d2ce <USBD_StdEPReq+0xc0>
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	88db      	ldrh	r3, [r3, #6]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d104      	bne.n	800d2ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f001 f8f9 	bl	800e4c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fd23 	bl	800dd1a <USBD_CtlSendStatus>

              break;
 800d2d4:	e004      	b.n	800d2e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fc53 	bl	800db84 <USBD_CtlError>
              break;
 800d2de:	bf00      	nop
          }
          break;
 800d2e0:	e0ec      	b.n	800d4bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d002      	beq.n	800d2f4 <USBD_StdEPReq+0xe6>
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d016      	beq.n	800d320 <USBD_StdEPReq+0x112>
 800d2f2:	e030      	b.n	800d356 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00d      	beq.n	800d316 <USBD_StdEPReq+0x108>
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	2b80      	cmp	r3, #128	@ 0x80
 800d2fe:	d00a      	beq.n	800d316 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f001 f8db 	bl	800e4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d30a:	2180      	movs	r1, #128	@ 0x80
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 f8d7 	bl	800e4c0 <USBD_LL_StallEP>
 800d312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d314:	e025      	b.n	800d362 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fc33 	bl	800db84 <USBD_CtlError>
              break;
 800d31e:	e020      	b.n	800d362 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	885b      	ldrh	r3, [r3, #2]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d11b      	bne.n	800d360 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d004      	beq.n	800d33c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f001 f8e1 	bl	800e4fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fcec 	bl	800dd1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d354:	e004      	b.n	800d360 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fc13 	bl	800db84 <USBD_CtlError>
              break;
 800d35e:	e000      	b.n	800d362 <USBD_StdEPReq+0x154>
              break;
 800d360:	bf00      	nop
          }
          break;
 800d362:	e0ab      	b.n	800d4bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d002      	beq.n	800d376 <USBD_StdEPReq+0x168>
 800d370:	2b03      	cmp	r3, #3
 800d372:	d032      	beq.n	800d3da <USBD_StdEPReq+0x1cc>
 800d374:	e097      	b.n	800d4a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d376:	7bbb      	ldrb	r3, [r7, #14]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <USBD_StdEPReq+0x17e>
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	2b80      	cmp	r3, #128	@ 0x80
 800d380:	d004      	beq.n	800d38c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fbfd 	bl	800db84 <USBD_CtlError>
                break;
 800d38a:	e091      	b.n	800d4b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d38c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d390:	2b00      	cmp	r3, #0
 800d392:	da0b      	bge.n	800d3ac <USBD_StdEPReq+0x19e>
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d39a:	4613      	mov	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	e00b      	b.n	800d3c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fc47 	bl	800dc66 <USBD_CtlSendData>
              break;
 800d3d8:	e06a      	b.n	800d4b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da11      	bge.n	800d406 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3e2:	7bbb      	ldrb	r3, [r7, #14]
 800d3e4:	f003 020f 	and.w	r2, r3, #15
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	440b      	add	r3, r1
 800d3f4:	3324      	adds	r3, #36	@ 0x24
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d117      	bne.n	800d42c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fbc0 	bl	800db84 <USBD_CtlError>
                  break;
 800d404:	e054      	b.n	800d4b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	f003 020f 	and.w	r2, r3, #15
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	4613      	mov	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4413      	add	r3, r2
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	440b      	add	r3, r1
 800d418:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d41c:	881b      	ldrh	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d104      	bne.n	800d42c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fbad 	bl	800db84 <USBD_CtlError>
                  break;
 800d42a:	e041      	b.n	800d4b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d42c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d430:	2b00      	cmp	r3, #0
 800d432:	da0b      	bge.n	800d44c <USBD_StdEPReq+0x23e>
 800d434:	7bbb      	ldrb	r3, [r7, #14]
 800d436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	3310      	adds	r3, #16
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	4413      	add	r3, r2
 800d448:	3304      	adds	r3, #4
 800d44a:	e00b      	b.n	800d464 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	4413      	add	r3, r2
 800d462:	3304      	adds	r3, #4
 800d464:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d466:	7bbb      	ldrb	r3, [r7, #14]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <USBD_StdEPReq+0x264>
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	2b80      	cmp	r3, #128	@ 0x80
 800d470:	d103      	bne.n	800d47a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2200      	movs	r2, #0
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	e00e      	b.n	800d498 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
 800d47c:	4619      	mov	r1, r3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f001 f85c 	bl	800e53c <USBD_LL_IsStallEP>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2201      	movs	r2, #1
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	e002      	b.n	800d498 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2202      	movs	r2, #2
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fbe1 	bl	800dc66 <USBD_CtlSendData>
              break;
 800d4a4:	e004      	b.n	800d4b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d4a6:	6839      	ldr	r1, [r7, #0]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fb6b 	bl	800db84 <USBD_CtlError>
              break;
 800d4ae:	bf00      	nop
          }
          break;
 800d4b0:	e004      	b.n	800d4bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d4b2:	6839      	ldr	r1, [r7, #0]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fb65 	bl	800db84 <USBD_CtlError>
          break;
 800d4ba:	bf00      	nop
      }
      break;
 800d4bc:	e004      	b.n	800d4c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fb5f 	bl	800db84 <USBD_CtlError>
      break;
 800d4c6:	bf00      	nop
  }

  return ret;
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	885b      	ldrh	r3, [r3, #2]
 800d4ee:	0a1b      	lsrs	r3, r3, #8
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	2b0e      	cmp	r3, #14
 800d4f6:	f200 8152 	bhi.w	800d79e <USBD_GetDescriptor+0x2ca>
 800d4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d500 <USBD_GetDescriptor+0x2c>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d571 	.word	0x0800d571
 800d504:	0800d589 	.word	0x0800d589
 800d508:	0800d5c9 	.word	0x0800d5c9
 800d50c:	0800d79f 	.word	0x0800d79f
 800d510:	0800d79f 	.word	0x0800d79f
 800d514:	0800d73f 	.word	0x0800d73f
 800d518:	0800d76b 	.word	0x0800d76b
 800d51c:	0800d79f 	.word	0x0800d79f
 800d520:	0800d79f 	.word	0x0800d79f
 800d524:	0800d79f 	.word	0x0800d79f
 800d528:	0800d79f 	.word	0x0800d79f
 800d52c:	0800d79f 	.word	0x0800d79f
 800d530:	0800d79f 	.word	0x0800d79f
 800d534:	0800d79f 	.word	0x0800d79f
 800d538:	0800d53d 	.word	0x0800d53d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d542:	69db      	ldr	r3, [r3, #28]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00b      	beq.n	800d560 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54e:	69db      	ldr	r3, [r3, #28]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	7c12      	ldrb	r2, [r2, #16]
 800d554:	f107 0108 	add.w	r1, r7, #8
 800d558:	4610      	mov	r0, r2
 800d55a:	4798      	blx	r3
 800d55c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d55e:	e126      	b.n	800d7ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fb0e 	bl	800db84 <USBD_CtlError>
        err++;
 800d568:	7afb      	ldrb	r3, [r7, #11]
 800d56a:	3301      	adds	r3, #1
 800d56c:	72fb      	strb	r3, [r7, #11]
      break;
 800d56e:	e11e      	b.n	800d7ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	7c12      	ldrb	r2, [r2, #16]
 800d57c:	f107 0108 	add.w	r1, r7, #8
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
 800d584:	60f8      	str	r0, [r7, #12]
      break;
 800d586:	e112      	b.n	800d7ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	7c1b      	ldrb	r3, [r3, #16]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10d      	bne.n	800d5ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d598:	f107 0208 	add.w	r2, r7, #8
 800d59c:	4610      	mov	r0, r2
 800d59e:	4798      	blx	r3
 800d5a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5aa:	e100      	b.n	800d7ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b4:	f107 0208 	add.w	r2, r7, #8
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	4798      	blx	r3
 800d5bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	701a      	strb	r2, [r3, #0]
      break;
 800d5c6:	e0f2      	b.n	800d7ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	885b      	ldrh	r3, [r3, #2]
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b05      	cmp	r3, #5
 800d5d0:	f200 80ac 	bhi.w	800d72c <USBD_GetDescriptor+0x258>
 800d5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d5dc <USBD_GetDescriptor+0x108>)
 800d5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5da:	bf00      	nop
 800d5dc:	0800d5f5 	.word	0x0800d5f5
 800d5e0:	0800d629 	.word	0x0800d629
 800d5e4:	0800d65d 	.word	0x0800d65d
 800d5e8:	0800d691 	.word	0x0800d691
 800d5ec:	0800d6c5 	.word	0x0800d6c5
 800d5f0:	0800d6f9 	.word	0x0800d6f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00b      	beq.n	800d618 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	7c12      	ldrb	r2, [r2, #16]
 800d60c:	f107 0108 	add.w	r1, r7, #8
 800d610:	4610      	mov	r0, r2
 800d612:	4798      	blx	r3
 800d614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d616:	e091      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fab2 	bl	800db84 <USBD_CtlError>
            err++;
 800d620:	7afb      	ldrb	r3, [r7, #11]
 800d622:	3301      	adds	r3, #1
 800d624:	72fb      	strb	r3, [r7, #11]
          break;
 800d626:	e089      	b.n	800d73c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00b      	beq.n	800d64c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	7c12      	ldrb	r2, [r2, #16]
 800d640:	f107 0108 	add.w	r1, r7, #8
 800d644:	4610      	mov	r0, r2
 800d646:	4798      	blx	r3
 800d648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64a:	e077      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa98 	bl	800db84 <USBD_CtlError>
            err++;
 800d654:	7afb      	ldrb	r3, [r7, #11]
 800d656:	3301      	adds	r3, #1
 800d658:	72fb      	strb	r3, [r7, #11]
          break;
 800d65a:	e06f      	b.n	800d73c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7c12      	ldrb	r2, [r2, #16]
 800d674:	f107 0108 	add.w	r1, r7, #8
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
 800d67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d67e:	e05d      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fa7e 	bl	800db84 <USBD_CtlError>
            err++;
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	3301      	adds	r3, #1
 800d68c:	72fb      	strb	r3, [r7, #11]
          break;
 800d68e:	e055      	b.n	800d73c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 0108 	add.w	r1, r7, #8
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6b2:	e043      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa64 	bl	800db84 <USBD_CtlError>
            err++;
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6c2:	e03b      	b.n	800d73c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00b      	beq.n	800d6e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	7c12      	ldrb	r2, [r2, #16]
 800d6dc:	f107 0108 	add.w	r1, r7, #8
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4798      	blx	r3
 800d6e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6e6:	e029      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fa4a 	bl	800db84 <USBD_CtlError>
            err++;
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6f6:	e021      	b.n	800d73c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6fe:	699b      	ldr	r3, [r3, #24]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00b      	beq.n	800d71c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	7c12      	ldrb	r2, [r2, #16]
 800d710:	f107 0108 	add.w	r1, r7, #8
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d71a:	e00f      	b.n	800d73c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fa30 	bl	800db84 <USBD_CtlError>
            err++;
 800d724:	7afb      	ldrb	r3, [r7, #11]
 800d726:	3301      	adds	r3, #1
 800d728:	72fb      	strb	r3, [r7, #11]
          break;
 800d72a:	e007      	b.n	800d73c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa28 	bl	800db84 <USBD_CtlError>
          err++;
 800d734:	7afb      	ldrb	r3, [r7, #11]
 800d736:	3301      	adds	r3, #1
 800d738:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d73a:	bf00      	nop
      }
      break;
 800d73c:	e037      	b.n	800d7ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7c1b      	ldrb	r3, [r3, #16]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d109      	bne.n	800d75a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d74c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d74e:	f107 0208 	add.w	r2, r7, #8
 800d752:	4610      	mov	r0, r2
 800d754:	4798      	blx	r3
 800d756:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d758:	e029      	b.n	800d7ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fa11 	bl	800db84 <USBD_CtlError>
        err++;
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	3301      	adds	r3, #1
 800d766:	72fb      	strb	r3, [r7, #11]
      break;
 800d768:	e021      	b.n	800d7ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7c1b      	ldrb	r3, [r3, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10d      	bne.n	800d78e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d77a:	f107 0208 	add.w	r2, r7, #8
 800d77e:	4610      	mov	r0, r2
 800d780:	4798      	blx	r3
 800d782:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	3301      	adds	r3, #1
 800d788:	2207      	movs	r2, #7
 800d78a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d78c:	e00f      	b.n	800d7ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f9f7 	bl	800db84 <USBD_CtlError>
        err++;
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	3301      	adds	r3, #1
 800d79a:	72fb      	strb	r3, [r7, #11]
      break;
 800d79c:	e007      	b.n	800d7ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f9ef 	bl	800db84 <USBD_CtlError>
      err++;
 800d7a6:	7afb      	ldrb	r3, [r7, #11]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d7ac:	bf00      	nop
  }

  if (err != 0U)
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d11e      	bne.n	800d7f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	88db      	ldrh	r3, [r3, #6]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d016      	beq.n	800d7ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d7bc:	893b      	ldrh	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00e      	beq.n	800d7e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	88da      	ldrh	r2, [r3, #6]
 800d7c6:	893b      	ldrh	r3, [r7, #8]
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	bf28      	it	cs
 800d7cc:	4613      	movcs	r3, r2
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d7d2:	893b      	ldrh	r3, [r7, #8]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fa44 	bl	800dc66 <USBD_CtlSendData>
 800d7de:	e009      	b.n	800d7f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f9ce 	bl	800db84 <USBD_CtlError>
 800d7e8:	e004      	b.n	800d7f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa95 	bl	800dd1a <USBD_CtlSendStatus>
 800d7f0:	e000      	b.n	800d7f4 <USBD_GetDescriptor+0x320>
    return;
 800d7f2:	bf00      	nop
  }
}
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop

0800d7fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	889b      	ldrh	r3, [r3, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d131      	bne.n	800d872 <USBD_SetAddress+0x76>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	88db      	ldrh	r3, [r3, #6]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d12d      	bne.n	800d872 <USBD_SetAddress+0x76>
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	885b      	ldrh	r3, [r3, #2]
 800d81a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d81c:	d829      	bhi.n	800d872 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	885b      	ldrh	r3, [r3, #2]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d828:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b03      	cmp	r3, #3
 800d834:	d104      	bne.n	800d840 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f9a3 	bl	800db84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83e:	e01d      	b.n	800d87c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7bfa      	ldrb	r2, [r7, #15]
 800d844:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	4619      	mov	r1, r3
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fea1 	bl	800e594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fa61 	bl	800dd1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d004      	beq.n	800d868 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2202      	movs	r2, #2
 800d862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d866:	e009      	b.n	800d87c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d870:	e004      	b.n	800d87c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f985 	bl	800db84 <USBD_CtlError>
  }
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	885b      	ldrh	r3, [r3, #2]
 800d896:	b2da      	uxtb	r2, r3
 800d898:	4b4c      	ldr	r3, [pc, #304]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d89a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d89c:	4b4b      	ldr	r3, [pc, #300]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d905      	bls.n	800d8b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f96c 	bl	800db84 <USBD_CtlError>
    return USBD_FAIL;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e088      	b.n	800d9c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b02      	cmp	r3, #2
 800d8ba:	d002      	beq.n	800d8c2 <USBD_SetConfig+0x3e>
 800d8bc:	2b03      	cmp	r3, #3
 800d8be:	d025      	beq.n	800d90c <USBD_SetConfig+0x88>
 800d8c0:	e071      	b.n	800d9a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d8c2:	4b42      	ldr	r3, [pc, #264]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d01c      	beq.n	800d904 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d8ca:	4b40      	ldr	r3, [pc, #256]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8d4:	4b3d      	ldr	r3, [pc, #244]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff f992 	bl	800cc04 <USBD_SetClassConfig>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f949 	bl	800db84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8f2:	e065      	b.n	800d9c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fa10 	bl	800dd1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d902:	e05d      	b.n	800d9c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fa08 	bl	800dd1a <USBD_CtlSendStatus>
      break;
 800d90a:	e059      	b.n	800d9c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d90c:	4b2f      	ldr	r3, [pc, #188]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d112      	bne.n	800d93a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d91c:	4b2b      	ldr	r3, [pc, #172]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d926:	4b29      	ldr	r3, [pc, #164]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff f985 	bl	800cc3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f9f1 	bl	800dd1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d938:	e042      	b.n	800d9c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d93a:	4b24      	ldr	r3, [pc, #144]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	429a      	cmp	r2, r3
 800d946:	d02a      	beq.n	800d99e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff f973 	bl	800cc3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d956:	4b1d      	ldr	r3, [pc, #116]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d960:	4b1a      	ldr	r3, [pc, #104]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff f94c 	bl	800cc04 <USBD_SetClassConfig>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d970:	7bfb      	ldrb	r3, [r7, #15]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00f      	beq.n	800d996 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 f903 	bl	800db84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	b2db      	uxtb	r3, r3
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7ff f958 	bl	800cc3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2202      	movs	r2, #2
 800d990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d994:	e014      	b.n	800d9c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f9bf 	bl	800dd1a <USBD_CtlSendStatus>
      break;
 800d99c:	e010      	b.n	800d9c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f9bb 	bl	800dd1a <USBD_CtlSendStatus>
      break;
 800d9a4:	e00c      	b.n	800d9c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 f8eb 	bl	800db84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9ae:	4b07      	ldr	r3, [pc, #28]	@ (800d9cc <USBD_SetConfig+0x148>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff f941 	bl	800cc3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d9be:	bf00      	nop
  }

  return ret;
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20004a8c 	.word	0x20004a8c

0800d9d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	88db      	ldrh	r3, [r3, #6]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d004      	beq.n	800d9ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f8cd 	bl	800db84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d9ea:	e023      	b.n	800da34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	dc02      	bgt.n	800d9fe <USBD_GetConfig+0x2e>
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	dc03      	bgt.n	800da04 <USBD_GetConfig+0x34>
 800d9fc:	e015      	b.n	800da2a <USBD_GetConfig+0x5a>
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d00b      	beq.n	800da1a <USBD_GetConfig+0x4a>
 800da02:	e012      	b.n	800da2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	3308      	adds	r3, #8
 800da0e:	2201      	movs	r2, #1
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f927 	bl	800dc66 <USBD_CtlSendData>
        break;
 800da18:	e00c      	b.n	800da34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3304      	adds	r3, #4
 800da1e:	2201      	movs	r2, #1
 800da20:	4619      	mov	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f91f 	bl	800dc66 <USBD_CtlSendData>
        break;
 800da28:	e004      	b.n	800da34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da2a:	6839      	ldr	r1, [r7, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f8a9 	bl	800db84 <USBD_CtlError>
        break;
 800da32:	bf00      	nop
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	3b01      	subs	r3, #1
 800da50:	2b02      	cmp	r3, #2
 800da52:	d81e      	bhi.n	800da92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	88db      	ldrh	r3, [r3, #6]
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d004      	beq.n	800da66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f890 	bl	800db84 <USBD_CtlError>
        break;
 800da64:	e01a      	b.n	800da9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800da72:	2b00      	cmp	r3, #0
 800da74:	d005      	beq.n	800da82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f043 0202 	orr.w	r2, r3, #2
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	330c      	adds	r3, #12
 800da86:	2202      	movs	r2, #2
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f8eb 	bl	800dc66 <USBD_CtlSendData>
      break;
 800da90:	e004      	b.n	800da9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 f875 	bl	800db84 <USBD_CtlError>
      break;
 800da9a:	bf00      	nop
  }
}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	885b      	ldrh	r3, [r3, #2]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d106      	bne.n	800dac4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f92b 	bl	800dd1a <USBD_CtlSendStatus>
  }
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	3b01      	subs	r3, #1
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d80b      	bhi.n	800dafc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	885b      	ldrh	r3, [r3, #2]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d10c      	bne.n	800db06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f910 	bl	800dd1a <USBD_CtlSendStatus>
      }
      break;
 800dafa:	e004      	b.n	800db06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f840 	bl	800db84 <USBD_CtlError>
      break;
 800db04:	e000      	b.n	800db08 <USBD_ClrFeature+0x3c>
      break;
 800db06:	bf00      	nop
  }
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	781a      	ldrb	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	3301      	adds	r3, #1
 800db2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	3301      	adds	r3, #1
 800db38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7ff fa92 	bl	800d064 <SWAPBYTE>
 800db40:	4603      	mov	r3, r0
 800db42:	461a      	mov	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3301      	adds	r3, #1
 800db4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3301      	adds	r3, #1
 800db52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f7ff fa85 	bl	800d064 <SWAPBYTE>
 800db5a:	4603      	mov	r3, r0
 800db5c:	461a      	mov	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3301      	adds	r3, #1
 800db66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	3301      	adds	r3, #1
 800db6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7ff fa78 	bl	800d064 <SWAPBYTE>
 800db74:	4603      	mov	r3, r0
 800db76:	461a      	mov	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	80da      	strh	r2, [r3, #6]
}
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db8e:	2180      	movs	r1, #128	@ 0x80
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fc95 	bl	800e4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db96:	2100      	movs	r1, #0
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fc91 	bl	800e4c0 <USBD_LL_StallEP>
}
 800db9e:	bf00      	nop
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b086      	sub	sp, #24
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	60f8      	str	r0, [r7, #12]
 800dbae:	60b9      	str	r1, [r7, #8]
 800dbb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d036      	beq.n	800dc2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dbc0:	6938      	ldr	r0, [r7, #16]
 800dbc2:	f000 f836 	bl	800dc32 <USBD_GetLen>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	3301      	adds	r3, #1
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	4413      	add	r3, r2
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	7812      	ldrb	r2, [r2, #0]
 800dbde:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbe0:	7dfb      	ldrb	r3, [r7, #23]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	4413      	add	r3, r2
 800dbec:	2203      	movs	r2, #3
 800dbee:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbf6:	e013      	b.n	800dc20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	693a      	ldr	r2, [r7, #16]
 800dc00:	7812      	ldrb	r2, [r2, #0]
 800dc02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	3301      	adds	r3, #1
 800dc08:	613b      	str	r3, [r7, #16]
    idx++;
 800dc0a:	7dfb      	ldrb	r3, [r7, #23]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	4413      	add	r3, r2
 800dc16:	2200      	movs	r2, #0
 800dc18:	701a      	strb	r2, [r3, #0]
    idx++;
 800dc1a:	7dfb      	ldrb	r3, [r7, #23]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1e7      	bne.n	800dbf8 <USBD_GetString+0x52>
 800dc28:	e000      	b.n	800dc2c <USBD_GetString+0x86>
    return;
 800dc2a:	bf00      	nop
  }
}
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b085      	sub	sp, #20
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc42:	e005      	b.n	800dc50 <USBD_GetLen+0x1e>
  {
    len++;
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	3301      	adds	r3, #1
 800dc48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1f5      	bne.n	800dc44 <USBD_GetLen+0x12>
  }

  return len;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3714      	adds	r7, #20
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2202      	movs	r2, #2
 800dc76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f000 fca0 	bl	800e5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	2100      	movs	r1, #0
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f000 fc8f 	bl	800e5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b084      	sub	sp, #16
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	60f8      	str	r0, [r7, #12]
 800dcc6:	60b9      	str	r1, [r7, #8]
 800dcc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2203      	movs	r2, #3
 800dcce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	2100      	movs	r1, #0
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 fc93 	bl	800e614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	2100      	movs	r1, #0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 fc82 	bl	800e614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2204      	movs	r2, #4
 800dd26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 fc4e 	bl	800e5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2205      	movs	r2, #5
 800dd4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd50:	2300      	movs	r3, #0
 800dd52:	2200      	movs	r2, #0
 800dd54:	2100      	movs	r1, #0
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fc5c 	bl	800e614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4912      	ldr	r1, [pc, #72]	@ (800ddb8 <MX_USB_Device_Init+0x50>)
 800dd70:	4812      	ldr	r0, [pc, #72]	@ (800ddbc <MX_USB_Device_Init+0x54>)
 800dd72:	f7fe fed9 	bl	800cb28 <USBD_Init>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dd7c:	f7f3 f96e 	bl	800105c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dd80:	490f      	ldr	r1, [pc, #60]	@ (800ddc0 <MX_USB_Device_Init+0x58>)
 800dd82:	480e      	ldr	r0, [pc, #56]	@ (800ddbc <MX_USB_Device_Init+0x54>)
 800dd84:	f7fe ff00 	bl	800cb88 <USBD_RegisterClass>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dd8e:	f7f3 f965 	bl	800105c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dd92:	490c      	ldr	r1, [pc, #48]	@ (800ddc4 <MX_USB_Device_Init+0x5c>)
 800dd94:	4809      	ldr	r0, [pc, #36]	@ (800ddbc <MX_USB_Device_Init+0x54>)
 800dd96:	f7fe fe21 	bl	800c9dc <USBD_CDC_RegisterInterface>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dda0:	f7f3 f95c 	bl	800105c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dda4:	4805      	ldr	r0, [pc, #20]	@ (800ddbc <MX_USB_Device_Init+0x54>)
 800dda6:	f7fe ff16 	bl	800cbd6 <USBD_Start>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ddb0:	f7f3 f954 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ddb4:	bf00      	nop
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20000130 	.word	0x20000130
 800ddbc:	20004a90 	.word	0x20004a90
 800ddc0:	20000018 	.word	0x20000018
 800ddc4:	2000011c 	.word	0x2000011c

0800ddc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4905      	ldr	r1, [pc, #20]	@ (800dde4 <CDC_Init_FS+0x1c>)
 800ddd0:	4805      	ldr	r0, [pc, #20]	@ (800dde8 <CDC_Init_FS+0x20>)
 800ddd2:	f7fe fe18 	bl	800ca06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddd6:	4905      	ldr	r1, [pc, #20]	@ (800ddec <CDC_Init_FS+0x24>)
 800ddd8:	4803      	ldr	r0, [pc, #12]	@ (800dde8 <CDC_Init_FS+0x20>)
 800ddda:	f7fe fe32 	bl	800ca42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20005560 	.word	0x20005560
 800dde8:	20004a90 	.word	0x20004a90
 800ddec:	20004d60 	.word	0x20004d60

0800ddf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ddf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	6039      	str	r1, [r7, #0]
 800de0a:	71fb      	strb	r3, [r7, #7]
 800de0c:	4613      	mov	r3, r2
 800de0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b23      	cmp	r3, #35	@ 0x23
 800de14:	d84a      	bhi.n	800deac <CDC_Control_FS+0xac>
 800de16:	a201      	add	r2, pc, #4	@ (adr r2, 800de1c <CDC_Control_FS+0x1c>)
 800de18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1c:	0800dead 	.word	0x0800dead
 800de20:	0800dead 	.word	0x0800dead
 800de24:	0800dead 	.word	0x0800dead
 800de28:	0800dead 	.word	0x0800dead
 800de2c:	0800dead 	.word	0x0800dead
 800de30:	0800dead 	.word	0x0800dead
 800de34:	0800dead 	.word	0x0800dead
 800de38:	0800dead 	.word	0x0800dead
 800de3c:	0800dead 	.word	0x0800dead
 800de40:	0800dead 	.word	0x0800dead
 800de44:	0800dead 	.word	0x0800dead
 800de48:	0800dead 	.word	0x0800dead
 800de4c:	0800dead 	.word	0x0800dead
 800de50:	0800dead 	.word	0x0800dead
 800de54:	0800dead 	.word	0x0800dead
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800dead 	.word	0x0800dead
 800de60:	0800dead 	.word	0x0800dead
 800de64:	0800dead 	.word	0x0800dead
 800de68:	0800dead 	.word	0x0800dead
 800de6c:	0800dead 	.word	0x0800dead
 800de70:	0800dead 	.word	0x0800dead
 800de74:	0800dead 	.word	0x0800dead
 800de78:	0800dead 	.word	0x0800dead
 800de7c:	0800dead 	.word	0x0800dead
 800de80:	0800dead 	.word	0x0800dead
 800de84:	0800dead 	.word	0x0800dead
 800de88:	0800dead 	.word	0x0800dead
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800dead 	.word	0x0800dead
 800de94:	0800dead 	.word	0x0800dead
 800de98:	0800dead 	.word	0x0800dead
 800de9c:	0800dead 	.word	0x0800dead
 800dea0:	0800dead 	.word	0x0800dead
 800dea4:	0800dead 	.word	0x0800dead
 800dea8:	0800dead 	.word	0x0800dead
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800deac:	bf00      	nop
  }

  return (USBD_OK);
 800deae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	4805      	ldr	r0, [pc, #20]	@ (800dee0 <CDC_Receive_FS+0x24>)
 800deca:	f7fe fdba 	bl	800ca42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dece:	4804      	ldr	r0, [pc, #16]	@ (800dee0 <CDC_Receive_FS+0x24>)
 800ded0:	f7fe fe00 	bl	800cad4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ded4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	20004a90 	.word	0x20004a90

0800dee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800def4:	4b0d      	ldr	r3, [pc, #52]	@ (800df2c <CDC_Transmit_FS+0x48>)
 800def6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800defa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df06:	2301      	movs	r3, #1
 800df08:	e00b      	b.n	800df22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df0a:	887b      	ldrh	r3, [r7, #2]
 800df0c:	461a      	mov	r2, r3
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	4806      	ldr	r0, [pc, #24]	@ (800df2c <CDC_Transmit_FS+0x48>)
 800df12:	f7fe fd78 	bl	800ca06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df16:	4805      	ldr	r0, [pc, #20]	@ (800df2c <CDC_Transmit_FS+0x48>)
 800df18:	f7fe fdac 	bl	800ca74 <USBD_CDC_TransmitPacket>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df20:	7bfb      	ldrb	r3, [r7, #15]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20004a90 	.word	0x20004a90

0800df30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	4613      	mov	r3, r2
 800df3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df46:	4618      	mov	r0, r3
 800df48:	371c      	adds	r7, #28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
	...

0800df54 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	6039      	str	r1, [r7, #0]
 800df5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	2212      	movs	r2, #18
 800df64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800df66:	4b03      	ldr	r3, [pc, #12]	@ (800df74 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800df68:	4618      	mov	r0, r3
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	20000150 	.word	0x20000150

0800df78 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	4603      	mov	r3, r0
 800df80:	6039      	str	r1, [r7, #0]
 800df82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	2204      	movs	r2, #4
 800df88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df8a:	4b03      	ldr	r3, [pc, #12]	@ (800df98 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	20000164 	.word	0x20000164

0800df9c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	6039      	str	r1, [r7, #0]
 800dfa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d105      	bne.n	800dfba <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	4907      	ldr	r1, [pc, #28]	@ (800dfd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dfb2:	4808      	ldr	r0, [pc, #32]	@ (800dfd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dfb4:	f7ff fdf7 	bl	800dba6 <USBD_GetString>
 800dfb8:	e004      	b.n	800dfc4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	4904      	ldr	r1, [pc, #16]	@ (800dfd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dfbe:	4805      	ldr	r0, [pc, #20]	@ (800dfd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dfc0:	f7ff fdf1 	bl	800dba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfc4:	4b02      	ldr	r3, [pc, #8]	@ (800dfd0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20005d60 	.word	0x20005d60
 800dfd4:	0800f0ec 	.word	0x0800f0ec

0800dfd8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	6039      	str	r1, [r7, #0]
 800dfe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	4904      	ldr	r1, [pc, #16]	@ (800dff8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dfe8:	4804      	ldr	r0, [pc, #16]	@ (800dffc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dfea:	f7ff fddc 	bl	800dba6 <USBD_GetString>
  return USBD_StrDesc;
 800dfee:	4b02      	ldr	r3, [pc, #8]	@ (800dff8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20005d60 	.word	0x20005d60
 800dffc:	0800f104 	.word	0x0800f104

0800e000 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	6039      	str	r1, [r7, #0]
 800e00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	221a      	movs	r2, #26
 800e010:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e012:	f000 f843 	bl	800e09c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e016:	4b02      	ldr	r3, [pc, #8]	@ (800e020 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	20000168 	.word	0x20000168

0800e024 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	6039      	str	r1, [r7, #0]
 800e02e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d105      	bne.n	800e042 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4907      	ldr	r1, [pc, #28]	@ (800e058 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e03a:	4808      	ldr	r0, [pc, #32]	@ (800e05c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e03c:	f7ff fdb3 	bl	800dba6 <USBD_GetString>
 800e040:	e004      	b.n	800e04c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	4904      	ldr	r1, [pc, #16]	@ (800e058 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e046:	4805      	ldr	r0, [pc, #20]	@ (800e05c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e048:	f7ff fdad 	bl	800dba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e04c:	4b02      	ldr	r3, [pc, #8]	@ (800e058 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20005d60 	.word	0x20005d60
 800e05c:	0800f118 	.word	0x0800f118

0800e060 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	6039      	str	r1, [r7, #0]
 800e06a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d105      	bne.n	800e07e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	4907      	ldr	r1, [pc, #28]	@ (800e094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e076:	4808      	ldr	r0, [pc, #32]	@ (800e098 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e078:	f7ff fd95 	bl	800dba6 <USBD_GetString>
 800e07c:	e004      	b.n	800e088 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	4904      	ldr	r1, [pc, #16]	@ (800e094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e082:	4805      	ldr	r0, [pc, #20]	@ (800e098 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e084:	f7ff fd8f 	bl	800dba6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e088:	4b02      	ldr	r3, [pc, #8]	@ (800e094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	20005d60 	.word	0x20005d60
 800e098:	0800f124 	.word	0x0800f124

0800e09c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e0 <Get_SerialNum+0x44>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e4 <Get_SerialNum+0x48>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e8 <Get_SerialNum+0x4c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d009      	beq.n	800e0d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0c2:	2208      	movs	r2, #8
 800e0c4:	4909      	ldr	r1, [pc, #36]	@ (800e0ec <Get_SerialNum+0x50>)
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f000 f814 	bl	800e0f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0cc:	2204      	movs	r2, #4
 800e0ce:	4908      	ldr	r1, [pc, #32]	@ (800e0f0 <Get_SerialNum+0x54>)
 800e0d0:	68b8      	ldr	r0, [r7, #8]
 800e0d2:	f000 f80f 	bl	800e0f4 <IntToUnicode>
  }
}
 800e0d6:	bf00      	nop
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	1fff7590 	.word	0x1fff7590
 800e0e4:	1fff7594 	.word	0x1fff7594
 800e0e8:	1fff7598 	.word	0x1fff7598
 800e0ec:	2000016a 	.word	0x2000016a
 800e0f0:	2000017a 	.word	0x2000017a

0800e0f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e106:	2300      	movs	r3, #0
 800e108:	75fb      	strb	r3, [r7, #23]
 800e10a:	e027      	b.n	800e15c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	0f1b      	lsrs	r3, r3, #28
 800e110:	2b09      	cmp	r3, #9
 800e112:	d80b      	bhi.n	800e12c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	0f1b      	lsrs	r3, r3, #28
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4619      	mov	r1, r3
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	440b      	add	r3, r1
 800e124:	3230      	adds	r2, #48	@ 0x30
 800e126:	b2d2      	uxtb	r2, r2
 800e128:	701a      	strb	r2, [r3, #0]
 800e12a:	e00a      	b.n	800e142 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	0f1b      	lsrs	r3, r3, #28
 800e130:	b2da      	uxtb	r2, r3
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4619      	mov	r1, r3
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	440b      	add	r3, r1
 800e13c:	3237      	adds	r2, #55	@ 0x37
 800e13e:	b2d2      	uxtb	r2, r2
 800e140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	011b      	lsls	r3, r3, #4
 800e146:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	3301      	adds	r3, #1
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	4413      	add	r3, r2
 800e152:	2200      	movs	r2, #0
 800e154:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e156:	7dfb      	ldrb	r3, [r7, #23]
 800e158:	3301      	adds	r3, #1
 800e15a:	75fb      	strb	r3, [r7, #23]
 800e15c:	7dfa      	ldrb	r2, [r7, #23]
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	429a      	cmp	r2, r3
 800e162:	d3d3      	bcc.n	800e10c <IntToUnicode+0x18>
  }
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
	...

0800e174 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b098      	sub	sp, #96	@ 0x60
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e17c:	f107 030c 	add.w	r3, r7, #12
 800e180:	2254      	movs	r2, #84	@ 0x54
 800e182:	2100      	movs	r1, #0
 800e184:	4618      	mov	r0, r3
 800e186:	f000 fb19 	bl	800e7bc <memset>
  if(pcdHandle->Instance==USB)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a15      	ldr	r2, [pc, #84]	@ (800e1e4 <HAL_PCD_MspInit+0x70>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d122      	bne.n	800e1da <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e194:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e198:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e19a:	2300      	movs	r3, #0
 800e19c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e19e:	f107 030c 	add.w	r3, r7, #12
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7f8 fd90 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e1ae:	f7f2 ff55 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e8 <HAL_PCD_MspInit+0x74>)
 800e1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e8 <HAL_PCD_MspInit+0x74>)
 800e1b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e1bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e1be:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <HAL_PCD_MspInit+0x74>)
 800e1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1c6:	60bb      	str	r3, [r7, #8]
 800e1c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	2014      	movs	r0, #20
 800e1d0:	f7f5 fd5b 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e1d4:	2014      	movs	r0, #20
 800e1d6:	f7f5 fd72 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e1da:	bf00      	nop
 800e1dc:	3760      	adds	r7, #96	@ 0x60
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	40005c00 	.word	0x40005c00
 800e1e8:	40021000 	.word	0x40021000

0800e1ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fe fd32 	bl	800cc6c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	460b      	mov	r3, r1
 800e21a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e222:	78fa      	ldrb	r2, [r7, #3]
 800e224:	6879      	ldr	r1, [r7, #4]
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	440b      	add	r3, r1
 800e230:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	78fb      	ldrb	r3, [r7, #3]
 800e238:	4619      	mov	r1, r3
 800e23a:	f7fe fd6c 	bl	800cd16 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	460b      	mov	r3, r1
 800e250:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e258:	78fa      	ldrb	r2, [r7, #3]
 800e25a:	6879      	ldr	r1, [r7, #4]
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	440b      	add	r3, r1
 800e266:	3324      	adds	r3, #36	@ 0x24
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	78fb      	ldrb	r3, [r7, #3]
 800e26c:	4619      	mov	r1, r3
 800e26e:	f7fe fdb5 	bl	800cddc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e272:	bf00      	nop
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fec9 	bl	800d020 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b084      	sub	sp, #16
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	795b      	ldrb	r3, [r3, #5]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d001      	beq.n	800e2ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2aa:	f7f2 fed7 	bl	800105c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2b4:	7bfa      	ldrb	r2, [r7, #15]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fe73 	bl	800cfa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe fe1f 	bl	800cf08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fe6e 	bl	800cfc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7a5b      	ldrb	r3, [r3, #9]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2f0:	4b04      	ldr	r3, [pc, #16]	@ (800e304 <HAL_PCD_SuspendCallback+0x30>)
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	4a03      	ldr	r2, [pc, #12]	@ (800e304 <HAL_PCD_SuspendCallback+0x30>)
 800e2f6:	f043 0306 	orr.w	r3, r3, #6
 800e2fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	e000ed00 	.word	0xe000ed00

0800e308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	7a5b      	ldrb	r3, [r3, #9]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d007      	beq.n	800e328 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e318:	4b08      	ldr	r3, [pc, #32]	@ (800e33c <HAL_PCD_ResumeCallback+0x34>)
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	4a07      	ldr	r2, [pc, #28]	@ (800e33c <HAL_PCD_ResumeCallback+0x34>)
 800e31e:	f023 0306 	bic.w	r3, r3, #6
 800e322:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e324:	f000 f9f8 	bl	800e718 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe fe5e 	bl	800cff0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	e000ed00 	.word	0xe000ed00

0800e340 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e348:	4a2b      	ldr	r2, [pc, #172]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a29      	ldr	r2, [pc, #164]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e354:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e358:	4b27      	ldr	r3, [pc, #156]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e35a:	4a28      	ldr	r2, [pc, #160]	@ (800e3fc <USBD_LL_Init+0xbc>)
 800e35c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e35e:	4b26      	ldr	r3, [pc, #152]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e360:	2208      	movs	r2, #8
 800e362:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e364:	4b24      	ldr	r3, [pc, #144]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e366:	2202      	movs	r2, #2
 800e368:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e36a:	4b23      	ldr	r3, [pc, #140]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e36c:	2202      	movs	r2, #2
 800e36e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e370:	4b21      	ldr	r3, [pc, #132]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e372:	2200      	movs	r2, #0
 800e374:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e376:	4b20      	ldr	r3, [pc, #128]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e378:	2200      	movs	r2, #0
 800e37a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e37c:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e37e:	2200      	movs	r2, #0
 800e380:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e382:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e384:	2200      	movs	r2, #0
 800e386:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e388:	481b      	ldr	r0, [pc, #108]	@ (800e3f8 <USBD_LL_Init+0xb8>)
 800e38a:	f7f6 f9c0 	bl	800470e <HAL_PCD_Init>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e394:	f7f2 fe62 	bl	800105c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e39e:	2318      	movs	r3, #24
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	f7f7 fe79 	bl	800609a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3ae:	2358      	movs	r3, #88	@ 0x58
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2180      	movs	r1, #128	@ 0x80
 800e3b4:	f7f7 fe71 	bl	800609a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3be:	23c0      	movs	r3, #192	@ 0xc0
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2181      	movs	r1, #129	@ 0x81
 800e3c4:	f7f7 fe69 	bl	800609a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	f7f7 fe60 	bl	800609a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e3e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	2182      	movs	r1, #130	@ 0x82
 800e3e8:	f7f7 fe57 	bl	800609a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20005f60 	.word	0x20005f60
 800e3fc:	40005c00 	.word	0x40005c00

0800e400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e416:	4618      	mov	r0, r3
 800e418:	f7f6 fa47 	bl	80048aa <HAL_PCD_Start>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	4618      	mov	r0, r3
 800e424:	f000 f97e 	bl	800e724 <USBD_Get_USB_Status>
 800e428:	4603      	mov	r3, r0
 800e42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b084      	sub	sp, #16
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	4608      	mov	r0, r1
 800e440:	4611      	mov	r1, r2
 800e442:	461a      	mov	r2, r3
 800e444:	4603      	mov	r3, r0
 800e446:	70fb      	strb	r3, [r7, #3]
 800e448:	460b      	mov	r3, r1
 800e44a:	70bb      	strb	r3, [r7, #2]
 800e44c:	4613      	mov	r3, r2
 800e44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e450:	2300      	movs	r3, #0
 800e452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e454:	2300      	movs	r3, #0
 800e456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e45e:	78bb      	ldrb	r3, [r7, #2]
 800e460:	883a      	ldrh	r2, [r7, #0]
 800e462:	78f9      	ldrb	r1, [r7, #3]
 800e464:	f7f6 fb8e 	bl	8004b84 <HAL_PCD_EP_Open>
 800e468:	4603      	mov	r3, r0
 800e46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	4618      	mov	r0, r3
 800e470:	f000 f958 	bl	800e724 <USBD_Get_USB_Status>
 800e474:	4603      	mov	r3, r0
 800e476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e478:	7bbb      	ldrb	r3, [r7, #14]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	460b      	mov	r3, r1
 800e48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e49c:	78fa      	ldrb	r2, [r7, #3]
 800e49e:	4611      	mov	r1, r2
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7f6 fbcc 	bl	8004c3e <HAL_PCD_EP_Close>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4aa:	7bfb      	ldrb	r3, [r7, #15]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 f939 	bl	800e724 <USBD_Get_USB_Status>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e4da:	78fa      	ldrb	r2, [r7, #3]
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7f6 fc75 	bl	8004dce <HAL_PCD_EP_SetStall>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f000 f91a 	bl	800e724 <USBD_Get_USB_Status>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	460b      	mov	r3, r1
 800e508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e518:	78fa      	ldrb	r2, [r7, #3]
 800e51a:	4611      	mov	r1, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f6 fca8 	bl	8004e72 <HAL_PCD_EP_ClrStall>
 800e522:	4603      	mov	r3, r0
 800e524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e526:	7bfb      	ldrb	r3, [r7, #15]
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 f8fb 	bl	800e724 <USBD_Get_USB_Status>
 800e52e:	4603      	mov	r3, r0
 800e530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e532:	7bbb      	ldrb	r3, [r7, #14]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b085      	sub	sp, #20
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e54e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e554:	2b00      	cmp	r3, #0
 800e556:	da0b      	bge.n	800e570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e558:	78fb      	ldrb	r3, [r7, #3]
 800e55a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e55e:	68f9      	ldr	r1, [r7, #12]
 800e560:	4613      	mov	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	00db      	lsls	r3, r3, #3
 800e568:	440b      	add	r3, r1
 800e56a:	3312      	adds	r3, #18
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	e00b      	b.n	800e588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e570:	78fb      	ldrb	r3, [r7, #3]
 800e572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e576:	68f9      	ldr	r1, [r7, #12]
 800e578:	4613      	mov	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	440b      	add	r3, r1
 800e582:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e586:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3714      	adds	r7, #20
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	460b      	mov	r3, r1
 800e59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e5ae:	78fa      	ldrb	r2, [r7, #3]
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7f6 fac2 	bl	8004b3c <HAL_PCD_SetAddress>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 f8b0 	bl	800e724 <USBD_Get_USB_Status>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b086      	sub	sp, #24
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	60f8      	str	r0, [r7, #12]
 800e5da:	607a      	str	r2, [r7, #4]
 800e5dc:	603b      	str	r3, [r7, #0]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e5f0:	7af9      	ldrb	r1, [r7, #11]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	f7f6 fbb3 	bl	8004d60 <HAL_PCD_EP_Transmit>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	4618      	mov	r0, r3
 800e602:	f000 f88f 	bl	800e724 <USBD_Get_USB_Status>
 800e606:	4603      	mov	r3, r0
 800e608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	607a      	str	r2, [r7, #4]
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	460b      	mov	r3, r1
 800e622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e624:	2300      	movs	r3, #0
 800e626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e628:	2300      	movs	r3, #0
 800e62a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e632:	7af9      	ldrb	r1, [r7, #11]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	f7f6 fb49 	bl	8004cce <HAL_PCD_EP_Receive>
 800e63c:	4603      	mov	r3, r0
 800e63e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	4618      	mov	r0, r3
 800e644:	f000 f86e 	bl	800e724 <USBD_Get_USB_Status>
 800e648:	4603      	mov	r3, r0
 800e64a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e64c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	460b      	mov	r3, r1
 800e660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e668:	78fa      	ldrb	r2, [r7, #3]
 800e66a:	4611      	mov	r1, r2
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f6 fb5f 	bl	8004d30 <HAL_PCD_EP_GetRxCount>
 800e672:	4603      	mov	r3, r0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	460b      	mov	r3, r1
 800e686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <HAL_PCDEx_LPM_Callback+0x18>
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d013      	beq.n	800e6ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e692:	e023      	b.n	800e6dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7a5b      	ldrb	r3, [r3, #9]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d007      	beq.n	800e6ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e69c:	f000 f83c 	bl	800e718 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6a0:	4b10      	ldr	r3, [pc, #64]	@ (800e6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	4a0f      	ldr	r2, [pc, #60]	@ (800e6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6a6:	f023 0306 	bic.w	r3, r3, #6
 800e6aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe fc9c 	bl	800cff0 <USBD_LL_Resume>
    break;
 800e6b8:	e010      	b.n	800e6dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fe fc7f 	bl	800cfc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	7a5b      	ldrb	r3, [r3, #9]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d005      	beq.n	800e6da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6ce:	4b05      	ldr	r3, [pc, #20]	@ (800e6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	4a04      	ldr	r2, [pc, #16]	@ (800e6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6d4:	f043 0306 	orr.w	r3, r3, #6
 800e6d8:	6113      	str	r3, [r2, #16]
    break;
 800e6da:	bf00      	nop
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	e000ed00 	.word	0xe000ed00

0800e6e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6f0:	4b03      	ldr	r3, [pc, #12]	@ (800e700 <USBD_static_malloc+0x18>)
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	2000623c 	.word	0x2000623c

0800e704 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]

}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e71c:	f7f1 feae 	bl	800047c <SystemClock_Config>
}
 800e720:	bf00      	nop
 800e722:	bd80      	pop	{r7, pc}

0800e724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d817      	bhi.n	800e768 <USBD_Get_USB_Status+0x44>
 800e738:	a201      	add	r2, pc, #4	@ (adr r2, 800e740 <USBD_Get_USB_Status+0x1c>)
 800e73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73e:	bf00      	nop
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e757 	.word	0x0800e757
 800e748:	0800e75d 	.word	0x0800e75d
 800e74c:	0800e763 	.word	0x0800e763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
    break;
 800e754:	e00b      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e756:	2303      	movs	r3, #3
 800e758:	73fb      	strb	r3, [r7, #15]
    break;
 800e75a:	e008      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e75c:	2301      	movs	r3, #1
 800e75e:	73fb      	strb	r3, [r7, #15]
    break;
 800e760:	e005      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e762:	2303      	movs	r3, #3
 800e764:	73fb      	strb	r3, [r7, #15]
    break;
 800e766:	e002      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	73fb      	strb	r3, [r7, #15]
    break;
 800e76c:	bf00      	nop
  }
  return usb_status;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3714      	adds	r7, #20
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <siprintf>:
 800e77c:	b40e      	push	{r1, r2, r3}
 800e77e:	b500      	push	{lr}
 800e780:	b09c      	sub	sp, #112	@ 0x70
 800e782:	ab1d      	add	r3, sp, #116	@ 0x74
 800e784:	9002      	str	r0, [sp, #8]
 800e786:	9006      	str	r0, [sp, #24]
 800e788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e78c:	4809      	ldr	r0, [pc, #36]	@ (800e7b4 <siprintf+0x38>)
 800e78e:	9107      	str	r1, [sp, #28]
 800e790:	9104      	str	r1, [sp, #16]
 800e792:	4909      	ldr	r1, [pc, #36]	@ (800e7b8 <siprintf+0x3c>)
 800e794:	f853 2b04 	ldr.w	r2, [r3], #4
 800e798:	9105      	str	r1, [sp, #20]
 800e79a:	6800      	ldr	r0, [r0, #0]
 800e79c:	9301      	str	r3, [sp, #4]
 800e79e:	a902      	add	r1, sp, #8
 800e7a0:	f000 f994 	bl	800eacc <_svfiprintf_r>
 800e7a4:	9b02      	ldr	r3, [sp, #8]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	b01c      	add	sp, #112	@ 0x70
 800e7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b0:	b003      	add	sp, #12
 800e7b2:	4770      	bx	lr
 800e7b4:	20000184 	.word	0x20000184
 800e7b8:	ffff0208 	.word	0xffff0208

0800e7bc <memset>:
 800e7bc:	4402      	add	r2, r0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d100      	bne.n	800e7c6 <memset+0xa>
 800e7c4:	4770      	bx	lr
 800e7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7ca:	e7f9      	b.n	800e7c0 <memset+0x4>

0800e7cc <__errno>:
 800e7cc:	4b01      	ldr	r3, [pc, #4]	@ (800e7d4 <__errno+0x8>)
 800e7ce:	6818      	ldr	r0, [r3, #0]
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000184 	.word	0x20000184

0800e7d8 <__libc_init_array>:
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	4d0d      	ldr	r5, [pc, #52]	@ (800e810 <__libc_init_array+0x38>)
 800e7dc:	4c0d      	ldr	r4, [pc, #52]	@ (800e814 <__libc_init_array+0x3c>)
 800e7de:	1b64      	subs	r4, r4, r5
 800e7e0:	10a4      	asrs	r4, r4, #2
 800e7e2:	2600      	movs	r6, #0
 800e7e4:	42a6      	cmp	r6, r4
 800e7e6:	d109      	bne.n	800e7fc <__libc_init_array+0x24>
 800e7e8:	4d0b      	ldr	r5, [pc, #44]	@ (800e818 <__libc_init_array+0x40>)
 800e7ea:	4c0c      	ldr	r4, [pc, #48]	@ (800e81c <__libc_init_array+0x44>)
 800e7ec:	f000 fc66 	bl	800f0bc <_init>
 800e7f0:	1b64      	subs	r4, r4, r5
 800e7f2:	10a4      	asrs	r4, r4, #2
 800e7f4:	2600      	movs	r6, #0
 800e7f6:	42a6      	cmp	r6, r4
 800e7f8:	d105      	bne.n	800e806 <__libc_init_array+0x2e>
 800e7fa:	bd70      	pop	{r4, r5, r6, pc}
 800e7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e800:	4798      	blx	r3
 800e802:	3601      	adds	r6, #1
 800e804:	e7ee      	b.n	800e7e4 <__libc_init_array+0xc>
 800e806:	f855 3b04 	ldr.w	r3, [r5], #4
 800e80a:	4798      	blx	r3
 800e80c:	3601      	adds	r6, #1
 800e80e:	e7f2      	b.n	800e7f6 <__libc_init_array+0x1e>
 800e810:	0800f180 	.word	0x0800f180
 800e814:	0800f180 	.word	0x0800f180
 800e818:	0800f180 	.word	0x0800f180
 800e81c:	0800f184 	.word	0x0800f184

0800e820 <__retarget_lock_acquire_recursive>:
 800e820:	4770      	bx	lr

0800e822 <__retarget_lock_release_recursive>:
 800e822:	4770      	bx	lr

0800e824 <_free_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4605      	mov	r5, r0
 800e828:	2900      	cmp	r1, #0
 800e82a:	d041      	beq.n	800e8b0 <_free_r+0x8c>
 800e82c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e830:	1f0c      	subs	r4, r1, #4
 800e832:	2b00      	cmp	r3, #0
 800e834:	bfb8      	it	lt
 800e836:	18e4      	addlt	r4, r4, r3
 800e838:	f000 f8e0 	bl	800e9fc <__malloc_lock>
 800e83c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b4 <_free_r+0x90>)
 800e83e:	6813      	ldr	r3, [r2, #0]
 800e840:	b933      	cbnz	r3, 800e850 <_free_r+0x2c>
 800e842:	6063      	str	r3, [r4, #4]
 800e844:	6014      	str	r4, [r2, #0]
 800e846:	4628      	mov	r0, r5
 800e848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e84c:	f000 b8dc 	b.w	800ea08 <__malloc_unlock>
 800e850:	42a3      	cmp	r3, r4
 800e852:	d908      	bls.n	800e866 <_free_r+0x42>
 800e854:	6820      	ldr	r0, [r4, #0]
 800e856:	1821      	adds	r1, r4, r0
 800e858:	428b      	cmp	r3, r1
 800e85a:	bf01      	itttt	eq
 800e85c:	6819      	ldreq	r1, [r3, #0]
 800e85e:	685b      	ldreq	r3, [r3, #4]
 800e860:	1809      	addeq	r1, r1, r0
 800e862:	6021      	streq	r1, [r4, #0]
 800e864:	e7ed      	b.n	800e842 <_free_r+0x1e>
 800e866:	461a      	mov	r2, r3
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	b10b      	cbz	r3, 800e870 <_free_r+0x4c>
 800e86c:	42a3      	cmp	r3, r4
 800e86e:	d9fa      	bls.n	800e866 <_free_r+0x42>
 800e870:	6811      	ldr	r1, [r2, #0]
 800e872:	1850      	adds	r0, r2, r1
 800e874:	42a0      	cmp	r0, r4
 800e876:	d10b      	bne.n	800e890 <_free_r+0x6c>
 800e878:	6820      	ldr	r0, [r4, #0]
 800e87a:	4401      	add	r1, r0
 800e87c:	1850      	adds	r0, r2, r1
 800e87e:	4283      	cmp	r3, r0
 800e880:	6011      	str	r1, [r2, #0]
 800e882:	d1e0      	bne.n	800e846 <_free_r+0x22>
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	6053      	str	r3, [r2, #4]
 800e88a:	4408      	add	r0, r1
 800e88c:	6010      	str	r0, [r2, #0]
 800e88e:	e7da      	b.n	800e846 <_free_r+0x22>
 800e890:	d902      	bls.n	800e898 <_free_r+0x74>
 800e892:	230c      	movs	r3, #12
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	e7d6      	b.n	800e846 <_free_r+0x22>
 800e898:	6820      	ldr	r0, [r4, #0]
 800e89a:	1821      	adds	r1, r4, r0
 800e89c:	428b      	cmp	r3, r1
 800e89e:	bf04      	itt	eq
 800e8a0:	6819      	ldreq	r1, [r3, #0]
 800e8a2:	685b      	ldreq	r3, [r3, #4]
 800e8a4:	6063      	str	r3, [r4, #4]
 800e8a6:	bf04      	itt	eq
 800e8a8:	1809      	addeq	r1, r1, r0
 800e8aa:	6021      	streq	r1, [r4, #0]
 800e8ac:	6054      	str	r4, [r2, #4]
 800e8ae:	e7ca      	b.n	800e846 <_free_r+0x22>
 800e8b0:	bd38      	pop	{r3, r4, r5, pc}
 800e8b2:	bf00      	nop
 800e8b4:	200065a0 	.word	0x200065a0

0800e8b8 <sbrk_aligned>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	4e0f      	ldr	r6, [pc, #60]	@ (800e8f8 <sbrk_aligned+0x40>)
 800e8bc:	460c      	mov	r4, r1
 800e8be:	6831      	ldr	r1, [r6, #0]
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	b911      	cbnz	r1, 800e8ca <sbrk_aligned+0x12>
 800e8c4:	f000 fba6 	bl	800f014 <_sbrk_r>
 800e8c8:	6030      	str	r0, [r6, #0]
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	f000 fba1 	bl	800f014 <_sbrk_r>
 800e8d2:	1c43      	adds	r3, r0, #1
 800e8d4:	d103      	bne.n	800e8de <sbrk_aligned+0x26>
 800e8d6:	f04f 34ff 	mov.w	r4, #4294967295
 800e8da:	4620      	mov	r0, r4
 800e8dc:	bd70      	pop	{r4, r5, r6, pc}
 800e8de:	1cc4      	adds	r4, r0, #3
 800e8e0:	f024 0403 	bic.w	r4, r4, #3
 800e8e4:	42a0      	cmp	r0, r4
 800e8e6:	d0f8      	beq.n	800e8da <sbrk_aligned+0x22>
 800e8e8:	1a21      	subs	r1, r4, r0
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f000 fb92 	bl	800f014 <_sbrk_r>
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d1f2      	bne.n	800e8da <sbrk_aligned+0x22>
 800e8f4:	e7ef      	b.n	800e8d6 <sbrk_aligned+0x1e>
 800e8f6:	bf00      	nop
 800e8f8:	2000659c 	.word	0x2000659c

0800e8fc <_malloc_r>:
 800e8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e900:	1ccd      	adds	r5, r1, #3
 800e902:	f025 0503 	bic.w	r5, r5, #3
 800e906:	3508      	adds	r5, #8
 800e908:	2d0c      	cmp	r5, #12
 800e90a:	bf38      	it	cc
 800e90c:	250c      	movcc	r5, #12
 800e90e:	2d00      	cmp	r5, #0
 800e910:	4606      	mov	r6, r0
 800e912:	db01      	blt.n	800e918 <_malloc_r+0x1c>
 800e914:	42a9      	cmp	r1, r5
 800e916:	d904      	bls.n	800e922 <_malloc_r+0x26>
 800e918:	230c      	movs	r3, #12
 800e91a:	6033      	str	r3, [r6, #0]
 800e91c:	2000      	movs	r0, #0
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9f8 <_malloc_r+0xfc>
 800e926:	f000 f869 	bl	800e9fc <__malloc_lock>
 800e92a:	f8d8 3000 	ldr.w	r3, [r8]
 800e92e:	461c      	mov	r4, r3
 800e930:	bb44      	cbnz	r4, 800e984 <_malloc_r+0x88>
 800e932:	4629      	mov	r1, r5
 800e934:	4630      	mov	r0, r6
 800e936:	f7ff ffbf 	bl	800e8b8 <sbrk_aligned>
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	4604      	mov	r4, r0
 800e93e:	d158      	bne.n	800e9f2 <_malloc_r+0xf6>
 800e940:	f8d8 4000 	ldr.w	r4, [r8]
 800e944:	4627      	mov	r7, r4
 800e946:	2f00      	cmp	r7, #0
 800e948:	d143      	bne.n	800e9d2 <_malloc_r+0xd6>
 800e94a:	2c00      	cmp	r4, #0
 800e94c:	d04b      	beq.n	800e9e6 <_malloc_r+0xea>
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	4639      	mov	r1, r7
 800e952:	4630      	mov	r0, r6
 800e954:	eb04 0903 	add.w	r9, r4, r3
 800e958:	f000 fb5c 	bl	800f014 <_sbrk_r>
 800e95c:	4581      	cmp	r9, r0
 800e95e:	d142      	bne.n	800e9e6 <_malloc_r+0xea>
 800e960:	6821      	ldr	r1, [r4, #0]
 800e962:	1a6d      	subs	r5, r5, r1
 800e964:	4629      	mov	r1, r5
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ffa6 	bl	800e8b8 <sbrk_aligned>
 800e96c:	3001      	adds	r0, #1
 800e96e:	d03a      	beq.n	800e9e6 <_malloc_r+0xea>
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	442b      	add	r3, r5
 800e974:	6023      	str	r3, [r4, #0]
 800e976:	f8d8 3000 	ldr.w	r3, [r8]
 800e97a:	685a      	ldr	r2, [r3, #4]
 800e97c:	bb62      	cbnz	r2, 800e9d8 <_malloc_r+0xdc>
 800e97e:	f8c8 7000 	str.w	r7, [r8]
 800e982:	e00f      	b.n	800e9a4 <_malloc_r+0xa8>
 800e984:	6822      	ldr	r2, [r4, #0]
 800e986:	1b52      	subs	r2, r2, r5
 800e988:	d420      	bmi.n	800e9cc <_malloc_r+0xd0>
 800e98a:	2a0b      	cmp	r2, #11
 800e98c:	d917      	bls.n	800e9be <_malloc_r+0xc2>
 800e98e:	1961      	adds	r1, r4, r5
 800e990:	42a3      	cmp	r3, r4
 800e992:	6025      	str	r5, [r4, #0]
 800e994:	bf18      	it	ne
 800e996:	6059      	strne	r1, [r3, #4]
 800e998:	6863      	ldr	r3, [r4, #4]
 800e99a:	bf08      	it	eq
 800e99c:	f8c8 1000 	streq.w	r1, [r8]
 800e9a0:	5162      	str	r2, [r4, r5]
 800e9a2:	604b      	str	r3, [r1, #4]
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f000 f82f 	bl	800ea08 <__malloc_unlock>
 800e9aa:	f104 000b 	add.w	r0, r4, #11
 800e9ae:	1d23      	adds	r3, r4, #4
 800e9b0:	f020 0007 	bic.w	r0, r0, #7
 800e9b4:	1ac2      	subs	r2, r0, r3
 800e9b6:	bf1c      	itt	ne
 800e9b8:	1a1b      	subne	r3, r3, r0
 800e9ba:	50a3      	strne	r3, [r4, r2]
 800e9bc:	e7af      	b.n	800e91e <_malloc_r+0x22>
 800e9be:	6862      	ldr	r2, [r4, #4]
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	bf0c      	ite	eq
 800e9c4:	f8c8 2000 	streq.w	r2, [r8]
 800e9c8:	605a      	strne	r2, [r3, #4]
 800e9ca:	e7eb      	b.n	800e9a4 <_malloc_r+0xa8>
 800e9cc:	4623      	mov	r3, r4
 800e9ce:	6864      	ldr	r4, [r4, #4]
 800e9d0:	e7ae      	b.n	800e930 <_malloc_r+0x34>
 800e9d2:	463c      	mov	r4, r7
 800e9d4:	687f      	ldr	r7, [r7, #4]
 800e9d6:	e7b6      	b.n	800e946 <_malloc_r+0x4a>
 800e9d8:	461a      	mov	r2, r3
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	42a3      	cmp	r3, r4
 800e9de:	d1fb      	bne.n	800e9d8 <_malloc_r+0xdc>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	6053      	str	r3, [r2, #4]
 800e9e4:	e7de      	b.n	800e9a4 <_malloc_r+0xa8>
 800e9e6:	230c      	movs	r3, #12
 800e9e8:	6033      	str	r3, [r6, #0]
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f000 f80c 	bl	800ea08 <__malloc_unlock>
 800e9f0:	e794      	b.n	800e91c <_malloc_r+0x20>
 800e9f2:	6005      	str	r5, [r0, #0]
 800e9f4:	e7d6      	b.n	800e9a4 <_malloc_r+0xa8>
 800e9f6:	bf00      	nop
 800e9f8:	200065a0 	.word	0x200065a0

0800e9fc <__malloc_lock>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	@ (800ea04 <__malloc_lock+0x8>)
 800e9fe:	f7ff bf0f 	b.w	800e820 <__retarget_lock_acquire_recursive>
 800ea02:	bf00      	nop
 800ea04:	20006598 	.word	0x20006598

0800ea08 <__malloc_unlock>:
 800ea08:	4801      	ldr	r0, [pc, #4]	@ (800ea10 <__malloc_unlock+0x8>)
 800ea0a:	f7ff bf0a 	b.w	800e822 <__retarget_lock_release_recursive>
 800ea0e:	bf00      	nop
 800ea10:	20006598 	.word	0x20006598

0800ea14 <__ssputs_r>:
 800ea14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea18:	688e      	ldr	r6, [r1, #8]
 800ea1a:	461f      	mov	r7, r3
 800ea1c:	42be      	cmp	r6, r7
 800ea1e:	680b      	ldr	r3, [r1, #0]
 800ea20:	4682      	mov	sl, r0
 800ea22:	460c      	mov	r4, r1
 800ea24:	4690      	mov	r8, r2
 800ea26:	d82d      	bhi.n	800ea84 <__ssputs_r+0x70>
 800ea28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea30:	d026      	beq.n	800ea80 <__ssputs_r+0x6c>
 800ea32:	6965      	ldr	r5, [r4, #20]
 800ea34:	6909      	ldr	r1, [r1, #16]
 800ea36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea3a:	eba3 0901 	sub.w	r9, r3, r1
 800ea3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea42:	1c7b      	adds	r3, r7, #1
 800ea44:	444b      	add	r3, r9
 800ea46:	106d      	asrs	r5, r5, #1
 800ea48:	429d      	cmp	r5, r3
 800ea4a:	bf38      	it	cc
 800ea4c:	461d      	movcc	r5, r3
 800ea4e:	0553      	lsls	r3, r2, #21
 800ea50:	d527      	bpl.n	800eaa2 <__ssputs_r+0x8e>
 800ea52:	4629      	mov	r1, r5
 800ea54:	f7ff ff52 	bl	800e8fc <_malloc_r>
 800ea58:	4606      	mov	r6, r0
 800ea5a:	b360      	cbz	r0, 800eab6 <__ssputs_r+0xa2>
 800ea5c:	6921      	ldr	r1, [r4, #16]
 800ea5e:	464a      	mov	r2, r9
 800ea60:	f000 fae8 	bl	800f034 <memcpy>
 800ea64:	89a3      	ldrh	r3, [r4, #12]
 800ea66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea6e:	81a3      	strh	r3, [r4, #12]
 800ea70:	6126      	str	r6, [r4, #16]
 800ea72:	6165      	str	r5, [r4, #20]
 800ea74:	444e      	add	r6, r9
 800ea76:	eba5 0509 	sub.w	r5, r5, r9
 800ea7a:	6026      	str	r6, [r4, #0]
 800ea7c:	60a5      	str	r5, [r4, #8]
 800ea7e:	463e      	mov	r6, r7
 800ea80:	42be      	cmp	r6, r7
 800ea82:	d900      	bls.n	800ea86 <__ssputs_r+0x72>
 800ea84:	463e      	mov	r6, r7
 800ea86:	6820      	ldr	r0, [r4, #0]
 800ea88:	4632      	mov	r2, r6
 800ea8a:	4641      	mov	r1, r8
 800ea8c:	f000 faa8 	bl	800efe0 <memmove>
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	1b9b      	subs	r3, r3, r6
 800ea94:	60a3      	str	r3, [r4, #8]
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	4433      	add	r3, r6
 800ea9a:	6023      	str	r3, [r4, #0]
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa2:	462a      	mov	r2, r5
 800eaa4:	f000 fad4 	bl	800f050 <_realloc_r>
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	d1e0      	bne.n	800ea70 <__ssputs_r+0x5c>
 800eaae:	6921      	ldr	r1, [r4, #16]
 800eab0:	4650      	mov	r0, sl
 800eab2:	f7ff feb7 	bl	800e824 <_free_r>
 800eab6:	230c      	movs	r3, #12
 800eab8:	f8ca 3000 	str.w	r3, [sl]
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eac2:	81a3      	strh	r3, [r4, #12]
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295
 800eac8:	e7e9      	b.n	800ea9e <__ssputs_r+0x8a>
	...

0800eacc <_svfiprintf_r>:
 800eacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead0:	4698      	mov	r8, r3
 800ead2:	898b      	ldrh	r3, [r1, #12]
 800ead4:	061b      	lsls	r3, r3, #24
 800ead6:	b09d      	sub	sp, #116	@ 0x74
 800ead8:	4607      	mov	r7, r0
 800eada:	460d      	mov	r5, r1
 800eadc:	4614      	mov	r4, r2
 800eade:	d510      	bpl.n	800eb02 <_svfiprintf_r+0x36>
 800eae0:	690b      	ldr	r3, [r1, #16]
 800eae2:	b973      	cbnz	r3, 800eb02 <_svfiprintf_r+0x36>
 800eae4:	2140      	movs	r1, #64	@ 0x40
 800eae6:	f7ff ff09 	bl	800e8fc <_malloc_r>
 800eaea:	6028      	str	r0, [r5, #0]
 800eaec:	6128      	str	r0, [r5, #16]
 800eaee:	b930      	cbnz	r0, 800eafe <_svfiprintf_r+0x32>
 800eaf0:	230c      	movs	r3, #12
 800eaf2:	603b      	str	r3, [r7, #0]
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	b01d      	add	sp, #116	@ 0x74
 800eafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafe:	2340      	movs	r3, #64	@ 0x40
 800eb00:	616b      	str	r3, [r5, #20]
 800eb02:	2300      	movs	r3, #0
 800eb04:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb06:	2320      	movs	r3, #32
 800eb08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb10:	2330      	movs	r3, #48	@ 0x30
 800eb12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ecb0 <_svfiprintf_r+0x1e4>
 800eb16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb1a:	f04f 0901 	mov.w	r9, #1
 800eb1e:	4623      	mov	r3, r4
 800eb20:	469a      	mov	sl, r3
 800eb22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb26:	b10a      	cbz	r2, 800eb2c <_svfiprintf_r+0x60>
 800eb28:	2a25      	cmp	r2, #37	@ 0x25
 800eb2a:	d1f9      	bne.n	800eb20 <_svfiprintf_r+0x54>
 800eb2c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb30:	d00b      	beq.n	800eb4a <_svfiprintf_r+0x7e>
 800eb32:	465b      	mov	r3, fp
 800eb34:	4622      	mov	r2, r4
 800eb36:	4629      	mov	r1, r5
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f7ff ff6b 	bl	800ea14 <__ssputs_r>
 800eb3e:	3001      	adds	r0, #1
 800eb40:	f000 80a7 	beq.w	800ec92 <_svfiprintf_r+0x1c6>
 800eb44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb46:	445a      	add	r2, fp
 800eb48:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 809f 	beq.w	800ec92 <_svfiprintf_r+0x1c6>
 800eb54:	2300      	movs	r3, #0
 800eb56:	f04f 32ff 	mov.w	r2, #4294967295
 800eb5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb5e:	f10a 0a01 	add.w	sl, sl, #1
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	9307      	str	r3, [sp, #28]
 800eb66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb6c:	4654      	mov	r4, sl
 800eb6e:	2205      	movs	r2, #5
 800eb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb74:	484e      	ldr	r0, [pc, #312]	@ (800ecb0 <_svfiprintf_r+0x1e4>)
 800eb76:	f7f1 fb53 	bl	8000220 <memchr>
 800eb7a:	9a04      	ldr	r2, [sp, #16]
 800eb7c:	b9d8      	cbnz	r0, 800ebb6 <_svfiprintf_r+0xea>
 800eb7e:	06d0      	lsls	r0, r2, #27
 800eb80:	bf44      	itt	mi
 800eb82:	2320      	movmi	r3, #32
 800eb84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb88:	0711      	lsls	r1, r2, #28
 800eb8a:	bf44      	itt	mi
 800eb8c:	232b      	movmi	r3, #43	@ 0x2b
 800eb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb92:	f89a 3000 	ldrb.w	r3, [sl]
 800eb96:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb98:	d015      	beq.n	800ebc6 <_svfiprintf_r+0xfa>
 800eb9a:	9a07      	ldr	r2, [sp, #28]
 800eb9c:	4654      	mov	r4, sl
 800eb9e:	2000      	movs	r0, #0
 800eba0:	f04f 0c0a 	mov.w	ip, #10
 800eba4:	4621      	mov	r1, r4
 800eba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebaa:	3b30      	subs	r3, #48	@ 0x30
 800ebac:	2b09      	cmp	r3, #9
 800ebae:	d94b      	bls.n	800ec48 <_svfiprintf_r+0x17c>
 800ebb0:	b1b0      	cbz	r0, 800ebe0 <_svfiprintf_r+0x114>
 800ebb2:	9207      	str	r2, [sp, #28]
 800ebb4:	e014      	b.n	800ebe0 <_svfiprintf_r+0x114>
 800ebb6:	eba0 0308 	sub.w	r3, r0, r8
 800ebba:	fa09 f303 	lsl.w	r3, r9, r3
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	9304      	str	r3, [sp, #16]
 800ebc2:	46a2      	mov	sl, r4
 800ebc4:	e7d2      	b.n	800eb6c <_svfiprintf_r+0xa0>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	1d19      	adds	r1, r3, #4
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	9103      	str	r1, [sp, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	bfbb      	ittet	lt
 800ebd2:	425b      	neglt	r3, r3
 800ebd4:	f042 0202 	orrlt.w	r2, r2, #2
 800ebd8:	9307      	strge	r3, [sp, #28]
 800ebda:	9307      	strlt	r3, [sp, #28]
 800ebdc:	bfb8      	it	lt
 800ebde:	9204      	strlt	r2, [sp, #16]
 800ebe0:	7823      	ldrb	r3, [r4, #0]
 800ebe2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebe4:	d10a      	bne.n	800ebfc <_svfiprintf_r+0x130>
 800ebe6:	7863      	ldrb	r3, [r4, #1]
 800ebe8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebea:	d132      	bne.n	800ec52 <_svfiprintf_r+0x186>
 800ebec:	9b03      	ldr	r3, [sp, #12]
 800ebee:	1d1a      	adds	r2, r3, #4
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	9203      	str	r2, [sp, #12]
 800ebf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebf8:	3402      	adds	r4, #2
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ecc0 <_svfiprintf_r+0x1f4>
 800ec00:	7821      	ldrb	r1, [r4, #0]
 800ec02:	2203      	movs	r2, #3
 800ec04:	4650      	mov	r0, sl
 800ec06:	f7f1 fb0b 	bl	8000220 <memchr>
 800ec0a:	b138      	cbz	r0, 800ec1c <_svfiprintf_r+0x150>
 800ec0c:	9b04      	ldr	r3, [sp, #16]
 800ec0e:	eba0 000a 	sub.w	r0, r0, sl
 800ec12:	2240      	movs	r2, #64	@ 0x40
 800ec14:	4082      	lsls	r2, r0
 800ec16:	4313      	orrs	r3, r2
 800ec18:	3401      	adds	r4, #1
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec20:	4824      	ldr	r0, [pc, #144]	@ (800ecb4 <_svfiprintf_r+0x1e8>)
 800ec22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec26:	2206      	movs	r2, #6
 800ec28:	f7f1 fafa 	bl	8000220 <memchr>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d036      	beq.n	800ec9e <_svfiprintf_r+0x1d2>
 800ec30:	4b21      	ldr	r3, [pc, #132]	@ (800ecb8 <_svfiprintf_r+0x1ec>)
 800ec32:	bb1b      	cbnz	r3, 800ec7c <_svfiprintf_r+0x1b0>
 800ec34:	9b03      	ldr	r3, [sp, #12]
 800ec36:	3307      	adds	r3, #7
 800ec38:	f023 0307 	bic.w	r3, r3, #7
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	9303      	str	r3, [sp, #12]
 800ec40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec42:	4433      	add	r3, r6
 800ec44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec46:	e76a      	b.n	800eb1e <_svfiprintf_r+0x52>
 800ec48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	2001      	movs	r0, #1
 800ec50:	e7a8      	b.n	800eba4 <_svfiprintf_r+0xd8>
 800ec52:	2300      	movs	r3, #0
 800ec54:	3401      	adds	r4, #1
 800ec56:	9305      	str	r3, [sp, #20]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f04f 0c0a 	mov.w	ip, #10
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec64:	3a30      	subs	r2, #48	@ 0x30
 800ec66:	2a09      	cmp	r2, #9
 800ec68:	d903      	bls.n	800ec72 <_svfiprintf_r+0x1a6>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0c6      	beq.n	800ebfc <_svfiprintf_r+0x130>
 800ec6e:	9105      	str	r1, [sp, #20]
 800ec70:	e7c4      	b.n	800ebfc <_svfiprintf_r+0x130>
 800ec72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec76:	4604      	mov	r4, r0
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e7f0      	b.n	800ec5e <_svfiprintf_r+0x192>
 800ec7c:	ab03      	add	r3, sp, #12
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	462a      	mov	r2, r5
 800ec82:	4b0e      	ldr	r3, [pc, #56]	@ (800ecbc <_svfiprintf_r+0x1f0>)
 800ec84:	a904      	add	r1, sp, #16
 800ec86:	4638      	mov	r0, r7
 800ec88:	f3af 8000 	nop.w
 800ec8c:	1c42      	adds	r2, r0, #1
 800ec8e:	4606      	mov	r6, r0
 800ec90:	d1d6      	bne.n	800ec40 <_svfiprintf_r+0x174>
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	065b      	lsls	r3, r3, #25
 800ec96:	f53f af2d 	bmi.w	800eaf4 <_svfiprintf_r+0x28>
 800ec9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec9c:	e72c      	b.n	800eaf8 <_svfiprintf_r+0x2c>
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	462a      	mov	r2, r5
 800eca4:	4b05      	ldr	r3, [pc, #20]	@ (800ecbc <_svfiprintf_r+0x1f0>)
 800eca6:	a904      	add	r1, sp, #16
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f000 f879 	bl	800eda0 <_printf_i>
 800ecae:	e7ed      	b.n	800ec8c <_svfiprintf_r+0x1c0>
 800ecb0:	0800f144 	.word	0x0800f144
 800ecb4:	0800f14e 	.word	0x0800f14e
 800ecb8:	00000000 	.word	0x00000000
 800ecbc:	0800ea15 	.word	0x0800ea15
 800ecc0:	0800f14a 	.word	0x0800f14a

0800ecc4 <_printf_common>:
 800ecc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc8:	4616      	mov	r6, r2
 800ecca:	4698      	mov	r8, r3
 800eccc:	688a      	ldr	r2, [r1, #8]
 800ecce:	690b      	ldr	r3, [r1, #16]
 800ecd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	bfb8      	it	lt
 800ecd8:	4613      	movlt	r3, r2
 800ecda:	6033      	str	r3, [r6, #0]
 800ecdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ece0:	4607      	mov	r7, r0
 800ece2:	460c      	mov	r4, r1
 800ece4:	b10a      	cbz	r2, 800ecea <_printf_common+0x26>
 800ece6:	3301      	adds	r3, #1
 800ece8:	6033      	str	r3, [r6, #0]
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	0699      	lsls	r1, r3, #26
 800ecee:	bf42      	ittt	mi
 800ecf0:	6833      	ldrmi	r3, [r6, #0]
 800ecf2:	3302      	addmi	r3, #2
 800ecf4:	6033      	strmi	r3, [r6, #0]
 800ecf6:	6825      	ldr	r5, [r4, #0]
 800ecf8:	f015 0506 	ands.w	r5, r5, #6
 800ecfc:	d106      	bne.n	800ed0c <_printf_common+0x48>
 800ecfe:	f104 0a19 	add.w	sl, r4, #25
 800ed02:	68e3      	ldr	r3, [r4, #12]
 800ed04:	6832      	ldr	r2, [r6, #0]
 800ed06:	1a9b      	subs	r3, r3, r2
 800ed08:	42ab      	cmp	r3, r5
 800ed0a:	dc26      	bgt.n	800ed5a <_printf_common+0x96>
 800ed0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed10:	6822      	ldr	r2, [r4, #0]
 800ed12:	3b00      	subs	r3, #0
 800ed14:	bf18      	it	ne
 800ed16:	2301      	movne	r3, #1
 800ed18:	0692      	lsls	r2, r2, #26
 800ed1a:	d42b      	bmi.n	800ed74 <_printf_common+0xb0>
 800ed1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed20:	4641      	mov	r1, r8
 800ed22:	4638      	mov	r0, r7
 800ed24:	47c8      	blx	r9
 800ed26:	3001      	adds	r0, #1
 800ed28:	d01e      	beq.n	800ed68 <_printf_common+0xa4>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	6922      	ldr	r2, [r4, #16]
 800ed2e:	f003 0306 	and.w	r3, r3, #6
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	bf02      	ittt	eq
 800ed36:	68e5      	ldreq	r5, [r4, #12]
 800ed38:	6833      	ldreq	r3, [r6, #0]
 800ed3a:	1aed      	subeq	r5, r5, r3
 800ed3c:	68a3      	ldr	r3, [r4, #8]
 800ed3e:	bf0c      	ite	eq
 800ed40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed44:	2500      	movne	r5, #0
 800ed46:	4293      	cmp	r3, r2
 800ed48:	bfc4      	itt	gt
 800ed4a:	1a9b      	subgt	r3, r3, r2
 800ed4c:	18ed      	addgt	r5, r5, r3
 800ed4e:	2600      	movs	r6, #0
 800ed50:	341a      	adds	r4, #26
 800ed52:	42b5      	cmp	r5, r6
 800ed54:	d11a      	bne.n	800ed8c <_printf_common+0xc8>
 800ed56:	2000      	movs	r0, #0
 800ed58:	e008      	b.n	800ed6c <_printf_common+0xa8>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	4652      	mov	r2, sl
 800ed5e:	4641      	mov	r1, r8
 800ed60:	4638      	mov	r0, r7
 800ed62:	47c8      	blx	r9
 800ed64:	3001      	adds	r0, #1
 800ed66:	d103      	bne.n	800ed70 <_printf_common+0xac>
 800ed68:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed70:	3501      	adds	r5, #1
 800ed72:	e7c6      	b.n	800ed02 <_printf_common+0x3e>
 800ed74:	18e1      	adds	r1, r4, r3
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	2030      	movs	r0, #48	@ 0x30
 800ed7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed7e:	4422      	add	r2, r4
 800ed80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed88:	3302      	adds	r3, #2
 800ed8a:	e7c7      	b.n	800ed1c <_printf_common+0x58>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	4622      	mov	r2, r4
 800ed90:	4641      	mov	r1, r8
 800ed92:	4638      	mov	r0, r7
 800ed94:	47c8      	blx	r9
 800ed96:	3001      	adds	r0, #1
 800ed98:	d0e6      	beq.n	800ed68 <_printf_common+0xa4>
 800ed9a:	3601      	adds	r6, #1
 800ed9c:	e7d9      	b.n	800ed52 <_printf_common+0x8e>
	...

0800eda0 <_printf_i>:
 800eda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eda4:	7e0f      	ldrb	r7, [r1, #24]
 800eda6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eda8:	2f78      	cmp	r7, #120	@ 0x78
 800edaa:	4691      	mov	r9, r2
 800edac:	4680      	mov	r8, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	469a      	mov	sl, r3
 800edb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edb6:	d807      	bhi.n	800edc8 <_printf_i+0x28>
 800edb8:	2f62      	cmp	r7, #98	@ 0x62
 800edba:	d80a      	bhi.n	800edd2 <_printf_i+0x32>
 800edbc:	2f00      	cmp	r7, #0
 800edbe:	f000 80d2 	beq.w	800ef66 <_printf_i+0x1c6>
 800edc2:	2f58      	cmp	r7, #88	@ 0x58
 800edc4:	f000 80b9 	beq.w	800ef3a <_printf_i+0x19a>
 800edc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800edd0:	e03a      	b.n	800ee48 <_printf_i+0xa8>
 800edd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edd6:	2b15      	cmp	r3, #21
 800edd8:	d8f6      	bhi.n	800edc8 <_printf_i+0x28>
 800edda:	a101      	add	r1, pc, #4	@ (adr r1, 800ede0 <_printf_i+0x40>)
 800eddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ede0:	0800ee39 	.word	0x0800ee39
 800ede4:	0800ee4d 	.word	0x0800ee4d
 800ede8:	0800edc9 	.word	0x0800edc9
 800edec:	0800edc9 	.word	0x0800edc9
 800edf0:	0800edc9 	.word	0x0800edc9
 800edf4:	0800edc9 	.word	0x0800edc9
 800edf8:	0800ee4d 	.word	0x0800ee4d
 800edfc:	0800edc9 	.word	0x0800edc9
 800ee00:	0800edc9 	.word	0x0800edc9
 800ee04:	0800edc9 	.word	0x0800edc9
 800ee08:	0800edc9 	.word	0x0800edc9
 800ee0c:	0800ef4d 	.word	0x0800ef4d
 800ee10:	0800ee77 	.word	0x0800ee77
 800ee14:	0800ef07 	.word	0x0800ef07
 800ee18:	0800edc9 	.word	0x0800edc9
 800ee1c:	0800edc9 	.word	0x0800edc9
 800ee20:	0800ef6f 	.word	0x0800ef6f
 800ee24:	0800edc9 	.word	0x0800edc9
 800ee28:	0800ee77 	.word	0x0800ee77
 800ee2c:	0800edc9 	.word	0x0800edc9
 800ee30:	0800edc9 	.word	0x0800edc9
 800ee34:	0800ef0f 	.word	0x0800ef0f
 800ee38:	6833      	ldr	r3, [r6, #0]
 800ee3a:	1d1a      	adds	r2, r3, #4
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6032      	str	r2, [r6, #0]
 800ee40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e09d      	b.n	800ef88 <_printf_i+0x1e8>
 800ee4c:	6833      	ldr	r3, [r6, #0]
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	1d19      	adds	r1, r3, #4
 800ee52:	6031      	str	r1, [r6, #0]
 800ee54:	0606      	lsls	r6, r0, #24
 800ee56:	d501      	bpl.n	800ee5c <_printf_i+0xbc>
 800ee58:	681d      	ldr	r5, [r3, #0]
 800ee5a:	e003      	b.n	800ee64 <_printf_i+0xc4>
 800ee5c:	0645      	lsls	r5, r0, #25
 800ee5e:	d5fb      	bpl.n	800ee58 <_printf_i+0xb8>
 800ee60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee64:	2d00      	cmp	r5, #0
 800ee66:	da03      	bge.n	800ee70 <_printf_i+0xd0>
 800ee68:	232d      	movs	r3, #45	@ 0x2d
 800ee6a:	426d      	negs	r5, r5
 800ee6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee70:	4859      	ldr	r0, [pc, #356]	@ (800efd8 <_printf_i+0x238>)
 800ee72:	230a      	movs	r3, #10
 800ee74:	e011      	b.n	800ee9a <_printf_i+0xfa>
 800ee76:	6821      	ldr	r1, [r4, #0]
 800ee78:	6833      	ldr	r3, [r6, #0]
 800ee7a:	0608      	lsls	r0, r1, #24
 800ee7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee80:	d402      	bmi.n	800ee88 <_printf_i+0xe8>
 800ee82:	0649      	lsls	r1, r1, #25
 800ee84:	bf48      	it	mi
 800ee86:	b2ad      	uxthmi	r5, r5
 800ee88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee8a:	4853      	ldr	r0, [pc, #332]	@ (800efd8 <_printf_i+0x238>)
 800ee8c:	6033      	str	r3, [r6, #0]
 800ee8e:	bf14      	ite	ne
 800ee90:	230a      	movne	r3, #10
 800ee92:	2308      	moveq	r3, #8
 800ee94:	2100      	movs	r1, #0
 800ee96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee9a:	6866      	ldr	r6, [r4, #4]
 800ee9c:	60a6      	str	r6, [r4, #8]
 800ee9e:	2e00      	cmp	r6, #0
 800eea0:	bfa2      	ittt	ge
 800eea2:	6821      	ldrge	r1, [r4, #0]
 800eea4:	f021 0104 	bicge.w	r1, r1, #4
 800eea8:	6021      	strge	r1, [r4, #0]
 800eeaa:	b90d      	cbnz	r5, 800eeb0 <_printf_i+0x110>
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	d04b      	beq.n	800ef48 <_printf_i+0x1a8>
 800eeb0:	4616      	mov	r6, r2
 800eeb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eeb6:	fb03 5711 	mls	r7, r3, r1, r5
 800eeba:	5dc7      	ldrb	r7, [r0, r7]
 800eebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eec0:	462f      	mov	r7, r5
 800eec2:	42bb      	cmp	r3, r7
 800eec4:	460d      	mov	r5, r1
 800eec6:	d9f4      	bls.n	800eeb2 <_printf_i+0x112>
 800eec8:	2b08      	cmp	r3, #8
 800eeca:	d10b      	bne.n	800eee4 <_printf_i+0x144>
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	07df      	lsls	r7, r3, #31
 800eed0:	d508      	bpl.n	800eee4 <_printf_i+0x144>
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	6861      	ldr	r1, [r4, #4]
 800eed6:	4299      	cmp	r1, r3
 800eed8:	bfde      	ittt	le
 800eeda:	2330      	movle	r3, #48	@ 0x30
 800eedc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eee4:	1b92      	subs	r2, r2, r6
 800eee6:	6122      	str	r2, [r4, #16]
 800eee8:	f8cd a000 	str.w	sl, [sp]
 800eeec:	464b      	mov	r3, r9
 800eeee:	aa03      	add	r2, sp, #12
 800eef0:	4621      	mov	r1, r4
 800eef2:	4640      	mov	r0, r8
 800eef4:	f7ff fee6 	bl	800ecc4 <_printf_common>
 800eef8:	3001      	adds	r0, #1
 800eefa:	d14a      	bne.n	800ef92 <_printf_i+0x1f2>
 800eefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ef00:	b004      	add	sp, #16
 800ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	f043 0320 	orr.w	r3, r3, #32
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	4833      	ldr	r0, [pc, #204]	@ (800efdc <_printf_i+0x23c>)
 800ef10:	2778      	movs	r7, #120	@ 0x78
 800ef12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	6831      	ldr	r1, [r6, #0]
 800ef1a:	061f      	lsls	r7, r3, #24
 800ef1c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef20:	d402      	bmi.n	800ef28 <_printf_i+0x188>
 800ef22:	065f      	lsls	r7, r3, #25
 800ef24:	bf48      	it	mi
 800ef26:	b2ad      	uxthmi	r5, r5
 800ef28:	6031      	str	r1, [r6, #0]
 800ef2a:	07d9      	lsls	r1, r3, #31
 800ef2c:	bf44      	itt	mi
 800ef2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef32:	6023      	strmi	r3, [r4, #0]
 800ef34:	b11d      	cbz	r5, 800ef3e <_printf_i+0x19e>
 800ef36:	2310      	movs	r3, #16
 800ef38:	e7ac      	b.n	800ee94 <_printf_i+0xf4>
 800ef3a:	4827      	ldr	r0, [pc, #156]	@ (800efd8 <_printf_i+0x238>)
 800ef3c:	e7e9      	b.n	800ef12 <_printf_i+0x172>
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	f023 0320 	bic.w	r3, r3, #32
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	e7f6      	b.n	800ef36 <_printf_i+0x196>
 800ef48:	4616      	mov	r6, r2
 800ef4a:	e7bd      	b.n	800eec8 <_printf_i+0x128>
 800ef4c:	6833      	ldr	r3, [r6, #0]
 800ef4e:	6825      	ldr	r5, [r4, #0]
 800ef50:	6961      	ldr	r1, [r4, #20]
 800ef52:	1d18      	adds	r0, r3, #4
 800ef54:	6030      	str	r0, [r6, #0]
 800ef56:	062e      	lsls	r6, r5, #24
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	d501      	bpl.n	800ef60 <_printf_i+0x1c0>
 800ef5c:	6019      	str	r1, [r3, #0]
 800ef5e:	e002      	b.n	800ef66 <_printf_i+0x1c6>
 800ef60:	0668      	lsls	r0, r5, #25
 800ef62:	d5fb      	bpl.n	800ef5c <_printf_i+0x1bc>
 800ef64:	8019      	strh	r1, [r3, #0]
 800ef66:	2300      	movs	r3, #0
 800ef68:	6123      	str	r3, [r4, #16]
 800ef6a:	4616      	mov	r6, r2
 800ef6c:	e7bc      	b.n	800eee8 <_printf_i+0x148>
 800ef6e:	6833      	ldr	r3, [r6, #0]
 800ef70:	1d1a      	adds	r2, r3, #4
 800ef72:	6032      	str	r2, [r6, #0]
 800ef74:	681e      	ldr	r6, [r3, #0]
 800ef76:	6862      	ldr	r2, [r4, #4]
 800ef78:	2100      	movs	r1, #0
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f7f1 f950 	bl	8000220 <memchr>
 800ef80:	b108      	cbz	r0, 800ef86 <_printf_i+0x1e6>
 800ef82:	1b80      	subs	r0, r0, r6
 800ef84:	6060      	str	r0, [r4, #4]
 800ef86:	6863      	ldr	r3, [r4, #4]
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef90:	e7aa      	b.n	800eee8 <_printf_i+0x148>
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	4632      	mov	r2, r6
 800ef96:	4649      	mov	r1, r9
 800ef98:	4640      	mov	r0, r8
 800ef9a:	47d0      	blx	sl
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	d0ad      	beq.n	800eefc <_printf_i+0x15c>
 800efa0:	6823      	ldr	r3, [r4, #0]
 800efa2:	079b      	lsls	r3, r3, #30
 800efa4:	d413      	bmi.n	800efce <_printf_i+0x22e>
 800efa6:	68e0      	ldr	r0, [r4, #12]
 800efa8:	9b03      	ldr	r3, [sp, #12]
 800efaa:	4298      	cmp	r0, r3
 800efac:	bfb8      	it	lt
 800efae:	4618      	movlt	r0, r3
 800efb0:	e7a6      	b.n	800ef00 <_printf_i+0x160>
 800efb2:	2301      	movs	r3, #1
 800efb4:	4632      	mov	r2, r6
 800efb6:	4649      	mov	r1, r9
 800efb8:	4640      	mov	r0, r8
 800efba:	47d0      	blx	sl
 800efbc:	3001      	adds	r0, #1
 800efbe:	d09d      	beq.n	800eefc <_printf_i+0x15c>
 800efc0:	3501      	adds	r5, #1
 800efc2:	68e3      	ldr	r3, [r4, #12]
 800efc4:	9903      	ldr	r1, [sp, #12]
 800efc6:	1a5b      	subs	r3, r3, r1
 800efc8:	42ab      	cmp	r3, r5
 800efca:	dcf2      	bgt.n	800efb2 <_printf_i+0x212>
 800efcc:	e7eb      	b.n	800efa6 <_printf_i+0x206>
 800efce:	2500      	movs	r5, #0
 800efd0:	f104 0619 	add.w	r6, r4, #25
 800efd4:	e7f5      	b.n	800efc2 <_printf_i+0x222>
 800efd6:	bf00      	nop
 800efd8:	0800f155 	.word	0x0800f155
 800efdc:	0800f166 	.word	0x0800f166

0800efe0 <memmove>:
 800efe0:	4288      	cmp	r0, r1
 800efe2:	b510      	push	{r4, lr}
 800efe4:	eb01 0402 	add.w	r4, r1, r2
 800efe8:	d902      	bls.n	800eff0 <memmove+0x10>
 800efea:	4284      	cmp	r4, r0
 800efec:	4623      	mov	r3, r4
 800efee:	d807      	bhi.n	800f000 <memmove+0x20>
 800eff0:	1e43      	subs	r3, r0, #1
 800eff2:	42a1      	cmp	r1, r4
 800eff4:	d008      	beq.n	800f008 <memmove+0x28>
 800eff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800effa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800effe:	e7f8      	b.n	800eff2 <memmove+0x12>
 800f000:	4402      	add	r2, r0
 800f002:	4601      	mov	r1, r0
 800f004:	428a      	cmp	r2, r1
 800f006:	d100      	bne.n	800f00a <memmove+0x2a>
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f012:	e7f7      	b.n	800f004 <memmove+0x24>

0800f014 <_sbrk_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4d06      	ldr	r5, [pc, #24]	@ (800f030 <_sbrk_r+0x1c>)
 800f018:	2300      	movs	r3, #0
 800f01a:	4604      	mov	r4, r0
 800f01c:	4608      	mov	r0, r1
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	f7f2 fbfa 	bl	8001818 <_sbrk>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_sbrk_r+0x1a>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_sbrk_r+0x1a>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	20006594 	.word	0x20006594

0800f034 <memcpy>:
 800f034:	440a      	add	r2, r1
 800f036:	4291      	cmp	r1, r2
 800f038:	f100 33ff 	add.w	r3, r0, #4294967295
 800f03c:	d100      	bne.n	800f040 <memcpy+0xc>
 800f03e:	4770      	bx	lr
 800f040:	b510      	push	{r4, lr}
 800f042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f04a:	4291      	cmp	r1, r2
 800f04c:	d1f9      	bne.n	800f042 <memcpy+0xe>
 800f04e:	bd10      	pop	{r4, pc}

0800f050 <_realloc_r>:
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f054:	4680      	mov	r8, r0
 800f056:	4615      	mov	r5, r2
 800f058:	460c      	mov	r4, r1
 800f05a:	b921      	cbnz	r1, 800f066 <_realloc_r+0x16>
 800f05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	4611      	mov	r1, r2
 800f062:	f7ff bc4b 	b.w	800e8fc <_malloc_r>
 800f066:	b92a      	cbnz	r2, 800f074 <_realloc_r+0x24>
 800f068:	f7ff fbdc 	bl	800e824 <_free_r>
 800f06c:	2400      	movs	r4, #0
 800f06e:	4620      	mov	r0, r4
 800f070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f074:	f000 f81a 	bl	800f0ac <_malloc_usable_size_r>
 800f078:	4285      	cmp	r5, r0
 800f07a:	4606      	mov	r6, r0
 800f07c:	d802      	bhi.n	800f084 <_realloc_r+0x34>
 800f07e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f082:	d8f4      	bhi.n	800f06e <_realloc_r+0x1e>
 800f084:	4629      	mov	r1, r5
 800f086:	4640      	mov	r0, r8
 800f088:	f7ff fc38 	bl	800e8fc <_malloc_r>
 800f08c:	4607      	mov	r7, r0
 800f08e:	2800      	cmp	r0, #0
 800f090:	d0ec      	beq.n	800f06c <_realloc_r+0x1c>
 800f092:	42b5      	cmp	r5, r6
 800f094:	462a      	mov	r2, r5
 800f096:	4621      	mov	r1, r4
 800f098:	bf28      	it	cs
 800f09a:	4632      	movcs	r2, r6
 800f09c:	f7ff ffca 	bl	800f034 <memcpy>
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	4640      	mov	r0, r8
 800f0a4:	f7ff fbbe 	bl	800e824 <_free_r>
 800f0a8:	463c      	mov	r4, r7
 800f0aa:	e7e0      	b.n	800f06e <_realloc_r+0x1e>

0800f0ac <_malloc_usable_size_r>:
 800f0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0b0:	1f18      	subs	r0, r3, #4
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	bfbc      	itt	lt
 800f0b6:	580b      	ldrlt	r3, [r1, r0]
 800f0b8:	18c0      	addlt	r0, r0, r3
 800f0ba:	4770      	bx	lr

0800f0bc <_init>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	bf00      	nop
 800f0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c2:	bc08      	pop	{r3}
 800f0c4:	469e      	mov	lr, r3
 800f0c6:	4770      	bx	lr

0800f0c8 <_fini>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	bf00      	nop
 800f0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ce:	bc08      	pop	{r3}
 800f0d0:	469e      	mov	lr, r3
 800f0d2:	4770      	bx	lr
