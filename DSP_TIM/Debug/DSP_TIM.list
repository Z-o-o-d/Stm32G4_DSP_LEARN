
DSP_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005208  08005208  00006208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005248  08005248  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005250  08005250  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005258  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca8  2000000c  08005264  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cb4  08005264  00007cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a85f  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a4  00000000  00000000  0002189b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00024a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011bb  00000000  00000000  00026108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020413  00000000  00000000  000272c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eed  00000000  00000000  000476d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab5d  00000000  00000000  000615c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006308  00000000  00000000  0013c164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0014246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080051f0 	.word	0x080051f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080051f0 	.word	0x080051f0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]


}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbbf 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f9b4 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 f988 	bl	8000840 <MX_DMA_Init>
  MX_TIM6_Init();
 8000530:	f000 f8dc 	bl	80006ec <MX_TIM6_Init>
  MX_USB_PCD_Init();
 8000534:	f000 f95c 	bl	80007f0 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f90e 	bl	8000758 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800053c:	f000 f85e 	bl	80005fc <MX_ADC2_Init>





  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, 1024);
 8000540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000544:	4904      	ldr	r1, [pc, #16]	@ (8000558 <main+0x3c>)
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x40>)
 8000548:	f000 ffe0 	bl	800150c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <main+0x44>)
 800054e:	f003 fe2b 	bl	80041a8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <main+0x36>
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028
 800055c:	20000828 	.word	0x20000828
 8000560:	200008f4 	.word	0x200008f4

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	@ 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fe0f 	bl	8005196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000586:	2000      	movs	r0, #0
 8000588:	f002 fde4 	bl	8003154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800058c:	2321      	movs	r3, #33	@ 0x21
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	2303      	movs	r3, #3
 80005a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a6:	2355      	movs	r3, #85	@ 0x55
 80005a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe7e 	bl	80032bc <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 f989 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f97c 	bl	80038e0 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ee:	f000 f975 	bl	80008dc <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	@ 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fdc4 	bl	8005196 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800060e:	4b33      	ldr	r3, [pc, #204]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000610:	4a33      	ldr	r2, [pc, #204]	@ (80006e0 <MX_ADC2_Init+0xe4>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000616:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800061a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b2f      	ldr	r3, [pc, #188]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000628:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000636:	2208      	movs	r2, #8
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800063a:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000640:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000646:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000648:	2202      	movs	r2, #2
 800064a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000656:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800065e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000666:	2201      	movs	r2, #1
 8000668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC2_Init+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800067a:	4818      	ldr	r0, [pc, #96]	@ (80006dc <MX_ADC2_Init+0xe0>)
 800067c:	f000 fdc2 	bl	8001204 <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000686:	f000 f929 	bl	80008dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_ADC2_Init+0xe8>)
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	@ 0x7f
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC2_Init+0xe0>)
 80006a8:	f001 fa1c 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006b2:	f000 f913 	bl	80008dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_ADC2_Init+0xec>)
 80006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ba:	230c      	movs	r3, #12
 80006bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_ADC2_Init+0xe0>)
 80006c4:	f001 fa0e 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80006ce:	f000 f905 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000828 	.word	0x20000828
 80006e0:	50000100 	.word	0x50000100
 80006e4:	04300002 	.word	0x04300002
 80006e8:	08600004 	.word	0x08600004

080006ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_TIM6_Init+0x64>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	@ (8000754 <MX_TIM6_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_TIM6_Init+0x64>)
 8000704:	2210      	movs	r2, #16
 8000706:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_TIM6_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_TIM6_Init+0x64>)
 8000710:	2213      	movs	r2, #19
 8000712:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_TIM6_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_TIM6_Init+0x64>)
 800071c:	f003 fcec 	bl	80040f8 <HAL_TIM_Base_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000726:	f000 f8d9 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800072a:	2320      	movs	r3, #32
 800072c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_TIM6_Init+0x64>)
 8000738:	f003 fe34 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000742:	f000 f8cb 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200008f4 	.word	0x200008f4
 8000754:	40001000 	.word	0x40001000

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 800075e:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <MX_USART1_UART_Init+0x94>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a0:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 80007a2:	f003 fe81 	bl	80044a8 <HAL_UART_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f896 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 80007b4:	f004 fbec 	bl	8004f90 <HAL_UARTEx_SetTxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007be:	f000 f88d 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 80007c6:	f004 fc21 	bl	800500c <HAL_UARTEx_SetRxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f884 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_USART1_UART_Init+0x90>)
 80007d6:	f004 fba2 	bl	8004f1e <HAL_UARTEx_DisableFifoMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f87c 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000940 	.word	0x20000940
 80007ec:	40013800 	.word	0x40013800

080007f0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <MX_USB_PCD_Init+0x4c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 80007fc:	2208      	movs	r2, #8
 80007fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 8000802:	2202      	movs	r2, #2
 8000804:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 8000808:	2202      	movs	r2, #2
 800080a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 8000820:	2200      	movs	r2, #0
 8000822:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_USB_PCD_Init+0x48>)
 8000826:	f002 fb9d 	bl	8002f64 <HAL_PCD_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000830:	f000 f854 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200009d4 	.word	0x200009d4
 800083c:	40005c00 	.word	0x40005c00

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_DMA_Init+0x50>)
 8000848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <MX_DMA_Init+0x50>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6493      	str	r3, [r2, #72]	@ 0x48
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_DMA_Init+0x50>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_DMA_Init+0x50>)
 8000860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <MX_DMA_Init+0x50>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6493      	str	r3, [r2, #72]	@ 0x48
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_DMA_Init+0x50>)
 800086c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	200b      	movs	r0, #11
 800087c:	f001 ff49 	bl	8002712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000880:	200b      	movs	r0, #11
 8000882:	f001 ff60 	bl	8002746 <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_GPIO_Init+0x44>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <MX_GPIO_Init+0x44>)
 80008a0:	f043 0320 	orr.w	r3, r3, #32
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_GPIO_Init+0x44>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0320 	and.w	r3, r3, #32
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_GPIO_Init+0x44>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <MX_GPIO_Init+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_GPIO_Init+0x44>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	@ (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	@ 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800091e:	f002 fcbd 	bl	800329c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09a      	sub	sp, #104	@ 0x68
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2244      	movs	r2, #68	@ 0x44
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fc20 	bl	8005196 <memset>
  if(hadc->Instance==ADC2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a38      	ldr	r2, [pc, #224]	@ (8000a3c <HAL_ADC_MspInit+0x10c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d168      	bne.n	8000a32 <HAL_ADC_MspInit+0x102>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000964:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000966:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f9d1 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800097c:	f7ff ffae 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 8000986:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800098a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099c:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <HAL_ADC_MspInit+0x110>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009b0:	2303      	movs	r3, #3
 80009b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f002 f94b 	bl	8002c60 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000a48 <HAL_ADC_MspInit+0x118>)
 80009ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009d2:	2224      	movs	r2, #36	@ 0x24
 80009d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 80009fa:	2220      	movs	r2, #32
 80009fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 8000a00:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000a04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a06:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 8000a08:	f001 feb8 	bl	800277c <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000a12:	f7ff ff63 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 8000a1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a1c:	4a09      	ldr	r2, [pc, #36]	@ (8000a44 <HAL_ADC_MspInit+0x114>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2012      	movs	r0, #18
 8000a28:	f001 fe73 	bl	8002712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f001 fe8a 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3768      	adds	r7, #104	@ 0x68
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	50000100 	.word	0x50000100
 8000a40:	40021000 	.word	0x40021000
 8000a44:	20000894 	.word	0x20000894
 8000a48:	40020008 	.word	0x40020008

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09a      	sub	sp, #104	@ 0x68
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2244      	movs	r2, #68	@ 0x44
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fb72 	bl	8005196 <memset>
  if(huart->Instance==USART1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d137      	bne.n	8000b2c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 f925 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ff02 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000adc:	4a16      	ldr	r2, [pc, #88]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b28:	f002 f89a 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3768      	adds	r7, #104	@ 0x68
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	@ 0x50
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2244      	movs	r2, #68	@ 0x44
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fb22 	bl	8005196 <memset>
  if(hpcd->Instance==USB)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a11      	ldr	r2, [pc, #68]	@ (8000b9c <HAL_PCD_MspInit+0x60>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d11a      	bne.n	8000b92 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b62:	2300      	movs	r3, #0
 8000b64:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 f8d4 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000b76:	f7ff feb1 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_PCD_MspInit+0x64>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_PCD_MspInit+0x64>)
 8000b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_PCD_MspInit+0x64>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3750      	adds	r7, #80	@ 0x50
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005c00 	.word	0x40005c00
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f8a5 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DMA1_Channel1_IRQHandler+0x10>)
 8000c0a:	f001 feda 	bl	80029c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000894 	.word	0x20000894

08000c18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <ADC1_2_IRQHandler+0x10>)
 8000c1e:	f000 fd29 	bl	8001674 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000828 	.word	0x20000828

08000c2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c50:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 fa93 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc4b 	bl	800051c <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   r0, =_estack
 8000c88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	08005258 	.word	0x08005258
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	20000cb4 	.word	0x20000cb4

08000ca0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <COMP1_2_3_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f001 fd25 	bl	80026fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fe10 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_InitTick+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d022      	beq.n	8000d2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_InitTick+0x6c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_InitTick+0x68>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 fd30 	bl	8002762 <HAL_SYSTICK_Config>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10f      	bne.n	8000d28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d809      	bhi.n	8000d22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295
 8000d16:	f001 fcfc 	bl	8002712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_InitTick+0x70>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e007      	b.n	8000d32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e004      	b.n	8000d32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e001      	b.n	8000d32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d58:	6013      	str	r3, [r2, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000cb0 	.word	0x20000cb0
 8000d68:	20000008 	.word	0x20000008

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000cb0 	.word	0x20000cb0

08000d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3360      	adds	r3, #96	@ 0x60
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <LL_ADC_SetOffset+0x44>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	03fff000 	.word	0x03fff000

08000e34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3360      	adds	r3, #96	@ 0x60
 8000e42:	461a      	mov	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3360      	adds	r3, #96	@ 0x60
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e8a:	bf00      	nop
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b087      	sub	sp, #28
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3360      	adds	r3, #96	@ 0x60
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3360      	adds	r3, #96	@ 0x60
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	615a      	str	r2, [r3, #20]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3330      	adds	r3, #48	@ 0x30
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	211f      	movs	r1, #31
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0e9b      	lsrs	r3, r3, #26
 8000f86:	f003 011f 	and.w	r1, r3, #31
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3314      	adds	r3, #20
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	0e5b      	lsrs	r3, r3, #25
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	0d1b      	lsrs	r3, r3, #20
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	401a      	ands	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	0d1b      	lsrs	r3, r3, #20
 8001006:	f003 031f 	and.w	r3, r3, #31
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0318 	and.w	r3, r3, #24
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001048:	40d9      	lsrs	r1, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	400b      	ands	r3, r1
 800104e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001052:	431a      	orrs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	0007ffff 	.word	0x0007ffff

0800106c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 031f 	and.w	r3, r3, #31
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6093      	str	r3, [r2, #8]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010dc:	d101      	bne.n	80010e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001104:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800112c:	d101      	bne.n	8001132 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <LL_ADC_IsEnabled+0x18>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <LL_ADC_IsEnabled+0x1a>
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800119e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011a2:	f043 0204 	orr.w	r2, r3, #4
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d101      	bne.n	80011ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d101      	bne.n	80011f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e167      	b.n	80014ee <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fb7f 	bl	8000930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff3f 	bl	80010c8 <LL_ADC_IsDeepPowerDownEnabled>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff25 	bl	80010a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff5a 	bl	8001118 <LL_ADC_IsInternalRegulatorEnabled>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff3e 	bl	80010f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001274:	4ba0      	ldr	r3, [pc, #640]	@ (80014f8 <HAL_ADC_Init+0x2f4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	099b      	lsrs	r3, r3, #6
 800127a:	4aa0      	ldr	r2, [pc, #640]	@ (80014fc <HAL_ADC_Init+0x2f8>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	3301      	adds	r3, #1
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001288:	e002      	b.n	8001290 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3b01      	subs	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff3c 	bl	8001118 <LL_ADC_IsInternalRegulatorEnabled>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012aa:	f043 0210 	orr.w	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff75 	bl	80011b6 <LL_ADC_REG_IsConversionOngoing>
 80012cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 8100 	bne.w	80014dc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 80fc 	bne.w	80014dc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012ec:	f043 0202 	orr.w	r2, r3, #2
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff35 	bl	8001168 <LL_ADC_IsEnabled>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d111      	bne.n	8001328 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001304:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001308:	f7ff ff2e 	bl	8001168 <LL_ADC_IsEnabled>
 800130c:	4604      	mov	r4, r0
 800130e:	487c      	ldr	r0, [pc, #496]	@ (8001500 <HAL_ADC_Init+0x2fc>)
 8001310:	f7ff ff2a 	bl	8001168 <LL_ADC_IsEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	4323      	orrs	r3, r4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	4878      	ldr	r0, [pc, #480]	@ (8001504 <HAL_ADC_Init+0x300>)
 8001324:	f7ff fd2e 	bl	8000d84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7f5b      	ldrb	r3, [r3, #29]
 800132c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001332:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001338:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800133e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001346:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	d106      	bne.n	8001364 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	045b      	lsls	r3, r3, #17
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <HAL_ADC_Init+0x304>)
 8001388:	4013      	ands	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	430b      	orrs	r3, r1
 8001392:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff14 	bl	80011dc <LL_ADC_INJ_IsConversionOngoing>
 80013b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d16d      	bne.n	8001498 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d16a      	bne.n	8001498 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d017      	beq.n	8001424 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001402:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800140c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6911      	ldr	r1, [r2, #16]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001422:	e013      	b.n	800144c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001432:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001448:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001452:	2b01      	cmp	r3, #1
 8001454:	d118      	bne.n	8001488 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001472:	4311      	orrs	r1, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001478:	430a      	orrs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	e007      	b.n	8001498 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10c      	bne.n	80014ba <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f023 010f 	bic.w	r1, r3, #15
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014b8:	e007      	b.n	80014ca <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 020f 	bic.w	r2, r2, #15
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014da:	e007      	b.n	80014ec <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	f043 0210 	orr.w	r2, r3, #16
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	053e2d63 	.word	0x053e2d63
 8001500:	50000100 	.word	0x50000100
 8001504:	50000300 	.word	0x50000300
 8001508:	fff04007 	.word	0xfff04007

0800150c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001518:	4851      	ldr	r0, [pc, #324]	@ (8001660 <HAL_ADC_Start_DMA+0x154>)
 800151a:	f7ff fda7 	bl	800106c <LL_ADC_GetMultimode>
 800151e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe46 	bl	80011b6 <LL_ADC_REG_IsConversionOngoing>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 808f 	bne.w	8001650 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_ADC_Start_DMA+0x34>
 800153c:	2302      	movs	r3, #2
 800153e:	e08a      	b.n	8001656 <HAL_ADC_Start_DMA+0x14a>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d002      	beq.n	800155a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b09      	cmp	r3, #9
 8001558:	d173      	bne.n	8001642 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 feb2 	bl	80022c4 <ADC_Enable>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d166      	bne.n	8001638 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a38      	ldr	r2, [pc, #224]	@ (8001664 <HAL_ADC_Start_DMA+0x158>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d002      	beq.n	800158e <HAL_ADC_Start_DMA+0x82>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e001      	b.n	8001592 <HAL_ADC_Start_DMA+0x86>
 800158e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	4293      	cmp	r3, r2
 8001598:	d002      	beq.n	80015a0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	f023 0206 	bic.w	r2, r3, #6
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80015c4:	e002      	b.n	80015cc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d0:	4a25      	ldr	r2, [pc, #148]	@ (8001668 <HAL_ADC_Start_DMA+0x15c>)
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	4a24      	ldr	r2, [pc, #144]	@ (800166c <HAL_ADC_Start_DMA+0x160>)
 80015da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <HAL_ADC_Start_DMA+0x164>)
 80015e2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	221c      	movs	r2, #28
 80015ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3340      	adds	r3, #64	@ 0x40
 800161e:	4619      	mov	r1, r3
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f001 f952 	bl	80028cc <HAL_DMA_Start_IT>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdac 	bl	800118e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001636:	e00d      	b.n	8001654 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001640:	e008      	b.n	8001654 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800164e:	e001      	b.n	8001654 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001650:	2302      	movs	r3, #2
 8001652:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001654:	7dfb      	ldrb	r3, [r7, #23]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	50000300 	.word	0x50000300
 8001664:	50000100 	.word	0x50000100
 8001668:	080023d1 	.word	0x080023d1
 800166c:	080024a9 	.word	0x080024a9
 8001670:	080024c5 	.word	0x080024c5

08001674 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001690:	4883      	ldr	r0, [pc, #524]	@ (80018a0 <HAL_ADC_IRQHandler+0x22c>)
 8001692:	f7ff fceb 	bl	800106c <LL_ADC_GetMultimode>
 8001696:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d017      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x5e>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d012      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 ff3f 	bl	8002548 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2202      	movs	r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_ADC_IRQHandler+0x72>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8085 	beq.w	80017fc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d07f      	beq.n	80017fc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc05 	bl	8000f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d064      	beq.n	80017ee <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5e      	ldr	r2, [pc, #376]	@ (80018a4 <HAL_ADC_IRQHandler+0x230>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d002      	beq.n	8001734 <HAL_ADC_IRQHandler+0xc0>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e001      	b.n	8001738 <HAL_ADC_IRQHandler+0xc4>
 8001734:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4293      	cmp	r3, r2
 800173e:	d008      	beq.n	8001752 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d002      	beq.n	8001752 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b09      	cmp	r3, #9
 8001750:	d104      	bne.n	800175c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	e00d      	b.n	8001778 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a50      	ldr	r2, [pc, #320]	@ (80018a4 <HAL_ADC_IRQHandler+0x230>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d002      	beq.n	800176c <HAL_ADC_IRQHandler+0xf8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	e001      	b.n	8001770 <HAL_ADC_IRQHandler+0xfc>
 800176c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001770:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d135      	bne.n	80017ee <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b08      	cmp	r3, #8
 800178e:	d12e      	bne.n	80017ee <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fd0e 	bl	80011b6 <LL_ADC_REG_IsConversionOngoing>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d11a      	bne.n	80017d6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 020c 	bic.w	r2, r2, #12
 80017ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d112      	bne.n	80017ee <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017d4:	e00b      	b.n	80017ee <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	f043 0210 	orr.w	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe fe8a 	bl	8000508 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	220c      	movs	r2, #12
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_ADC_IRQHandler+0x19c>
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10b      	bne.n	8001828 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 809e 	beq.w	8001958 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8098 	beq.w	8001958 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001838:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbae 	bl	8000fa6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800184a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb69 	bl	8000f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001856:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_ADC_IRQHandler+0x230>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d002      	beq.n	8001868 <HAL_ADC_IRQHandler+0x1f4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	e001      	b.n	800186c <HAL_ADC_IRQHandler+0x1f8>
 8001868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	4293      	cmp	r3, r2
 8001872:	d008      	beq.n	8001886 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d002      	beq.n	8001886 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b07      	cmp	r3, #7
 8001884:	d104      	bne.n	8001890 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
 800188e:	e011      	b.n	80018b4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a03      	ldr	r2, [pc, #12]	@ (80018a4 <HAL_ADC_IRQHandler+0x230>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d006      	beq.n	80018a8 <HAL_ADC_IRQHandler+0x234>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e005      	b.n	80018ac <HAL_ADC_IRQHandler+0x238>
 80018a0:	50000300 	.word	0x50000300
 80018a4:	50000100 	.word	0x50000100
 80018a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018ac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d047      	beq.n	800194a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ADC_IRQHandler+0x260>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03f      	beq.n	800194a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d13a      	bne.n	800194a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018de:	2b40      	cmp	r3, #64	@ 0x40
 80018e0:	d133      	bne.n	800194a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d12e      	bne.n	800194a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc73 	bl	80011dc <LL_ADC_INJ_IsConversionOngoing>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11a      	bne.n	8001932 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800190a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d112      	bne.n	800194a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001930:	e00b      	b.n	800194a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fdd4 	bl	80024f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2260      	movs	r2, #96	@ 0x60
 8001956:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d011      	beq.n	8001986 <HAL_ADC_IRQHandler+0x312>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001970:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f89f 	bl	8001abc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x342>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fdba 	bl	8002520 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d012      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x372>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fdac 	bl	8002534 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d036      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x3ea>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d031      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a06:	e014      	b.n	8001a32 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a0e:	4825      	ldr	r0, [pc, #148]	@ (8001aa4 <HAL_ADC_IRQHandler+0x430>)
 8001a10:	f7ff fb3a 	bl	8001088 <LL_ADC_GetMultiDMATransfer>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1e:	e008      	b.n	8001a32 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10e      	bne.n	8001a56 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f83d 	bl	8001ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x426>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a82:	f043 0208 	orr.w	r2, r3, #8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a92:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fd39 	bl	800250c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	50000300 	.word	0x50000300

08001aa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e3c8      	b.n	8002298 <HAL_ADC_ConfigChannel+0x7b4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb4f 	bl	80011b6 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 83ad 	bne.w	800227a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f7ff fa0e 	bl	8000f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fb3d 	bl	80011b6 <LL_ADC_REG_IsConversionOngoing>
 8001b3c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fb49 	bl	80011dc <LL_ADC_INJ_IsConversionOngoing>
 8001b4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 81d9 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 81d4 	bne.w	8001f0a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b6a:	d10f      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff fa28 	bl	8000fcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f9bc 	bl	8000f02 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b8a:	e00e      	b.n	8001baa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f7ff fa17 	bl	8000fcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f9ac 	bl	8000f02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d022      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bdc:	f7ff f906 	bl	8000dec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6919      	ldr	r1, [r3, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7ff f952 	bl	8000e96 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x124>
 8001c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x126>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7ff f95e 	bl	8000ecc <LL_ADC_SetOffsetSaturation>
 8001c10:	e17b      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f90b 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x15a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f900 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	e01e      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x198>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f8f5 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e004      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1b0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1e2>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e004      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f8c4 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f8a8 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x220>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f89d 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	e01e      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x25e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f892 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x276>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	e018      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x2a8>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e004      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f861 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2102      	movs	r1, #2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f845 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10a      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x2e6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2102      	movs	r1, #2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f83a 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	e01e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2102      	movs	r1, #2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f82f 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e004      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x33c>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	e016      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x36a>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e004      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f800 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ffe4 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x3a8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ffd9 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 021f 	and.w	r2, r3, #31
 8001e8a:	e017      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x3d8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2103      	movs	r1, #3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe ffce 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x3f0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	e011      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x414>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e003      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d106      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe ffab 	bl	8000e60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f92a 	bl	8001168 <LL_ADC_IsEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8140 	bne.w	800219c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f7ff f87b 	bl	8001024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a8f      	ldr	r2, [pc, #572]	@ (8002170 <HAL_ADC_ConfigChannel+0x68c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f040 8131 	bne.w	800219c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10b      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x47e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	3301      	adds	r3, #1
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b09      	cmp	r3, #9
 8001f58:	bf94      	ite	ls
 8001f5a:	2301      	movls	r3, #1
 8001f5c:	2300      	movhi	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e019      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x4b2>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f72:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d079      	beq.n	800208e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x4d2>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	3301      	adds	r3, #1
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fb4:	e015      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x4fe>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e003      	b.n	8001fda <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	069b      	lsls	r3, r3, #26
 8001fde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x51e>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	e017      	b.n	8002032 <HAL_ADC_ConfigChannel+0x54e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002012:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800201e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	ea42 0103 	orr.w	r1, r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x574>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	3301      	adds	r3, #1
 800204a:	f003 021f 	and.w	r2, r3, #31
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	e018      	b.n	800208a <HAL_ADC_ConfigChannel+0x5a6>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800206a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 021f 	and.w	r2, r3, #31
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208a:	430b      	orrs	r3, r1
 800208c:	e081      	b.n	8002192 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x5c6>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a8:	e015      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x5f2>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	069b      	lsls	r3, r3, #26
 80020d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x612>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	e017      	b.n	8002126 <HAL_ADC_ConfigChannel+0x642>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
  return result;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e003      	b.n	800211a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x66e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	051b      	lsls	r3, r3, #20
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002150:	e01e      	b.n	8002190 <HAL_ADC_ConfigChannel+0x6ac>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	613b      	str	r3, [r7, #16]
  return result;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e006      	b.n	800217c <HAL_ADC_ConfigChannel+0x698>
 800216e:	bf00      	nop
 8002170:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	3b1e      	subs	r3, #30
 800218a:	051b      	lsls	r3, r3, #20
 800218c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe ff18 	bl	8000fcc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <HAL_ADC_ConfigChannel+0x7bc>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d071      	beq.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021a8:	483e      	ldr	r0, [pc, #248]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021aa:	f7fe fe11 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 80021ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3c      	ldr	r2, [pc, #240]	@ (80022a8 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x6e2>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3a      	ldr	r2, [pc, #232]	@ (80022ac <HAL_ADC_ConfigChannel+0x7c8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d127      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d121      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021da:	d157      	bne.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021e4:	4619      	mov	r1, r3
 80021e6:	482f      	ldr	r0, [pc, #188]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021e8:	f7fe fddf 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ec:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <HAL_ADC_ConfigChannel+0x7cc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	4a30      	ldr	r2, [pc, #192]	@ (80022b4 <HAL_ADC_ConfigChannel+0x7d0>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002206:	e002      	b.n	800220e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3b01      	subs	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002214:	e03a      	b.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a27      	ldr	r2, [pc, #156]	@ (80022b8 <HAL_ADC_ConfigChannel+0x7d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d113      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02a      	beq.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800223e:	4619      	mov	r1, r3
 8002240:	4818      	ldr	r0, [pc, #96]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002242:	f7fe fdb2 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002246:	e021      	b.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d11c      	bne.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d011      	beq.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002270:	4619      	mov	r1, r3
 8002272:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002274:	f7fe fd99 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
 8002278:	e008      	b.n	800228c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002294:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002298:	4618      	mov	r0, r3
 800229a:	37d8      	adds	r7, #216	@ 0xd8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	80080000 	.word	0x80080000
 80022a4:	50000300 	.word	0x50000300
 80022a8:	c3210000 	.word	0xc3210000
 80022ac:	90c00010 	.word	0x90c00010
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63
 80022b8:	c7520000 	.word	0xc7520000
 80022bc:	50000100 	.word	0x50000100
 80022c0:	cb840000 	.word	0xcb840000

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe ff47 	bl	8001168 <LL_ADC_IsEnabled>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d169      	bne.n	80023b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <ADC_Enable+0xfc>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e055      	b.n	80023b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe ff16 	bl	8001140 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002314:	482b      	ldr	r0, [pc, #172]	@ (80023c4 <ADC_Enable+0x100>)
 8002316:	f7fe fd5b 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 800231a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800231c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002324:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <ADC_Enable+0x104>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <ADC_Enable+0x108>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800233e:	e002      	b.n	8002346 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	3b01      	subs	r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800234c:	f7fe fd0e 	bl	8000d6c <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002352:	e028      	b.n	80023a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe ff05 	bl	8001168 <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d104      	bne.n	800236e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fee9 	bl	8001140 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800236e:	f7fe fcfd 	bl	8000d6c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d914      	bls.n	80023a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00d      	beq.n	80023a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d1cf      	bne.n	8002354 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	8000003f 	.word	0x8000003f
 80023c4:	50000300 	.word	0x50000300
 80023c8:	20000000 	.word	0x20000000
 80023cc:	053e2d63 	.word	0x053e2d63

080023d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d14b      	bne.n	8002482 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d021      	beq.n	8002448 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fd8d 	bl	8000f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d032      	beq.n	800247a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d12b      	bne.n	800247a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002446:	e018      	b.n	800247a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d111      	bne.n	800247a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7fe f844 	bl	8000508 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002480:	e00e      	b.n	80024a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff fb1e 	bl	8001ad0 <HAL_ADC_ErrorCallback>
}
 8002494:	e004      	b.n	80024a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff faf6 	bl	8001aa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff faf0 	bl	8001ad0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c8:	d301      	bcc.n	80026ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ca:	2301      	movs	r3, #1
 80026cc:	e00f      	b.n	80026ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <SysTick_Config+0x40>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d6:	210f      	movs	r1, #15
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f7ff ff8e 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <SysTick_Config+0x40>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <SysTick_Config+0x40>)
 80026e8:	2207      	movs	r2, #7
 80026ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	e000e010 	.word	0xe000e010

080026fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff29 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff40 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff33 	bl	80025c0 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa4 	bl	80026b8 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e08d      	b.n	80028aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <HAL_DMA_Init+0x138>)
 8002796:	429a      	cmp	r2, r3
 8002798:	d80f      	bhi.n	80027ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b45      	ldr	r3, [pc, #276]	@ (80028b8 <HAL_DMA_Init+0x13c>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4a45      	ldr	r2, [pc, #276]	@ (80028bc <HAL_DMA_Init+0x140>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a42      	ldr	r2, [pc, #264]	@ (80028c0 <HAL_DMA_Init+0x144>)
 80027b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80027b8:	e00e      	b.n	80027d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_DMA_Init+0x148>)
 80027c2:	4413      	add	r3, r2
 80027c4:	4a3d      	ldr	r2, [pc, #244]	@ (80028bc <HAL_DMA_Init+0x140>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	009a      	lsls	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a3c      	ldr	r2, [pc, #240]	@ (80028c8 <HAL_DMA_Init+0x14c>)
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f9b6 	bl	8002b9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002838:	d102      	bne.n	8002840 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002854:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_DMA_Init+0x104>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d80c      	bhi.n	8002880 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9d6 	bl	8002c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e008      	b.n	8002892 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40020407 	.word	0x40020407
 80028b8:	bffdfff8 	.word	0xbffdfff8
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	40020000 	.word	0x40020000
 80028c4:	bffdfbf8 	.word	0xbffdfbf8
 80028c8:	40020400 	.word	0x40020400

080028cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Start_IT+0x20>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e066      	b.n	80029ba <HAL_DMA_Start_IT+0xee>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d155      	bne.n	80029ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f8fb 	bl	8002b20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 020e 	orr.w	r2, r2, #14
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e00f      	b.n	8002964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 020a 	orr.w	r2, r2, #10
 8002962:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002980:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002998:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e005      	b.n	80029b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d026      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x7a>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d021      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0204 	bic.w	r2, r2, #4
 8002a14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f003 021f 	and.w	r2, r3, #31
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2104      	movs	r1, #4
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d071      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a3a:	e06c      	b.n	8002b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2202      	movs	r2, #2
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d02e      	beq.n	8002aae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d029      	beq.n	8002aae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 020a 	bic.w	r2, r2, #10
 8002a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d038      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002aac:	e033      	b.n	8002b16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d025      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 020e 	bic.w	r2, r2, #14
 8002ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
}
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d108      	bne.n	8002b80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7e:	e007      	b.n	8002b90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d802      	bhi.n	8002bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e001      	b.n	8002bba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002bb8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3b08      	subs	r3, #8
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	009a      	lsls	r2, r3, #2
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002be6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2201      	movs	r2, #1
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40020407 	.word	0x40020407
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020820 	.word	0x40020820
 8002c10:	cccccccd 	.word	0xcccccccd
 8002c14:	40020880 	.word	0x40020880

08002c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a08      	ldr	r2, [pc, #32]	@ (8002c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	1000823f 	.word	0x1000823f
 8002c5c:	40020940 	.word	0x40020940

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c6e:	e15a      	b.n	8002f26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 814c 	beq.w	8002f20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d005      	beq.n	8002ca0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d130      	bne.n	8002d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0201 	and.w	r2, r3, #1
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d017      	beq.n	8002d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d123      	bne.n	8002d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	6939      	ldr	r1, [r7, #16]
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80a6 	beq.w	8002f20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de0:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dec:	4a56      	ldr	r2, [pc, #344]	@ (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	220f      	movs	r2, #15
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e16:	d01f      	beq.n	8002e58 <HAL_GPIO_Init+0x1f8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f4c <HAL_GPIO_Init+0x2ec>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d019      	beq.n	8002e54 <HAL_GPIO_Init+0x1f4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4b      	ldr	r2, [pc, #300]	@ (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1f0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f54 <HAL_GPIO_Init+0x2f4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a49      	ldr	r2, [pc, #292]	@ (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a48      	ldr	r2, [pc, #288]	@ (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e4>
 8002e40:	2305      	movs	r3, #5
 8002e42:	e00a      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e44:	2306      	movs	r3, #6
 8002e46:	e008      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e004      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	f002 0203 	and.w	r2, r2, #3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4093      	lsls	r3, r2
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6a:	4937      	ldr	r1, [pc, #220]	@ (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e9c:	4a30      	ldr	r2, [pc, #192]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec6:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f1a:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <HAL_GPIO_Init+0x300>)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f47f ae9d 	bne.w	8002c70 <HAL_GPIO_Init+0x10>
  }
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	48000800 	.word	0x48000800
 8002f54:	48000c00 	.word	0x48000c00
 8002f58:	48001000 	.word	0x48001000
 8002f5c:	48001400 	.word	0x48001400
 8002f60:	40010400 	.word	0x40010400

08002f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0c0      	b.n	80030f8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fdd6 	bl	8000b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 f8c1 	bl	8005124 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e03e      	b.n	8003026 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3311      	adds	r3, #17
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3310      	adds	r3, #16
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	3313      	adds	r3, #19
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3320      	adds	r3, #32
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	3324      	adds	r3, #36	@ 0x24
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	3301      	adds	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	791b      	ldrb	r3, [r3, #4]
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3bb      	bcc.n	8002fa8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	e044      	b.n	80030c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	3301      	adds	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d3b5      	bcc.n	8003036 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80030d6:	f002 f840 	bl	800515a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7a9b      	ldrb	r3, [r3, #10]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d102      	bne.n	80030f6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f805 	bl	8003100 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003124:	b29b      	uxth	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003138:	b29b      	uxth	r3, r3
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d141      	bne.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d131      	bne.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003170:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003176:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003180:	4b43      	ldr	r3, [pc, #268]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003188:	4a41      	ldr	r2, [pc, #260]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800318e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003190:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2232      	movs	r2, #50	@ 0x32
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a3f      	ldr	r2, [pc, #252]	@ (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a6:	e002      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f2      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031c2:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d158      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e057      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4a2d      	ldr	r2, [pc, #180]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031e4:	e04d      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d141      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d131      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031fc:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003214:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2232      	movs	r2, #50	@ 0x32
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	e002      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003246:	d102      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f2      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d112      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003270:	e007      	b.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003272:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40007000 	.word	0x40007000
 8003294:	20000000 	.word	0x20000000
 8003298:	431bde83 	.word	0x431bde83

0800329c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e2fe      	b.n	80038cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032da:	4b97      	ldr	r3, [pc, #604]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e4:	4b94      	ldr	r3, [pc, #592]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_OscConfig+0x3e>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b8d      	ldr	r3, [pc, #564]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2d9      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b85      	ldr	r3, [pc, #532]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a84      	ldr	r2, [pc, #528]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b7f      	ldr	r3, [pc, #508]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7e      	ldr	r2, [pc, #504]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7b      	ldr	r2, [pc, #492]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b78      	ldr	r3, [pc, #480]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a77      	ldr	r2, [pc, #476]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b75      	ldr	r3, [pc, #468]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a74      	ldr	r2, [pc, #464]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fcfa 	bl	8000d6c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fd fcf6 	bl	8000d6c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e29e      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338e:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd fce6 	bl	8000d6c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fd fce2 	bl	8000d6c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e28a      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	4b60      	ldr	r3, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4b59      	ldr	r3, [pc, #356]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4b56      	ldr	r3, [pc, #344]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0x136>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_OscConfig+0x13c>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11f      	bne.n	8003438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x154>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e25d      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4946      	ldr	r1, [pc, #280]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003424:	4b45      	ldr	r3, [pc, #276]	@ (800353c <HAL_RCC_OscConfig+0x280>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fc53 	bl	8000cd4 <HAL_InitTick>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d043      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e249      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d023      	beq.n	8003488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fc8e 	bl	8000d6c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fd fc8a 	bl	8000d6c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e232      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	492d      	ldr	r1, [pc, #180]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
 8003486:	e01a      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003488:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2a      	ldr	r2, [pc, #168]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd fc6a 	bl	8000d6c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349c:	f7fd fc66 	bl	8000d6c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e20e      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ae:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1e0>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d041      	beq.n	800354e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01c      	beq.n	800350c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d2:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d8:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd fc43 	bl	8000d6c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fd fc3f 	bl	8000d6c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1e7      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ef      	beq.n	80034ea <HAL_RCC_OscConfig+0x22e>
 800350a:	e020      	b.n	800354e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003512:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <HAL_RCC_OscConfig+0x27c>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fc26 	bl	8000d6c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003522:	e00d      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fc22 	bl	8000d6c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d906      	bls.n	8003540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1ca      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003540:	4b8c      	ldr	r3, [pc, #560]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1ea      	bne.n	8003524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80a6 	beq.w	80036a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003560:	4b84      	ldr	r3, [pc, #528]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_OscConfig+0x2b4>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x2b6>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b7f      	ldr	r3, [pc, #508]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	4a7e      	ldr	r2, [pc, #504]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6593      	str	r3, [r2, #88]	@ 0x58
 8003582:	4b7c      	ldr	r3, [pc, #496]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fd fbdf 	bl	8000d6c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fd fbdb 	bl	8000d6c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e183      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003778 <HAL_RCC_OscConfig+0x4bc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x32e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	4a65      	ldr	r2, [pc, #404]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e8:	e024      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d110      	bne.n	8003614 <HAL_RCC_OscConfig+0x358>
 80035f2:	4b60      	ldr	r3, [pc, #384]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003602:	4b5c      	ldr	r3, [pc, #368]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	4a5a      	ldr	r2, [pc, #360]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003612:	e00f      	b.n	8003634 <HAL_RCC_OscConfig+0x378>
 8003614:	4b57      	ldr	r3, [pc, #348]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	4a56      	ldr	r2, [pc, #344]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fd fb96 	bl	8000d6c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fb92 	bl	8000d6c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e138      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	4b46      	ldr	r3, [pc, #280]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ed      	beq.n	8003644 <HAL_RCC_OscConfig+0x388>
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fd fb7f 	bl	8000d6c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fd fb7b 	bl	8000d6c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e121      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003688:	4b3a      	ldr	r3, [pc, #232]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ed      	bne.n	8003672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	4a34      	ldr	r2, [pc, #208]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fb4e 	bl	8000d6c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fd fb4a 	bl	8000d6c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0f2      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e6:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x418>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd fb31 	bl	8000d6c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800370e:	f7fd fb2d 	bl	8000d6c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0d5      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003720:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80c9 	beq.w	80038ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b0c      	cmp	r3, #12
 8003742:	f000 8083 	beq.w	800384c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d15e      	bne.n	800380c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fb07 	bl	8000d6c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	e00c      	b.n	800377c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fb03 	bl	8000d6c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d905      	bls.n	800377c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ab      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b55      	ldr	r3, [pc, #340]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ec      	bne.n	8003762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b52      	ldr	r3, [pc, #328]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b52      	ldr	r3, [pc, #328]	@ (80038d8 <HAL_RCC_OscConfig+0x61c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6a11      	ldr	r1, [r2, #32]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80037a2:	0212      	lsls	r2, r2, #8
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0552      	lsls	r2, r2, #21
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0652      	lsls	r2, r2, #25
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4943      	ldr	r1, [pc, #268]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b41      	ldr	r3, [pc, #260]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a40      	ldr	r2, [pc, #256]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b3e      	ldr	r3, [pc, #248]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a3d      	ldr	r2, [pc, #244]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fac2 	bl	8000d6c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fabe 	bl	8000d6c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e066      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b35      	ldr	r3, [pc, #212]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x530>
 800380a:	e05e      	b.n	80038ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a30      	ldr	r2, [pc, #192]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd faa8 	bl	8000d6c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd faa4 	bl	8000d6c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04c      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003832:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800383e:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	4924      	ldr	r1, [pc, #144]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <HAL_RCC_OscConfig+0x620>)
 8003846:	4013      	ands	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
 800384a:	e03e      	b.n	80038ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e039      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003858:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <HAL_RCC_OscConfig+0x618>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	429a      	cmp	r2, r3
 800386a:	d12c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	3b01      	subs	r3, #1
 8003878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d123      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d113      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	019f800c 	.word	0x019f800c
 80038dc:	feeefffc 	.word	0xfeeefffc

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e11e      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b91      	ldr	r3, [pc, #580]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b8e      	ldr	r3, [pc, #568]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	498c      	ldr	r1, [pc, #560]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b8a      	ldr	r3, [pc, #552]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e106      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d073      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d129      	bne.n	8003990 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b81      	ldr	r3, [pc, #516]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0f4      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800394c:	f000 f99e 	bl	8003c8c <RCC_GetSysClockFreqFromPLLSource>
 8003950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4a7c      	ldr	r2, [pc, #496]	@ (8003b48 <HAL_RCC_ClockConfig+0x268>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d93f      	bls.n	80039da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800395a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800396e:	2b00      	cmp	r3, #0
 8003970:	d033      	beq.n	80039da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d12f      	bne.n	80039da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800397a:	4b72      	ldr	r3, [pc, #456]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003982:	4a70      	ldr	r2, [pc, #448]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003988:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e024      	b.n	80039da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003998:	4b6a      	ldr	r3, [pc, #424]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0c6      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	4b66      	ldr	r3, [pc, #408]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0be      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039b8:	f000 f8ce 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4a61      	ldr	r2, [pc, #388]	@ (8003b48 <HAL_RCC_ClockConfig+0x268>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d909      	bls.n	80039da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039da:	4b5a      	ldr	r3, [pc, #360]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4957      	ldr	r1, [pc, #348]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd f9be 	bl	8000d6c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd f9ba 	bl	8000d6c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e095      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 020c 	and.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1eb      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d023      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a42      	ldr	r2, [pc, #264]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a54:	4a3b      	ldr	r2, [pc, #236]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4936      	ldr	r1, [pc, #216]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b80      	cmp	r3, #128	@ 0x80
 8003a74:	d105      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a76:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003a7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a82:	4b2f      	ldr	r3, [pc, #188]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d21d      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a90:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 020f 	bic.w	r2, r3, #15
 8003a98:	4929      	ldr	r1, [pc, #164]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd f964 	bl	8000d6c <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd f960 	bl	8000d6c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e03b      	b.n	8003b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	@ (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1ed      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4917      	ldr	r1, [pc, #92]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af6:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490f      	ldr	r1, [pc, #60]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b0a:	f000 f825 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490c      	ldr	r1, [pc, #48]	@ (8003b4c <HAL_RCC_ClockConfig+0x26c>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a0a      	ldr	r2, [pc, #40]	@ (8003b50 <HAL_RCC_ClockConfig+0x270>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd f8d0 	bl	8000cd4 <HAL_InitTick>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40022000 	.word	0x40022000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	04c4b400 	.word	0x04c4b400
 8003b4c:	08005208 	.word	0x08005208
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d102      	bne.n	8003b70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e047      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b70:	4b27      	ldr	r3, [pc, #156]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b7c:	4b26      	ldr	r3, [pc, #152]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e03e      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b82:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d136      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b98:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bac:	4a1a      	ldr	r2, [pc, #104]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	4a16      	ldr	r2, [pc, #88]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb6:	68d2      	ldr	r2, [r2, #12]
 8003bb8:	0a12      	lsrs	r2, r2, #8
 8003bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	617b      	str	r3, [r7, #20]
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	4a10      	ldr	r2, [pc, #64]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	0a12      	lsrs	r2, r2, #8
 8003bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0e5b      	lsrs	r3, r3, #25
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	3301      	adds	r3, #1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e001      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c00:	693b      	ldr	r3, [r7, #16]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	007a1200 	.word	0x007a1200

08003c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	@ (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000000 	.word	0x20000000

08003c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	@ (8003c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08005218 	.word	0x08005218

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c64:	f7ff ffda 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4904      	ldr	r1, [pc, #16]	@ (8003c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08005218 	.word	0x08005218

08003c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d10c      	bne.n	8003cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	0a12      	lsrs	r2, r2, #8
 8003cbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
    break;
 8003cc8:	e00c      	b.n	8003ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	0a12      	lsrs	r2, r2, #8
 8003cd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    break;
 8003ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cfe:	687b      	ldr	r3, [r7, #4]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d20:	2300      	movs	r3, #0
 8003d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8098 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b43      	ldr	r3, [pc, #268]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d52:	4b3d      	ldr	r3, [pc, #244]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d62:	4b3a      	ldr	r3, [pc, #232]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a39      	ldr	r2, [pc, #228]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d6e:	f7fc fffd 	bl	8000d6c <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d74:	e009      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fc fff9 	bl	8000d6c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d902      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	74fb      	strb	r3, [r7, #19]
        break;
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ef      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d159      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d019      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db8:	4b23      	ldr	r3, [pc, #140]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc4:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de4:	4a18      	ldr	r2, [pc, #96]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fc ffb9 	bl	8000d6c <HAL_GetTick>
 8003dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fc ffb5 	bl	8000d6c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	74fb      	strb	r3, [r7, #19]
            break;
 8003e14:	e006      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ec      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	4903      	ldr	r1, [pc, #12]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	74bb      	strb	r3, [r7, #18]
 8003e46:	e005      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4ba6      	ldr	r3, [pc, #664]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	4aa5      	ldr	r2, [pc, #660]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4ba0      	ldr	r3, [pc, #640]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	499c      	ldr	r1, [pc, #624]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b97      	ldr	r3, [pc, #604]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4994      	ldr	r1, [pc, #592]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	498b      	ldr	r1, [pc, #556]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b86      	ldr	r3, [pc, #536]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4983      	ldr	r1, [pc, #524]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003efa:	4b7e      	ldr	r3, [pc, #504]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	497a      	ldr	r1, [pc, #488]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f1c:	4b75      	ldr	r3, [pc, #468]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4972      	ldr	r1, [pc, #456]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4969      	ldr	r1, [pc, #420]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4961      	ldr	r1, [pc, #388]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f82:	4b5c      	ldr	r3, [pc, #368]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	4958      	ldr	r1, [pc, #352]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d015      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	4950      	ldr	r1, [pc, #320]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fdc:	4b45      	ldr	r3, [pc, #276]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4942      	ldr	r1, [pc, #264]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a3c      	ldr	r2, [pc, #240]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004006:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004014:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	4934      	ldr	r1, [pc, #208]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a2e      	ldr	r2, [pc, #184]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	4b29      	ldr	r3, [pc, #164]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	4926      	ldr	r1, [pc, #152]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	4918      	ldr	r1, [pc, #96]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	490a      	ldr	r1, [pc, #40]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040da:	d105      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fc94 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f898 	bl	800426c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e042      	b.n	8004246 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_TIM_Base_Start+0xac>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_TIM_Base_Start+0x5c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d013      	beq.n	8004204 <HAL_TIM_Base_Start+0x5c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIM_Base_Start+0xb0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_TIM_Base_Start+0x5c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	@ (800425c <HAL_TIM_Base_Start+0xb4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_Base_Start+0x5c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIM_Base_Start+0xb8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIM_Base_Start+0x5c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <HAL_TIM_Base_Start+0xbc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d115      	bne.n	8004230 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <HAL_TIM_Base_Start+0xc0>)
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d015      	beq.n	8004242 <HAL_TIM_Base_Start+0x9a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421c:	d011      	beq.n	8004242 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	e008      	b.n	8004242 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e000      	b.n	8004244 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40013400 	.word	0x40013400
 8004264:	40014000 	.word	0x40014000
 8004268:	00010007 	.word	0x00010007

0800426c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a42      	ldr	r2, [pc, #264]	@ (8004388 <TIM_Base_SetConfig+0x11c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <TIM_Base_SetConfig+0x120>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3e      	ldr	r2, [pc, #248]	@ (8004390 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3d      	ldr	r2, [pc, #244]	@ (8004394 <TIM_Base_SetConfig+0x128>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a33      	ldr	r2, [pc, #204]	@ (8004388 <TIM_Base_SetConfig+0x11c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a30      	ldr	r2, [pc, #192]	@ (800438c <TIM_Base_SetConfig+0x120>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004390 <TIM_Base_SetConfig+0x124>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <TIM_Base_SetConfig+0x128>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <TIM_Base_SetConfig+0x12c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <TIM_Base_SetConfig+0x130>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <TIM_Base_SetConfig+0x134>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a16      	ldr	r2, [pc, #88]	@ (8004388 <TIM_Base_SetConfig+0x11c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0xe8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <TIM_Base_SetConfig+0x128>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0xe8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <TIM_Base_SetConfig+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0xe8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a15      	ldr	r2, [pc, #84]	@ (800439c <TIM_Base_SetConfig+0x130>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0xe8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <TIM_Base_SetConfig+0x134>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	611a      	str	r2, [r3, #16]
  }
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40013400 	.word	0x40013400
 8004398:	40014000 	.word	0x40014000
 800439c:	40014400 	.word	0x40014400
 80043a0:	40014800 	.word	0x40014800

080043a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e065      	b.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d108      	bne.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004432:	d013      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d10c      	bne.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40013400 	.word	0x40013400
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40014000 	.word	0x40014000

080044a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e042      	b.n	8004540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fc fadd 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2224      	movs	r2, #36	@ 0x24
 80044d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 faf4 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f825 	bl	8004548 <UART_SetConfig>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e01b      	b.n	8004540 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fb73 	bl	8004c24 <UART_CheckIdleState>
 800453e:	4603      	mov	r3, r0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800454c:	b08c      	sub	sp, #48	@ 0x30
 800454e:	af00      	add	r7, sp, #0
 8004550:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4bab      	ldr	r3, [pc, #684]	@ (8004824 <UART_SetConfig+0x2dc>)
 8004578:	4013      	ands	r3, r2
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004580:	430b      	orrs	r3, r1
 8004582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4aa0      	ldr	r2, [pc, #640]	@ (8004828 <UART_SetConfig+0x2e0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80045be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f023 010f 	bic.w	r1, r3, #15
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a91      	ldr	r2, [pc, #580]	@ (800482c <UART_SetConfig+0x2e4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d125      	bne.n	8004638 <UART_SetConfig+0xf0>
 80045ec:	4b90      	ldr	r3, [pc, #576]	@ (8004830 <UART_SetConfig+0x2e8>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d81a      	bhi.n	8004630 <UART_SetConfig+0xe8>
 80045fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <UART_SetConfig+0xb8>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	08004621 	.word	0x08004621
 8004608:	08004619 	.word	0x08004619
 800460c:	08004629 	.word	0x08004629
 8004610:	2301      	movs	r3, #1
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004616:	e0d6      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004618:	2302      	movs	r3, #2
 800461a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461e:	e0d2      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004620:	2304      	movs	r3, #4
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004626:	e0ce      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004628:	2308      	movs	r3, #8
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800462e:	e0ca      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004630:	2310      	movs	r3, #16
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004636:	e0c6      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7d      	ldr	r2, [pc, #500]	@ (8004834 <UART_SetConfig+0x2ec>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d138      	bne.n	80046b4 <UART_SetConfig+0x16c>
 8004642:	4b7b      	ldr	r3, [pc, #492]	@ (8004830 <UART_SetConfig+0x2e8>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d82d      	bhi.n	80046ac <UART_SetConfig+0x164>
 8004650:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0x110>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046ad 	.word	0x080046ad
 8004660:	080046ad 	.word	0x080046ad
 8004664:	080046ad 	.word	0x080046ad
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046ad 	.word	0x080046ad
 8004670:	080046ad 	.word	0x080046ad
 8004674:	080046ad 	.word	0x080046ad
 8004678:	08004695 	.word	0x08004695
 800467c:	080046ad 	.word	0x080046ad
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046a5 	.word	0x080046a5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004692:	e098      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004694:	2302      	movs	r3, #2
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800469a:	e094      	b.n	80047c6 <UART_SetConfig+0x27e>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046a2:	e090      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046aa:	e08c      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b2:	e088      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5f      	ldr	r2, [pc, #380]	@ (8004838 <UART_SetConfig+0x2f0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d125      	bne.n	800470a <UART_SetConfig+0x1c2>
 80046be:	4b5c      	ldr	r3, [pc, #368]	@ (8004830 <UART_SetConfig+0x2e8>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046c8:	2b30      	cmp	r3, #48	@ 0x30
 80046ca:	d016      	beq.n	80046fa <UART_SetConfig+0x1b2>
 80046cc:	2b30      	cmp	r3, #48	@ 0x30
 80046ce:	d818      	bhi.n	8004702 <UART_SetConfig+0x1ba>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d00a      	beq.n	80046ea <UART_SetConfig+0x1a2>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d814      	bhi.n	8004702 <UART_SetConfig+0x1ba>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <UART_SetConfig+0x19a>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d008      	beq.n	80046f2 <UART_SetConfig+0x1aa>
 80046e0:	e00f      	b.n	8004702 <UART_SetConfig+0x1ba>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e8:	e06d      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f0:	e069      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046f2:	2304      	movs	r3, #4
 80046f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f8:	e065      	b.n	80047c6 <UART_SetConfig+0x27e>
 80046fa:	2308      	movs	r3, #8
 80046fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004700:	e061      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004702:	2310      	movs	r3, #16
 8004704:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004708:	e05d      	b.n	80047c6 <UART_SetConfig+0x27e>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4b      	ldr	r2, [pc, #300]	@ (800483c <UART_SetConfig+0x2f4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d125      	bne.n	8004760 <UART_SetConfig+0x218>
 8004714:	4b46      	ldr	r3, [pc, #280]	@ (8004830 <UART_SetConfig+0x2e8>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800471e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004720:	d016      	beq.n	8004750 <UART_SetConfig+0x208>
 8004722:	2bc0      	cmp	r3, #192	@ 0xc0
 8004724:	d818      	bhi.n	8004758 <UART_SetConfig+0x210>
 8004726:	2b80      	cmp	r3, #128	@ 0x80
 8004728:	d00a      	beq.n	8004740 <UART_SetConfig+0x1f8>
 800472a:	2b80      	cmp	r3, #128	@ 0x80
 800472c:	d814      	bhi.n	8004758 <UART_SetConfig+0x210>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <UART_SetConfig+0x1f0>
 8004732:	2b40      	cmp	r3, #64	@ 0x40
 8004734:	d008      	beq.n	8004748 <UART_SetConfig+0x200>
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x210>
 8004738:	2300      	movs	r3, #0
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e042      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004746:	e03e      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474e:	e03a      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004756:	e036      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800475e:	e032      	b.n	80047c6 <UART_SetConfig+0x27e>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a30      	ldr	r2, [pc, #192]	@ (8004828 <UART_SetConfig+0x2e0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d12a      	bne.n	80047c0 <UART_SetConfig+0x278>
 800476a:	4b31      	ldr	r3, [pc, #196]	@ (8004830 <UART_SetConfig+0x2e8>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004774:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004778:	d01a      	beq.n	80047b0 <UART_SetConfig+0x268>
 800477a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800477e:	d81b      	bhi.n	80047b8 <UART_SetConfig+0x270>
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004784:	d00c      	beq.n	80047a0 <UART_SetConfig+0x258>
 8004786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478a:	d815      	bhi.n	80047b8 <UART_SetConfig+0x270>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <UART_SetConfig+0x250>
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004794:	d008      	beq.n	80047a8 <UART_SetConfig+0x260>
 8004796:	e00f      	b.n	80047b8 <UART_SetConfig+0x270>
 8004798:	2300      	movs	r3, #0
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479e:	e012      	b.n	80047c6 <UART_SetConfig+0x27e>
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a6:	e00e      	b.n	80047c6 <UART_SetConfig+0x27e>
 80047a8:	2304      	movs	r3, #4
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	e00a      	b.n	80047c6 <UART_SetConfig+0x27e>
 80047b0:	2308      	movs	r3, #8
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	e006      	b.n	80047c6 <UART_SetConfig+0x27e>
 80047b8:	2310      	movs	r3, #16
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047be:	e002      	b.n	80047c6 <UART_SetConfig+0x27e>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a17      	ldr	r2, [pc, #92]	@ (8004828 <UART_SetConfig+0x2e0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f040 80a8 	bne.w	8004922 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d834      	bhi.n	8004844 <UART_SetConfig+0x2fc>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0x298>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004805 	.word	0x08004805
 80047e4:	08004845 	.word	0x08004845
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004813 	.word	0x08004813
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	08004845 	.word	0x08004845
 8004800:	0800481b 	.word	0x0800481b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7ff fa16 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800480a:	e021      	b.n	8004850 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <UART_SetConfig+0x2f8>)
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004810:	e01e      	b.n	8004850 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7ff f9a1 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8004816:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004818:	e01a      	b.n	8004850 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004820:	e016      	b.n	8004850 <UART_SetConfig+0x308>
 8004822:	bf00      	nop
 8004824:	cfff69f3 	.word	0xcfff69f3
 8004828:	40008000 	.word	0x40008000
 800482c:	40013800 	.word	0x40013800
 8004830:	40021000 	.word	0x40021000
 8004834:	40004400 	.word	0x40004400
 8004838:	40004800 	.word	0x40004800
 800483c:	40004c00 	.word	0x40004c00
 8004840:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800484e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 812a 	beq.w	8004aac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ad8 <UART_SetConfig+0x590>)
 800485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004862:	461a      	mov	r2, r3
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	fbb3 f3f2 	udiv	r3, r3, r2
 800486a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d305      	bcc.n	8004888 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	d903      	bls.n	8004890 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800488e:	e10d      	b.n	8004aac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	2200      	movs	r2, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	4a8e      	ldr	r2, [pc, #568]	@ (8004ad8 <UART_SetConfig+0x590>)
 800489e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2200      	movs	r2, #0
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048b2:	f7fb fcb1 	bl	8000218 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	020b      	lsls	r3, r1, #8
 80048c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048cc:	0202      	lsls	r2, r0, #8
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	6849      	ldr	r1, [r1, #4]
 80048d2:	0849      	lsrs	r1, r1, #1
 80048d4:	2000      	movs	r0, #0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4605      	mov	r5, r0
 80048da:	eb12 0804 	adds.w	r8, r2, r4
 80048de:	eb43 0905 	adc.w	r9, r3, r5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	469a      	mov	sl, r3
 80048ea:	4693      	mov	fp, r2
 80048ec:	4652      	mov	r2, sl
 80048ee:	465b      	mov	r3, fp
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb fc90 	bl	8000218 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004906:	d308      	bcc.n	800491a <UART_SetConfig+0x3d2>
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490e:	d204      	bcs.n	800491a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e0c8      	b.n	8004aac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004920:	e0c4      	b.n	8004aac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492a:	d167      	bne.n	80049fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800492c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004930:	2b08      	cmp	r3, #8
 8004932:	d828      	bhi.n	8004986 <UART_SetConfig+0x43e>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0x3f4>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7ff f968 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8004964:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004966:	e014      	b.n	8004992 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7ff f97a 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 800496c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800496e:	e010      	b.n	8004992 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b5a      	ldr	r3, [pc, #360]	@ (8004adc <UART_SetConfig+0x594>)
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004974:	e00d      	b.n	8004992 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7ff f8ef 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 800497a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004984:	e005      	b.n	8004992 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8089 	beq.w	8004aac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad8 <UART_SetConfig+0x590>)
 80049a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ac:	005a      	lsls	r2, r3, #1
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	441a      	add	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	d916      	bls.n	80049f4 <UART_SetConfig+0x4ac>
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049cc:	d212      	bcs.n	80049f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	8bfb      	ldrh	r3, [r7, #30]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	8bfa      	ldrh	r2, [r7, #30]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e05b      	b.n	8004aac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049fa:	e057      	b.n	8004aac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d828      	bhi.n	8004a56 <UART_SetConfig+0x50e>
 8004a04:	a201      	add	r2, pc, #4	@ (adr r2, 8004a0c <UART_SetConfig+0x4c4>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a57 	.word	0x08004a57
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a57 	.word	0x08004a57
 8004a28:	08004a57 	.word	0x08004a57
 8004a2c:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7ff f900 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8004a34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a36:	e014      	b.n	8004a62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7ff f912 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a3e:	e010      	b.n	8004a62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b26      	ldr	r3, [pc, #152]	@ (8004adc <UART_SetConfig+0x594>)
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a44:	e00d      	b.n	8004a62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7ff f887 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8004a4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a4c:	e009      	b.n	8004a62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a54:	e005      	b.n	8004a62 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a60:	bf00      	nop
    }

    if (pclk != 0U)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d021      	beq.n	8004aac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad8 <UART_SetConfig+0x590>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	441a      	add	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	d909      	bls.n	8004aa6 <UART_SetConfig+0x55e>
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a98:	d205      	bcs.n	8004aa6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e002      	b.n	8004aac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3730      	adds	r7, #48	@ 0x30
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	08005220 	.word	0x08005220
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bde:	d10a      	bne.n	8004bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b098      	sub	sp, #96	@ 0x60
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c34:	f7fc f89a 	bl	8000d6c <HAL_GetTick>
 8004c38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d12f      	bne.n	8004ca8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f88e 	bl	8004d78 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d022      	beq.n	8004ca8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e063      	b.n	8004d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d149      	bne.n	8004d4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f857 	bl	8004d78 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d03c      	beq.n	8004d4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	69b9      	ldr	r1, [r7, #24]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e012      	b.n	8004d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3758      	adds	r7, #88	@ 0x58
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d88:	e04f      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d04b      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d92:	f7fb ffeb 	bl	8000d6c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d302      	bcc.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e04e      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d037      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b80      	cmp	r3, #128	@ 0x80
 8004dbe:	d034      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b40      	cmp	r3, #64	@ 0x40
 8004dc4:	d031      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d110      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f838 	bl	8004e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2208      	movs	r2, #8
 8004de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e029      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e04:	d111      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f81e 	bl	8004e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d0a0      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b095      	sub	sp, #84	@ 0x54
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3308      	adds	r3, #8
 8004eae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e3      	bne.n	8004e8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d118      	bne.n	8004efe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f12:	bf00      	nop
 8004f14:	3754      	adds	r7, #84	@ 0x54
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e027      	b.n	8004f84 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	@ 0x24
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004f62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e02d      	b.n	8005004 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	@ 0x24
 8004fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f84f 	bl	8005088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e02d      	b.n	8005080 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	@ 0x24
 8005030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f811 	bl	8005088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050a8:	e031      	b.n	800510e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050aa:	2308      	movs	r3, #8
 80050ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050ae:	2308      	movs	r3, #8
 80050b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	0e5b      	lsrs	r3, r3, #25
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	0f5b      	lsrs	r3, r3, #29
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050d2:	7bbb      	ldrb	r3, [r7, #14]
 80050d4:	7b3a      	ldrb	r2, [r7, #12]
 80050d6:	4911      	ldr	r1, [pc, #68]	@ (800511c <UARTEx_SetNbDataToProcess+0x94>)
 80050d8:	5c8a      	ldrb	r2, [r1, r2]
 80050da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050de:	7b3a      	ldrb	r2, [r7, #12]
 80050e0:	490f      	ldr	r1, [pc, #60]	@ (8005120 <UARTEx_SetNbDataToProcess+0x98>)
 80050e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	7b7a      	ldrb	r2, [r7, #13]
 80050f4:	4909      	ldr	r1, [pc, #36]	@ (800511c <UARTEx_SetNbDataToProcess+0x94>)
 80050f6:	5c8a      	ldrb	r2, [r1, r2]
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050fc:	7b7a      	ldrb	r2, [r7, #13]
 80050fe:	4908      	ldr	r1, [pc, #32]	@ (8005120 <UARTEx_SetNbDataToProcess+0x98>)
 8005100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005102:	fb93 f3f2 	sdiv	r3, r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	08005238 	.word	0x08005238
 8005120:	08005240 	.word	0x08005240

08005124 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800512c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005130:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	b29b      	uxth	r3, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	4013      	ands	r3, r2
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <memset>:
 8005196:	4402      	add	r2, r0
 8005198:	4603      	mov	r3, r0
 800519a:	4293      	cmp	r3, r2
 800519c:	d100      	bne.n	80051a0 <memset+0xa>
 800519e:	4770      	bx	lr
 80051a0:	f803 1b01 	strb.w	r1, [r3], #1
 80051a4:	e7f9      	b.n	800519a <memset+0x4>
	...

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	@ (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	@ (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	@ (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	@ (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 f818 	bl	80051f0 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005250 	.word	0x08005250
 80051e4:	08005250 	.word	0x08005250
 80051e8:	08005250 	.word	0x08005250
 80051ec:	08005254 	.word	0x08005254

080051f0 <_init>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr

080051fc <_fini>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr
