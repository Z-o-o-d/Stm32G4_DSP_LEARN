
STM32G474_FMAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006364  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800657c  0800657c  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800657c  0800657c  0001657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006584  08006584  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006588  08006588  00016588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800658c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000010c  08006698  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08006698  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019774  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce7  00000000  00000000  000398b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001640  00000000  00000000  0003dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280b3  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018068  00000000  00000000  000673e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110402  00000000  00000000  0007f44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006568  00000000  00000000  0018f8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000010c 	.word	0x2000010c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006524 	.word	0x08006524

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000110 	.word	0x20000110
 8000214:	08006524 	.word	0x08006524

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fd38 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f849 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa87 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f000 fa4b 	bl	80009bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 f9b1 	bl	800088c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052a:	f000 f8ab 	bl	8000684 <MX_ADC1_Init>
  MX_DAC1_Init();
 800052e:	f000 f923 	bl	8000778 <MX_DAC1_Init>
  MX_TIM3_Init();
 8000532:	f000 f9f5 	bl	8000920 <MX_TIM3_Init>
  MX_FMAC_Init();
 8000536:	f000 f959 	bl	80007ec <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */

	uint16_t Filter_output_Size = FILTER_OUT_BUFFER_SIZE;
 800053a:	2301      	movs	r3, #1
 800053c:	80fb      	strh	r3, [r7, #6]
    HAL_FMAC_FilterStart(&hfmac, (int16_t*)&FMAC_out, &Filter_output_Size);										// Запускаем фильтр
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	461a      	mov	r2, r3
 8000542:	4915      	ldr	r1, [pc, #84]	; (8000598 <main+0x88>)
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <main+0x8c>)
 8000546:	f003 f90b 	bl	8003760 <HAL_FMAC_FilterStart>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);														// Калибруем АЦП
 800054a:	217f      	movs	r1, #127	; 0x7f
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0x90>)
 800054e:	f002 f889 	bl	8002664 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&FMAC->WDATA, FILTER_IN_BUFFER_SIZE);									// Запускаем АЦП с сохранением по DMA по указателю на FMAC->WDATA
 8000552:	2201      	movs	r2, #1
 8000554:	4913      	ldr	r1, [pc, #76]	; (80005a4 <main+0x94>)
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0x90>)
 8000558:	f001 f9b0 	bl	80018bc <HAL_ADC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)&FMAC_out, FILTER_OUT_BUFFER_SIZE, DAC_ALIGN_12B_R); 	// Выводим входные данные FIR фильтра на ЦАП
 800055c:	2300      	movs	r3, #0
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <main+0x88>)
 8000564:	2100      	movs	r1, #0
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <main+0x98>)
 8000568:	f002 fb18 	bl	8002b9c <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim3);																					// Запускаем таймер
 800056c:	480f      	ldr	r0, [pc, #60]	; (80005ac <main+0x9c>)
 800056e:	f004 fec7 	bl	8005300 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2120      	movs	r1, #32
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f003 fdf9 	bl	8004170 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800057e:	20c8      	movs	r0, #200	; 0xc8
 8000580:	f000 fd74 	bl	800106c <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f003 fdf0 	bl	8004170 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000590:	20c8      	movs	r0, #200	; 0xc8
 8000592:	f000 fd6b 	bl	800106c <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000596:	e7ec      	b.n	8000572 <main+0x62>
 8000598:	20000278 	.word	0x20000278
 800059c:	20000348 	.word	0x20000348
 80005a0:	2000027c 	.word	0x2000027c
 80005a4:	40021418 	.word	0x40021418
 80005a8:	20000128 	.word	0x20000128
 80005ac:	2000019c 	.word	0x2000019c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0a8      	sub	sp, #160	; 0xa0
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005ba:	2238      	movs	r2, #56	; 0x38
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 ffa8 	bl	8006514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2254      	movs	r2, #84	; 0x54
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 ff9a 	bl	8006514 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f003 fe01 	bl	80041e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	2303      	movs	r3, #3
 80005f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005fc:	2306      	movs	r3, #6
 80005fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000602:	2355      	movs	r3, #85	; 0x55
 8000604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fe96 	bl	8004350 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800062a:	f000 fa71 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000646:	2104      	movs	r1, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f999 	bl	8004980 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000654:	f000 fa5c 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC12;
 8000658:	f248 0320 	movw	r3, #32800	; 0x8020
 800065c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000662:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fba4 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 fa4b 	bl	8000b10 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	37a0      	adds	r7, #160	; 0xa0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2220      	movs	r2, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f005 ff39 	bl	8006514 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <MX_ADC1_Init+0xec>)
 80006a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <MX_ADC1_Init+0xec>)
 80006ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_ADC1_Init+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <MX_ADC1_Init+0xec>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_ADC1_Init+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <MX_ADC1_Init+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_ADC1_Init+0xec>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC1_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_ADC1_Init+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_ADC1_Init+0xec>)
 80006de:	2201      	movs	r2, #1
 80006e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_ADC1_Init+0xec>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC1_Init+0xec>)
 80006ec:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC1_Init+0xec>)
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_ADC1_Init+0xec>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0xec>)
 8000704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_ADC1_Init+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <MX_ADC1_Init+0xec>)
 8000714:	f000 ff10 	bl	8001538 <HAL_ADC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800071e:	f000 f9f7 	bl	8000b10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <MX_ADC1_Init+0xec>)
 800072e:	f001 fffb 	bl	8002728 <HAL_ADCEx_MultiModeConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000738:	f000 f9ea 	bl	8000b10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_ADC1_Init+0xf0>)
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000740:	2306      	movs	r3, #6
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000748:	237f      	movs	r3, #127	; 0x7f
 800074a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074c:	2304      	movs	r3, #4
 800074e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_ADC1_Init+0xec>)
 800075a:	f001 f99b 	bl	8001a94 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000764:	f000 f9d4 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3730      	adds	r7, #48	; 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000027c 	.word	0x2000027c
 8000774:	04300002 	.word	0x04300002

08000778 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2230      	movs	r2, #48	; 0x30
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f005 fec5 	bl	8006514 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DAC1_Init+0x6c>)
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <MX_DAC1_Init+0x70>)
 800078e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_DAC1_Init+0x6c>)
 8000792:	f002 f9e0 	bl	8002b56 <HAL_DAC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800079c:	f000 f9b8 	bl	8000b10 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a0:	2302      	movs	r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 80007b0:	2322      	movs	r3, #34	; 0x22
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_DAC1_Init+0x6c>)
 80007cc:	f002 fad4 	bl	8002d78 <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007d6:	f000 f99b 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3730      	adds	r7, #48	; 0x30
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000128 	.word	0x20000128
 80007e8:	50000800 	.word	0x50000800

080007ec <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_FMAC_Init+0x94>)
 80007f4:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_FMAC_Init+0x98>)
 80007f6:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <MX_FMAC_Init+0x94>)
 80007fa:	f002 ff61 	bl	80036c0 <HAL_FMAC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_FMAC_Init+0x1c>
  {
    Error_Handler();
 8000804:	f000 f984 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  FMAC_FilterConfigTypeDef sFmacConfig; 			// declare a filter configuration structure
  sFmacConfig.CoeffBaseAddress = 0; 				// Set the coefficient buffer base address
 8000808:	2300      	movs	r3, #0
 800080a:	733b      	strb	r3, [r7, #12]
  sFmacConfig.CoeffBufferSize = FILTER_TAP; 		// Set the coefficient buffer size to the number of coeffs
 800080c:	237f      	movs	r3, #127	; 0x7f
 800080e:	737b      	strb	r3, [r7, #13]
  sFmacConfig.InputBaseAddress = FILTER_TAP; 		// Set the Input buffer base address to the next free address
 8000810:	237f      	movs	r3, #127	; 0x7f
 8000812:	713b      	strb	r3, [r7, #4]
  sFmacConfig.InputBufferSize = FILTER_TAP + 1;		// Set the input buffer size greater than the number of coeffs
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	717b      	strb	r3, [r7, #5]
  sFmacConfig.InputThreshold = 0; 					// Set the input watermark to zero since we are using DMA
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sFmacConfig.OutputBaseAddress = FILTER_TAP*2 + 1; // Set the Output buffer base address to the next free address
 800081c:	23ff      	movs	r3, #255	; 0xff
 800081e:	73bb      	strb	r3, [r7, #14]
  sFmacConfig.OutputBufferSize = FILTER_OUT_BUFFER_SIZE;// Set the output buffer size
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
  sFmacConfig.OutputThreshold = 0; 					// Set the output watermark to zero since we are using DMA
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sFmacConfig.pCoeffA = NULL; 						// No A coefficients since FIR
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  sFmacConfig.CoeffASize = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	763b      	strb	r3, [r7, #24]
  sFmacConfig.pCoeffB = FilterCoeffB; 				// Pointer to the coefficients in memory
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_FMAC_Init+0x9c>)
 8000832:	61fb      	str	r3, [r7, #28]
  sFmacConfig.CoeffBSize = FILTER_TAP; 				// Number of coefficients
 8000834:	237f      	movs	r3, #127	; 0x7f
 8000836:	f887 3020 	strb.w	r3, [r7, #32]
  sFmacConfig.Filter = FMAC_FUNC_CONVO_FIR; 		// Select FIR filter function
 800083a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  sFmacConfig.InputAccess = FMAC_BUFFER_ACCESS_NONE;// Disable DMA input transfer
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sFmacConfig.OutputAccess = FMAC_BUFFER_ACCESS_DMA;// Enable DMA output transfer
 8000846:	2301      	movs	r3, #1
 8000848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sFmacConfig.Clip = FMAC_CLIP_ENABLED; 			// Enable clipping of the output at 0x7FFF and 0x8000
 800084c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  sFmacConfig.P = FILTER_TAP; 						// P parameter contains number of coefficients
 8000852:	237f      	movs	r3, #127	; 0x7f
 8000854:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sFmacConfig.Q = 0; 								// Q parameter is not used
 8000858:	2300      	movs	r3, #0
 800085a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sFmacConfig.R = 0;  								// R parameter contains the post-shift value (none)
 800085e:	2300      	movs	r3, #0
 8000860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  if (HAL_FMAC_FilterConfig(&hfmac, &sFmacConfig) != HAL_OK) // Configure the FMAC
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_FMAC_Init+0x94>)
 800086a:	f002 ff6a 	bl	8003742 <HAL_FMAC_FilterConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_FMAC_Init+0x8c>
  Error_Handler(); 									// Configuration Error
 8000874:	f000 f94c 	bl	8000b10 <Error_Handler>

  /* USER CODE END FMAC_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000348 	.word	0x20000348
 8000884:	40021400 	.word	0x40021400
 8000888:	20000000 	.word	0x20000000

0800088c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 8000892:	4a22      	ldr	r2, [pc, #136]	; (800091c <MX_LPUART1_UART_Init+0x90>)
 8000894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	f005 f872 	bl	80059b8 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f919 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008e2:	f005 fd29 	bl	8006338 <HAL_UARTEx_SetTxFifoThreshold>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008ec:	f000 f910 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 80008f4:	f005 fd5e 	bl	80063b4 <HAL_UARTEx_SetRxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008fe:	f000 f907 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_LPUART1_UART_Init+0x8c>)
 8000904:	f005 fcdf 	bl	80062c6 <HAL_UARTEx_DisableFifoMode>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800090e:	f000 f8ff 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001e8 	.word	0x200001e8
 800091c:	40008000 	.word	0x40008000

08000920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <MX_TIM3_Init+0x98>)
 8000942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000946:	2201      	movs	r2, #1
 8000948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM3_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 849;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000952:	f240 3251 	movw	r2, #849	; 0x351
 8000956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM3_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000966:	f004 fc73 	bl	8005250 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000970:	f000 f8ce 	bl	8000b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM3_Init+0x94>)
 8000982:	f004 fd2d 	bl	80053e0 <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800098c:	f000 f8c0 	bl	8000b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000990:	2320      	movs	r3, #32
 8000992:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM3_Init+0x94>)
 800099e:	f004 ff75 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f8b2 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000019c 	.word	0x2000019c
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_DMA_Init+0x70>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c6:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <MX_DMA_Init+0x70>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6493      	str	r3, [r2, #72]	; 0x48
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_DMA_Init+0x70>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_DMA_Init+0x70>)
 80009dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_DMA_Init+0x70>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6493      	str	r3, [r2, #72]	; 0x48
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_DMA_Init+0x70>)
 80009e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	200b      	movs	r0, #11
 80009f8:	f002 f879 	bl	8002aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009fc:	200b      	movs	r0, #11
 80009fe:	f002 f890 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200c      	movs	r0, #12
 8000a08:	f002 f871 	bl	8002aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a0c:	200c      	movs	r0, #12
 8000a0e:	f002 f888 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200d      	movs	r0, #13
 8000a18:	f002 f869 	bl	8002aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a1c:	200d      	movs	r0, #13
 8000a1e:	f002 f880 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f003 fb5f 	bl	8004170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_GPIO_Init+0xd8>)
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_GPIO_Init+0xdc>)
 8000ac8:	f003 f9d0 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f003 f9c1 	bl	8003e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f001 fffd 	bl	8002aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af4:	2028      	movs	r0, #40	; 0x28
 8000af6:	f002 f814 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	48000800 	.word	0x48000800

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b52:	f003 fbed 	bl	8004330 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b84:	d14f      	bne.n	8000c26 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a29      	ldr	r2, [pc, #164]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_ADC_MspInit+0xcc>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f003 f94e 	bl	8003e6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bd2:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bd8:	2205      	movs	r2, #5
 8000bda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000c00:	2220      	movs	r2, #32
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000c0c:	f002 fae6 	bl	80031dc <HAL_DMA_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000c16:	f7ff ff7b 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000c1e:	655a      	str	r2, [r3, #84]	; 0x54
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	200002e8 	.word	0x200002e8
 8000c38:	40020008 	.word	0x40020008

08000c3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a2b      	ldr	r2, [pc, #172]	; (8000d08 <HAL_DAC_MspInit+0xcc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d14f      	bne.n	8000cfe <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_DAC_MspInit+0xd0>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f003 f8e2 	bl	8003e6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <HAL_DAC_MspInit+0xd8>)
 8000cac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cb0:	2206      	movs	r2, #6
 8000cb2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ccc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cd8:	2220      	movs	r2, #32
 8000cda:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000ce4:	f002 fa7a 	bl	80031dc <HAL_DMA_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000cee:	f7ff ff0f 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HAL_DAC_MspInit+0xd4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	50000800 	.word	0x50000800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	2000013c 	.word	0x2000013c
 8000d14:	4002001c 	.word	0x4002001c

08000d18 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <HAL_FMAC_MspInit+0x88>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d136      	bne.n	8000d98 <HAL_FMAC_MspInit+0x80>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_FMAC_MspInit+0x8c>)
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_FMAC_MspInit+0x8c>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6493      	str	r3, [r2, #72]	; 0x48
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_FMAC_MspInit+0x8c>)
 8000d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_READ Init */
    hdma_fmac_read.Instance = DMA1_Channel3;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_FMAC_MspInit+0x94>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_fmac_read.Init.Request = DMA_REQUEST_FMAC_READ;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d4a:	226e      	movs	r2, #110	; 0x6e
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_fmac_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_fmac_read.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_fmac_read.Init.MemInc = DMA_MINC_ENABLE;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_fmac_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d66:	615a      	str	r2, [r3, #20]
    hdma_fmac_read.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6e:	619a      	str	r2, [r3, #24]
    hdma_fmac_read.Init.Mode = DMA_CIRCULAR;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d72:	2220      	movs	r2, #32
 8000d74:	61da      	str	r2, [r3, #28]
    hdma_fmac_read.Init.Priority = DMA_PRIORITY_LOW;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_read) != HAL_OK)
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d7e:	f002 fa2d 	bl	80031dc <HAL_DMA_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_FMAC_MspInit+0x74>
    {
      Error_Handler();
 8000d88:	f7ff fec2 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaOut,hdma_fmac_read);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_FMAC_MspInit+0x90>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021400 	.word	0x40021400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	20000384 	.word	0x20000384
 8000dac:	40020030 	.word	0x40020030

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_UART_MspInit+0x7c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d128      	bne.n	8000e24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd6:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_UART_MspInit+0x80>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e02:	230c      	movs	r3, #12
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e12:	230c      	movs	r3, #12
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f003 f824 	bl	8003e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40008000 	.word	0x40008000
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x38>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10b      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_TIM_Base_MspInit+0x3c>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x3c>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_Base_MspInit+0x3c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8b6 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ece:	f002 faa8 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200002e8 	.word	0x200002e8

08000edc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Channel2_IRQHandler+0x10>)
 8000ee2:	f002 fa9e 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000013c 	.word	0x2000013c

08000ef0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_read);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <DMA1_Channel3_IRQHandler+0x10>)
 8000ef6:	f002 fa94 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000384 	.word	0x20000384

08000f04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f0c:	f003 f948 	bl	80041a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f005 fab1 	bl	80064cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6a:	f7ff fad1 	bl	8000510 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000f7c:	0800658c 	.word	0x0800658c
  ldr r2, =_sbss
 8000f80:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000f84:	200003e8 	.word	0x200003e8

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f001 fd9f 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f80e 	bl	8000fbc <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	e001      	b.n	8000fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fac:	f7ff fdb6 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_InitTick+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d022      	beq.n	8001016 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_InitTick+0x6c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fdaa 	bl	8002b3e <HAL_SYSTICK_Config>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10f      	bne.n	8001010 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d809      	bhi.n	800100a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	f001 fd76 	bl	8002aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_InitTick+0x70>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e007      	b.n	800101a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e004      	b.n	800101a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000108 	.word	0x20000108
 8001028:	20000100 	.word	0x20000100
 800102c:	20000104 	.word	0x20000104

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4413      	add	r3, r2
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <HAL_IncTick+0x1c>)
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200003e4 	.word	0x200003e4
 8001050:	20000108 	.word	0x20000108

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200003e4 	.word	0x200003e4

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d004      	beq.n	8001090 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001090:	bf00      	nop
 8001092:	f7ff ffdf 	bl	8001054 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8f7      	bhi.n	8001092 <HAL_Delay+0x26>
  {
  }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000108 	.word	0x20000108

080010b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3360      	adds	r3, #96	; 0x60
 800112a:	461a      	mov	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_ADC_SetOffset+0x44>)
 800113a:	4013      	ands	r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	4313      	orrs	r3, r2
 8001148:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	03fff000 	.word	0x03fff000

08001160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	461a      	mov	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3360      	adds	r3, #96	; 0x60
 800119c:	461a      	mov	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b087      	sub	sp, #28
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3360      	adds	r3, #96	; 0x60
 80011d2:	461a      	mov	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3360      	adds	r3, #96	; 0x60
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	615a      	str	r2, [r3, #20]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3330      	adds	r3, #48	; 0x30
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	4413      	add	r3, r2
 8001298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	211f      	movs	r1, #31
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	401a      	ands	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0e9b      	lsrs	r3, r3, #26
 80012b2:	f003 011f 	and.w	r1, r3, #31
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012c6:	bf00      	nop
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b087      	sub	sp, #28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3314      	adds	r3, #20
 80012e2:	461a      	mov	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	0e5b      	lsrs	r3, r3, #25
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	0d1b      	lsrs	r3, r3, #20
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	2107      	movs	r1, #7
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	401a      	ands	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	0d1b      	lsrs	r3, r3, #20
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0318 	and.w	r3, r3, #24
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <LL_ADC_SetChannelSingleDiff+0x44>)
 800134c:	40d9      	lsrs	r1, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	400b      	ands	r3, r1
 8001352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0007ffff 	.word	0x0007ffff

08001370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 031f 	and.w	r3, r3, #31
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800139c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6093      	str	r3, [r2, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013c4:	d101      	bne.n	80013ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001414:	d101      	bne.n	800141a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <LL_ADC_IsEnabled+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_IsEnabled+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsDisableOngoing+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsDisableOngoing+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d8:	f043 0204 	orr.w	r2, r3, #4
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d101      	bne.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b08      	cmp	r3, #8
 8001524:	d101      	bne.n	800152a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1af      	b.n	80018b2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff faff 	bl	8000b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff19 	bl	80013b0 <LL_ADC_IsDeepPowerDownEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff feff 	bl	800138c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff34 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff18 	bl	80013d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a8:	4b9f      	ldr	r3, [pc, #636]	; (8001828 <HAL_ADC_Init+0x2f0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	4a9f      	ldr	r2, [pc, #636]	; (800182c <HAL_ADC_Init+0x2f4>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff16 	bl	8001400 <LL_ADC_IsInternalRegulatorEnabled>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff76 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001600:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8148 	bne.w	80018a0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8144 	bne.w	80018a0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001620:	f043 0202 	orr.w	r2, r3, #2
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff23 	bl	8001478 <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d141      	bne.n	80016bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001640:	d004      	beq.n	800164c <HAL_ADC_Init+0x114>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7a      	ldr	r2, [pc, #488]	; (8001830 <HAL_ADC_Init+0x2f8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10f      	bne.n	800166c <HAL_ADC_Init+0x134>
 800164c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001650:	f7ff ff12 	bl	8001478 <LL_ADC_IsEnabled>
 8001654:	4604      	mov	r4, r0
 8001656:	4876      	ldr	r0, [pc, #472]	; (8001830 <HAL_ADC_Init+0x2f8>)
 8001658:	f7ff ff0e 	bl	8001478 <LL_ADC_IsEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	4323      	orrs	r3, r4
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	e012      	b.n	8001692 <HAL_ADC_Init+0x15a>
 800166c:	4871      	ldr	r0, [pc, #452]	; (8001834 <HAL_ADC_Init+0x2fc>)
 800166e:	f7ff ff03 	bl	8001478 <LL_ADC_IsEnabled>
 8001672:	4604      	mov	r4, r0
 8001674:	4870      	ldr	r0, [pc, #448]	; (8001838 <HAL_ADC_Init+0x300>)
 8001676:	f7ff feff 	bl	8001478 <LL_ADC_IsEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	431c      	orrs	r4, r3
 800167e:	486f      	ldr	r0, [pc, #444]	; (800183c <HAL_ADC_Init+0x304>)
 8001680:	f7ff fefa 	bl	8001478 <LL_ADC_IsEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	4323      	orrs	r3, r4
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf0c      	ite	eq
 800168c:	2301      	moveq	r3, #1
 800168e:	2300      	movne	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800169e:	d004      	beq.n	80016aa <HAL_ADC_Init+0x172>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a62      	ldr	r2, [pc, #392]	; (8001830 <HAL_ADC_Init+0x2f8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x176>
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_ADC_Init+0x308>)
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_Init+0x178>
 80016ae:	4a65      	ldr	r2, [pc, #404]	; (8001844 <HAL_ADC_Init+0x30c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff fcfa 	bl	80010b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7f5b      	ldrb	r3, [r3, #29]
 80016c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	3b01      	subs	r3, #1
 80016f0:	045b      	lsls	r3, r3, #17
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d009      	beq.n	8001714 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_ADC_Init+0x310>)
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	69b9      	ldr	r1, [r7, #24]
 8001724:	430b      	orrs	r3, r1
 8001726:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fed2 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001748:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fedf 	bl	8001512 <LL_ADC_INJ_IsConversionOngoing>
 8001754:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d17f      	bne.n	800185c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d17c      	bne.n	800185c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001766:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800176e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800177e:	f023 0302 	bic.w	r3, r3, #2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	430b      	orrs	r3, r1
 800178a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6911      	ldr	r1, [r2, #16]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80017c2:	e013      	b.n	80017ec <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d12a      	bne.n	800184c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001818:	430a      	orrs	r2, r1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	e019      	b.n	800185c <HAL_ADC_Init+0x324>
 8001828:	20000100 	.word	0x20000100
 800182c:	053e2d63 	.word	0x053e2d63
 8001830:	50000100 	.word	0x50000100
 8001834:	50000400 	.word	0x50000400
 8001838:	50000500 	.word	0x50000500
 800183c:	50000600 	.word	0x50000600
 8001840:	50000300 	.word	0x50000300
 8001844:	50000700 	.word	0x50000700
 8001848:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d10c      	bne.n	800187e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f023 010f 	bic.w	r1, r3, #15
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
 800187c:	e007      	b.n	800188e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 020f 	bic.w	r2, r2, #15
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	65da      	str	r2, [r3, #92]	; 0x5c
 800189e:	e007      	b.n	80018b0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	f043 0210 	orr.w	r2, r3, #16
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop

080018bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d0:	d004      	beq.n	80018dc <HAL_ADC_Start_DMA+0x20>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_ADC_Start_DMA+0x17c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x24>
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <HAL_ADC_Start_DMA+0x180>)
 80018de:	e000      	b.n	80018e2 <HAL_ADC_Start_DMA+0x26>
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_ADC_Start_DMA+0x184>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd44 	bl	8001370 <LL_ADC_GetMultimode>
 80018e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fdfc 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8096 	bne.w	8001a28 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_Start_DMA+0x4e>
 8001906:	2302      	movs	r3, #2
 8001908:	e091      	b.n	8001a2e <HAL_ADC_Start_DMA+0x172>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d002      	beq.n	8001924 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d17a      	bne.n	8001a1a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fcf5 	bl	8002314 <ADC_Enable>
 800192a:	4603      	mov	r3, r0
 800192c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d16d      	bne.n	8001a10 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_ADC_Start_DMA+0x17c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_ADC_Start_DMA+0xaa>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_ADC_Start_DMA+0x188>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d002      	beq.n	8001962 <HAL_ADC_Start_DMA+0xa6>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e003      	b.n	800196a <HAL_ADC_Start_DMA+0xae>
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_ADC_Start_DMA+0x18c>)
 8001964:	e001      	b.n	800196a <HAL_ADC_Start_DMA+0xae>
 8001966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4293      	cmp	r3, r2
 8001970:	d002      	beq.n	8001978 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	f023 0206 	bic.w	r2, r3, #6
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	661a      	str	r2, [r3, #96]	; 0x60
 800199c:	e002      	b.n	80019a4 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_ADC_Start_DMA+0x190>)
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_ADC_Start_DMA+0x194>)
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_ADC_Start_DMA+0x198>)
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	221c      	movs	r2, #28
 80019c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0210 	orr.w	r2, r2, #16
 80019da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3340      	adds	r3, #64	; 0x40
 80019f6:	4619      	mov	r1, r3
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f001 fc96 	bl	800332c <HAL_DMA_Start_IT>
 8001a00:	4603      	mov	r3, r0
 8001a02:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd5b 	bl	80014c4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a0e:	e00d      	b.n	8001a2c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001a18:	e008      	b.n	8001a2c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a26:	e001      	b.n	8001a2c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	50000300 	.word	0x50000300
 8001a40:	50000700 	.word	0x50000700
 8001a44:	50000500 	.word	0x50000500
 8001a48:	50000400 	.word	0x50000400
 8001a4c:	08002497 	.word	0x08002497
 8001a50:	0800256f 	.word	0x0800256f
 8001a54:	0800258b 	.word	0x0800258b

08001a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0b6      	sub	sp, #216	; 0xd8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x24>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f000 bc13 	b.w	80022de <HAL_ADC_ConfigChannel+0x84a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd11 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 83f3 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f7ff fbcb 	bl	800127a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fcff 	bl	80014ec <LL_ADC_REG_IsConversionOngoing>
 8001aee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fd0b 	bl	8001512 <LL_ADC_INJ_IsConversionOngoing>
 8001afc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 81d9 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 81d4 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b1c:	d10f      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff fbd2 	bl	80012d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fb79 	bl	800122e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b3c:	e00e      	b.n	8001b5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7ff fbc1 	bl	80012d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb69 	bl	800122e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d022      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b8e:	f7ff fac3 	bl	8001118 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6919      	ldr	r1, [r3, #16]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7ff fb0f 	bl	80011c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	7f1b      	ldrb	r3, [r3, #28]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x126>
 8001bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb8:	e000      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x128>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f7ff fb1b 	bl	80011f8 <LL_ADC_SetOffsetSaturation>
 8001bc2:	e17b      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fac8 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x15c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fabd 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	f003 021f 	and.w	r2, r3, #31
 8001bee:	e01e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x19a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fab2 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e004      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x1b2>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	e018      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x1e4>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e004      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fa81 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fa65 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x222>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa5a 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	e01e      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x260>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fa4f 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e004      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x278>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	e018      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x2aa>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e004      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d106      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa1e 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fa02 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10a      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x2e8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f9f7 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 021f 	and.w	r2, r3, #31
 8001d7a:	e01e      	b.n	8001dba <HAL_ADC_ConfigChannel+0x326>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2102      	movs	r1, #2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f9ec 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001daa:	2320      	movs	r3, #32
 8001dac:	e004      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x33e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	e016      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x36c>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e004      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f9bd 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2103      	movs	r1, #3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f9a1 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x3aa>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f996 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	e017      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x3da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2103      	movs	r1, #3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f98b 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e58:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x3f2>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	e011      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x416>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e003      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f968 	bl	800118c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fad9 	bl	8001478 <LL_ADC_IsEnabled>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 813d 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6819      	ldr	r1, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f7ff fa24 	bl	8001328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4aa2      	ldr	r2, [pc, #648]	; (8002170 <HAL_ADC_ConfigChannel+0x6dc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	f040 812e 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10b      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x480>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e019      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x4b4>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f24:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e003      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2b09      	cmp	r3, #9
 8001f40:	bf94      	ite	ls
 8001f42:	2301      	movls	r3, #1
 8001f44:	2300      	movhi	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d079      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x4d4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	3301      	adds	r3, #1
 8001f60:	069b      	lsls	r3, r3, #26
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	e015      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x500>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f78:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x520>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	e017      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x550>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e003      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	ea42 0103 	orr.w	r1, r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_ADC_ConfigChannel+0x576>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	051b      	lsls	r3, r3, #20
 8002008:	e018      	b.n	800203c <HAL_ADC_ConfigChannel+0x5a8>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002022:	2320      	movs	r3, #32
 8002024:	e003      	b.n	800202e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203c:	430b      	orrs	r3, r1
 800203e:	e07e      	b.n	800213e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x5c8>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0e9b      	lsrs	r3, r3, #26
 8002052:	3301      	adds	r3, #1
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205a:	e015      	b.n	8002088 <HAL_ADC_ConfigChannel+0x5f4>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	069b      	lsls	r3, r3, #26
 8002084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x614>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e9b      	lsrs	r3, r3, #26
 800209a:	3301      	adds	r3, #1
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	e017      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x644>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	61fb      	str	r3, [r7, #28]
  return result;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x670>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	3301      	adds	r3, #1
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	3b1e      	subs	r3, #30
 80020fc:	051b      	lsls	r3, r3, #20
 80020fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002102:	e01b      	b.n	800213c <HAL_ADC_ConfigChannel+0x6a8>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	613b      	str	r3, [r7, #16]
  return result;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e003      	b.n	8002128 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	051b      	lsls	r3, r3, #20
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213c:	430b      	orrs	r3, r1
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6892      	ldr	r2, [r2, #8]
 8002142:	4619      	mov	r1, r3
 8002144:	f7ff f8c5 	bl	80012d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_ADC_ConfigChannel+0x6e0>)
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80be 	beq.w	80022d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215e:	d004      	beq.n	800216a <HAL_ADC_ConfigChannel+0x6d6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_ADC_ConfigChannel+0x6e4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10a      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x6ec>
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_ADC_ConfigChannel+0x6e8>)
 800216c:	e009      	b.n	8002182 <HAL_ADC_ConfigChannel+0x6ee>
 800216e:	bf00      	nop
 8002170:	407f0000 	.word	0x407f0000
 8002174:	80080000 	.word	0x80080000
 8002178:	50000100 	.word	0x50000100
 800217c:	50000300 	.word	0x50000300
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <HAL_ADC_ConfigChannel+0x854>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ffba 	bl	80010fc <LL_ADC_GetCommonPathInternalCh>
 8002188:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a56      	ldr	r2, [pc, #344]	; (80022ec <HAL_ADC_ConfigChannel+0x858>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x70c>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <HAL_ADC_ConfigChannel+0x85c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d13a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d134      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b4:	d005      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x72e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4e      	ldr	r2, [pc, #312]	; (80022f4 <HAL_ADC_ConfigChannel+0x860>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	f040 8085 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x742>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_ADC_ConfigChannel+0x864>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x746>
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_ADC_ConfigChannel+0x868>)
 80021d8:	e000      	b.n	80021dc <HAL_ADC_ConfigChannel+0x748>
 80021da:	4a43      	ldr	r2, [pc, #268]	; (80022e8 <HAL_ADC_ConfigChannel+0x854>)
 80021dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7fe ff75 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <HAL_ADC_ConfigChannel+0x86c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	4a44      	ldr	r2, [pc, #272]	; (8002304 <HAL_ADC_ConfigChannel+0x870>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002206:	e002      	b.n	800220e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3b01      	subs	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002214:	e05a      	b.n	80022cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_ADC_ConfigChannel+0x874>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d125      	bne.n	800226c <HAL_ADC_ConfigChannel+0x7d8>
 8002220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11f      	bne.n	800226c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a31      	ldr	r2, [pc, #196]	; (80022f8 <HAL_ADC_ConfigChannel+0x864>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d104      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x7ac>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_ADC_ConfigChannel+0x878>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d047      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002248:	d004      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x7c0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_ADC_ConfigChannel+0x864>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x7c4>
 8002254:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_ADC_ConfigChannel+0x868>)
 8002256:	e000      	b.n	800225a <HAL_ADC_ConfigChannel+0x7c6>
 8002258:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_ADC_ConfigChannel+0x854>)
 800225a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f7fe ff36 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800226a:	e031      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_ADC_ConfigChannel+0x87c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12d      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d127      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_ADC_ConfigChannel+0x864>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002294:	d004      	beq.n	80022a0 <HAL_ADC_ConfigChannel+0x80c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_ADC_ConfigChannel+0x864>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x810>
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_ADC_ConfigChannel+0x868>)
 80022a2:	e000      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x812>
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_ADC_ConfigChannel+0x854>)
 80022a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f7fe ff10 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
 80022b6:	e00c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022cc:	bf00      	nop
 80022ce:	e000      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	37d8      	adds	r7, #216	; 0xd8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	50000700 	.word	0x50000700
 80022ec:	c3210000 	.word	0xc3210000
 80022f0:	90c00010 	.word	0x90c00010
 80022f4:	50000600 	.word	0x50000600
 80022f8:	50000100 	.word	0x50000100
 80022fc:	50000300 	.word	0x50000300
 8002300:	20000100 	.word	0x20000100
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	c7520000 	.word	0xc7520000
 800230c:	50000500 	.word	0x50000500
 8002310:	cb840000 	.word	0xcb840000

08002314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f8a9 	bl	8001478 <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d14d      	bne.n	80023c8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <ADC_Enable+0xc0>)
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e039      	b.n	80023ca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f864 	bl	8001428 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002360:	f7fe fe78 	bl	8001054 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002366:	e028      	b.n	80023ba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f883 	bl	8001478 <LL_ADC_IsEnabled>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff f853 	bl	8001428 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002382:	f7fe fe67 	bl	8001054 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d914      	bls.n	80023ba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00d      	beq.n	80023ba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e007      	b.n	80023ca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d1cf      	bne.n	8002368 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	8000003f 	.word	0x8000003f

080023d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f85a 	bl	800149e <LL_ADC_IsDisableOngoing>
 80023ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f841 	bl	8001478 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d047      	beq.n	800248c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d144      	bne.n	800248c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030d 	and.w	r3, r3, #13
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10c      	bne.n	800242a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f81b 	bl	8001450 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2203      	movs	r2, #3
 8002420:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002422:	f7fe fe17 	bl	8001054 <HAL_GetTick>
 8002426:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002428:	e029      	b.n	800247e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e023      	b.n	800248e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002446:	f7fe fe05 	bl	8001054 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d914      	bls.n	800247e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e007      	b.n	800248e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1dc      	bne.n	8002446 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d14b      	bne.n	8002548 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fec0 	bl	8001254 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d032      	beq.n	8002540 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d12b      	bne.n	8002540 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11f      	bne.n	8002540 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
 800250c:	e018      	b.n	8002540 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fa89 	bl	8001a58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002546:	e00e      	b.n	8002566 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fa93 	bl	8001a80 <HAL_ADC_ErrorCallback>
}
 800255a:	e004      	b.n	8002566 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff fa75 	bl	8001a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fa65 	bl	8001a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LL_ADC_IsEnabled>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_IsEnabled+0x18>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_IsEnabled+0x1a>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_StartCalibration>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80025f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002600:	4313      	orrs	r3, r2
 8002602:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_IsCalibrationOnGoing>:
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_ADCEx_Calibration_Start+0x1c>
 800267c:	2302      	movs	r3, #2
 800267e:	e04d      	b.n	800271c <HAL_ADCEx_Calibration_Start+0xb8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fea5 	bl	80023d8 <ADC_Disable>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d136      	bne.n	8002706 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026a0:	f023 0302 	bic.w	r3, r3, #2
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff96 	bl	80025e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026b8:	e014      	b.n	80026e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_ADCEx_Calibration_Start+0xc0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d90d      	bls.n	80026e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	f023 0312 	bic.w	r3, r3, #18
 80026d0:	f043 0210 	orr.w	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e01b      	b.n	800271c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff94 	bl	8002616 <LL_ADC_IsCalibrationOnGoing>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e2      	bne.n	80026ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	f023 0303 	bic.w	r3, r3, #3
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c
 8002704:	e005      	b.n	8002712 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	0004de01 	.word	0x0004de01

08002728 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b0a1      	sub	sp, #132	; 0x84
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002742:	2302      	movs	r3, #2
 8002744:	e0e7      	b.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800274e:	2300      	movs	r3, #0
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002752:	2300      	movs	r3, #0
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275e:	d102      	bne.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002760:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	e009      	b.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d102      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002770:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	e001      	b.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0be      	b.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff4f 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80027a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff49 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 80a0 	bne.w	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 809c 	bne.w	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c4:	d004      	beq.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a55      	ldr	r2, [pc, #340]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027d0:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027d2:	e000      	b.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027d4:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d04b      	beq.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027f2:	035b      	lsls	r3, r3, #13
 80027f4:	430b      	orrs	r3, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002804:	d004      	beq.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a45      	ldr	r2, [pc, #276]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10f      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002814:	f7ff fed3 	bl	80025be <LL_ADC_IsEnabled>
 8002818:	4604      	mov	r4, r0
 800281a:	4841      	ldr	r0, [pc, #260]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800281c:	f7ff fecf 	bl	80025be <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	4323      	orrs	r3, r4
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e012      	b.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002830:	483c      	ldr	r0, [pc, #240]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002832:	f7ff fec4 	bl	80025be <LL_ADC_IsEnabled>
 8002836:	4604      	mov	r4, r0
 8002838:	483b      	ldr	r0, [pc, #236]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800283a:	f7ff fec0 	bl	80025be <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	431c      	orrs	r4, r3
 8002842:	483c      	ldr	r0, [pc, #240]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002844:	f7ff febb 	bl	80025be <LL_ADC_IsEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	4323      	orrs	r3, r4
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d056      	beq.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002862:	f023 030f 	bic.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	6811      	ldr	r1, [r2, #0]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002876:	e047      	b.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002882:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800288c:	d004      	beq.n	8002898 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10f      	bne.n	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800289c:	f7ff fe8f 	bl	80025be <LL_ADC_IsEnabled>
 80028a0:	4604      	mov	r4, r0
 80028a2:	481f      	ldr	r0, [pc, #124]	; (8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a4:	f7ff fe8b 	bl	80025be <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4323      	orrs	r3, r4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e012      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028b8:	481a      	ldr	r0, [pc, #104]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028ba:	f7ff fe80 	bl	80025be <LL_ADC_IsEnabled>
 80028be:	4604      	mov	r4, r0
 80028c0:	4819      	ldr	r0, [pc, #100]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028c2:	f7ff fe7c 	bl	80025be <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	431c      	orrs	r4, r3
 80028ca:	481a      	ldr	r0, [pc, #104]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028cc:	f7ff fe77 	bl	80025be <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4323      	orrs	r3, r4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028ea:	f023 030f 	bic.w	r3, r3, #15
 80028ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f2:	e009      	b.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002906:	e000      	b.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002908:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002912:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002916:	4618      	mov	r0, r3
 8002918:	3784      	adds	r7, #132	; 0x84
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	50000100 	.word	0x50000100
 8002924:	50000400 	.word	0x50000400
 8002928:	50000500 	.word	0x50000500
 800292c:	50000300 	.word	0x50000300
 8002930:	50000700 	.word	0x50000700
 8002934:	50000600 	.word	0x50000600

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa4:	d301      	bcc.n	8002aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00f      	b.n	8002aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <SysTick_Config+0x40>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f7ff ff8e 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SysTick_Config+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SysTick_Config+0x40>)
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff29 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff40 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff90 	bl	8002a2c <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5f 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff33 	bl	800299c <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa4 	bl	8002a94 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e014      	b.n	8002b92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fe f85f 	bl	8000c3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_DAC_Start_DMA+0x22>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e0ae      	b.n	8002d1c <HAL_DAC_Start_DMA+0x180>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12f      	bne.n	8002c30 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_DAC_Start_DMA+0x188>)
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_DAC_Start_DMA+0x18c>)
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_DAC_Start_DMA+0x190>)
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d013      	beq.n	8002c26 <HAL_DAC_Start_DMA+0x8a>
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d845      	bhi.n	8002c90 <HAL_DAC_Start_DMA+0xf4>
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_DAC_Start_DMA+0x76>
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d005      	beq.n	8002c1c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c10:	e03e      	b.n	8002c90 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3308      	adds	r3, #8
 8002c18:	613b      	str	r3, [r7, #16]
        break;
 8002c1a:	e03c      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	613b      	str	r3, [r7, #16]
        break;
 8002c24:	e037      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	613b      	str	r3, [r7, #16]
        break;
 8002c2e:	e032      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <HAL_DAC_Start_DMA+0x194>)
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a3d      	ldr	r2, [pc, #244]	; (8002d34 <HAL_DAC_Start_DMA+0x198>)
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_DAC_Start_DMA+0x19c>)
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c56:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d013      	beq.n	8002c86 <HAL_DAC_Start_DMA+0xea>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d817      	bhi.n	8002c94 <HAL_DAC_Start_DMA+0xf8>
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_DAC_Start_DMA+0xd6>
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d005      	beq.n	8002c7c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c70:	e010      	b.n	8002c94 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3314      	adds	r3, #20
 8002c78:	613b      	str	r3, [r7, #16]
        break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3318      	adds	r3, #24
 8002c82:	613b      	str	r3, [r7, #16]
        break;
 8002c84:	e007      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	331c      	adds	r3, #28
 8002c8c:	613b      	str	r3, [r7, #16]
        break;
 8002c8e:	e002      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002c94:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d111      	bne.n	8002cc0 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002caa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6898      	ldr	r0, [r3, #8]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	f000 fb39 	bl	800332c <HAL_DMA_Start_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
 8002cbe:	e010      	b.n	8002ce2 <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68d8      	ldr	r0, [r3, #12]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	f000 fb27 	bl	800332c <HAL_DMA_Start_IT>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_DAC_Start_DMA+0x172>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f7fe f9b0 	bl	800106c <HAL_Delay>
 8002d0c:	e005      	b.n	8002d1a <HAL_DAC_Start_DMA+0x17e>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f043 0204 	orr.w	r2, r3, #4
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	080030c9 	.word	0x080030c9
 8002d28:	080030eb 	.word	0x080030eb
 8002d2c:	08003107 	.word	0x08003107
 8002d30:	08003171 	.word	0x08003171
 8002d34:	08003193 	.word	0x08003193
 8002d38:	080031af 	.word	0x080031af

08002d3c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	795b      	ldrb	r3, [r3, #5]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_DAC_ConfigChannel+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e192      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x33e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d174      	bne.n	8002e8e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002da4:	f7fe f956 	bl	8001054 <HAL_GetTick>
 8002da8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d134      	bne.n	8002e1a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002db0:	e011      	b.n	8002dd6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002db2:	f7fe f94f 	bl	8001054 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d90a      	bls.n	8002dd6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f043 0208 	orr.w	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e16f      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e6      	bne.n	8002db2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fe f941 	bl	800106c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
 8002df4:	e01e      	b.n	8002e34 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002df6:	f7fe f92d 	bl	8001054 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d90a      	bls.n	8002e1a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f043 0208 	orr.w	r2, r3, #8
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2203      	movs	r2, #3
 8002e14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e14d      	b.n	80030b6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dbe8      	blt.n	8002df6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fe f921 	bl	800106c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	ea02 0103 	and.w	r1, r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	21ff      	movs	r1, #255	; 0xff
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	ea02 0103 	and.w	r1, r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	409a      	lsls	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d11d      	bne.n	8002ed2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	221f      	movs	r2, #31
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4013      	ands	r3, r2
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	4013      	ands	r3, r2
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d102      	bne.n	8002efc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	e00f      	b.n	8002f1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d102      	bne.n	8002f0a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002f04:	2301      	movs	r3, #1
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	e008      	b.n	8002f1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002f12:	2301      	movs	r3, #1
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	e001      	b.n	8002f1c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	4013      	ands	r3, r2
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_DAC_ConfigChannel+0x1d8>
 8002f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4e:	e000      	b.n	8002f52 <HAL_DAC_ConfigChannel+0x1da>
 8002f50:	2300      	movs	r3, #0
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	795b      	ldrb	r3, [r3, #5]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_DAC_ConfigChannel+0x204>
 8002f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7a:	e000      	b.n	8002f7e <HAL_DAC_ConfigChannel+0x206>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d114      	bne.n	8002fbe <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f94:	f001 fe92 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8002f98:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_DAC_ConfigChannel+0x348>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d904      	bls.n	8002fac <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	e00f      	b.n	8002fcc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_DAC_ConfigChannel+0x34c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d90a      	bls.n	8002fca <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	e006      	b.n	8002fcc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e000      	b.n	8002fcc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002fca:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	4013      	ands	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	4313      	orrs	r3, r2
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	22c0      	movs	r2, #192	; 0xc0
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43da      	mvns	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	400a      	ands	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	f640 710f 	movw	r1, #3855	; 0xf0f
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	ea02 0103 	and.w	r1, r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	409a      	lsls	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	09896800 	.word	0x09896800
 80030c4:	04c4b400 	.word	0x04c4b400

080030c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff fe30 	bl	8002d3c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	711a      	strb	r2, [r3, #4]
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff fe29 	bl	8002d50 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff fe1f 	bl	8002d64 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	711a      	strb	r2, [r3, #4]
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ffd8 	bl	8003134 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	711a      	strb	r2, [r3, #4]
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ffd1 	bl	8003148 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff ffc7 	bl	800315c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	711a      	strb	r2, [r3, #4]
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e08d      	b.n	800330a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_DMA_Init+0x138>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d80f      	bhi.n	800321a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <HAL_DMA_Init+0x13c>)
 8003202:	4413      	add	r3, r2
 8003204:	4a45      	ldr	r2, [pc, #276]	; (800331c <HAL_DMA_Init+0x140>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a42      	ldr	r2, [pc, #264]	; (8003320 <HAL_DMA_Init+0x144>)
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
 8003218:	e00e      	b.n	8003238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_DMA_Init+0x148>)
 8003222:	4413      	add	r3, r2
 8003224:	4a3d      	ldr	r2, [pc, #244]	; (800331c <HAL_DMA_Init+0x140>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_DMA_Init+0x14c>)
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9b6 	bl	80035fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d102      	bne.n	80032a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_DMA_Init+0x104>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d80c      	bhi.n	80032e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9d6 	bl	8003678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e008      	b.n	80032f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40020407 	.word	0x40020407
 8003318:	bffdfff8 	.word	0xbffdfff8
 800331c:	cccccccd 	.word	0xcccccccd
 8003320:	40020000 	.word	0x40020000
 8003324:	bffdfbf8 	.word	0xbffdfbf8
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_DMA_Start_IT+0x20>
 8003348:	2302      	movs	r3, #2
 800334a:	e066      	b.n	800341a <HAL_DMA_Start_IT+0xee>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d155      	bne.n	800340c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f8fb 	bl	8003580 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 020e 	orr.w	r2, r2, #14
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e00f      	b.n	80033c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 020a 	orr.w	r2, r2, #10
 80033c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e005      	b.n	8003418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2204      	movs	r2, #4
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d026      	beq.n	800349c <HAL_DMA_IRQHandler+0x7a>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d021      	beq.n	800349c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0204 	bic.w	r2, r2, #4
 8003474:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2104      	movs	r1, #4
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	2b00      	cmp	r3, #0
 8003490:	d071      	beq.n	8003576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800349a:	e06c      	b.n	8003576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2202      	movs	r2, #2
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02e      	beq.n	800350e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d029      	beq.n	800350e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 020a 	bic.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2102      	movs	r1, #2
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d038      	beq.n	8003576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800350c:	e033      	b.n	8003576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2208      	movs	r2, #8
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02a      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d025      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020e 	bic.w	r2, r2, #14
 800353a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003576:	bf00      	nop
 8003578:	bf00      	nop
}
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003596:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 021f 	and.w	r2, r3, #31
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d108      	bne.n	80035e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035de:	e007      	b.n	80035f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800360c:	429a      	cmp	r2, r3
 800360e:	d802      	bhi.n	8003616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e001      	b.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003618:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b08      	subs	r3, #8
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2201      	movs	r2, #1
 8003650:	409a      	lsls	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40020407 	.word	0x40020407
 8003668:	40020800 	.word	0x40020800
 800366c:	40020820 	.word	0x40020820
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	40020880 	.word	0x40020880

08003678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a08      	ldr	r2, [pc, #32]	; (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800369a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	1000823f 	.word	0x1000823f
 80036bc:	40020940 	.word	0x40020940

080036c0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e033      	b.n	800373a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fb16 	bl	8000d18 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8f3 	bl	80038de <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8c1 	bl	8003880 <FMAC_Reset>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	f043 0210 	orr.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	22a0      	movs	r2, #160	; 0xa0
 8003714:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e008      	b.n	8003730 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_FMAC_FilterConfig>:
  * @param  pConfig pointer to a FMAC_FilterConfigTypeDef structure that
  *         contains the FMAC configuration information.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  return (FMAC_FilterConfig(hfmac, pConfig, PRELOAD_ACCESS_POLLING));
 800374c:	2201      	movs	r2, #1
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f901 	bl	8003958 <FMAC_FilterConfig>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_FMAC_FilterStart>:
  *         an external IP to empty the output buffer.
  * @param  pOutputSize pointer to the size of the output buffer. The number of read data will be written here.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterStart(FMAC_HandleTypeDef *hfmac, int16_t *pOutput, uint16_t *pOutputSize)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpcr = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da01      	bge.n	800377e <HAL_FMAC_FilterStart+0x1e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e054      	b.n	8003828 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_FMAC_FilterStart+0x2a>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e04e      	b.n	8003828 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check handle state is ready */
  if (hfmac->State == HAL_FMAC_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d145      	bne.n	8003822 <HAL_FMAC_FilterStart+0xc2>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_BUSY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2224      	movs	r2, #36	; 0x24
 800379a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* CR: Configure the input access (error interruptions enabled only for IT or DMA) */
    if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_DMA)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	7a1b      	ldrb	r3, [r3, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <HAL_FMAC_FilterStart+0x50>
    {
      tmpcr |= FMAC_DMA_WEN;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e007      	b.n	80037c0 <HAL_FMAC_FilterStart+0x60>
    }
    else if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_IT)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	7a1b      	ldrb	r3, [r3, #8]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d103      	bne.n	80037c0 <HAL_FMAC_FilterStart+0x60>
    {
      tmpcr |= FMAC_IT_WIEN;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Configure the output access (error interruptions enabled only for IT or DMA) */
    if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	7a5b      	ldrb	r3, [r3, #9]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d104      	bne.n	80037d2 <HAL_FMAC_FilterStart+0x72>
    {
      tmpcr |= FMAC_DMA_REN;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e007      	b.n	80037e2 <HAL_FMAC_FilterStart+0x82>
    }
    else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_IT)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	7a5b      	ldrb	r3, [r3, #9]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d103      	bne.n	80037e2 <HAL_FMAC_FilterStart+0x82>
    {
      tmpcr |= FMAC_IT_RIEN;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Write the configuration */
    MODIFY_REG(hfmac->Instance->CR, \
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6113      	str	r3, [r2, #16]
               FMAC_IT_RIEN | FMAC_IT_WIEN | FMAC_DMA_REN | FMAC_CR_DMAWEN, \
               tmpcr);

    /* Register the new output buffer */
    status = FMAC_ConfigFilterOutputBufferUpdateState(hfmac, pOutput, pOutputSize);
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa2c 	bl	8003c5c <FMAC_ConfigFilterOutputBufferUpdateState>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]

    if (status == HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <HAL_FMAC_FilterStart+0xb8>
    {
      /* PARAM: Start the filter ( this can generate interrupts before the end of the HAL_FMAC_FilterStart ) */
      WRITE_REG(hfmac->Instance->PARAM, (uint32_t)(hfmac->FilterParam));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	6852      	ldr	r2, [r2, #4]
 8003816:	60da      	str	r2, [r3, #12]
    }

    /* Reset the busy flag (do not overwrite the possible write and read flag) */
    hfmac->State = HAL_FMAC_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003820:	e001      	b.n	8003826 <HAL_FMAC_FilterStart+0xc6>
  }
  else
  {
    status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_FMAC_HalfOutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_HalfOutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_HalfOutputDataReadyCallback can be implemented in the user file.
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_FMAC_FilterConfigCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterConfigCallback(FMAC_HandleTypeDef *hfmac)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterConfigCallback can be implemented in the user file.
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003888:	f7fd fbe4 	bl	8001054 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800389c:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800389e:	e00f      	b.n	80038c0 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80038a0:	f7fd fbd8 	bl	8001054 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038ae:	d907      	bls.n	80038c0 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00a      	b.n	80038d6 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e8      	bne.n	80038a0 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f807 	bl	80038fa <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f81b 	bl	8003928 <FMAC_ResetOutputStateAndDataPointers>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <FMAC_FilterConfig>:
  * @param  PreloadAccess access mode used for the preload (polling or DMA).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig,
                                           uint8_t PreloadAccess)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMAC_PARAM_P(pConfig->Filter, pConfig->P));
  assert_param(IS_FMAC_PARAM_Q(pConfig->Filter, pConfig->Q));
  assert_param(IS_FMAC_PARAM_R(pConfig->Filter, pConfig->R));

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da01      	bge.n	8003974 <FMAC_FilterConfig+0x1c>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e124      	b.n	8003bbe <FMAC_FilterConfig+0x266>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d001      	beq.n	8003984 <FMAC_FilterConfig+0x2c>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e11c      	b.n	8003bbe <FMAC_FilterConfig+0x266>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 800398c:	f7fd fb62 	bl	8001054 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

  /* Indicate that there is no valid configuration done */
  hfmac->FilterParam = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]

  /* FMAC_X1BUFCFG: Configure the input buffer within the internal memory if required */
  if (pConfig->InputBufferSize != 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <FMAC_FilterConfig+0x6a>
  {
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	4611      	mov	r1, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	7852      	ldrb	r2, [r2, #1]
 80039b4:	0212      	lsls	r2, r2, #8
 80039b6:	b292      	uxth	r2, r2
 80039b8:	4311      	orrs	r1, r2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
                ((((uint32_t)(pConfig->InputBufferSize))  << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos) & \
                 FMAC_X1BUFCFG_X1_BUF_SIZE)));
  }

  /* FMAC_X1BUFCFG: Configure the input threshold if valid when compared to the configured X1 size */
  if (pConfig->InputThreshold != FMAC_THRESHOLD_NO_VALUE)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d00c      	beq.n	80039e6 <FMAC_FilterConfig+0x8e>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_X1_SIZE(hfmac), pConfig->InputThreshold, pConfig->InputAccess));

    MODIFY_REG(hfmac->Instance->X1BUFCFG, \
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
               FMAC_X1BUFCFG_FULL_WM,     \
               ((pConfig->InputThreshold) & FMAC_X1BUFCFG_FULL_WM));
  }

  /* FMAC_X2BUFCFG: Configure the coefficient buffer within the internal memory */
  if (pConfig->CoeffBufferSize != 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	7a5b      	ldrb	r3, [r3, #9]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <FMAC_FilterConfig+0xb8>
  {
    MODIFY_REG(hfmac->Instance->X2BUFCFG,                                                                   \
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	7a12      	ldrb	r2, [r2, #8]
 80039fc:	4611      	mov	r1, r2
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	7a52      	ldrb	r2, [r2, #9]
 8003a02:	0212      	lsls	r2, r2, #8
 8003a04:	b292      	uxth	r2, r2
 8003a06:	4311      	orrs	r1, r2
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6053      	str	r3, [r2, #4]
                ((((uint32_t)(pConfig->CoeffBufferSize))  << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos) &\
                 FMAC_X2BUFCFG_X2_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output buffer within the internal memory if required */
  if (pConfig->OutputBufferSize != 0U)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	7adb      	ldrb	r3, [r3, #11]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <FMAC_FilterConfig+0xe2>
  {
    MODIFY_REG(hfmac->Instance->YBUFCFG,                                                                    \
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	7a92      	ldrb	r2, [r2, #10]
 8003a26:	4611      	mov	r1, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	7ad2      	ldrb	r2, [r2, #11]
 8003a2c:	0212      	lsls	r2, r2, #8
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	4311      	orrs	r1, r2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6093      	str	r3, [r2, #8]
               (((((uint32_t)(pConfig->OutputBaseAddress)) << FMAC_YBUFCFG_Y_BASE_Pos)     & FMAC_YBUFCFG_Y_BASE) |    \
                ((((uint32_t)(pConfig->OutputBufferSize))  << FMAC_YBUFCFG_Y_BUF_SIZE_Pos) & FMAC_YBUFCFG_Y_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output threshold if valid when compared to the configured Y size */
  if (pConfig->OutputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d00c      	beq.n	8003a5e <FMAC_FilterConfig+0x106>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_Y_SIZE(hfmac), pConfig->OutputThreshold, pConfig->OutputAccess));

    MODIFY_REG(hfmac->Instance->YBUFCFG, \
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
               FMAC_YBUFCFG_EMPTY_WM,    \
               ((pConfig->OutputThreshold) & FMAC_YBUFCFG_EMPTY_WM));
  }

  /* FMAC_CR: Configure the clip feature */
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a66:	617b      	str	r3, [r7, #20]

  /* FMAC_CR: If IT or DMA will be used, enable error interrupts.
    * Being more a debugging feature, FMAC_CR_SATIEN isn't enabled by default. */
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	7f5b      	ldrb	r3, [r3, #29]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00b      	beq.n	8003a88 <FMAC_FilterConfig+0x130>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	7f5b      	ldrb	r3, [r3, #29]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d007      	beq.n	8003a88 <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	7f9b      	ldrb	r3, [r3, #30]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d003      	beq.n	8003a88 <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	7f9b      	ldrb	r3, [r3, #30]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d103      	bne.n	8003a90 <FMAC_FilterConfig+0x138>
  {
    tmpcr |= FMAC_IT_UNFLIEN | FMAC_IT_OVFLIEN;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f043 030c 	orr.w	r3, r3, #12
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  /* FMAC_CR: write the value */
  WRITE_REG(hfmac->Instance->CR, tmpcr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	611a      	str	r2, [r3, #16]

  /* Save the input/output accesses in order to configure RIEN, WIEN, DMAREN and DMAWEN during filter start */
  hfmac->InputAccess = pConfig->InputAccess;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	7f5a      	ldrb	r2, [r3, #29]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	721a      	strb	r2, [r3, #8]
  hfmac->OutputAccess = pConfig->OutputAccess;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	7f9a      	ldrb	r2, [r3, #30]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	725a      	strb	r2, [r3, #9]
  assert_param(((pConfig->Filter == FMAC_FUNC_CONVO_FIR) && (x2size >= pConfig->P)) || \
               ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) && \
                (x2size >= ((uint32_t)pConfig->P + (uint32_t)pConfig->Q))));

  /* Build the PARAM value that will be used when starting the filter */
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003ab2:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	b29b      	uxth	r3, r3
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8003abe:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->R)) << FMAC_PARAM_R_Pos) & FMAC_PARAM_R));
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Initialize the coefficient buffer if required (pCoeffA for FIR only) */
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06a      	beq.n	8003bb4 <FMAC_FilterConfig+0x25c>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	7f1b      	ldrb	r3, [r3, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d066      	beq.n	8003bb4 <FMAC_FilterConfig+0x25c>
                 ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) &&
                  (pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U) &&
                  (pConfig->CoeffASize >= pConfig->Q)));

    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	7f1b      	ldrb	r3, [r3, #28]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	7d1b      	ldrb	r3, [r3, #20]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 8003afc:	60da      	str	r2, [r3, #12]
              (((uint32_t)(pConfig->CoeffBSize) << FMAC_PARAM_P_Pos) | \
               ((uint32_t)(pConfig->CoeffASize) << FMAC_PARAM_Q_Pos) | \
               FMAC_FUNC_LOAD_X2 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d133      	bne.n	8003b6c <FMAC_FilterConfig+0x214>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffB), pConfig->CoeffBSize);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f103 0118 	add.w	r1, r3, #24
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	7f1b      	ldrb	r3, [r3, #28]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f85d 	bl	8003bd0 <FMAC_WritePreloadDataIncrementPtr>

      /* Load pCoeffA if needed */
      if ((pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <FMAC_FilterConfig+0x1e0>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	7d1b      	ldrb	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <FMAC_FilterConfig+0x1e0>
      {
        /* Load the buffer into the internal memory */
        FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffA), pConfig->CoeffASize);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f103 0110 	add.w	r1, r3, #16
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	7d1b      	ldrb	r3, [r3, #20]
 8003b30:	461a      	mov	r2, r3
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f84c 	bl	8003bd0 <FMAC_WritePreloadDataIncrementPtr>
      }

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b3c:	6939      	ldr	r1, [r7, #16]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f86b 	bl	8003c1a <FMAC_WaitOnStartUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <FMAC_FilterConfig+0x20a>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	22a0      	movs	r2, #160	; 0xa0
 8003b5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02d      	b.n	8003bbe <FMAC_FilterConfig+0x266>
      }

      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8003b6a:	e027      	b.n	8003bbc <FMAC_FilterConfig+0x264>
    }
    else
    {
      hfmac->pInput = pConfig->pCoeffA;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = pConfig->CoeffASize;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	7d1b      	ldrb	r3, [r3, #20]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <FMAC_FilterConfig+0x270>)
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <FMAC_FilterConfig+0x274>)
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3318      	adds	r3, #24
 8003ba6:	461a      	mov	r2, r3
                               pConfig->CoeffBSize));
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	7f1b      	ldrb	r3, [r3, #28]
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8003bac:	f7ff fbbe 	bl	800332c <HAL_DMA_Start_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	e004      	b.n	8003bbe <FMAC_FilterConfig+0x266>
    }
  }
  else
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	08003d71 	.word	0x08003d71
 8003bcc:	08003e3d 	.word	0x08003e3d

08003bd0 <FMAC_WritePreloadDataIncrementPtr>:
  * @param  ppData pointer to pointer to the data buffer.
  * @param  Size size of the data buffer.
  * @retval None
  */
static void FMAC_WritePreloadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, int16_t **ppData, uint8_t Size)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t index;

  /* Load the buffer into the internal memory */
  for (index = Size; index > 0U; index--)
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	75fb      	strb	r3, [r7, #23]
 8003be2:	e010      	b.n	8003c06 <FMAC_WritePreloadDataIncrementPtr+0x36>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(*ppData))) & FMAC_WDATA_WDATA));
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	619a      	str	r2, [r3, #24]
    (*ppData)++;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	601a      	str	r2, [r3, #0]
  for (index = Size; index > 0U; index--)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1eb      	bne.n	8003be4 <FMAC_WritePreloadDataIncrementPtr+0x14>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <FMAC_WaitOnStartUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_WaitOnStartUntilTimeout(FMAC_HandleTypeDef *hfmac, uint32_t Tickstart, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  /* Wait until flag changes */
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8003c26:	e00f      	b.n	8003c48 <FMAC_WaitOnStartUntilTimeout+0x2e>
  {
    if ((HAL_GetTick() - Tickstart) > Timeout)
 8003c28:	f7fd fa14 	bl	8001054 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d207      	bcs.n	8003c48 <FMAC_WaitOnStartUntilTimeout+0x2e>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e005      	b.n	8003c54 <FMAC_WaitOnStartUntilTimeout+0x3a>
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dbea      	blt.n	8003c28 <FMAC_WaitOnStartUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <FMAC_ConfigFilterOutputBufferUpdateState>:
  *         of data read from FMAC).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_ConfigFilterOutputBufferUpdateState(FMAC_HandleTypeDef *hfmac, int16_t *pOutput,
                                                                  uint16_t *pOutputSize)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  /* Reset the current size */
  hfmac->OutputCurrentSize = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	839a      	strh	r2, [r3, #28]

  /* Check whether a valid pointer was provided */
  if ((pOutput == NULL) || (pOutputSize == NULL) || (*pOutputSize == 0U))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <FMAC_ConfigFilterOutputBufferUpdateState+0x3c>
  {
    /* The user will have to provide a valid configuration later */
    hfmac->pOutput = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003c96:	e03f      	b.n	8003d18 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  /* Handle the pointer depending on the input access */
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7a5b      	ldrb	r3, [r3, #9]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d122      	bne.n	8003ce6 <FMAC_ConfigFilterOutputBufferUpdateState+0x8a>
  {
    hfmac->pOutput = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2225      	movs	r2, #37	; 0x25
 8003cb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaOut->XferHalfCpltCallback = FMAC_DMAHalfOutputDataReady;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <FMAC_ConfigFilterOutputBufferUpdateState+0xc8>)
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaOut->XferCpltCallback = FMAC_DMAOutputDataReady;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <FMAC_ConfigFilterOutputBufferUpdateState+0xcc>)
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaOut->XferErrorCallback = FMAC_DMAError;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <FMAC_ConfigFilterOutputBufferUpdateState+0xd0>)
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC output data read */
    return (HAL_DMA_Start_IT(hfmac->hdmaOut, (uint32_t)&hfmac->Instance->RDATA, (uint32_t)pOutput, *pOutputSize));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	331c      	adds	r3, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	f7ff fb25 	bl	800332c <HAL_DMA_Start_IT>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	e019      	b.n	8003d1a <FMAC_ConfigFilterOutputBufferUpdateState+0xbe>
  }
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_NONE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	7a5b      	ldrb	r3, [r3, #9]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <FMAC_ConfigFilterOutputBufferUpdateState+0xa8>
  {
    hfmac->pOutput = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003d02:	e009      	b.n	8003d18 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  else
  {
    /* Update the output data information (polling, IT) */
    hfmac->pOutput = pOutput;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = pOutputSize;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2225      	movs	r2, #37	; 0x25
 8003d14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08003d31 	.word	0x08003d31
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003e3d 	.word	0x08003e3d

08003d30 <FMAC_DMAHalfOutputDataReady>:
  * @brief  DMA FMAC Output Data process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAHalfOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Call half output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->HalfOutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_HalfOutputDataReadyCallback(hfmac);
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff fd80 	bl	8003844 <HAL_FMAC_HalfOutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <FMAC_DMAOutputDataReady>:
  * @brief  DMA FMAC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the pointers to indicate new data will be needed */
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fde4 	bl	8003928 <FMAC_ResetOutputStateAndDataPointers>

  /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->OutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_OutputDataReadyCallback(hfmac);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fd79 	bl	8003858 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <FMAC_DMAFilterConfig>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterConfig(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	60bb      	str	r3, [r7, #8]

  /* If needed, write CoeffA and exit */
  if (hfmac->pInput != NULL)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d027      	beq.n	8003dd6 <FMAC_DMAFilterConfig+0x66>
  {
    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <FMAC_DMAFilterConfig+0xc4>)
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <FMAC_DMAFilterConfig+0xc8>)
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4619      	mov	r1, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3318      	adds	r3, #24
 8003dae:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8003db4:	f7ff faba 	bl	800332c <HAL_DMA_Start_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <FMAC_DMAFilterConfig+0x5c>
    {
      hfmac->pInput = NULL;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	821a      	strh	r2, [r3, #16]
      return;
 8003dca:	e02f      	b.n	8003e2c <FMAC_DMAFilterConfig+0xbc>
    }

    /* If not exited, there was an error: set FMAC handle state to error */
    hfmac->State = HAL_FMAC_STATE_ERROR;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	22e0      	movs	r2, #224	; 0xe0
 8003dd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003dd4:	e021      	b.n	8003e1a <FMAC_DMAFilterConfig+0xaa>
  }
  else
  {
    /* Wait for the end of the writing */
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e007      	b.n	8003dec <FMAC_DMAFilterConfig+0x7c>
    {
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da06      	bge.n	8003df4 <FMAC_DMAFilterConfig+0x84>
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	3301      	adds	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2bff      	cmp	r3, #255	; 0xff
 8003df0:	d1f4      	bne.n	8003ddc <FMAC_DMAFilterConfig+0x6c>
 8003df2:	e000      	b.n	8003df6 <FMAC_DMAFilterConfig+0x86>
      {
        break;
 8003df4:	bf00      	nop
      }
    }

    /* If 'START' is still set, there was a timeout: set FMAC handle state to timeout */
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da04      	bge.n	8003e0a <FMAC_DMAFilterConfig+0x9a>
    {
      hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	22a0      	movs	r2, #160	; 0xa0
 8003e04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003e08:	e007      	b.n	8003e1a <FMAC_DMAFilterConfig+0xaa>
    }
    else
    {
      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

      /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->FilterConfigCallback(hfmac);
#else
      HAL_FMAC_FilterConfigCallback(hfmac);
 8003e12:	68b8      	ldr	r0, [r7, #8]
 8003e14:	f7ff fd2a 	bl	800386c <HAL_FMAC_FilterConfigCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
      return;
 8003e18:	e008      	b.n	8003e2c <FMAC_DMAFilterConfig+0xbc>
    }
  }

  /* If not exited, there was an error: set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	f043 0208 	orr.w	r2, r3, #8
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f7ff fd02 	bl	8003830 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */

}
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08003d71 	.word	0x08003d71
 8003e38:	08003e3d 	.word	0x08003e3d

08003e3c <FMAC_DMAError>:
  * @brief  DMA FMAC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	22e0      	movs	r2, #224	; 0xe0
 8003e4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fce6 	bl	8003830 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e7a:	e15a      	b.n	8004132 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 814c 	beq.w	800412c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_GPIO_Init+0x48>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d007      	beq.n	8003eb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea8:	2b11      	cmp	r3, #17
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b12      	cmp	r3, #18
 8003eb2:	d130      	bne.n	8003f16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eea:	2201      	movs	r2, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 0201 	and.w	r2, r3, #1
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	2203      	movs	r2, #3
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0xea>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b12      	cmp	r3, #18
 8003f54:	d123      	bne.n	8003f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	6939      	ldr	r1, [r7, #16]
 8003f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80a6 	beq.w	800412c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe0:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <HAL_GPIO_Init+0x2e4>)
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	4a5a      	ldr	r2, [pc, #360]	; (8004150 <HAL_GPIO_Init+0x2e4>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6613      	str	r3, [r2, #96]	; 0x60
 8003fec:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_GPIO_Init+0x2e4>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff8:	4a56      	ldr	r2, [pc, #344]	; (8004154 <HAL_GPIO_Init+0x2e8>)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004022:	d01f      	beq.n	8004064 <HAL_GPIO_Init+0x1f8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a4c      	ldr	r2, [pc, #304]	; (8004158 <HAL_GPIO_Init+0x2ec>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d019      	beq.n	8004060 <HAL_GPIO_Init+0x1f4>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a4b      	ldr	r2, [pc, #300]	; (800415c <HAL_GPIO_Init+0x2f0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <HAL_GPIO_Init+0x1f0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a4a      	ldr	r2, [pc, #296]	; (8004160 <HAL_GPIO_Init+0x2f4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00d      	beq.n	8004058 <HAL_GPIO_Init+0x1ec>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a49      	ldr	r2, [pc, #292]	; (8004164 <HAL_GPIO_Init+0x2f8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <HAL_GPIO_Init+0x1e8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a48      	ldr	r2, [pc, #288]	; (8004168 <HAL_GPIO_Init+0x2fc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_GPIO_Init+0x1e4>
 800404c:	2305      	movs	r3, #5
 800404e:	e00a      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 8004050:	2306      	movs	r3, #6
 8004052:	e008      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 8004054:	2304      	movs	r3, #4
 8004056:	e006      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 8004058:	2303      	movs	r3, #3
 800405a:	e004      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 800405c:	2302      	movs	r3, #2
 800405e:	e002      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_GPIO_Init+0x1fa>
 8004064:	2300      	movs	r3, #0
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	f002 0203 	and.w	r2, r2, #3
 800406c:	0092      	lsls	r2, r2, #2
 800406e:	4093      	lsls	r3, r2
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004076:	4937      	ldr	r1, [pc, #220]	; (8004154 <HAL_GPIO_Init+0x2e8>)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	089b      	lsrs	r3, r3, #2
 800407c:	3302      	adds	r3, #2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004084:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_GPIO_Init+0x300>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a8:	4a30      	ldr	r2, [pc, #192]	; (800416c <HAL_GPIO_Init+0x300>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80040ae:	4b2f      	ldr	r3, [pc, #188]	; (800416c <HAL_GPIO_Init+0x300>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040d2:	4a26      	ldr	r2, [pc, #152]	; (800416c <HAL_GPIO_Init+0x300>)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_GPIO_Init+0x300>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040fc:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_GPIO_Init+0x300>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_GPIO_Init+0x300>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004126:	4a11      	ldr	r2, [pc, #68]	; (800416c <HAL_GPIO_Init+0x300>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3301      	adds	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	f47f ae9d 	bne.w	8003e7c <HAL_GPIO_Init+0x10>
  }
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40021000 	.word	0x40021000
 8004154:	40010000 	.word	0x40010000
 8004158:	48000400 	.word	0x48000400
 800415c:	48000800 	.word	0x48000800
 8004160:	48000c00 	.word	0x48000c00
 8004164:	48001000 	.word	0x48001000
 8004168:	48001400 	.word	0x48001400
 800416c:	40010400 	.word	0x40010400

08004170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
 800417c:	4613      	mov	r3, r2
 800417e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004180:	787b      	ldrb	r3, [r7, #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800418c:	e002      	b.n	8004194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041b6:	4a05      	ldr	r2, [pc, #20]	; (80041cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f806 	bl	80041d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d141      	bne.n	800427a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041f6:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d131      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004204:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420a:	4a46      	ldr	r2, [pc, #280]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800421c:	4a41      	ldr	r2, [pc, #260]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2232      	movs	r2, #50	; 0x32
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423a:	e002      	b.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004242:	4b38      	ldr	r3, [pc, #224]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	d102      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f2      	bne.n	800423c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004256:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d158      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e057      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426e:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004278:	e04d      	b.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d141      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d131      	bne.n	80042f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	4a23      	ldr	r2, [pc, #140]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2232      	movs	r2, #50	; 0x32
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	3301      	adds	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c6:	e002      	b.n	80042ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d102      	bne.n	80042e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f2      	bne.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d112      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e011      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004304:	e007      	b.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004314:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40007000 	.word	0x40007000
 8004328:	20000100 	.word	0x20000100
 800432c:	431bde83 	.word	0x431bde83

08004330 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800433a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800433e:	6093      	str	r3, [r2, #8]
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40007000 	.word	0x40007000

08004350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e308      	b.n	8004974 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d075      	beq.n	800445a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436e:	4ba3      	ldr	r3, [pc, #652]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004378:	4ba0      	ldr	r3, [pc, #640]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d102      	bne.n	800438e <HAL_RCC_OscConfig+0x3e>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d002      	beq.n	8004394 <HAL_RCC_OscConfig+0x44>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d10b      	bne.n	80043ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	4b99      	ldr	r3, [pc, #612]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05b      	beq.n	8004458 <HAL_RCC_OscConfig+0x108>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d157      	bne.n	8004458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e2e3      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x74>
 80043b6:	4b91      	ldr	r3, [pc, #580]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a90      	ldr	r2, [pc, #576]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x98>
 80043ce:	4b8b      	ldr	r3, [pc, #556]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a8a      	ldr	r2, [pc, #552]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b88      	ldr	r3, [pc, #544]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a87      	ldr	r2, [pc, #540]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043e8:	4b84      	ldr	r3, [pc, #528]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a83      	ldr	r2, [pc, #524]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a80      	ldr	r2, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fc fe24 	bl	8001054 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fc fe20 	bl	8001054 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e2a8      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004422:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xc0>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fc fe10 	bl	8001054 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fc fe0c 	bl	8001054 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e294      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444a:	4b6c      	ldr	r3, [pc, #432]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0xe8>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d075      	beq.n	8004552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d102      	bne.n	8004486 <HAL_RCC_OscConfig+0x136>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d002      	beq.n	800448c <HAL_RCC_OscConfig+0x13c>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d11f      	bne.n	80044cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_OscConfig+0x154>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e267      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b55      	ldr	r3, [pc, #340]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	4952      	ldr	r1, [pc, #328]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCC_OscConfig+0x2b0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc fd7d 	bl	8000fbc <HAL_InitTick>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d043      	beq.n	8004550 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e253      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d4:	4b49      	ldr	r3, [pc, #292]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a48      	ldr	r2, [pc, #288]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fc fdb8 	bl	8001054 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fc fdb4 	bl	8001054 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e23c      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fa:	4b40      	ldr	r3, [pc, #256]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	4939      	ldr	r1, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
 800451a:	e01a      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451c:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a36      	ldr	r2, [pc, #216]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc fd94 	bl	8001054 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004530:	f7fc fd90 	bl	8001054 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e218      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1e0>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d03c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456c:	4a23      	ldr	r2, [pc, #140]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fc fd6d 	bl	8001054 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457e:	f7fc fd69 	bl	8001054 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1f1      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ef      	beq.n	800457e <HAL_RCC_OscConfig+0x22e>
 800459e:	e01b      	b.n	80045d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fc fd50 	bl	8001054 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fc fd4c 	bl	8001054 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e1d4      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ef      	bne.n	80045b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80ab 	beq.w	800473c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2300      	movs	r3, #0
 80045e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x2b4>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e005      	b.n	8004606 <HAL_RCC_OscConfig+0x2b6>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	20000104 	.word	0x20000104
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	4baf      	ldr	r3, [pc, #700]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	4aae      	ldr	r2, [pc, #696]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6593      	str	r3, [r2, #88]	; 0x58
 8004616:	4bac      	ldr	r3, [pc, #688]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004626:	4ba9      	ldr	r3, [pc, #676]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004632:	4ba6      	ldr	r3, [pc, #664]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4aa5      	ldr	r2, [pc, #660]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fc fd09 	bl	8001054 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fc fd05 	bl	8001054 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e18d      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004658:	4b9c      	ldr	r3, [pc, #624]	; (80048cc <HAL_RCC_OscConfig+0x57c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d108      	bne.n	800467e <HAL_RCC_OscConfig+0x32e>
 800466c:	4b96      	ldr	r3, [pc, #600]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	4a95      	ldr	r2, [pc, #596]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800467c:	e024      	b.n	80046c8 <HAL_RCC_OscConfig+0x378>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d110      	bne.n	80046a8 <HAL_RCC_OscConfig+0x358>
 8004686:	4b90      	ldr	r3, [pc, #576]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	4a8e      	ldr	r2, [pc, #568]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800468e:	f043 0304 	orr.w	r3, r3, #4
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004696:	4b8c      	ldr	r3, [pc, #560]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	4a8a      	ldr	r2, [pc, #552]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a6:	e00f      	b.n	80046c8 <HAL_RCC_OscConfig+0x378>
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	4a86      	ldr	r2, [pc, #536]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046b8:	4b83      	ldr	r3, [pc, #524]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	4a82      	ldr	r2, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d016      	beq.n	80046fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fc fcc0 	bl	8001054 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fc fcbc 	bl	8001054 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e142      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ee:	4b76      	ldr	r3, [pc, #472]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ed      	beq.n	80046d8 <HAL_RCC_OscConfig+0x388>
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fc fca9 	bl	8001054 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fc fca5 	bl	8001054 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e12b      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471c:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ed      	bne.n	8004706 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800472a:	7ffb      	ldrb	r3, [r7, #31]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a64      	ldr	r2, [pc, #400]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d03c      	beq.n	80047c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01c      	beq.n	800478a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004750:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004756:	4a5c      	ldr	r2, [pc, #368]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fc fc78 	bl	8001054 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004768:	f7fc fc74 	bl	8001054 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0fc      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800477c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ef      	beq.n	8004768 <HAL_RCC_OscConfig+0x418>
 8004788:	e01b      	b.n	80047c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004790:	4a4d      	ldr	r2, [pc, #308]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fc fc5b 	bl	8001054 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a2:	f7fc fc57 	bl	8001054 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0df      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ef      	bne.n	80047a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80d3 	beq.w	8004972 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	f000 808d 	beq.w	80048f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d15a      	bne.n	8004898 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a38      	ldr	r2, [pc, #224]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80047e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fc fc31 	bl	8001054 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fc fc2d 	bl	8001054 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e0b5      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004814:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <HAL_RCC_OscConfig+0x580>)
 800481a:	4013      	ands	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6a11      	ldr	r1, [r2, #32]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004824:	3a01      	subs	r2, #1
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800484e:	06d2      	lsls	r2, r2, #27
 8004850:	430a      	orrs	r2, r1
 8004852:	491d      	ldr	r1, [pc, #116]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fc fbf0 	bl	8001054 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fc fbec 	bl	8001054 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e074      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x528>
 8004896:	e06c      	b.n	8004972 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc fbc8 	bl	8001054 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	e00e      	b.n	80048e6 <HAL_RCC_OscConfig+0x596>
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
 80048d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fc fbbe 	bl	8001054 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e046      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e6:	4b25      	ldr	r3, [pc, #148]	; (800497c <HAL_RCC_OscConfig+0x62c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x584>
 80048f2:	e03e      	b.n	8004972 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e039      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <HAL_RCC_OscConfig+0x62c>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0203 	and.w	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d12c      	bne.n	800496e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	3b01      	subs	r3, #1
 8004920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d123      	bne.n	800496e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d11b      	bne.n	800496e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d113      	bne.n	800496e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	3b01      	subs	r3, #1
 8004954:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d109      	bne.n	800496e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e11e      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b91      	ldr	r3, [pc, #580]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d910      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b8e      	ldr	r3, [pc, #568]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	498c      	ldr	r1, [pc, #560]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b8a      	ldr	r3, [pc, #552]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e106      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d073      	beq.n	8004abc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d129      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049dc:	4b81      	ldr	r3, [pc, #516]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0f4      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049ec:	f000 f99e 	bl	8004d2c <RCC_GetSysClockFreqFromPLLSource>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4a7c      	ldr	r2, [pc, #496]	; (8004be8 <HAL_RCC_ClockConfig+0x268>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d93f      	bls.n	8004a7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049fa:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d033      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d12f      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	4a70      	ldr	r2, [pc, #448]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e024      	b.n	8004a7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a38:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0c6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a48:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0be      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a58:	f000 f8ce 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4a61      	ldr	r2, [pc, #388]	; (8004be8 <HAL_RCC_ClockConfig+0x268>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d909      	bls.n	8004a7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a66:	4b5f      	ldr	r3, [pc, #380]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a6e:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 0203 	bic.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4957      	ldr	r1, [pc, #348]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fc fae2 	bl	8001054 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fc fade 	bl	8001054 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e095      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	4b4e      	ldr	r3, [pc, #312]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 020c 	and.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1eb      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d023      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a42      	ldr	r2, [pc, #264]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ade:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004aec:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004af4:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004afc:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4936      	ldr	r1, [pc, #216]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b16:	4b33      	ldr	r3, [pc, #204]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b22:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d21d      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 020f 	bic.w	r2, r3, #15
 8004b38:	4929      	ldr	r1, [pc, #164]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b40:	f7fc fa88 	bl	8001054 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fc fa84 	bl	8001054 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e03b      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d1ed      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4917      	ldr	r1, [pc, #92]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	490f      	ldr	r1, [pc, #60]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004baa:	f000 f825 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	490c      	ldr	r1, [pc, #48]	; (8004bec <HAL_RCC_ClockConfig+0x26c>)
 8004bbc:	5ccb      	ldrb	r3, [r1, r3]
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x270>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x274>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc f9f4 	bl	8000fbc <HAL_InitTick>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	04c4b400 	.word	0x04c4b400
 8004bec:	0800653c 	.word	0x0800653c
 8004bf0:	20000100 	.word	0x20000100
 8004bf4:	20000104 	.word	0x20000104

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bfe:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d102      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	e047      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c1c:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e03e      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c22:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d136      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3301      	adds	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c56:	68d2      	ldr	r2, [r2, #12]
 8004c58:	0a12      	lsrs	r2, r2, #8
 8004c5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	617b      	str	r3, [r7, #20]
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c70:	68d2      	ldr	r2, [r2, #12]
 8004c72:	0a12      	lsrs	r2, r2, #8
 8004c74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
      break;
 8004c7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	0e5b      	lsrs	r3, r3, #25
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ca0:	693b      	ldr	r3, [r7, #16]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	016e3600 	.word	0x016e3600

08004cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000100 	.word	0x20000100

08004cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cd8:	f7ff fff0 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4904      	ldr	r1, [pc, #16]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	0800654c 	.word	0x0800654c

08004d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d04:	f7ff ffda 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0adb      	lsrs	r3, r3, #11
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	0800654c 	.word	0x0800654c

08004d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d10c      	bne.n	8004d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d5a:	68d2      	ldr	r2, [r2, #12]
 8004d5c:	0a12      	lsrs	r2, r2, #8
 8004d5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	617b      	str	r3, [r7, #20]
    break;
 8004d68:	e00c      	b.n	8004d84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d6a:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d74:	68d2      	ldr	r2, [r2, #12]
 8004d76:	0a12      	lsrs	r2, r2, #8
 8004d78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
    break;
 8004d82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0e5b      	lsrs	r3, r3, #25
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d9e:	687b      	ldr	r3, [r7, #4]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40021000 	.word	0x40021000
 8004db0:	016e3600 	.word	0x016e3600
 8004db4:	00f42400 	.word	0x00f42400

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8098 	beq.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e02:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e0e:	f7fc f921 	bl	8001054 <HAL_GetTick>
 8004e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e14:	e009      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fc f91d 	bl	8001054 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d902      	bls.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	74fb      	strb	r3, [r7, #19]
        break;
 8004e28:	e005      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2a:	4b30      	ldr	r3, [pc, #192]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ef      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d159      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01e      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d019      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e64:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e74:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fc f8dd 	bl	8001054 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9c:	e00b      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fc f8d9 	bl	8001054 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d902      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8004eb4:	e006      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ec      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	74bb      	strb	r3, [r7, #18]
 8004ee6:	e005      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef4:	7c7b      	ldrb	r3, [r7, #17]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efa:	4baf      	ldr	r3, [pc, #700]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	4aae      	ldr	r2, [pc, #696]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f12:	4ba9      	ldr	r3, [pc, #676]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f023 0203 	bic.w	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	49a5      	ldr	r1, [pc, #660]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f34:	4ba0      	ldr	r3, [pc, #640]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f023 020c 	bic.w	r2, r3, #12
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	499d      	ldr	r1, [pc, #628]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f56:	4b98      	ldr	r3, [pc, #608]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4994      	ldr	r1, [pc, #592]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f78:	4b8f      	ldr	r3, [pc, #572]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	498c      	ldr	r1, [pc, #560]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f9a:	4b87      	ldr	r3, [pc, #540]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	4983      	ldr	r1, [pc, #524]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	497b      	ldr	r1, [pc, #492]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fde:	4b76      	ldr	r3, [pc, #472]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	4972      	ldr	r1, [pc, #456]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005000:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	496a      	ldr	r1, [pc, #424]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005022:	4b65      	ldr	r3, [pc, #404]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	4961      	ldr	r1, [pc, #388]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005044:	4b5c      	ldr	r3, [pc, #368]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	4959      	ldr	r1, [pc, #356]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4950      	ldr	r1, [pc, #320]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4948      	ldr	r1, [pc, #288]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a6:	d105      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a8:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a42      	ldr	r2, [pc, #264]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050c0:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	493a      	ldr	r1, [pc, #232]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050de:	d105      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e0:	4b35      	ldr	r3, [pc, #212]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050f8:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	492c      	ldr	r1, [pc, #176]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005116:	d105      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800511e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005130:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	491e      	ldr	r1, [pc, #120]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005168:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4910      	ldr	r1, [pc, #64]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005186:	d105      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d018      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	4902      	ldr	r1, [pc, #8]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051b6:	e001      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80051b8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c4:	d105      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051c6:	4b21      	ldr	r3, [pc, #132]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4a20      	ldr	r2, [pc, #128]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d015      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ec:	4917      	ldr	r1, [pc, #92]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fc:	d105      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d015      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800521c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	4909      	ldr	r1, [pc, #36]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005234:	d105      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800523c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005240:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005242:	7cbb      	ldrb	r3, [r7, #18]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000

08005250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e049      	b.n	80052f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fb fddc 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f000 f9b8 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d001      	beq.n	8005318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e04c      	b.n	80053b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <HAL_TIM_Base_Start+0xc0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d01d      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <HAL_TIM_Base_Start+0xc4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_TIM_Base_Start+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_TIM_Base_Start+0xcc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIM_Base_Start+0xd0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIM_Base_Start+0xd4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_TIM_Base_Start+0x70>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIM_Base_Start+0xd8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d115      	bne.n	800539c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <HAL_TIM_Base_Start+0xdc>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d015      	beq.n	80053ae <HAL_TIM_Base_Start+0xae>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d011      	beq.n	80053ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e008      	b.n	80053ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e000      	b.n	80053b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40015000 	.word	0x40015000
 80053dc:	00010007 	.word	0x00010007

080053e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIM_ConfigClockSource+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0f5      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x204>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800541a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005422:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6e      	ldr	r2, [pc, #440]	; (80055ec <HAL_TIM_ConfigClockSource+0x20c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 80c1 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005438:	4a6c      	ldr	r2, [pc, #432]	; (80055ec <HAL_TIM_ConfigClockSource+0x20c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f200 80c6 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005440:	4a6b      	ldr	r2, [pc, #428]	; (80055f0 <HAL_TIM_ConfigClockSource+0x210>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f000 80b9 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005448:	4a69      	ldr	r2, [pc, #420]	; (80055f0 <HAL_TIM_ConfigClockSource+0x210>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f200 80be 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005450:	4a68      	ldr	r2, [pc, #416]	; (80055f4 <HAL_TIM_ConfigClockSource+0x214>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f000 80b1 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005458:	4a66      	ldr	r2, [pc, #408]	; (80055f4 <HAL_TIM_ConfigClockSource+0x214>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f200 80b6 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005460:	4a65      	ldr	r2, [pc, #404]	; (80055f8 <HAL_TIM_ConfigClockSource+0x218>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f000 80a9 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005468:	4a63      	ldr	r2, [pc, #396]	; (80055f8 <HAL_TIM_ConfigClockSource+0x218>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f200 80ae 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005470:	4a62      	ldr	r2, [pc, #392]	; (80055fc <HAL_TIM_ConfigClockSource+0x21c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f000 80a1 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005478:	4a60      	ldr	r2, [pc, #384]	; (80055fc <HAL_TIM_ConfigClockSource+0x21c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	f200 80a6 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005480:	4a5f      	ldr	r2, [pc, #380]	; (8005600 <HAL_TIM_ConfigClockSource+0x220>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f000 8099 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005488:	4a5d      	ldr	r2, [pc, #372]	; (8005600 <HAL_TIM_ConfigClockSource+0x220>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f200 809e 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 8005490:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005494:	f000 8091 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005498:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800549c:	f200 8096 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a4:	f000 8089 	beq.w	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	f200 808e 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b4:	d03e      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0x154>
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ba:	f200 8087 	bhi.w	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	f000 8085 	beq.w	80055d0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	d87f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054cc:	2b70      	cmp	r3, #112	; 0x70
 80054ce:	d01a      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x126>
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d87b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054d4:	2b60      	cmp	r3, #96	; 0x60
 80054d6:	d050      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x19a>
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d877      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054dc:	2b50      	cmp	r3, #80	; 0x50
 80054de:	d03c      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x17a>
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d873      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d058      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x1ba>
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d86f      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054ec:	2b30      	cmp	r3, #48	; 0x30
 80054ee:	d064      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 80054f0:	2b30      	cmp	r3, #48	; 0x30
 80054f2:	d86b      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d060      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d867      	bhi.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x1da>
 8005500:	2b10      	cmp	r3, #16
 8005502:	d05a      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005504:	e062      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f000 f999 	bl	800584c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005528:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	609a      	str	r2, [r3, #8]
      break;
 8005532:	e04e      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f000 f982 	bl	800584c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005556:	609a      	str	r2, [r3, #8]
      break;
 8005558:	e03b      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f8f4 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2150      	movs	r1, #80	; 0x50
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f94d 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005578:	e02b      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f913 	bl	80057b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2160      	movs	r1, #96	; 0x60
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f93d 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005598:	e01b      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f8d4 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f92d 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 80055b8:	e00b      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 f924 	bl	8005812 <TIM_ITRx_SetConfig>
        break;
 80055ca:	e002      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80055cc:	bf00      	nop
 80055ce:	e000      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 80055d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	00100070 	.word	0x00100070
 80055f0:	00100060 	.word	0x00100060
 80055f4:	00100050 	.word	0x00100050
 80055f8:	00100040 	.word	0x00100040
 80055fc:	00100030 	.word	0x00100030
 8005600:	00100020 	.word	0x00100020

08005604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a46      	ldr	r2, [pc, #280]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d017      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d013      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a43      	ldr	r2, [pc, #268]	; (8005734 <TIM_Base_SetConfig+0x130>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a42      	ldr	r2, [pc, #264]	; (8005738 <TIM_Base_SetConfig+0x134>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a41      	ldr	r2, [pc, #260]	; (800573c <TIM_Base_SetConfig+0x138>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a40      	ldr	r2, [pc, #256]	; (8005740 <TIM_Base_SetConfig+0x13c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3f      	ldr	r2, [pc, #252]	; (8005744 <TIM_Base_SetConfig+0x140>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d108      	bne.n	800565e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a33      	ldr	r2, [pc, #204]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d023      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566c:	d01f      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a30      	ldr	r2, [pc, #192]	; (8005734 <TIM_Base_SetConfig+0x130>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <TIM_Base_SetConfig+0x134>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2e      	ldr	r2, [pc, #184]	; (800573c <TIM_Base_SetConfig+0x138>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <TIM_Base_SetConfig+0x13c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <TIM_Base_SetConfig+0x144>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2c      	ldr	r2, [pc, #176]	; (800574c <TIM_Base_SetConfig+0x148>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <TIM_Base_SetConfig+0x14c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <TIM_Base_SetConfig+0x140>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <TIM_Base_SetConfig+0x12c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <TIM_Base_SetConfig+0x110>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	; (8005740 <TIM_Base_SetConfig+0x13c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <TIM_Base_SetConfig+0x110>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a14      	ldr	r2, [pc, #80]	; (8005748 <TIM_Base_SetConfig+0x144>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_Base_SetConfig+0x110>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <TIM_Base_SetConfig+0x148>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_Base_SetConfig+0x110>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_Base_SetConfig+0x14c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0x110>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <TIM_Base_SetConfig+0x140>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d103      	bne.n	800571c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	615a      	str	r2, [r3, #20]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40015000 	.word	0x40015000
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 030a 	bic.w	r3, r3, #10
 8005790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	f043 0307 	orr.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	021a      	lsls	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	431a      	orrs	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4313      	orrs	r3, r2
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e074      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a34      	ldr	r2, [pc, #208]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005924:	d01d      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40015000 	.word	0x40015000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40014000 	.word	0x40014000

080059b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e042      	b.n	8005a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fb f9e7 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2224      	movs	r2, #36	; 0x24
 80059e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f82c 	bl	8005a58 <UART_SetConfig>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e022      	b.n	8005a50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 faea 	bl	8005fec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fb71 	bl	8006130 <UART_CheckIdleState>
 8005a4e:	4603      	mov	r3, r0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	b5b0      	push	{r4, r5, r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4bb1      	ldr	r3, [pc, #708]	; (8005d48 <UART_SetConfig+0x2f0>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	69f9      	ldr	r1, [r7, #28]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4aa6      	ldr	r2, [pc, #664]	; (8005d4c <UART_SetConfig+0x2f4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005aca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f023 010f 	bic.w	r1, r3, #15
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a97      	ldr	r2, [pc, #604]	; (8005d50 <UART_SetConfig+0x2f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d120      	bne.n	8005b3a <UART_SetConfig+0xe2>
 8005af8:	4b96      	ldr	r3, [pc, #600]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d816      	bhi.n	8005b34 <UART_SetConfig+0xdc>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0xb4>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b23 	.word	0x08005b23
 8005b18:	08005b2f 	.word	0x08005b2f
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	76fb      	strb	r3, [r7, #27]
 8005b20:	e0e7      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b22:	2302      	movs	r3, #2
 8005b24:	76fb      	strb	r3, [r7, #27]
 8005b26:	e0e4      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	76fb      	strb	r3, [r7, #27]
 8005b2c:	e0e1      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	76fb      	strb	r3, [r7, #27]
 8005b32:	e0de      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b34:	2310      	movs	r3, #16
 8005b36:	76fb      	strb	r3, [r7, #27]
 8005b38:	e0db      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a86      	ldr	r2, [pc, #536]	; (8005d58 <UART_SetConfig+0x300>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d132      	bne.n	8005baa <UART_SetConfig+0x152>
 8005b44:	4b83      	ldr	r3, [pc, #524]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d828      	bhi.n	8005ba4 <UART_SetConfig+0x14c>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x100>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005b99 	.word	0x08005b99
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005b93 	.word	0x08005b93
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005b9f 	.word	0x08005b9f
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	76fb      	strb	r3, [r7, #27]
 8005b90:	e0af      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b92:	2302      	movs	r3, #2
 8005b94:	76fb      	strb	r3, [r7, #27]
 8005b96:	e0ac      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	76fb      	strb	r3, [r7, #27]
 8005b9c:	e0a9      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	76fb      	strb	r3, [r7, #27]
 8005ba2:	e0a6      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	76fb      	strb	r3, [r7, #27]
 8005ba8:	e0a3      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6b      	ldr	r2, [pc, #428]	; (8005d5c <UART_SetConfig+0x304>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d120      	bne.n	8005bf6 <UART_SetConfig+0x19e>
 8005bb4:	4b67      	ldr	r3, [pc, #412]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d013      	beq.n	8005bea <UART_SetConfig+0x192>
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d814      	bhi.n	8005bf0 <UART_SetConfig+0x198>
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d009      	beq.n	8005bde <UART_SetConfig+0x186>
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d810      	bhi.n	8005bf0 <UART_SetConfig+0x198>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <UART_SetConfig+0x180>
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d006      	beq.n	8005be4 <UART_SetConfig+0x18c>
 8005bd6:	e00b      	b.n	8005bf0 <UART_SetConfig+0x198>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	76fb      	strb	r3, [r7, #27]
 8005bdc:	e089      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	76fb      	strb	r3, [r7, #27]
 8005be2:	e086      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005be4:	2304      	movs	r3, #4
 8005be6:	76fb      	strb	r3, [r7, #27]
 8005be8:	e083      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005bea:	2308      	movs	r3, #8
 8005bec:	76fb      	strb	r3, [r7, #27]
 8005bee:	e080      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	76fb      	strb	r3, [r7, #27]
 8005bf4:	e07d      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a59      	ldr	r2, [pc, #356]	; (8005d60 <UART_SetConfig+0x308>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d120      	bne.n	8005c42 <UART_SetConfig+0x1ea>
 8005c00:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c0c:	d013      	beq.n	8005c36 <UART_SetConfig+0x1de>
 8005c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x1e4>
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x1d2>
 8005c16:	2b80      	cmp	r3, #128	; 0x80
 8005c18:	d810      	bhi.n	8005c3c <UART_SetConfig+0x1e4>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x1cc>
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d006      	beq.n	8005c30 <UART_SetConfig+0x1d8>
 8005c22:	e00b      	b.n	8005c3c <UART_SetConfig+0x1e4>
 8005c24:	2300      	movs	r3, #0
 8005c26:	76fb      	strb	r3, [r7, #27]
 8005c28:	e063      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	76fb      	strb	r3, [r7, #27]
 8005c2e:	e060      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c30:	2304      	movs	r3, #4
 8005c32:	76fb      	strb	r3, [r7, #27]
 8005c34:	e05d      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c36:	2308      	movs	r3, #8
 8005c38:	76fb      	strb	r3, [r7, #27]
 8005c3a:	e05a      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	76fb      	strb	r3, [r7, #27]
 8005c40:	e057      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a47      	ldr	r2, [pc, #284]	; (8005d64 <UART_SetConfig+0x30c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <UART_SetConfig+0x240>
 8005c4c:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5a:	d017      	beq.n	8005c8c <UART_SetConfig+0x234>
 8005c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c60:	d817      	bhi.n	8005c92 <UART_SetConfig+0x23a>
 8005c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c66:	d00b      	beq.n	8005c80 <UART_SetConfig+0x228>
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6c:	d811      	bhi.n	8005c92 <UART_SetConfig+0x23a>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <UART_SetConfig+0x222>
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c76:	d006      	beq.n	8005c86 <UART_SetConfig+0x22e>
 8005c78:	e00b      	b.n	8005c92 <UART_SetConfig+0x23a>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	76fb      	strb	r3, [r7, #27]
 8005c7e:	e038      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c80:	2302      	movs	r3, #2
 8005c82:	76fb      	strb	r3, [r7, #27]
 8005c84:	e035      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c86:	2304      	movs	r3, #4
 8005c88:	76fb      	strb	r3, [r7, #27]
 8005c8a:	e032      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	76fb      	strb	r3, [r7, #27]
 8005c90:	e02f      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c92:	2310      	movs	r3, #16
 8005c94:	76fb      	strb	r3, [r7, #27]
 8005c96:	e02c      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	; (8005d4c <UART_SetConfig+0x2f4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d125      	bne.n	8005cee <UART_SetConfig+0x296>
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <UART_SetConfig+0x2fc>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cb0:	d017      	beq.n	8005ce2 <UART_SetConfig+0x28a>
 8005cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cb6:	d817      	bhi.n	8005ce8 <UART_SetConfig+0x290>
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d00b      	beq.n	8005cd6 <UART_SetConfig+0x27e>
 8005cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc2:	d811      	bhi.n	8005ce8 <UART_SetConfig+0x290>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <UART_SetConfig+0x278>
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d006      	beq.n	8005cdc <UART_SetConfig+0x284>
 8005cce:	e00b      	b.n	8005ce8 <UART_SetConfig+0x290>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	76fb      	strb	r3, [r7, #27]
 8005cda:	e00a      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e007      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	76fb      	strb	r3, [r7, #27]
 8005ce6:	e004      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	76fb      	strb	r3, [r7, #27]
 8005cec:	e001      	b.n	8005cf2 <UART_SetConfig+0x29a>
 8005cee:	2310      	movs	r3, #16
 8005cf0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <UART_SetConfig+0x2f4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	f040 809f 	bne.w	8005e3c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cfe:	7efb      	ldrb	r3, [r7, #27]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d837      	bhi.n	8005d74 <UART_SetConfig+0x31c>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0x2b4>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d75 	.word	0x08005d75
 8005d1c:	08005d3f 	.word	0x08005d3f
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005d75 	.word	0x08005d75
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d6d 	.word	0x08005d6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fe ffd0 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8005d34:	6178      	str	r0, [r7, #20]
        break;
 8005d36:	e022      	b.n	8005d7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <UART_SetConfig+0x310>)
 8005d3a:	617b      	str	r3, [r7, #20]
        break;
 8005d3c:	e01f      	b.n	8005d7e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3e:	f7fe ff5b 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005d42:	6178      	str	r0, [r7, #20]
        break;
 8005d44:	e01b      	b.n	8005d7e <UART_SetConfig+0x326>
 8005d46:	bf00      	nop
 8005d48:	cfff69f3 	.word	0xcfff69f3
 8005d4c:	40008000 	.word	0x40008000
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40021000 	.word	0x40021000
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40005000 	.word	0x40005000
 8005d68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d70:	617b      	str	r3, [r7, #20]
        break;
 8005d72:	e004      	b.n	8005d7e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	76bb      	strb	r3, [r7, #26]
        break;
 8005d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 811b 	beq.w	8005fbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	4a96      	ldr	r2, [pc, #600]	; (8005fe4 <UART_SetConfig+0x58c>)
 8005d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d90:	461a      	mov	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4413      	add	r3, r2
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d305      	bcc.n	8005db6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d902      	bls.n	8005dbc <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	76bb      	strb	r3, [r7, #26]
 8005dba:	e0ff      	b.n	8005fbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	4a86      	ldr	r2, [pc, #536]	; (8005fe4 <UART_SetConfig+0x58c>)
 8005dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	f7fa fa20 	bl	8000218 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	020b      	lsls	r3, r1, #8
 8005dea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dee:	0202      	lsls	r2, r0, #8
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	6849      	ldr	r1, [r1, #4]
 8005df4:	0849      	lsrs	r1, r1, #1
 8005df6:	4608      	mov	r0, r1
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	1814      	adds	r4, r2, r0
 8005dfe:	eb43 0501 	adc.w	r5, r3, r1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fa02 	bl	8000218 <__aeabi_uldivmod>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e22:	d308      	bcc.n	8005e36 <UART_SetConfig+0x3de>
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2a:	d204      	bcs.n	8005e36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e0c2      	b.n	8005fbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	76bb      	strb	r3, [r7, #26]
 8005e3a:	e0bf      	b.n	8005fbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d165      	bne.n	8005f12 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005e46:	7efb      	ldrb	r3, [r7, #27]
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d828      	bhi.n	8005e9e <UART_SetConfig+0x446>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0x3fc>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	08005e9f 	.word	0x08005e9f
 8005e64:	08005e8f 	.word	0x08005e8f
 8005e68:	08005e9f 	.word	0x08005e9f
 8005e6c:	08005e9f 	.word	0x08005e9f
 8005e70:	08005e9f 	.word	0x08005e9f
 8005e74:	08005e97 	.word	0x08005e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fe ff2c 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	6178      	str	r0, [r7, #20]
        break;
 8005e7e:	e013      	b.n	8005ea8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e80:	f7fe ff3e 	bl	8004d00 <HAL_RCC_GetPCLK2Freq>
 8005e84:	6178      	str	r0, [r7, #20]
        break;
 8005e86:	e00f      	b.n	8005ea8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e88:	4b57      	ldr	r3, [pc, #348]	; (8005fe8 <UART_SetConfig+0x590>)
 8005e8a:	617b      	str	r3, [r7, #20]
        break;
 8005e8c:	e00c      	b.n	8005ea8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8e:	f7fe feb3 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005e92:	6178      	str	r0, [r7, #20]
        break;
 8005e94:	e008      	b.n	8005ea8 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9a:	617b      	str	r3, [r7, #20]
        break;
 8005e9c:	e004      	b.n	8005ea8 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	76bb      	strb	r3, [r7, #26]
        break;
 8005ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8086 	beq.w	8005fbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	4a4b      	ldr	r2, [pc, #300]	; (8005fe4 <UART_SetConfig+0x58c>)
 8005eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec2:	005a      	lsls	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	441a      	add	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b0f      	cmp	r3, #15
 8005edc:	d916      	bls.n	8005f0c <UART_SetConfig+0x4b4>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d212      	bcs.n	8005f0c <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f023 030f 	bic.w	r3, r3, #15
 8005eee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	89fb      	ldrh	r3, [r7, #14]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	89fa      	ldrh	r2, [r7, #14]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	e057      	b.n	8005fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	76bb      	strb	r3, [r7, #26]
 8005f10:	e054      	b.n	8005fbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f12:	7efb      	ldrb	r3, [r7, #27]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d828      	bhi.n	8005f6a <UART_SetConfig+0x512>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x4c8>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f6b 	.word	0x08005f6b
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f6b 	.word	0x08005f6b
 8005f3c:	08005f6b 	.word	0x08005f6b
 8005f40:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7fe fec6 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8005f48:	6178      	str	r0, [r7, #20]
        break;
 8005f4a:	e013      	b.n	8005f74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7fe fed8 	bl	8004d00 <HAL_RCC_GetPCLK2Freq>
 8005f50:	6178      	str	r0, [r7, #20]
        break;
 8005f52:	e00f      	b.n	8005f74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <UART_SetConfig+0x590>)
 8005f56:	617b      	str	r3, [r7, #20]
        break;
 8005f58:	e00c      	b.n	8005f74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7fe fe4d 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8005f5e:	6178      	str	r0, [r7, #20]
        break;
 8005f60:	e008      	b.n	8005f74 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	617b      	str	r3, [r7, #20]
        break;
 8005f68:	e004      	b.n	8005f74 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	76bb      	strb	r3, [r7, #26]
        break;
 8005f72:	bf00      	nop
    }

    if (pclk != 0U)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <UART_SetConfig+0x58c>)
 8005f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f84:	461a      	mov	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	d908      	bls.n	8005fb8 <UART_SetConfig+0x560>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fac:	d204      	bcs.n	8005fb8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	e001      	b.n	8005fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005fd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08006554 	.word	0x08006554
 8005fe8:	00f42400 	.word	0x00f42400

08005fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01a      	beq.n	8006102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ea:	d10a      	bne.n	8006102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006140:	f7fa ff88 	bl	8001054 <HAL_GetTick>
 8006144:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d10e      	bne.n	8006172 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f82f 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e025      	b.n	80061be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b04      	cmp	r3, #4
 800617e:	d10e      	bne.n	800619e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f819 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e00f      	b.n	80061be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	e062      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d05e      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fa ff38 	bl	8001054 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11d      	bne.n	8006232 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006204:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e045      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d02e      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800624a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624e:	d126      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006258:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006268:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e00f      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d08d      	beq.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_UARTEx_DisableFifoMode+0x16>
 80062d8:	2302      	movs	r3, #2
 80062da:	e027      	b.n	800632c <HAL_UARTEx_DisableFifoMode+0x66>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2224      	movs	r2, #36	; 0x24
 80062e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800630a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e02d      	b.n	80063ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	; 0x24
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f84f 	bl	8006430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e02d      	b.n	8006428 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2224      	movs	r2, #36	; 0x24
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0201 	bic.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f811 	bl	8006430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006450:	e031      	b.n	80064b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006452:	2308      	movs	r3, #8
 8006454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006456:	2308      	movs	r3, #8
 8006458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	0e5b      	lsrs	r3, r3, #25
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	0f5b      	lsrs	r3, r3, #29
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	7b3a      	ldrb	r2, [r7, #12]
 800647e:	4911      	ldr	r1, [pc, #68]	; (80064c4 <UARTEx_SetNbDataToProcess+0x94>)
 8006480:	5c8a      	ldrb	r2, [r1, r2]
 8006482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006486:	7b3a      	ldrb	r2, [r7, #12]
 8006488:	490f      	ldr	r1, [pc, #60]	; (80064c8 <UARTEx_SetNbDataToProcess+0x98>)
 800648a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800648c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006490:	b29a      	uxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	7b7a      	ldrb	r2, [r7, #13]
 800649c:	4909      	ldr	r1, [pc, #36]	; (80064c4 <UARTEx_SetNbDataToProcess+0x94>)
 800649e:	5c8a      	ldrb	r2, [r1, r2]
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064a4:	7b7a      	ldrb	r2, [r7, #13]
 80064a6:	4908      	ldr	r1, [pc, #32]	; (80064c8 <UARTEx_SetNbDataToProcess+0x98>)
 80064a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	0800656c 	.word	0x0800656c
 80064c8:	08006574 	.word	0x08006574

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	; (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	; (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	; (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x44>)
 80064e0:	f000 f820 	bl	8006524 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08006584 	.word	0x08006584
 8006508:	08006584 	.word	0x08006584
 800650c:	08006584 	.word	0x08006584
 8006510:	08006588 	.word	0x08006588

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <_init>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr

08006530 <_fini>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr
