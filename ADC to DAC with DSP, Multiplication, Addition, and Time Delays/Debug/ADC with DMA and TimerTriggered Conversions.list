
ADC with DMA and TimerTriggered Conversions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e0  080044e0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e0  080044e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  2000000c  080044f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002170  080044f4  00006170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113e0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002778  00000000  00000000  0001741c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00019b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da3  00000000  00000000  0001ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7b1  00000000  00000000  0001bafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013118  00000000  00000000  0003b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51de  00000000  00000000  0004e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001235a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b88  00000000  00000000  001235e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00128170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080044b8 	.word	0x080044b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080044b8 	.word	0x080044b8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc1e 	bl	8000a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f837 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9d5 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f9a1 	bl	8000570 <MX_DMA_Init>
  MX_ADC2_Init();
 800022e:	f000 f87b 	bl	8000328 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000232:	f000 f967 	bl	8000504 <MX_TIM6_Init>
  MX_DAC3_Init();
 8000236:	f000 f8df 	bl	80003f8 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 800023a:	f000 f917 	bl	800046c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800023e:	f000 f93b 	bl	80004b8 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


HAL_OPAMP_Start(&hopamp1);
 8000242:	480d      	ldr	r0, [pc, #52]	@ (8000278 <main+0x60>)
 8000244:	f002 ff5c 	bl	8003100 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <main+0x64>)
 800024a:	f002 ff59 	bl	8003100 <HAL_OPAMP_Start>

HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 800024e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000252:	490b      	ldr	r1, [pc, #44]	@ (8000280 <main+0x68>)
 8000254:	480b      	ldr	r0, [pc, #44]	@ (8000284 <main+0x6c>)
 8000256:	f001 f861 	bl	800131c <HAL_ADC_Start_DMA>
//HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800025a:	2300      	movs	r3, #0
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <main+0x70>)
 8000264:	2100      	movs	r1, #0
 8000266:	4809      	ldr	r0, [pc, #36]	@ (800028c <main+0x74>)
 8000268:	f001 ff52 	bl	8002110 <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);
 800026c:	4808      	ldr	r0, [pc, #32]	@ (8000290 <main+0x78>)
 800026e:	f003 ff77 	bl	8004160 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	bf00      	nop
 8000274:	e7fd      	b.n	8000272 <main+0x5a>
 8000276:	bf00      	nop
 8000278:	20000168 	.word	0x20000168
 800027c:	200001a4 	.word	0x200001a4
 8000280:	2000022c 	.word	0x2000022c
 8000284:	20000028 	.word	0x20000028
 8000288:	200011cc 	.word	0x200011cc
 800028c:	200000f4 	.word	0x200000f4
 8000290:	200001e0 	.word	0x200001e0

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b094      	sub	sp, #80	@ 0x50
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2238      	movs	r2, #56	@ 0x38
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 f8dc 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f002 ff54 	bl	8003164 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002bc:	2301      	movs	r3, #1
 80002be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	2303      	movs	r3, #3
 80002cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002d2:	2355      	movs	r3, #85	@ 0x55
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002da:	2302      	movs	r3, #2
 80002dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fff0 	bl	80032cc <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002f2:	f000 f9d7 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	2303      	movs	r3, #3
 80002fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2104      	movs	r1, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f003 faee 	bl	80038f0 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031a:	f000 f9c3 	bl	80006a4 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	463b      	mov	r3, r7
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f004 f893 	bl	8004460 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800033a:	4b2c      	ldr	r3, [pc, #176]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800033c:	4a2c      	ldr	r2, [pc, #176]	@ (80003f0 <MX_ADC2_Init+0xc8>)
 800033e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000340:	4b2a      	ldr	r3, [pc, #168]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000342:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b28      	ldr	r3, [pc, #160]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b27      	ldr	r3, [pc, #156]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000354:	4b25      	ldr	r3, [pc, #148]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035a:	4b24      	ldr	r3, [pc, #144]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000360:	4b22      	ldr	r3, [pc, #136]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000362:	2204      	movs	r2, #4
 8000364:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000366:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000372:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000374:	2201      	movs	r2, #1
 8000376:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000382:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800038a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800038e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000392:	2201      	movs	r2, #1
 8000394:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800039e:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003a8:	f000 fe34 	bl	8001014 <HAL_ADC_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80003b2:	f000 f977 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_ADC2_Init+0xcc>)
 80003b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ba:	2306      	movs	r3, #6
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80003be:	2301      	movs	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c2:	237f      	movs	r3, #127	@ 0x7f
 80003c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c6:	2304      	movs	r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003d4:	f001 f860 	bl	8001498 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80003de:	f000 f961 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028
 80003f0:	50000100 	.word	0x50000100
 80003f4:	cb8c0000 	.word	0xcb8c0000

080003f8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08c      	sub	sp, #48	@ 0x30
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2230      	movs	r2, #48	@ 0x30
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f004 f82b 	bl	8004460 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_DAC3_Init+0x6c>)
 800040c:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <MX_DAC3_Init+0x70>)
 800040e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000410:	4814      	ldr	r0, [pc, #80]	@ (8000464 <MX_DAC3_Init+0x6c>)
 8000412:	f001 fe5a 	bl	80020ca <HAL_DAC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800041c:	f000 f942 	bl	80006a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000420:	2302      	movs	r3, #2
 8000422:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000430:	231e      	movs	r3, #30
 8000432:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800043c:	2302      	movs	r3, #2
 800043e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <MX_DAC3_Init+0x6c>)
 800044c:	f001 ff52 	bl	80022f4 <HAL_DAC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000456:	f000 f925 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3730      	adds	r7, #48	@ 0x30
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000f4 	.word	0x200000f4
 8000468:	50001000 	.word	0x50001000

0800046c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000472:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <MX_OPAMP1_Init+0x48>)
 8000474:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800047e:	2260      	movs	r2, #96	@ 0x60
 8000480:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000484:	220c      	movs	r2, #12
 8000486:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800048a:	2200      	movs	r2, #0
 800048c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000496:	2200      	movs	r2, #0
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800049c:	f002 fd60 	bl	8002f60 <HAL_OPAMP_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80004a6:	f000 f8fd 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000168 	.word	0x20000168
 80004b4:	40010300 	.word	0x40010300

080004b8 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004be:	4a10      	ldr	r2, [pc, #64]	@ (8000500 <MX_OPAMP3_Init+0x48>)
 80004c0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004ca:	2260      	movs	r2, #96	@ 0x60
 80004cc:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004e8:	f002 fd3a 	bl	8002f60 <HAL_OPAMP_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80004f2:	f000 f8d7 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200001a4 	.word	0x200001a4
 8000500:	40010308 	.word	0x40010308

08000504 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_TIM6_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_TIM6_Init+0x64>)
 800051c:	2210      	movs	r2, #16
 800051e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000528:	2204      	movs	r2, #4
 800052a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052c:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_TIM6_Init+0x64>)
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000534:	f003 fdbc 	bl	80040b0 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800053e:	f000 f8b1 	bl	80006a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000542:	2320      	movs	r3, #32
 8000544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000550:	f003 ff04 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800055a:	f000 f8a3 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200001e0 	.word	0x200001e0
 800056c:	40001000 	.word	0x40001000

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_DMA_Init+0x60>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6493      	str	r3, [r2, #72]	@ 0x48
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000592:	4a0f      	ldr	r2, [pc, #60]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6493      	str	r3, [r2, #72]	@ 0x48
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <MX_DMA_Init+0x60>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200b      	movs	r0, #11
 80005ac:	f001 fd59 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b0:	200b      	movs	r0, #11
 80005b2:	f001 fd70 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200c      	movs	r0, #12
 80005bc:	f001 fd51 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005c0:	200c      	movs	r0, #12
 80005c2:	f001 fd68 	bl	8002096 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x44>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//	 ADC_VALUE = ADC_BUFFER[1];

	for (size_t i = 0; i < BUFFER_SIZE_HALF; i++) {
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00a      	b.n	8000640 <HAL_ADC_ConvCpltCallback+0x24>
		DAC_BUFFER[i] = ADC_BUFFER[i];
 800062a:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <HAL_ADC_ConvCpltCallback+0x3c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000632:	490a      	ldr	r1, [pc, #40]	@ (800065c <HAL_ADC_ConvCpltCallback+0x40>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < BUFFER_SIZE_HALF; i++) {
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000646:	d3f0      	bcc.n	800062a <HAL_ADC_ConvCpltCallback+0xe>
	}

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	2000022c 	.word	0x2000022c
 800065c:	200011cc 	.word	0x200011cc

08000660 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
 void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++) {
 8000668:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e00a      	b.n	8000686 <HAL_ADC_ConvHalfCpltCallback+0x26>
			DAC_BUFFER[i] = ADC_BUFFER[i];
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	4909      	ldr	r1, [pc, #36]	@ (80006a0 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800068c:	d3f0      	bcc.n	8000670 <HAL_ADC_ConvHalfCpltCallback+0x10>
		}

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	2000022c 	.word	0x2000022c
 80006a0:	200011cc 	.word	0x200011cc

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_MspInit+0x54>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <HAL_MspInit+0x54>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_MspInit+0x54>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_MspInit+0x54>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <HAL_MspInit+0x54>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_MspInit+0x54>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fa2a 	bl	8000b40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80006ec:	f000 fa50 	bl	8000b90 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fa39 	bl	8000b68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006f6:	f002 fdd9 	bl	80032ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2244      	movs	r2, #68	@ 0x44
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fea1 	bl	8004460 <memset>
  if(hadc->Instance==ADC2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <HAL_ADC_MspInit+0xc8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d14e      	bne.n	80007c6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800072c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800072e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fac9 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000744:	f7ff ffae 	bl	80006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000762:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <HAL_ADC_MspInit+0xd4>)
 8000764:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000768:	2224      	movs	r2, #36	@ 0x24
 800076a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800078c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000790:	2220      	movs	r2, #32
 8000792:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800079c:	f001 ffec 	bl	8002778 <HAL_DMA_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 80007a6:	f7ff ff7d 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 80007ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2012      	movs	r0, #18
 80007bc:	f001 fc51 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007c0:	2012      	movs	r0, #18
 80007c2:	f001 fc68 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	50000100 	.word	0x50000100
 80007d4:	40021000 	.word	0x40021000
 80007d8:	20000094 	.word	0x20000094
 80007dc:	40020008 	.word	0x40020008

080007e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <HAL_DAC_MspInit+0x88>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d136      	bne.n	8000860 <HAL_DAC_MspInit+0x80>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <HAL_DAC_MspInit+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a1d      	ldr	r2, [pc, #116]	@ (800086c <HAL_DAC_MspInit+0x8c>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <HAL_DAC_MspInit+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 800080c:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000812:	2266      	movs	r2, #102	@ 0x66
 8000814:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000818:	2210      	movs	r2, #16
 800081a:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 800082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082e:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000836:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 800083a:	2220      	movs	r2, #32
 800083c:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000844:	480a      	ldr	r0, [pc, #40]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000846:	f001 ff97 	bl	8002778 <HAL_DMA_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 8000850:	f7ff ff28 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	50001000 	.word	0x50001000
 800086c:	40021000 	.word	0x40021000
 8000870:	20000108 	.word	0x20000108
 8000874:	4002001c 	.word	0x4002001c

08000878 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1f      	ldr	r2, [pc, #124]	@ (8000914 <HAL_OPAMP_MspInit+0x9c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d119      	bne.n	80008ce <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b2:	2304      	movs	r3, #4
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b6:	2303      	movs	r3, #3
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c8:	f002 f9c8 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80008cc:	e01d      	b.n	800090a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <HAL_OPAMP_MspInit+0xa4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d118      	bne.n	800090a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_OPAMP_MspInit+0xa0>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f002 f9a9 	bl	8002c5c <HAL_GPIO_Init>
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010300 	.word	0x40010300
 8000918:	40021000 	.word	0x40021000
 800091c:	40010308 	.word	0x40010308

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_TIM_Base_MspInit+0x38>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	4a09      	ldr	r2, [pc, #36]	@ (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6593      	str	r3, [r2, #88]	@ 0x58
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40001000 	.word	0x40001000
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f8a5 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <DMA1_Channel1_IRQHandler+0x10>)
 80009c6:	f001 fffa 	bl	80029be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000094 	.word	0x20000094

080009d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <DMA1_Channel2_IRQHandler+0x10>)
 80009da:	f001 fff0 	bl	80029be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000108 	.word	0x20000108

080009e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f003 fd19 	bl	8004470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fbeb 	bl	8000218 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	080044e8 	.word	0x080044e8
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	20002170 	.word	0x20002170

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>

08000a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f001 faef 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f80e 	bl	8000a90 <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a80:	f7ff fe16 	bl	80006b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	79fb      	ldrb	r3, [r7, #7]

}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_InitTick+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d022      	beq.n	8000aea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_InitTick+0x6c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <HAL_InitTick+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fafa 	bl	80020b2 <HAL_SYSTICK_Config>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10f      	bne.n	8000ae4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d809      	bhi.n	8000ade <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aca:	2200      	movs	r2, #0
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad2:	f001 fac6 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_InitTick+0x70>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	e007      	b.n	8000aee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e004      	b.n	8000aee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e001      	b.n	8000aee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <HAL_IncTick+0x1c>)
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	2000216c 	.word	0x2000216c
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2000216c 	.word	0x2000216c

08000b40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000b50:	4904      	ldr	r1, [pc, #16]	@ (8000b64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	600b      	str	r3, [r1, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40010030 	.word	0x40010030

08000b68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 0202 	bic.w	r2, r3, #2
 8000b78:	4904      	ldr	r1, [pc, #16]	@ (8000b8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40010030 	.word	0x40010030

08000b90 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000ba2:	f7ff ffc1 	bl	8000b28 <HAL_GetTick>
 8000ba6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000ba8:	e008      	b.n	8000bbc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000baa:	f7ff ffbd 	bl	8000b28 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b0a      	cmp	r3, #10
 8000bb6:	d901      	bls.n	8000bbc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e006      	b.n	8000bca <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010030 	.word	0x40010030

08000bd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3360      	adds	r3, #96	@ 0x60
 8000c52:	461a      	mov	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <LL_ADC_SetOffset+0x44>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c78:	bf00      	nop
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	03fff000 	.word	0x03fff000

08000c88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3360      	adds	r3, #96	@ 0x60
 8000c96:	461a      	mov	r2, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3360      	adds	r3, #96	@ 0x60
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3360      	adds	r3, #96	@ 0x60
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3360      	adds	r3, #96	@ 0x60
 8000d30:	461a      	mov	r2, r3
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	615a      	str	r2, [r3, #20]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b087      	sub	sp, #28
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3330      	adds	r3, #48	@ 0x30
 8000db2:	461a      	mov	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	211f      	movs	r1, #31
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0e9b      	lsrs	r3, r3, #26
 8000dda:	f003 011f 	and.w	r1, r3, #31
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b087      	sub	sp, #28
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3314      	adds	r3, #20
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	0e5b      	lsrs	r3, r3, #25
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	4413      	add	r3, r2
 8000e18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	0d1b      	lsrs	r3, r3, #20
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	2107      	movs	r1, #7
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	401a      	ands	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	0d1b      	lsrs	r3, r3, #20
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0318 	and.w	r3, r3, #24
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e74:	40d9      	lsrs	r1, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	400b      	ands	r3, r1
 8000e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0007ffff 	.word	0x0007ffff

08000e98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6093      	str	r3, [r2, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000eec:	d101      	bne.n	8000ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f3c:	d101      	bne.n	8000f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <LL_ADC_IsEnabled+0x18>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_ADC_IsEnabled+0x1a>
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb2:	f043 0204 	orr.w	r2, r3, #4
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d101      	bne.n	8000fde <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d101      	bne.n	8001004 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e167      	b.n	80012fe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fb63 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff3f 	bl	8000ed8 <LL_ADC_IsDeepPowerDownEnabled>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff25 	bl	8000eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff5a 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d115      	bne.n	80010a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff3e 	bl	8000f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001084:	4ba0      	ldr	r3, [pc, #640]	@ (8001308 <HAL_ADC_Init+0x2f4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	099b      	lsrs	r3, r3, #6
 800108a:	4aa0      	ldr	r2, [pc, #640]	@ (800130c <HAL_ADC_Init+0x2f8>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	3301      	adds	r3, #1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001098:	e002      	b.n	80010a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3b01      	subs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff3c 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10d      	bne.n	80010d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ba:	f043 0210 	orr.w	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff75 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80010dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 8100 	bne.w	80012ec <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 80fc 	bne.w	80012ec <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010fc:	f043 0202 	orr.w	r2, r3, #2
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff35 	bl	8000f78 <LL_ADC_IsEnabled>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001114:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001118:	f7ff ff2e 	bl	8000f78 <LL_ADC_IsEnabled>
 800111c:	4604      	mov	r4, r0
 800111e:	487c      	ldr	r0, [pc, #496]	@ (8001310 <HAL_ADC_Init+0x2fc>)
 8001120:	f7ff ff2a 	bl	8000f78 <LL_ADC_IsEnabled>
 8001124:	4603      	mov	r3, r0
 8001126:	4323      	orrs	r3, r4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4619      	mov	r1, r3
 8001132:	4878      	ldr	r0, [pc, #480]	@ (8001314 <HAL_ADC_Init+0x300>)
 8001134:	f7ff fd50 	bl	8000bd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f5b      	ldrb	r3, [r3, #29]
 800113c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001142:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001148:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800114e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001156:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001162:	2b01      	cmp	r3, #1
 8001164:	d106      	bne.n	8001174 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	3b01      	subs	r3, #1
 800116c:	045b      	lsls	r3, r3, #17
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001180:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b60      	ldr	r3, [pc, #384]	@ (8001318 <HAL_ADC_Init+0x304>)
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff14 	bl	8000fec <LL_ADC_INJ_IsConversionOngoing>
 80011c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d16d      	bne.n	80012a8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d16a      	bne.n	80012a8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d017      	beq.n	8001234 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001212:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800121c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6911      	ldr	r1, [r2, #16]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	430b      	orrs	r3, r1
 800122e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001232:	e013      	b.n	800125c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001242:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001258:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001262:	2b01      	cmp	r3, #1
 8001264:	d118      	bne.n	8001298 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800127c:	4311      	orrs	r1, r2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001288:	430a      	orrs	r2, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	e007      	b.n	80012a8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10c      	bne.n	80012ca <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f023 010f 	bic.w	r1, r3, #15
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c8:	e007      	b.n	80012da <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020f 	bic.w	r2, r2, #15
 80012d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ea:	e007      	b.n	80012fc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f0:	f043 0210 	orr.w	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	053e2d63 	.word	0x053e2d63
 8001310:	50000100 	.word	0x50000100
 8001314:	50000300 	.word	0x50000300
 8001318:	fff04007 	.word	0xfff04007

0800131c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001328:	4851      	ldr	r0, [pc, #324]	@ (8001470 <HAL_ADC_Start_DMA+0x154>)
 800132a:	f7ff fdb5 	bl	8000e98 <LL_ADC_GetMultimode>
 800132e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe46 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 808f 	bne.w	8001460 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_ADC_Start_DMA+0x34>
 800134c:	2302      	movs	r3, #2
 800134e:	e08a      	b.n	8001466 <HAL_ADC_Start_DMA+0x14a>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d002      	beq.n	800136a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b09      	cmp	r3, #9
 8001368:	d173      	bne.n	8001452 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fc84 	bl	8001c78 <ADC_Enable>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d166      	bne.n	8001448 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_ADC_Start_DMA+0x158>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d002      	beq.n	800139e <HAL_ADC_Start_DMA+0x82>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e001      	b.n	80013a2 <HAL_ADC_Start_DMA+0x86>
 800139e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d002      	beq.n	80013b0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013cc:	f023 0206 	bic.w	r2, r3, #6
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e0:	4a25      	ldr	r2, [pc, #148]	@ (8001478 <HAL_ADC_Start_DMA+0x15c>)
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <HAL_ADC_Start_DMA+0x160>)
 80013ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <HAL_ADC_Start_DMA+0x164>)
 80013f2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	221c      	movs	r2, #28
 80013fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0210 	orr.w	r2, r2, #16
 8001412:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3340      	adds	r3, #64	@ 0x40
 800142e:	4619      	mov	r1, r3
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f001 fa48 	bl	80028c8 <HAL_DMA_Start_IT>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fdac 	bl	8000f9e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001446:	e00d      	b.n	8001464 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001450:	e008      	b.n	8001464 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800145e:	e001      	b.n	8001464 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001460:	2302      	movs	r3, #2
 8001462:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001464:	7dfb      	ldrb	r3, [r7, #23]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	50000300 	.word	0x50000300
 8001474:	50000100 	.word	0x50000100
 8001478:	08001d85 	.word	0x08001d85
 800147c:	08001e5d 	.word	0x08001e5d
 8001480:	08001e79 	.word	0x08001e79

08001484 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0b6      	sub	sp, #216	@ 0xd8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x22>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e3c8      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7b4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd7d 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 83ad 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	f7ff fc5e 	bl	8000da2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd6b 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80014f0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd77 	bl	8000fec <LL_ADC_INJ_IsConversionOngoing>
 80014fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 81d9 	bne.w	80018be <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800150c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 81d4 	bne.w	80018be <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800151e:	d10f      	bne.n	8001540 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fc65 	bl	8000dfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc0c 	bl	8000d56 <LL_ADC_SetSamplingTimeCommonConfig>
 800153e:	e00e      	b.n	800155e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	461a      	mov	r2, r3
 800154e:	f7ff fc54 	bl	8000dfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fbfc 	bl	8000d56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d022      	beq.n	80015c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6919      	ldr	r1, [r3, #16]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001590:	f7ff fb56 	bl	8000c40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6919      	ldr	r1, [r3, #16]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f7ff fba2 	bl	8000cea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x124>
 80015b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ba:	e000      	b.n	80015be <HAL_ADC_ConfigChannel+0x126>
 80015bc:	2300      	movs	r3, #0
 80015be:	461a      	mov	r2, r3
 80015c0:	f7ff fbae 	bl	8000d20 <LL_ADC_SetOffsetSaturation>
 80015c4:	e17b      	b.n	80018be <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fb5b 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10a      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x15a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb50 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	0e9b      	lsrs	r3, r3, #26
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	e01e      	b.n	8001630 <HAL_ADC_ConfigChannel+0x198>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb45 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001620:	2320      	movs	r3, #32
 8001622:	e004      	b.n	800162e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1b0>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	e018      	b.n	800167a <HAL_ADC_ConfigChannel+0x1e2>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800165c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800166c:	2320      	movs	r3, #32
 800166e:	e004      	b.n	800167a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800167a:	429a      	cmp	r2, r3
 800167c:	d106      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb14 	bl	8000cb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff faf8 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x220>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faed 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	0e9b      	lsrs	r3, r3, #26
 80016b2:	f003 021f 	and.w	r2, r3, #31
 80016b6:	e01e      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x25e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fae2 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80016d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80016de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80016e6:	2320      	movs	r3, #32
 80016e8:	e004      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <HAL_ADC_ConfigChannel+0x276>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0e9b      	lsrs	r3, r3, #26
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	e018      	b.n	8001740 <HAL_ADC_ConfigChannel+0x2a8>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001726:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800172a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e004      	b.n	8001740 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001736:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fab1 	bl	8000cb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2102      	movs	r1, #2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa95 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_ADC_ConfigChannel+0x2e6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fa8a 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	0e9b      	lsrs	r3, r3, #26
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	e01e      	b.n	80017bc <HAL_ADC_ConfigChannel+0x324>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2102      	movs	r1, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa7f 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800179c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80017a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80017ac:	2320      	movs	r3, #32
 80017ae:	e004      	b.n	80017ba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80017b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x33c>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	e016      	b.n	8001802 <HAL_ADC_ConfigChannel+0x36a>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80017e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80017ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e004      	b.n	8001802 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80017f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa50 	bl	8000cb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2103      	movs	r1, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa34 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x3a8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2103      	movs	r1, #3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fa29 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	f003 021f 	and.w	r2, r3, #31
 800183e:	e017      	b.n	8001870 <HAL_ADC_ConfigChannel+0x3d8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2103      	movs	r1, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa1e 	bl	8000c88 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800185a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800185c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001862:	2320      	movs	r3, #32
 8001864:	e003      	b.n	800186e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x3f0>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	e011      	b.n	80018ac <HAL_ADC_ConfigChannel+0x414>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001898:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800189a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e003      	b.n	80018ac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80018a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d106      	bne.n	80018be <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f9fb 	bl	8000cb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb58 	bl	8000f78 <LL_ADC_IsEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8140 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	f7ff fab7 	bl	8000e50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001b24 <HAL_ADC_ConfigChannel+0x68c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 8131 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x47e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b09      	cmp	r3, #9
 800190c:	bf94      	ite	ls
 800190e:	2301      	movls	r3, #1
 8001910:	2300      	movhi	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	e019      	b.n	800194a <HAL_ADC_ConfigChannel+0x4b2>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001926:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e003      	b.n	800193a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b09      	cmp	r3, #9
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194a:	2b00      	cmp	r3, #0
 800194c:	d079      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <HAL_ADC_ConfigChannel+0x4d2>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	3301      	adds	r3, #1
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001968:	e015      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4fe>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800197a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e003      	b.n	800198e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x51e>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	3301      	adds	r3, #1
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	e017      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x54e>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80019c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80019c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80019ce:	2320      	movs	r3, #32
 80019d0:	e003      	b.n	80019da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80019d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	ea42 0103 	orr.w	r1, r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x574>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0e9b      	lsrs	r3, r3, #26
 80019fc:	3301      	adds	r3, #1
 80019fe:	f003 021f 	and.w	r2, r3, #31
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	051b      	lsls	r3, r3, #20
 8001a0a:	e018      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x5a6>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e003      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	e081      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x5c6>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	3301      	adds	r3, #1
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a5c:	e015      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x5f2>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001a76:	2320      	movs	r3, #32
 8001a78:	e003      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	069b      	lsls	r3, r3, #26
 8001a86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x612>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	e017      	b.n	8001ada <HAL_ADC_ConfigChannel+0x642>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e003      	b.n	8001ace <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	ea42 0103 	orr.w	r1, r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x66e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	3b1e      	subs	r3, #30
 8001afe:	051b      	lsls	r3, r3, #20
 8001b00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	e01e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x6ac>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	613b      	str	r3, [r7, #16]
  return result;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e006      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x698>
 8001b22:	bf00      	nop
 8001b24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b1e      	subs	r3, #30
 8001b3e:	051b      	lsls	r3, r3, #20
 8001b40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f955 	bl	8000dfa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b3f      	ldr	r3, [pc, #252]	@ (8001c54 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d071      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b5c:	483e      	ldr	r0, [pc, #248]	@ (8001c58 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b5e:	f7ff f861 	bl	8000c24 <LL_ADC_GetCommonPathInternalCh>
 8001b62:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c5c <HAL_ADC_ConfigChannel+0x7c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x6e2>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3a      	ldr	r2, [pc, #232]	@ (8001c60 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d127      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d121      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b8e:	d157      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482f      	ldr	r0, [pc, #188]	@ (8001c58 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b9c:	f7ff f82f 	bl	8000bfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	4a30      	ldr	r2, [pc, #192]	@ (8001c68 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bc8:	e03a      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a27      	ldr	r2, [pc, #156]	@ (8001c6c <HAL_ADC_ConfigChannel+0x7d4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d113      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_ADC_ConfigChannel+0x7d8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02a      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bf6:	f7ff f802 	bl	8000bfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bfa:	e021      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d11c      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d011      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c24:	4619      	mov	r1, r3
 8001c26:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c28:	f7fe ffe9 	bl	8000bfe <LL_ADC_SetCommonPathInternalCh>
 8001c2c:	e008      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c48:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	37d8      	adds	r7, #216	@ 0xd8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	80080000 	.word	0x80080000
 8001c58:	50000300 	.word	0x50000300
 8001c5c:	c3210000 	.word	0xc3210000
 8001c60:	90c00010 	.word	0x90c00010
 8001c64:	20000000 	.word	0x20000000
 8001c68:	053e2d63 	.word	0x053e2d63
 8001c6c:	c7520000 	.word	0xc7520000
 8001c70:	50000100 	.word	0x50000100
 8001c74:	cb840000 	.word	0xcb840000

08001c78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f975 	bl	8000f78 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d169      	bne.n	8001d68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <ADC_Enable+0xfc>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e055      	b.n	8001d6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f944 	bl	8000f50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001cc8:	482b      	ldr	r0, [pc, #172]	@ (8001d78 <ADC_Enable+0x100>)
 8001cca:	f7fe ffab 	bl	8000c24 <LL_ADC_GetCommonPathInternalCh>
 8001cce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <ADC_Enable+0x104>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	4a28      	ldr	r2, [pc, #160]	@ (8001d80 <ADC_Enable+0x108>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cf2:	e002      	b.n	8001cfa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f9      	bne.n	8001cf4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d00:	f7fe ff12 	bl	8000b28 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d06:	e028      	b.n	8001d5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f933 	bl	8000f78 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f917 	bl	8000f50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d22:	f7fe ff01 	bl	8000b28 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d914      	bls.n	8001d5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d00d      	beq.n	8001d5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e007      	b.n	8001d6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d1cf      	bne.n	8001d08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	8000003f 	.word	0x8000003f
 8001d78:	50000300 	.word	0x50000300
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	053e2d63 	.word	0x053e2d63

08001d84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d14b      	bne.n	8001e36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d021      	beq.n	8001dfc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe ffdd 	bl	8000d7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d032      	beq.n	8001e2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d12b      	bne.n	8001e2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11f      	bne.n	8001e2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dfa:	e018      	b.n	8001e2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d111      	bne.n	8001e2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7fe fbf4 	bl	800061c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e34:	e00e      	b.n	8001e54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fb1e 	bl	8001484 <HAL_ADC_ErrorCallback>
}
 8001e48:	e004      	b.n	8001e54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7fe fbf8 	bl	8000660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	f043 0204 	orr.w	r2, r3, #4
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff faf0 	bl	8001484 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff40 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff90 	bl	8001fa0 <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5f 	bl	8001f4c <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff33 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa4 	bl	8002008 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fb77 	bl	80007e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b2      	b.n	800228e <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	795b      	ldrb	r3, [r3, #5]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_DAC_Start_DMA+0x24>
 8002130:	2302      	movs	r3, #2
 8002132:	e0ac      	b.n	800228e <HAL_DAC_Start_DMA+0x17e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d129      	bne.n	800219a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4a53      	ldr	r2, [pc, #332]	@ (8002298 <HAL_DAC_Start_DMA+0x188>)
 800214c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_DAC_Start_DMA+0x18c>)
 8002154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a51      	ldr	r2, [pc, #324]	@ (80022a0 <HAL_DAC_Start_DMA+0x190>)
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800216c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DAC_Start_DMA+0x6c>
 8002174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002176:	2b04      	cmp	r3, #4
 8002178:	d005      	beq.n	8002186 <HAL_DAC_Start_DMA+0x76>
 800217a:	e009      	b.n	8002190 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3308      	adds	r3, #8
 8002182:	61bb      	str	r3, [r7, #24]
        break;
 8002184:	e033      	b.n	80021ee <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	61bb      	str	r3, [r7, #24]
        break;
 800218e:	e02e      	b.n	80021ee <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3310      	adds	r3, #16
 8002196:	61bb      	str	r3, [r7, #24]
        break;
 8002198:	e029      	b.n	80021ee <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4a41      	ldr	r2, [pc, #260]	@ (80022a4 <HAL_DAC_Start_DMA+0x194>)
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a40      	ldr	r2, [pc, #256]	@ (80022a8 <HAL_DAC_Start_DMA+0x198>)
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a3f      	ldr	r2, [pc, #252]	@ (80022ac <HAL_DAC_Start_DMA+0x19c>)
 80021b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80021c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DAC_Start_DMA+0xc0>
 80021c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d005      	beq.n	80021da <HAL_DAC_Start_DMA+0xca>
 80021ce:	e009      	b.n	80021e4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3314      	adds	r3, #20
 80021d6:	61bb      	str	r3, [r7, #24]
        break;
 80021d8:	e009      	b.n	80021ee <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3318      	adds	r3, #24
 80021e0:	61bb      	str	r3, [r7, #24]
        break;
 80021e2:	e004      	b.n	80021ee <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	331c      	adds	r3, #28
 80021ea:	61bb      	str	r3, [r7, #24]
        break;
 80021ec:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d111      	bne.n	8002218 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002202:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6898      	ldr	r0, [r3, #8]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f000 fb5b 	bl	80028c8 <HAL_DMA_Start_IT>
 8002212:	4603      	mov	r3, r0
 8002214:	77fb      	strb	r3, [r7, #31]
 8002216:	e010      	b.n	800223a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002226:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68d8      	ldr	r0, [r3, #12]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f000 fb49 	bl	80028c8 <HAL_DMA_Start_IT>
 8002236:	4603      	mov	r3, r0
 8002238:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002240:	7ffb      	ldrb	r3, [r7, #31]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11c      	bne.n	8002280 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225e:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_DAC_Start_DMA+0x1a0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	099b      	lsrs	r3, r3, #6
 8002264:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_DAC_Start_DMA+0x1a4>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002270:	e002      	b.n	8002278 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3b01      	subs	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f9      	bne.n	8002272 <HAL_DAC_Start_DMA+0x162>
 800227e:	e005      	b.n	800228c <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f043 0204 	orr.w	r2, r3, #4
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800228c:	7ffb      	ldrb	r3, [r7, #31]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	08002665 	.word	0x08002665
 800229c:	08002687 	.word	0x08002687
 80022a0:	080026a3 	.word	0x080026a3
 80022a4:	0800270d 	.word	0x0800270d
 80022a8:	0800272f 	.word	0x0800272f
 80022ac:	0800274b 	.word	0x0800274b
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63

080022b8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_DAC_ConfigChannel+0x1c>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e19e      	b.n	8002652 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	795b      	ldrb	r3, [r3, #5]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_DAC_ConfigChannel+0x2c>
 800231c:	2302      	movs	r3, #2
 800231e:	e198      	b.n	8002652 <HAL_DAC_ConfigChannel+0x35e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d17a      	bne.n	800242a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002334:	f7fe fbf8 	bl	8000b28 <HAL_GetTick>
 8002338:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13d      	bne.n	80023bc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002340:	e018      	b.n	8002374 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002342:	f7fe fbf1 	bl	8000b28 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d911      	bls.n	8002374 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f043 0208 	orr.w	r2, r3, #8
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2203      	movs	r2, #3
 800236e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e16e      	b.n	8002652 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1df      	bne.n	8002342 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
 800238c:	e020      	b.n	80023d0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800238e:	f7fe fbcb 	bl	8000b28 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d90f      	bls.n	80023bc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da0a      	bge.n	80023bc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f043 0208 	orr.w	r2, r3, #8
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2203      	movs	r2, #3
 80023b6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e14a      	b.n	8002652 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	dbe3      	blt.n	800238e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	ea02 0103 	and.w	r1, r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	21ff      	movs	r1, #255	@ 0xff
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	ea02 0103 	and.w	r1, r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d11d      	bne.n	800246e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	221f      	movs	r2, #31
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244a:	4013      	ands	r3, r2
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002462:	4313      	orrs	r3, r2
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2207      	movs	r2, #7
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002486:	4013      	ands	r3, r2
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	e00f      	b.n	80024b8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d102      	bne.n	80024a6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80024a0:	2301      	movs	r3, #1
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	e008      	b.n	80024b8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80024ae:	2301      	movs	r3, #1
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	e001      	b.n	80024b8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	6a3a      	ldr	r2, [r7, #32]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024da:	4013      	ands	r3, r2
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	791b      	ldrb	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <HAL_DAC_ConfigChannel+0x1f8>
 80024e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ea:	e000      	b.n	80024ee <HAL_DAC_ConfigChannel+0x1fa>
 80024ec:	2300      	movs	r3, #0
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002506:	4013      	ands	r3, r2
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	795b      	ldrb	r3, [r3, #5]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_DAC_ConfigChannel+0x224>
 8002512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002516:	e000      	b.n	800251a <HAL_DAC_ConfigChannel+0x226>
 8002518:	2300      	movs	r3, #0
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d114      	bne.n	800255a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002530:	f001 fb7c 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8002534:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4a48      	ldr	r2, [pc, #288]	@ (800265c <HAL_DAC_ConfigChannel+0x368>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d904      	bls.n	8002548 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	e00f      	b.n	8002568 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4a45      	ldr	r2, [pc, #276]	@ (8002660 <HAL_DAC_ConfigChannel+0x36c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d90a      	bls.n	8002566 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
 8002558:	e006      	b.n	8002568 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002560:	4313      	orrs	r3, r2
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	e000      	b.n	8002568 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002566:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	4313      	orrs	r3, r2
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ba:	4013      	ands	r3, r2
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d2:	4313      	orrs	r3, r2
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025dc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	22c0      	movs	r2, #192	@ 0xc0
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	ea02 0103 	and.w	r1, r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002650:	7ffb      	ldrb	r3, [r7, #31]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	09896800 	.word	0x09896800
 8002660:	04c4b400 	.word	0x04c4b400

08002664 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
   HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fe20 	bl	80022b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	711a      	strb	r2, [r3, #4]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff fe19 	bl	80022cc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f043 0204 	orr.w	r2, r3, #4
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fe0f 	bl	80022e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	711a      	strb	r2, [r3, #4]
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff ffd8 	bl	80026d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	711a      	strb	r2, [r3, #4]
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ffd1 	bl	80026e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff ffc7 	bl	80026f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	711a      	strb	r2, [r3, #4]
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e08d      	b.n	80028a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_DMA_Init+0x138>)
 8002792:	429a      	cmp	r2, r3
 8002794:	d80f      	bhi.n	80027b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b45      	ldr	r3, [pc, #276]	@ (80028b4 <HAL_DMA_Init+0x13c>)
 800279e:	4413      	add	r3, r2
 80027a0:	4a45      	ldr	r2, [pc, #276]	@ (80028b8 <HAL_DMA_Init+0x140>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	009a      	lsls	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a42      	ldr	r2, [pc, #264]	@ (80028bc <HAL_DMA_Init+0x144>)
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80027b4:	e00e      	b.n	80027d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_DMA_Init+0x148>)
 80027be:	4413      	add	r3, r2
 80027c0:	4a3d      	ldr	r2, [pc, #244]	@ (80028b8 <HAL_DMA_Init+0x140>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a3c      	ldr	r2, [pc, #240]	@ (80028c4 <HAL_DMA_Init+0x14c>)
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9b6 	bl	8002b98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002834:	d102      	bne.n	800283c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002850:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_DMA_Init+0x104>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d80c      	bhi.n	800287c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9d6 	bl	8002c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e008      	b.n	800288e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40020407 	.word	0x40020407
 80028b4:	bffdfff8 	.word	0xbffdfff8
 80028b8:	cccccccd 	.word	0xcccccccd
 80028bc:	40020000 	.word	0x40020000
 80028c0:	bffdfbf8 	.word	0xbffdfbf8
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_DMA_Start_IT+0x20>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e066      	b.n	80029b6 <HAL_DMA_Start_IT+0xee>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d155      	bne.n	80029a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f8fb 	bl	8002b1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 020e 	orr.w	r2, r2, #14
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e00f      	b.n	8002960 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0204 	bic.w	r2, r2, #4
 800294e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 020a 	orr.w	r2, r2, #10
 800295e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800297c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002994:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e005      	b.n	80029b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
 80029b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2204      	movs	r2, #4
 80029e0:	409a      	lsls	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d026      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x7a>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0204 	bic.w	r2, r2, #4
 8002a10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f003 021f 	and.w	r2, r3, #31
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	2104      	movs	r1, #4
 8002a20:	fa01 f202 	lsl.w	r2, r1, r2
 8002a24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d071      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a36:	e06c      	b.n	8002b12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2202      	movs	r2, #2
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02e      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d029      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 020a 	bic.w	r2, r2, #10
 8002a72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	2102      	movs	r1, #2
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d038      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002aa8:	e033      	b.n	8002b12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d025      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
}
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f003 021f 	and.w	r2, r3, #31
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d108      	bne.n	8002b7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7a:	e007      	b.n	8002b8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b16      	ldr	r3, [pc, #88]	@ (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d802      	bhi.n	8002bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002bac:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e001      	b.n	8002bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002bb4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3b08      	subs	r3, #8
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002be2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40020407 	.word	0x40020407
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020820 	.word	0x40020820
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	40020880 	.word	0x40020880

08002c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a08      	ldr	r2, [pc, #32]	@ (8002c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	1000823f 	.word	0x1000823f
 8002c58:	40020940 	.word	0x40020940

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c6a:	e15a      	b.n	8002f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 814c 	beq.w	8002f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d005      	beq.n	8002c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d130      	bne.n	8002cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0201 	and.w	r2, r3, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d017      	beq.n	8002d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d123      	bne.n	8002d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	6939      	ldr	r1, [r7, #16]
 8002d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ddc:	4b58      	ldr	r3, [pc, #352]	@ (8002f40 <HAL_GPIO_Init+0x2e4>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de8:	4a56      	ldr	r2, [pc, #344]	@ (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e12:	d01f      	beq.n	8002e54 <HAL_GPIO_Init+0x1f8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a4c      	ldr	r2, [pc, #304]	@ (8002f48 <HAL_GPIO_Init+0x2ec>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d019      	beq.n	8002e50 <HAL_GPIO_Init+0x1f4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f4c <HAL_GPIO_Init+0x2f0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_GPIO_Init+0x1f0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a4a      	ldr	r2, [pc, #296]	@ (8002f50 <HAL_GPIO_Init+0x2f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00d      	beq.n	8002e48 <HAL_GPIO_Init+0x1ec>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a49      	ldr	r2, [pc, #292]	@ (8002f54 <HAL_GPIO_Init+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d007      	beq.n	8002e44 <HAL_GPIO_Init+0x1e8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a48      	ldr	r2, [pc, #288]	@ (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <HAL_GPIO_Init+0x1e4>
 8002e3c:	2305      	movs	r3, #5
 8002e3e:	e00a      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e40:	2306      	movs	r3, #6
 8002e42:	e008      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e66:	4937      	ldr	r1, [pc, #220]	@ (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e74:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec2:	4a26      	ldr	r2, [pc, #152]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eec:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f16:	4a11      	ldr	r2, [pc, #68]	@ (8002f5c <HAL_GPIO_Init+0x300>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f ae9d 	bne.w	8002c6c <HAL_GPIO_Init+0x10>
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010000 	.word	0x40010000
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	48000800 	.word	0x48000800
 8002f50:	48000c00 	.word	0x48000c00
 8002f54:	48001000 	.word	0x48001000
 8002f58:	48001400 	.word	0x48001400
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0bb      	b.n	80030ee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d101      	bne.n	8002f86 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0b3      	b.n	80030ee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d101      	bne.n	8002f96 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0ab      	b.n	80030ee <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b58      	ldr	r3, [pc, #352]	@ (80030f8 <HAL_OPAMP_Init+0x198>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9a:	4a57      	ldr	r2, [pc, #348]	@ (80030f8 <HAL_OPAMP_Init+0x198>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fa2:	4b55      	ldr	r3, [pc, #340]	@ (80030f8 <HAL_OPAMP_Init+0x198>)
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fc58 	bl	8000878 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	d003      	beq.n	8002fd8 <HAL_OPAMP_Init+0x78>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b60      	cmp	r3, #96	@ 0x60
 8002fd6:	d133      	bne.n	8003040 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0110 	bic.w	r1, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b41      	ldr	r3, [pc, #260]	@ (80030fc <HAL_OPAMP_Init+0x19c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6851      	ldr	r1, [r2, #4]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	430a      	orrs	r2, r1
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	7d09      	ldrb	r1, [r1, #20]
 800300c:	2901      	cmp	r1, #1
 800300e:	d102      	bne.n	8003016 <HAL_OPAMP_Init+0xb6>
 8003010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003014:	e000      	b.n	8003018 <HAL_OPAMP_Init+0xb8>
 8003016:	2100      	movs	r1, #0
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800302a:	04d2      	lsls	r2, r2, #19
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003032:	0612      	lsls	r2, r2, #24
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	430b      	orrs	r3, r1
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e035      	b.n	80030ac <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0110 	bic.w	r1, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_OPAMP_Init+0x19c>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6851      	ldr	r1, [r2, #4]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6912      	ldr	r2, [r2, #16]
 8003074:	430a      	orrs	r2, r1
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	7d09      	ldrb	r1, [r1, #20]
 800307a:	2901      	cmp	r1, #1
 800307c:	d102      	bne.n	8003084 <HAL_OPAMP_Init+0x124>
 800307e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003082:	e000      	b.n	8003086 <HAL_OPAMP_Init+0x126>
 8003084:	2100      	movs	r1, #0
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003098:	04d2      	lsls	r2, r2, #19
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030a0:	0612      	lsls	r2, r2, #24
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	db10      	blt.n	80030d8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	e0003e11 	.word	0xe0003e11

08003100 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e01d      	b.n	8003154 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b05      	cmp	r3, #5
 8003122:	d102      	bne.n	800312a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e014      	b.n	8003154 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10c      	bne.n	8003150 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2204      	movs	r2, #4
 800314a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800314e:	e001      	b.n	8003154 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d141      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003172:	4b4b      	ldr	r3, [pc, #300]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317e:	d131      	bne.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003180:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003186:	4a46      	ldr	r2, [pc, #280]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800318c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003190:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003198:	4a41      	ldr	r2, [pc, #260]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800319e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031a0:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2232      	movs	r2, #50	@ 0x32
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a3f      	ldr	r2, [pc, #252]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	0c9b      	lsrs	r3, r3, #18
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b6:	e002      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031be:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ca:	d102      	bne.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f2      	bne.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d2:	4b33      	ldr	r3, [pc, #204]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031de:	d158      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e057      	b.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e4:	4b2e      	ldr	r3, [pc, #184]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ea:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031f4:	e04d      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fc:	d141      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fe:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	d131      	bne.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003212:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003224:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2232      	movs	r2, #50	@ 0x32
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	3301      	adds	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003242:	e002      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003256:	d102      	bne.n	800325e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f2      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800325e:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326a:	d112      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e011      	b.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003276:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003280:	e007      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003282:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003290:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40007000 	.word	0x40007000
 80032a4:	20000000 	.word	0x20000000
 80032a8:	431bde83 	.word	0x431bde83

080032ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ba:	6093      	str	r3, [r2, #8]
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40007000 	.word	0x40007000

080032cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e2fe      	b.n	80038dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d075      	beq.n	80033d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ea:	4b97      	ldr	r3, [pc, #604]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f4:	4b94      	ldr	r3, [pc, #592]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d102      	bne.n	800330a <HAL_RCC_OscConfig+0x3e>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d002      	beq.n	8003310 <HAL_RCC_OscConfig+0x44>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10b      	bne.n	8003328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	4b8d      	ldr	r3, [pc, #564]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05b      	beq.n	80033d4 <HAL_RCC_OscConfig+0x108>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d157      	bne.n	80033d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e2d9      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d106      	bne.n	8003340 <HAL_RCC_OscConfig+0x74>
 8003332:	4b85      	ldr	r3, [pc, #532]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a84      	ldr	r2, [pc, #528]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x98>
 800334a:	4b7f      	ldr	r3, [pc, #508]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b7c      	ldr	r3, [pc, #496]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7b      	ldr	r2, [pc, #492]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xb0>
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a77      	ldr	r2, [pc, #476]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b75      	ldr	r3, [pc, #468]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a74      	ldr	r2, [pc, #464]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fbd0 	bl	8000b28 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fd fbcc 	bl	8000b28 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	@ 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e29e      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xc0>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd fbbc 	bl	8000b28 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fbb8 	bl	8000b28 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e28a      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c6:	4b60      	ldr	r3, [pc, #384]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0xe8>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b59      	ldr	r3, [pc, #356]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b56      	ldr	r3, [pc, #344]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_OscConfig+0x136>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d002      	beq.n	8003408 <HAL_RCC_OscConfig+0x13c>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11f      	bne.n	8003448 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003408:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x154>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e25d      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	4946      	ldr	r1, [pc, #280]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003434:	4b45      	ldr	r3, [pc, #276]	@ (800354c <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fb29 	bl	8000a90 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d043      	beq.n	80034cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e249      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d023      	beq.n	8003498 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b3d      	ldr	r3, [pc, #244]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3c      	ldr	r2, [pc, #240]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fb64 	bl	8000b28 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fd fb60 	bl	8000b28 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e232      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	492d      	ldr	r1, [pc, #180]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
 8003496:	e01a      	b.n	80034ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003498:	4b2b      	ldr	r3, [pc, #172]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2a      	ldr	r2, [pc, #168]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800349e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fb40 	bl	8000b28 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd fb3c 	bl	8000b28 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e20e      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034be:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e0>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d041      	beq.n	800355e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01c      	beq.n	800351c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e8:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fb19 	bl	8000b28 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fd fb15 	bl	8000b28 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1e7      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350c:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ef      	beq.n	80034fa <HAL_RCC_OscConfig+0x22e>
 800351a:	e020      	b.n	800355e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003522:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fafc 	bl	8000b28 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003532:	e00d      	b.n	8003550 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd faf8 	bl	8000b28 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d906      	bls.n	8003550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1ca      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	4b8c      	ldr	r3, [pc, #560]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ea      	bne.n	8003534 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80a6 	beq.w	80036b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003570:	4b84      	ldr	r3, [pc, #528]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x2b4>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x2b6>
 8003580:	2300      	movs	r3, #0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b7f      	ldr	r3, [pc, #508]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	4a7e      	ldr	r2, [pc, #504]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003590:	6593      	str	r3, [r2, #88]	@ 0x58
 8003592:	4b7c      	ldr	r3, [pc, #496]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	4b79      	ldr	r3, [pc, #484]	@ (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ae:	4b76      	ldr	r3, [pc, #472]	@ (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fab5 	bl	8000b28 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fab1 	bl	8000b28 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e183      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003788 <HAL_RCC_OscConfig+0x4bc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <HAL_RCC_OscConfig+0x32e>
 80035e8:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a65      	ldr	r2, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035f8:	e024      	b.n	8003644 <HAL_RCC_OscConfig+0x378>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d110      	bne.n	8003624 <HAL_RCC_OscConfig+0x358>
 8003602:	4b60      	ldr	r3, [pc, #384]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	4a5e      	ldr	r2, [pc, #376]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003612:	4b5c      	ldr	r3, [pc, #368]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	4a5a      	ldr	r2, [pc, #360]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003622:	e00f      	b.n	8003644 <HAL_RCC_OscConfig+0x378>
 8003624:	4b57      	ldr	r3, [pc, #348]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a56      	ldr	r2, [pc, #344]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a52      	ldr	r2, [pc, #328]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fa6c 	bl	8000b28 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fa68 	bl	8000b28 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e138      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b46      	ldr	r3, [pc, #280]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ed      	beq.n	8003654 <HAL_RCC_OscConfig+0x388>
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fa55 	bl	8000b28 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fa51 	bl	8000b28 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e121      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003698:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ed      	bne.n	8003682 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d03c      	beq.n	800373e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01c      	beq.n	8003706 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fd fa24 	bl	8000b28 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e4:	f7fd fa20 	bl	8000b28 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0f2      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f6:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCC_OscConfig+0x418>
 8003704:	e01b      	b.n	800373e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003706:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800370c:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd fa07 	bl	8000b28 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800371e:	f7fd fa03 	bl	8000b28 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0d5      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003730:	4b14      	ldr	r3, [pc, #80]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ef      	bne.n	800371e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80c9 	beq.w	80038da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003748:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b0c      	cmp	r3, #12
 8003752:	f000 8083 	beq.w	800385c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d15e      	bne.n	800381c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fd f9dd 	bl	8000b28 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003770:	e00c      	b.n	800378c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7fd f9d9 	bl	8000b28 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d905      	bls.n	800378c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ab      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378c:	4b55      	ldr	r3, [pc, #340]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ec      	bne.n	8003772 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b52      	ldr	r3, [pc, #328]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	4b52      	ldr	r3, [pc, #328]	@ (80038e8 <HAL_RCC_OscConfig+0x61c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6a11      	ldr	r1, [r2, #32]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	4311      	orrs	r1, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80037b2:	0212      	lsls	r2, r2, #8
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0552      	lsls	r2, r2, #21
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037c6:	0852      	lsrs	r2, r2, #1
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0652      	lsls	r2, r2, #25
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037d2:	06d2      	lsls	r2, r2, #27
 80037d4:	430a      	orrs	r2, r1
 80037d6:	4943      	ldr	r1, [pc, #268]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a40      	ldr	r2, [pc, #256]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e8:	4b3e      	ldr	r3, [pc, #248]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a3d      	ldr	r2, [pc, #244]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd f998 	bl	8000b28 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd f994 	bl	8000b28 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e066      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x530>
 800381a:	e05e      	b.n	80038da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381c:	4b31      	ldr	r3, [pc, #196]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a30      	ldr	r2, [pc, #192]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd f97e 	bl	8000b28 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd f97a 	bl	8000b28 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04c      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003842:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800384e:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4924      	ldr	r1, [pc, #144]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_OscConfig+0x620>)
 8003856:	4013      	ands	r3, r2
 8003858:	60cb      	str	r3, [r1, #12]
 800385a:	e03e      	b.n	80038da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e039      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003868:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <HAL_RCC_OscConfig+0x618>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	429a      	cmp	r2, r3
 800387a:	d12c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d123      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d11b      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d113      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	019f800c 	.word	0x019f800c
 80038ec:	feeefffc 	.word	0xfeeefffc

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e11e      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b91      	ldr	r3, [pc, #580]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b8e      	ldr	r3, [pc, #568]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 020f 	bic.w	r2, r3, #15
 800391e:	498c      	ldr	r1, [pc, #560]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b8a      	ldr	r3, [pc, #552]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e106      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d073      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d129      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394c:	4b81      	ldr	r3, [pc, #516]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0f4      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800395c:	f000 f972 	bl	8003c44 <RCC_GetSysClockFreqFromPLLSource>
 8003960:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <HAL_RCC_ClockConfig+0x268>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d93f      	bls.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800396a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	d033      	beq.n	80039ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12f      	bne.n	80039ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398a:	4b72      	ldr	r3, [pc, #456]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003992:	4a70      	ldr	r2, [pc, #448]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003998:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e024      	b.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0c6      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b8:	4b66      	ldr	r3, [pc, #408]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0be      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039c8:	f000 f8ce 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4a61      	ldr	r2, [pc, #388]	@ (8003b58 <HAL_RCC_ClockConfig+0x268>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d909      	bls.n	80039ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039de:	4a5d      	ldr	r2, [pc, #372]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039e6:	2380      	movs	r3, #128	@ 0x80
 80039e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4957      	ldr	r1, [pc, #348]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fd f894 	bl	8000b28 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd f890 	bl	8000b28 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e095      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d023      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a42      	ldr	r2, [pc, #264]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a64:	4a3b      	ldr	r2, [pc, #236]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b39      	ldr	r3, [pc, #228]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4936      	ldr	r1, [pc, #216]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b80      	cmp	r3, #128	@ 0x80
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a86:	4b33      	ldr	r3, [pc, #204]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d21d      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 020f 	bic.w	r2, r3, #15
 8003aa8:	4929      	ldr	r1, [pc, #164]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd f83a 	bl	8000b28 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd f836 	bl	8000b28 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e03b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1ed      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4917      	ldr	r1, [pc, #92]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490f      	ldr	r1, [pc, #60]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b1a:	f000 f825 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <HAL_RCC_ClockConfig+0x264>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490c      	ldr	r1, [pc, #48]	@ (8003b5c <HAL_RCC_ClockConfig+0x26c>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x270>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_RCC_ClockConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc ffa6 	bl	8000a90 <HAL_InitTick>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	04c4b400 	.word	0x04c4b400
 8003b5c:	080044d0 	.word	0x080044d0
 8003b60:	20000000 	.word	0x20000000
 8003b64:	20000004 	.word	0x20000004

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e047      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b80:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d102      	bne.n	8003b92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b8c:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e03e      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b92:	4b23      	ldr	r3, [pc, #140]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d136      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9e:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc6:	68d2      	ldr	r2, [r2, #12]
 8003bc8:	0a12      	lsrs	r2, r2, #8
 8003bca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
      break;
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	4a10      	ldr	r2, [pc, #64]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	0a12      	lsrs	r2, r2, #8
 8003be4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0e5b      	lsrs	r3, r3, #25
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e001      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c10:	693b      	ldr	r3, [r7, #16]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000000 	.word	0x20000000

08003c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d10c      	bne.n	8003c82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	4a14      	ldr	r2, [pc, #80]	@ (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c72:	68d2      	ldr	r2, [r2, #12]
 8003c74:	0a12      	lsrs	r2, r2, #8
 8003c76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
    break;
 8003c80:	e00c      	b.n	8003c9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c82:	4a12      	ldr	r2, [pc, #72]	@ (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	0a12      	lsrs	r2, r2, #8
 8003c90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
    break;
 8003c9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0e5b      	lsrs	r3, r3, #25
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cb6:	687b      	ldr	r3, [r7, #4]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8098 	beq.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	4a3f      	ldr	r2, [pc, #252]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a39      	ldr	r2, [pc, #228]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d26:	f7fc feff 	bl	8000b28 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fc fefb 	bl	8000b28 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d902      	bls.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d40:	e005      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d42:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ef      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d159      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d54:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01e      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d019      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d70:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	4a1f      	ldr	r2, [pc, #124]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d9c:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fc febb 	bl	8000b28 <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db4:	e00b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fc feb7 	bl	8000b28 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	74fb      	strb	r3, [r7, #19]
            break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ec      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	74bb      	strb	r3, [r7, #18]
 8003dfe:	e005      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0c:	7c7b      	ldrb	r3, [r7, #17]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4ba6      	ldr	r3, [pc, #664]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	4aa5      	ldr	r2, [pc, #660]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2a:	4ba0      	ldr	r3, [pc, #640]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	499c      	ldr	r1, [pc, #624]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e4c:	4b97      	ldr	r3, [pc, #604]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e52:	f023 020c 	bic.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	4994      	ldr	r1, [pc, #592]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	498b      	ldr	r1, [pc, #556]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e90:	4b86      	ldr	r3, [pc, #536]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4983      	ldr	r1, [pc, #524]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	497a      	ldr	r1, [pc, #488]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed4:	4b75      	ldr	r3, [pc, #468]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4972      	ldr	r1, [pc, #456]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4969      	ldr	r1, [pc, #420]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f18:	4b64      	ldr	r3, [pc, #400]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4961      	ldr	r1, [pc, #388]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	4958      	ldr	r1, [pc, #352]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f5c:	4b53      	ldr	r3, [pc, #332]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	4950      	ldr	r1, [pc, #320]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a4a      	ldr	r2, [pc, #296]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f94:	4b45      	ldr	r3, [pc, #276]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	4942      	ldr	r1, [pc, #264]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fcc:	4b37      	ldr	r3, [pc, #220]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	4934      	ldr	r1, [pc, #208]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b2f      	ldr	r3, [pc, #188]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d015      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004004:	4b29      	ldr	r3, [pc, #164]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	4926      	ldr	r1, [pc, #152]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004022:	d105      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004024:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a20      	ldr	r2, [pc, #128]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800403c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	4918      	ldr	r1, [pc, #96]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405a:	d105      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405c:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a12      	ldr	r2, [pc, #72]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	490a      	ldr	r1, [pc, #40]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e049      	b.n	8004156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fc22 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 f898 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d001      	beq.n	8004178 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e042      	b.n	80041fe <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a21      	ldr	r2, [pc, #132]	@ (800420c <HAL_TIM_Base_Start+0xac>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_Base_Start+0x5c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004192:	d013      	beq.n	80041bc <HAL_TIM_Base_Start+0x5c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_TIM_Base_Start+0xb0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_Base_Start+0x5c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_TIM_Base_Start+0xb4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_Base_Start+0x5c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_TIM_Base_Start+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_Base_Start+0x5c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a19      	ldr	r2, [pc, #100]	@ (800421c <HAL_TIM_Base_Start+0xbc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d115      	bne.n	80041e8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_TIM_Base_Start+0xc0>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d015      	beq.n	80041fa <HAL_TIM_Base_Start+0x9a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d011      	beq.n	80041fa <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e6:	e008      	b.n	80041fa <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e000      	b.n	80041fc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40012c00 	.word	0x40012c00
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40013400 	.word	0x40013400
 800421c:	40014000 	.word	0x40014000
 8004220:	00010007 	.word	0x00010007

08004224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a42      	ldr	r2, [pc, #264]	@ (8004340 <TIM_Base_SetConfig+0x11c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <TIM_Base_SetConfig+0x120>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3e      	ldr	r2, [pc, #248]	@ (8004348 <TIM_Base_SetConfig+0x124>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	@ (800434c <TIM_Base_SetConfig+0x128>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a33      	ldr	r2, [pc, #204]	@ (8004340 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427c:	d017      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a30      	ldr	r2, [pc, #192]	@ (8004344 <TIM_Base_SetConfig+0x120>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <TIM_Base_SetConfig+0x124>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2e      	ldr	r2, [pc, #184]	@ (800434c <TIM_Base_SetConfig+0x128>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <TIM_Base_SetConfig+0x12c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004354 <TIM_Base_SetConfig+0x130>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004358 <TIM_Base_SetConfig+0x134>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <TIM_Base_SetConfig+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a17      	ldr	r2, [pc, #92]	@ (800434c <TIM_Base_SetConfig+0x128>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <TIM_Base_SetConfig+0x12c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <TIM_Base_SetConfig+0x130>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0xe8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <TIM_Base_SetConfig+0x134>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d103      	bne.n	8004314 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]
  }
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40013400 	.word	0x40013400
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e065      	b.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1b      	ldr	r2, [pc, #108]	@ (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	d013      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a18      	ldr	r2, [pc, #96]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a13      	ldr	r2, [pc, #76]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10c      	bne.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800441a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40013400 	.word	0x40013400
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40014000 	.word	0x40014000

08004460 <memset>:
 8004460:	4402      	add	r2, r0
 8004462:	4603      	mov	r3, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <__libc_init_array>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	4d0d      	ldr	r5, [pc, #52]	@ (80044a8 <__libc_init_array+0x38>)
 8004474:	4c0d      	ldr	r4, [pc, #52]	@ (80044ac <__libc_init_array+0x3c>)
 8004476:	1b64      	subs	r4, r4, r5
 8004478:	10a4      	asrs	r4, r4, #2
 800447a:	2600      	movs	r6, #0
 800447c:	42a6      	cmp	r6, r4
 800447e:	d109      	bne.n	8004494 <__libc_init_array+0x24>
 8004480:	4d0b      	ldr	r5, [pc, #44]	@ (80044b0 <__libc_init_array+0x40>)
 8004482:	4c0c      	ldr	r4, [pc, #48]	@ (80044b4 <__libc_init_array+0x44>)
 8004484:	f000 f818 	bl	80044b8 <_init>
 8004488:	1b64      	subs	r4, r4, r5
 800448a:	10a4      	asrs	r4, r4, #2
 800448c:	2600      	movs	r6, #0
 800448e:	42a6      	cmp	r6, r4
 8004490:	d105      	bne.n	800449e <__libc_init_array+0x2e>
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	f855 3b04 	ldr.w	r3, [r5], #4
 8004498:	4798      	blx	r3
 800449a:	3601      	adds	r6, #1
 800449c:	e7ee      	b.n	800447c <__libc_init_array+0xc>
 800449e:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a2:	4798      	blx	r3
 80044a4:	3601      	adds	r6, #1
 80044a6:	e7f2      	b.n	800448e <__libc_init_array+0x1e>
 80044a8:	080044e0 	.word	0x080044e0
 80044ac:	080044e0 	.word	0x080044e0
 80044b0:	080044e0 	.word	0x080044e0
 80044b4:	080044e4 	.word	0x080044e4

080044b8 <_init>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr

080044c4 <_fini>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr
