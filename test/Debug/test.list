
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b80  08009b80  0000ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd8  08009bd8  0000b184  2**0
                  CONTENTS
  4 .ARM          00000000  08009bd8  08009bd8  0000b184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bd8  08009bd8  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  0000abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08009be0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000184  08009d64  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  08009d64  0000bc84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180e4  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f58  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000271f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a5  00000000  00000000  000287d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005052  00000000  00000000  0002987d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c05e  00000000  00000000  0002e8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4ec  00000000  00000000  0004a92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e8  00000000  00000000  00146e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0014c844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b68 	.word	0x08009b68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009b68 	.word	0x08009b68

08000218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800021e:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <MX_DMA_Init+0x50>)
 8000220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000222:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <MX_DMA_Init+0x50>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6493      	str	r3, [r2, #72]	@ 0x48
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <MX_DMA_Init+0x50>)
 800022c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000236:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <MX_DMA_Init+0x50>)
 8000238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800023a:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <MX_DMA_Init+0x50>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6493      	str	r3, [r2, #72]	@ 0x48
 8000242:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <MX_DMA_Init+0x50>)
 8000244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	200b      	movs	r0, #11
 8000254:	f000 fcef 	bl	8000c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000258:	200b      	movs	r0, #11
 800025a:	f000 fd06 	bl	8000c6a <HAL_NVIC_EnableIRQ>

}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	@ 0x28
 8000270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000282:	4b2e      	ldr	r3, [pc, #184]	@ (800033c <MX_GPIO_Init+0xd0>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	4a2d      	ldr	r2, [pc, #180]	@ (800033c <MX_GPIO_Init+0xd0>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800028e:	4b2b      	ldr	r3, [pc, #172]	@ (800033c <MX_GPIO_Init+0xd0>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800029a:	4b28      	ldr	r3, [pc, #160]	@ (800033c <MX_GPIO_Init+0xd0>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029e:	4a27      	ldr	r2, [pc, #156]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002a6:	4b25      	ldr	r3, [pc, #148]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	f003 0320 	and.w	r3, r3, #32
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b2:	4b22      	ldr	r3, [pc, #136]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b6:	4a21      	ldr	r2, [pc, #132]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002b8:	f043 0302 	orr.w	r3, r3, #2
 80002bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002be:	4b1f      	ldr	r3, [pc, #124]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ce:	4a1b      	ldr	r2, [pc, #108]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002d6:	4b19      	ldr	r3, [pc, #100]	@ (800033c <MX_GPIO_Init+0xd0>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2130      	movs	r1, #48	@ 0x30
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <MX_GPIO_Init+0xd4>)
 80002e8:	f001 f816 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|ST7789_DC_Pin|ST7789_RST_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
 80002f2:	4814      	ldr	r0, [pc, #80]	@ (8000344 <MX_GPIO_Init+0xd8>)
 80002f4:	f001 f810 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80002f8:	2330      	movs	r3, #48	@ 0x30
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	2300      	movs	r3, #0
 8000302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	4619      	mov	r1, r3
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <MX_GPIO_Init+0xd4>)
 8000310:	f000 fe80 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|ST7789_DC_Pin|ST7789_RST_Pin;
 8000314:	f44f 6345 	mov.w	r3, #3152	@ 0xc50
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_GPIO_Init+0xd8>)
 800032e:	f000 fe71 	bl	8001014 <HAL_GPIO_Init>

}
 8000332:	bf00      	nop
 8000334:	3728      	adds	r7, #40	@ 0x28
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	48000800 	.word	0x48000800
 8000344:	48000400 	.word	0x48000400

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034e:	f000 fab8 	bl	80008c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000352:	f000 f835 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f7ff ff89 	bl	800026c <MX_GPIO_Init>
  MX_DMA_Init();
 800035a:	f7ff ff5d 	bl	8000218 <MX_DMA_Init>
  MX_SPI1_Init();
 800035e:	f000 f881 	bl	8000464 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000362:	f000 f983 	bl	800066c <MX_TIM3_Init>
  MX_USB_Device_Init();
 8000366:	f008 feef 	bl	8009148 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800036a:	4814      	ldr	r0, [pc, #80]	@ (80003bc <main+0x74>)
 800036c:	f003 fe1a 	bl	8003fa4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000370:	210c      	movs	r1, #12
 8000372:	4812      	ldr	r0, [pc, #72]	@ (80003bc <main+0x74>)
 8000374:	f003 fee8 	bl	8004148 <HAL_TIM_PWM_Start>
//
//	      // 更多颜色：https://www.w3schools.com/colors/colors_picker.asp
//	    }


      for (int period = 0; period < 100; period++) {
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	e009      	b.n	8000392 <main+0x4a>
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period);
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, period);
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <main+0x74>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	641a      	str	r2, [r3, #64]	@ 0x40
          HAL_Delay(7);
 8000386:	2007      	movs	r0, #7
 8000388:	f000 fb0c 	bl	80009a4 <HAL_Delay>
      for (int period = 0; period < 100; period++) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3301      	adds	r3, #1
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b63      	cmp	r3, #99	@ 0x63
 8000396:	ddf2      	ble.n	800037e <main+0x36>
      }
      // �???99逐渐减小�???0
      for (int period = 99; period >= 0; period--) {
 8000398:	2363      	movs	r3, #99	@ 0x63
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	e009      	b.n	80003b2 <main+0x6a>
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period);
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, period);
 800039e:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <main+0x74>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	683a      	ldr	r2, [r7, #0]
 80003a4:	641a      	str	r2, [r3, #64]	@ 0x40
          HAL_Delay(7);
 80003a6:	2007      	movs	r0, #7
 80003a8:	f000 fafc 	bl	80009a4 <HAL_Delay>
      for (int period = 99; period >= 0; period--) {
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	daf2      	bge.n	800039e <main+0x56>
      for (int period = 0; period < 100; period++) {
 80003b8:	e7de      	b.n	8000378 <main+0x30>
 80003ba:	bf00      	nop
 80003bc:	20000204 	.word	0x20000204

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b094      	sub	sp, #80	@ 0x50
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2238      	movs	r2, #56	@ 0x38
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f009 fb9e 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003e2:	2000      	movs	r0, #0
 80003e4:	f002 fce4 	bl	8002db0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003e8:	2321      	movs	r3, #33	@ 0x21
 80003ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fa:	2303      	movs	r3, #3
 80003fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003fe:	2302      	movs	r3, #2
 8000400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000402:	2355      	movs	r3, #85	@ 0x55
 8000404:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000406:	2302      	movs	r3, #2
 8000408:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800040a:	2302      	movs	r3, #2
 800040c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040e:	2302      	movs	r3, #2
 8000410:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fd7e 	bl	8002f18 <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000422:	f000 f818 	bl	8000456 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2303      	movs	r3, #3
 800042c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2104      	movs	r1, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f003 f87c 	bl	800353c <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800044a:	f000 f804 	bl	8000456 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3750      	adds	r7, #80	@ 0x50
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045a:	b672      	cpsid	i
}
 800045c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045e:	bf00      	nop
 8000460:	e7fd      	b.n	800045e <Error_Handler+0x8>
	...

08000464 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <MX_SPI1_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <MX_SPI1_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <MX_SPI1_Init+0x74>)
 8000470:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000474:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000476:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_SPI1_Init+0x74>)
 800047e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000482:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <MX_SPI1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_SPI1_Init+0x74>)
 8000492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000496:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_SPI1_Init+0x74>)
 800049a:	2210      	movs	r2, #16
 800049c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004b2:	2207      	movs	r2, #7
 80004b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004be:	2208      	movs	r2, #8
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_SPI1_Init+0x74>)
 80004c4:	f003 fc6c 	bl	8003da0 <HAL_SPI_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f7ff ffc2 	bl	8000456 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200001a0 	.word	0x200001a0
 80004dc:	40013000 	.word	0x40013000

080004e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a17      	ldr	r2, [pc, #92]	@ (800055c <HAL_SPI_MspInit+0x7c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d127      	bne.n	8000552 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000506:	4a16      	ldr	r2, [pc, #88]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800050c:	6613      	str	r3, [r2, #96]	@ 0x60
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <HAL_SPI_MspInit+0x80>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000532:	2328      	movs	r3, #40	@ 0x28
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000542:	2305      	movs	r3, #5
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <HAL_SPI_MspInit+0x84>)
 800054e:	f000 fd61 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	@ 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40013000 	.word	0x40013000
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <HAL_MspInit+0x54>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000572:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <HAL_MspInit+0x54>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6613      	str	r3, [r2, #96]	@ 0x60
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <HAL_MspInit+0x54>)
 800057c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_MspInit+0x54>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800058a:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <HAL_MspInit+0x54>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000590:	6593      	str	r3, [r2, #88]	@ 0x58
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_MspInit+0x54>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800059e:	2020      	movs	r0, #32
 80005a0:	f000 fa22 	bl	80009e8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80005a4:	f000 fa48 	bl	8000a38 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fa31 	bl	8000a10 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005ae:	f002 fca3 	bl	8002ef8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000616:	f000 f9a7 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <DMA1_Channel1_IRQHandler+0x10>)
 8000626:	f000 fbe3 	bl	8000df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000250 	.word	0x20000250

08000634 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <USB_LP_IRQHandler+0x10>)
 800063a:	f000 ff75 	bl	8001528 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20001788 	.word	0x20001788

08000648 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	@ 0x38
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <MX_TIM3_Init+0xe8>)
 80006a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 212;
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006b2:	22d4      	movs	r2, #212	@ 0xd4
 80006b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c2:	4823      	ldr	r0, [pc, #140]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006c4:	f003 fc17 	bl	8003ef6 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006ce:	f7ff fec2 	bl	8000456 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006dc:	4619      	mov	r1, r3
 80006de:	481c      	ldr	r0, [pc, #112]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006e0:	f003 ff58 	bl	8004594 <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006ea:	f7ff feb4 	bl	8000456 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_TIM3_Init+0xe4>)
 80006f0:	f003 fcc8 	bl	8004084 <HAL_TIM_PWM_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006fa:	f7ff feac 	bl	8000456 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <MX_TIM3_Init+0xe4>)
 800070e:	f004 fcf7 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000718:	f7ff fe9d 	bl	8000456 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071c:	2360      	movs	r3, #96	@ 0x60
 800071e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	220c      	movs	r2, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4807      	ldr	r0, [pc, #28]	@ (8000750 <MX_TIM3_Init+0xe4>)
 8000734:	f003 fe1a 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800073e:	f7ff fe8a 	bl	8000456 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <MX_TIM3_Init+0xe4>)
 8000744:	f000 f854 	bl	80007f0 <HAL_TIM_MspPostInit>

}
 8000748:	bf00      	nop
 800074a:	3738      	adds	r7, #56	@ 0x38
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000204 	.word	0x20000204
 8000754:	40000400 	.word	0x40000400

08000758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <HAL_TIM_Base_MspInit+0x88>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d136      	bne.n	80007d8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <HAL_TIM_Base_MspInit+0x8c>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	4a1d      	ldr	r2, [pc, #116]	@ (80007e4 <HAL_TIM_Base_MspInit+0x8c>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6593      	str	r3, [r2, #88]	@ 0x58
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <HAL_TIM_Base_MspInit+0x8c>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 8000784:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <HAL_TIM_Base_MspInit+0x94>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 800078a:	2240      	movs	r2, #64	@ 0x40
 800078c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 80007bc:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007be:	f000 fa6f 	bl	8000ca0 <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80007c8:	f7ff fe45 	bl	8000456 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <HAL_TIM_Base_MspInit+0x90>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40000400 	.word	0x40000400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	20000250 	.word	0x20000250
 80007ec:	40020008 	.word	0x40020008

080007f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <HAL_TIM_MspPostInit+0x70>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d121      	bne.n	8000856 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <HAL_TIM_MspPostInit+0x74>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <HAL_TIM_MspPostInit+0x74>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_TIM_MspPostInit+0x74>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB7     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	2312      	movs	r3, #18
 8000830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800083a:	230a      	movs	r3, #10
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <HAL_TIM_MspPostInit+0x78>)
 8000846:	f000 fbe5 	bl	8001014 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_TIM_MspPostInit+0x7c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_TIM_MspPostInit+0x7c>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000400 	.word	0x40000400
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400
 800086c:	40010000 	.word	0x40010000

08000870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000872:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000874:	f7ff fee8 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0a      	ldr	r4, [pc, #40]	@ (80008bc <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089e:	f009 f93f 	bl	8009b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a2:	f7ff fd51 	bl	8000348 <main>

080008a6 <LoopForever>:

LoopForever:
    b LoopForever
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
  ldr   r0, =_estack
 80008a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80008b4:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 80008b8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80008bc:	20001c84 	.word	0x20001c84

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>

080008c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f9a7 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f80e 	bl	80008f4 <HAL_InitTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e001      	b.n	80008e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e4:	f7ff fe40 	bl	8000568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e8:	79fb      	ldrb	r3, [r7, #7]

}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000900:	4b16      	ldr	r3, [pc, #88]	@ (800095c <HAL_InitTick+0x68>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d022      	beq.n	800094e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_InitTick+0x6c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <HAL_InitTick+0x68>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000914:	fbb1 f3f3 	udiv	r3, r1, r3
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f9b2 	bl	8000c86 <HAL_SYSTICK_Config>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10f      	bne.n	8000948 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d809      	bhi.n	8000942 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092e:	2200      	movs	r2, #0
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	f04f 30ff 	mov.w	r0, #4294967295
 8000936:	f000 f97e 	bl	8000c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_InitTick+0x70>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	e007      	b.n	8000952 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e004      	b.n	8000952 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000008 	.word	0x20000008
 8000960:	20000000 	.word	0x20000000
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_IncTick+0x1c>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x20>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <HAL_IncTick+0x1c>)
 8000978:	6013      	str	r3, [r2, #0]
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	200002b0 	.word	0x200002b0
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <HAL_GetTick+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200002b0 	.word	0x200002b0

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff ffee 	bl	800098c <HAL_GetTick>
 80009b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d004      	beq.n	80009c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_Delay+0x40>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c8:	bf00      	nop
 80009ca:	f7ff ffdf 	bl	800098c <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d8f7      	bhi.n	80009ca <HAL_Delay+0x26>
  {
  }
}
 80009da:	bf00      	nop
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000008 	.word	0x20000008

080009e8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80009f8:	4904      	ldr	r1, [pc, #16]	@ (8000a0c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40010030 	.word	0x40010030

08000a10 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f023 0202 	bic.w	r2, r3, #2
 8000a20:	4904      	ldr	r1, [pc, #16]	@ (8000a34 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	600b      	str	r3, [r1, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40010030 	.word	0x40010030

08000a38 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000a4a:	f7ff ff9f 	bl	800098c <HAL_GetTick>
 8000a4e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000a50:	e008      	b.n	8000a64 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000a52:	f7ff ff9b 	bl	800098c <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d901      	bls.n	8000a64 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e006      	b.n	8000a72 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f0      	beq.n	8000a52 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010030 	.word	0x40010030

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	@ (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff29 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff40 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff90 	bl	8000b74 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5f 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff33 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa4 	bl	8000bdc <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e08d      	b.n	8000dce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <HAL_DMA_Init+0x138>)
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d80f      	bhi.n	8000cde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <HAL_DMA_Init+0x13c>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a45      	ldr	r2, [pc, #276]	@ (8000de0 <HAL_DMA_Init+0x140>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	009a      	lsls	r2, r3, #2
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a42      	ldr	r2, [pc, #264]	@ (8000de4 <HAL_DMA_Init+0x144>)
 8000cda:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cdc:	e00e      	b.n	8000cfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b40      	ldr	r3, [pc, #256]	@ (8000de8 <HAL_DMA_Init+0x148>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <HAL_DMA_Init+0x140>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	009a      	lsls	r2, r3, #2
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8000dec <HAL_DMA_Init+0x14c>)
 8000cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2202      	movs	r2, #2
 8000d00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f8fe 	bl	8000f50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000d5c:	d102      	bne.n	8000d64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d010      	beq.n	8000da4 <HAL_DMA_Init+0x104>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d80c      	bhi.n	8000da4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f91e 	bl	8000fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	e008      	b.n	8000db6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40020407 	.word	0x40020407
 8000ddc:	bffdfff8 	.word	0xbffdfff8
 8000de0:	cccccccd 	.word	0xcccccccd
 8000de4:	40020000 	.word	0x40020000
 8000de8:	bffdfbf8 	.word	0xbffdfbf8
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	2204      	movs	r2, #4
 8000e12:	409a      	lsls	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d026      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x7a>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d021      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0204 	bic.w	r2, r2, #4
 8000e42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	2104      	movs	r1, #4
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d071      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e68:	e06c      	b.n	8000f44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	2202      	movs	r2, #2
 8000e74:	409a      	lsls	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d02e      	beq.n	8000edc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d029      	beq.n	8000edc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10b      	bne.n	8000eae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 020a 	bic.w	r2, r2, #10
 8000ea4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f003 021f 	and.w	r2, r3, #31
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	2102      	movs	r1, #2
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d038      	beq.n	8000f44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000eda:	e033      	b.n	8000f44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	f003 031f 	and.w	r3, r3, #31
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d02a      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d025      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f003 021f 	and.w	r2, r3, #31
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
}
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d802      	bhi.n	8000f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e001      	b.n	8000f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000f6c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4413      	add	r3, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40020407 	.word	0x40020407
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020820 	.word	0x40020820
 8000fc4:	cccccccd 	.word	0xcccccccd
 8000fc8:	40020880 	.word	0x40020880

08000fcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000fee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	1000823f 	.word	0x1000823f
 8001010:	40020940 	.word	0x40020940

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001022:	e15a      	b.n	80012da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 814c 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118c:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	@ 0x60
 8001194:	4b58      	ldr	r3, [pc, #352]	@ (80012f8 <HAL_GPIO_Init+0x2e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	4a56      	ldr	r2, [pc, #344]	@ (80012fc <HAL_GPIO_Init+0x2e8>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ca:	d01f      	beq.n	800120c <HAL_GPIO_Init+0x1f8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001300 <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d019      	beq.n	8001208 <HAL_GPIO_Init+0x1f4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001304 <HAL_GPIO_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1f0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4a      	ldr	r2, [pc, #296]	@ (8001308 <HAL_GPIO_Init+0x2f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a49      	ldr	r2, [pc, #292]	@ (800130c <HAL_GPIO_Init+0x2f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <HAL_GPIO_Init+0x2fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f4:	2305      	movs	r3, #5
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011f8:	2306      	movs	r3, #6
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <HAL_GPIO_Init+0x2e8>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <HAL_GPIO_Init+0x300>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001250:	4a30      	ldr	r2, [pc, #192]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127a:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <HAL_GPIO_Init+0x300>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_GPIO_Init+0x300>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ce:	4a11      	ldr	r2, [pc, #68]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae9d 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0c0      	b.n	80014dc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d106      	bne.n	8001374 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f008 f8ca 	bl	8009508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f003 ff6a 	bl	800525a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e03e      	b.n	800140a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3311      	adds	r3, #17
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3310      	adds	r3, #16
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	3313      	adds	r3, #19
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3320      	adds	r3, #32
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	3324      	adds	r3, #36	@ 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	429a      	cmp	r2, r3
 8001412:	d3bb      	bcc.n	800138c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e044      	b.n	80014a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3b5      	bcc.n	800141a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014ba:	f003 fee9 	bl	8005290 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a9b      	ldrb	r3, [r3, #10]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f001 fc40 	bl	8002d5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_PCD_Start+0x16>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e012      	b.n	8001520 <HAL_PCD_Start+0x3c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 fe90 	bl	800522c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f006 f950 	bl	80077b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f006 f955 	bl	80077e4 <USB_ReadInterrupts>
 800153a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fb04 	bl	8001b54 <PCD_EP_ISR_Handler>

    return;
 800154c:	e110      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001560:	b29a      	uxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156a:	b292      	uxth	r2, r2
 800156c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f008 f85a 	bl	800962a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001576:	2100      	movs	r1, #0
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f8fc 	bl	8001776 <HAL_PCD_SetAddress>

    return;
 800157e:	e0f7      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800159c:	b292      	uxth	r2, r2
 800159e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015a2:	e0e5      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00c      	beq.n	80015c8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015c6:	e0d3      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d034      	beq.n	800163c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0204 	bic.w	r2, r2, #4
 80015e4:	b292      	uxth	r2, r2
 80015e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0208 	bic.w	r2, r2, #8
 80015fc:	b292      	uxth	r2, r2
 80015fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001614:	2100      	movs	r1, #0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f008 f9fa 	bl	8009a10 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f008 f83d 	bl	800969c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800163a:	e099      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001642:	2b00      	cmp	r3, #0
 8001644:	d027      	beq.n	8001696 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0208 	orr.w	r2, r2, #8
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f007 ffea 	bl	8009668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001694:	e06c      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169c:	2b00      	cmp	r3, #0
 800169e:	d040      	beq.n	8001722 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016b2:	b292      	uxth	r2, r2
 80016b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12b      	bne.n	800171a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0208 	orr.w	r2, r2, #8
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001702:	b29b      	uxth	r3, r3
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f008 f97c 	bl	8009a10 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001718:	e02a      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f007 ffa4 	bl	8009668 <HAL_PCD_SuspendCallback>
    return;
 8001720:	e026      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00f      	beq.n	800174c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800173e:	b292      	uxth	r2, r2
 8001740:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f007 ff62 	bl	800960e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800174a:	e011      	b.n	8001770 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001768:	b292      	uxth	r2, r2
 800176a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800176e:	bf00      	nop
  }
}
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_PCD_SetAddress+0x1a>
 800178c:	2302      	movs	r3, #2
 800178e:	e012      	b.n	80017b6 <HAL_PCD_SetAddress+0x40>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 fff1 	bl	800778e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	4608      	mov	r0, r1
 80017c8:	4611      	mov	r1, r2
 80017ca:	461a      	mov	r2, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	70fb      	strb	r3, [r7, #3]
 80017d0:	460b      	mov	r3, r1
 80017d2:	803b      	strh	r3, [r7, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da0e      	bge.n	8001802 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0207 	and.w	r2, r3, #7
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	3310      	adds	r3, #16
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	705a      	strb	r2, [r3, #1]
 8001800:	e00e      	b.n	8001820 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0207 	and.w	r2, r3, #7
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800182c:	883a      	ldrh	r2, [r7, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	78ba      	ldrb	r2, [r7, #2]
 8001836:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001838:	78bb      	ldrb	r3, [r7, #2]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d102      	bne.n	8001844 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_PCD_EP_Open+0x94>
 800184e:	2302      	movs	r3, #2
 8001850:	e00e      	b.n	8001870 <HAL_PCD_EP_Open+0xb2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	f003 fd33 	bl	80052cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800186e:	7afb      	ldrb	r3, [r7, #11]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da0e      	bge.n	80018aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	3310      	adds	r3, #16
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	705a      	strb	r2, [r3, #1]
 80018a8:	e00e      	b.n	80018c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 0207 	and.w	r2, r3, #7
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_PCD_EP_Close+0x6a>
 80018de:	2302      	movs	r3, #2
 80018e0:	e00e      	b.n	8001900 <HAL_PCD_EP_Close+0x88>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f8af 	bl	8005a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	460b      	mov	r3, r1
 8001916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	f003 0207 	and.w	r2, r3, #7
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2200      	movs	r2, #0
 8001946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	b2da      	uxtb	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6979      	ldr	r1, [r7, #20]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 fa67 	bl	8005e2e <USB_EPStartXfer>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 0207 	and.w	r2, r3, #7
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800198c:	681b      	ldr	r3, [r3, #0]
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	460b      	mov	r3, r1
 80019a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	f003 0207 	and.w	r2, r3, #7
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	3310      	adds	r3, #16
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6979      	ldr	r1, [r7, #20]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fa18 	bl	8005e2e <USB_EPStartXfer>

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	7912      	ldrb	r2, [r2, #4]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03e      	b.n	8001aa4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da0e      	bge.n	8001a4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	3310      	adds	r3, #16
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	705a      	strb	r2, [r3, #1]
 8001a4a:	e00c      	b.n	8001a66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_PCD_EP_SetStall+0x7e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e00e      	b.n	8001aa4 <HAL_PCD_EP_SetStall+0x9c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 fd7b 	bl	8007590 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	7912      	ldrb	r2, [r2, #4]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e040      	b.n	8001b4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da0e      	bge.n	8001af0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 0207 	and.w	r2, r3, #7
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	705a      	strb	r2, [r3, #1]
 8001aee:	e00e      	b.n	8001b0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 0207 	and.w	r2, r3, #7
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_PCD_EP_ClrStall+0x82>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e00e      	b.n	8001b4c <HAL_PCD_EP_ClrStall+0xa0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fd78 	bl	8007632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b096      	sub	sp, #88	@ 0x58
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b5c:	e3ad      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001b78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 816f 	bne.w	8001e60 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d14c      	bne.n	8001c28 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b9e:	81fb      	strh	r3, [r7, #14]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	441a      	add	r2, r3
 8001bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f007 fcf2 	bl	80095da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7b1b      	ldrb	r3, [r3, #12]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 835c 	beq.w	80022ba <PCD_EP_ISR_Handler+0x766>
 8001c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 8357 	bne.w	80022ba <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	731a      	strb	r2, [r3, #12]
 8001c26:	e348      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c2e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d032      	beq.n	8001cac <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f005 fe01 	bl	8007888 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c92:	4013      	ands	r3, r2
 8001c94:	823b      	strh	r3, [r7, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	8a3a      	ldrh	r2, [r7, #16]
 8001c9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f007 fc6b 	bl	8009580 <HAL_PCD_SetupStageCallback>
 8001caa:	e306      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f280 8302 	bge.w	80022ba <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	83fb      	strh	r3, [r7, #30]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	8bfa      	ldrh	r2, [r7, #30]
 8001ccc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d019      	beq.n	8001d38 <PCD_EP_ISR_Handler+0x1e4>
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d12:	6959      	ldr	r1, [r3, #20]
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f005 fdb3 	bl	8007888 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	441a      	add	r2, r3
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d30:	2100      	movs	r1, #0
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f007 fc36 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 82b5 	bne.w	80022ba <PCD_EP_ISR_Handler+0x766>
 8001d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d54:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001d5c:	f000 82ad 	beq.w	80022ba <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4413      	add	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d96:	d91d      	bls.n	8001dd4 <PCD_EP_ISR_Handler+0x280>
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <PCD_EP_ISR_Handler+0x25e>
 8001dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dae:	3b01      	subs	r3, #1
 8001db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e026      	b.n	8001e22 <PCD_EP_ISR_Handler+0x2ce>
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x29e>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	e017      	b.n	8001e22 <PCD_EP_ISR_Handler+0x2ce>
 8001df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x2b8>
 8001e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e08:	3301      	adds	r3, #1
 8001e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e32:	827b      	strh	r3, [r7, #18]
 8001e34:	8a7b      	ldrh	r3, [r7, #18]
 8001e36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001e3a:	827b      	strh	r3, [r7, #18]
 8001e3c:	8a7b      	ldrh	r3, [r7, #18]
 8001e3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e42:	827b      	strh	r3, [r7, #18]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	8a7b      	ldrh	r3, [r7, #18]
 8001e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8013      	strh	r3, [r2, #0]
 8001e5e:	e22c      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f280 80f6 	bge.w	800206a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e94:	4013      	ands	r3, r2
 8001e96:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001eac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001eb4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	7b1b      	ldrb	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d123      	bne.n	8001f1a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001efa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 808e 	beq.w	8002020 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0a:	6959      	ldr	r1, [r3, #20]
 8001f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0e:	88da      	ldrh	r2, [r3, #6]
 8001f10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f14:	f005 fcb8 	bl	8007888 <USB_ReadPMA>
 8001f18:	e082      	b.n	8002020 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	78db      	ldrb	r3, [r3, #3]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d10a      	bne.n	8001f38 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f26:	461a      	mov	r2, r3
 8001f28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f9d3 	bl	80022d6 <HAL_PCD_EP_DB_Receive>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001f36:	e073      	b.n	8002020 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f52:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d022      	beq.n	8001fdc <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02c      	beq.n	8002020 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	6959      	ldr	r1, [r3, #20]
 8001fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd0:	891a      	ldrh	r2, [r3, #8]
 8001fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fd6:	f005 fc57 	bl	8007888 <USB_ReadPMA>
 8001fda:	e021      	b.n	8002020 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002000:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002004:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	895a      	ldrh	r2, [r3, #10]
 8002018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800201c:	f005 fc34 	bl	8007888 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002028:	441a      	add	r2, r3
 800202a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002036:	441a      	add	r2, r3
 8002038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <PCD_EP_ISR_Handler+0x4fc>
 8002044:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d206      	bcs.n	800205e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f007 faa4 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
 800205c:	e005      	b.n	800206a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fee2 	bl	8005e2e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800206a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8121 	beq.w	80022ba <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002078:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	3310      	adds	r3, #16
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80020a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	441a      	add	r2, r3
 80020b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80020bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80020c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	f040 80a2 	bne.w	8002216 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80020d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020da:	7b1b      	ldrb	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8093 	beq.w	8002208 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d046      	beq.n	800217c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d126      	bne.n	8002144 <PCD_EP_ISR_Handler+0x5f0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	4413      	add	r3, r2
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	4413      	add	r3, r2
 8002118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	b29a      	uxth	r2, r3
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29a      	uxth	r2, r3
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e061      	b.n	8002208 <PCD_EP_ISR_Handler+0x6b4>
 8002144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d15d      	bne.n	8002208 <PCD_EP_ISR_Handler+0x6b4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	4413      	add	r3, r2
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	00da      	lsls	r2, r3, #3
 800216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216c:	4413      	add	r3, r2
 800216e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002176:	2200      	movs	r2, #0
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	e045      	b.n	8002208 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d126      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x684>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002198:	b29b      	uxth	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219e:	4413      	add	r3, r2
 80021a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00da      	lsls	r2, r3, #3
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021aa:	4413      	add	r3, r2
 80021ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	b29a      	uxth	r2, r3
 80021be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	e017      	b.n	8002208 <PCD_EP_ISR_Handler+0x6b4>
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d113      	bne.n	8002208 <PCD_EP_ISR_Handler+0x6b4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ee:	4413      	add	r3, r2
 80021f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	00da      	lsls	r2, r3, #3
 80021f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fa:	4413      	add	r3, r2
 80021fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002204:	2200      	movs	r2, #0
 8002206:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f007 f9e3 	bl	80095da <HAL_PCD_DataInStageCallback>
 8002214:	e051      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002216:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d144      	bne.n	80022ac <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4413      	add	r3, r2
 800223c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002246:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800224a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002252:	429a      	cmp	r2, r3
 8002254:	d907      	bls.n	8002266 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8002256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800225e:	1ad2      	subs	r2, r2, r3
 8002260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	e002      	b.n	800226c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8002266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800226c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f007 f9ad 	bl	80095da <HAL_PCD_DataInStageCallback>
 8002280:	e01b      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800228a:	441a      	add	r2, r3
 800228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002298:	441a      	add	r2, r3
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fdc2 	bl	8005e2e <USB_EPStartXfer>
 80022aa:	e006      	b.n	80022ba <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022b0:	461a      	mov	r2, r3
 80022b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f917 	bl	80024e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f6ff ac49 	blt.w	8001b5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3758      	adds	r7, #88	@ 0x58
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	4613      	mov	r3, r2
 80022e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d07c      	beq.n	80023e8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	8b7b      	ldrh	r3, [r7, #26]
 800231a:	429a      	cmp	r2, r3
 800231c:	d306      	bcc.n	800232c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	8b7b      	ldrh	r3, [r7, #26]
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	619a      	str	r2, [r3, #24]
 800232a:	e002      	b.n	8002332 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d123      	bne.n	8002382 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002354:	833b      	strh	r3, [r7, #24]
 8002356:	8b3b      	ldrh	r3, [r7, #24]
 8002358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800235c:	833b      	strh	r3, [r7, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	441a      	add	r2, r3
 800236c:	8b3b      	ldrh	r3, [r7, #24]
 800236e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800237a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237e:	b29b      	uxth	r3, r3
 8002380:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01f      	beq.n	80023cc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a6:	82fb      	strh	r3, [r7, #22]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	441a      	add	r2, r3
 80023b6:	8afb      	ldrh	r3, [r7, #22]
 80023b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023cc:	8b7b      	ldrh	r3, [r7, #26]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8085 	beq.w	80024de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6959      	ldr	r1, [r3, #20]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	891a      	ldrh	r2, [r3, #8]
 80023e0:	8b7b      	ldrh	r3, [r7, #26]
 80023e2:	f005 fa51 	bl	8007888 <USB_ReadPMA>
 80023e6:	e07a      	b.n	80024de <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	4413      	add	r3, r2
 8002402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	8b7b      	ldrh	r3, [r7, #26]
 8002414:	429a      	cmp	r2, r3
 8002416:	d306      	bcc.n	8002426 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	8b7b      	ldrh	r3, [r7, #26]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	619a      	str	r2, [r3, #24]
 8002424:	e002      	b.n	800242c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d123      	bne.n	800247c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800244a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244e:	83fb      	strh	r3, [r7, #30]
 8002450:	8bfb      	ldrh	r3, [r7, #30]
 8002452:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002456:	83fb      	strh	r3, [r7, #30]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	8bfb      	ldrh	r3, [r7, #30]
 8002468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800246c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002478:	b29b      	uxth	r3, r3
 800247a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11f      	bne.n	80024c6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800249c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a0:	83bb      	strh	r3, [r7, #28]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	8bbb      	ldrh	r3, [r7, #28]
 80024b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024c6:	8b7b      	ldrh	r3, [r7, #26]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	6959      	ldr	r1, [r3, #20]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	895a      	ldrh	r2, [r3, #10]
 80024d8:	8b7b      	ldrh	r3, [r7, #26]
 80024da:	f005 f9d5 	bl	8007888 <USB_ReadPMA>
    }
  }

  return count;
 80024de:	8b7b      	ldrh	r3, [r7, #26]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0a4      	sub	sp, #144	@ 0x90
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 81db 	beq.w	80028b8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4413      	add	r3, r2
 800251c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002526:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002532:	429a      	cmp	r2, r3
 8002534:	d907      	bls.n	8002546 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	e002      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 80b9 	bne.w	80026c8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d126      	bne.n	80025ac <HAL_PCD_EP_DB_Transmit+0xc4>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800256c:	b29b      	uxth	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002572:	4413      	add	r3, r2
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00da      	lsls	r2, r3, #3
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	4413      	add	r3, r2
 8002580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002590:	b29a      	uxth	r2, r3
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	e01a      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d116      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c8:	4413      	add	r3, r2
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	00da      	lsls	r2, r3, #3
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	4413      	add	r3, r2
 80025d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	2200      	movs	r2, #0
 80025e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d126      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x156>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	00da      	lsls	r2, r3, #3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002622:	b29a      	uxth	r2, r3
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002636:	b29a      	uxth	r2, r3
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	801a      	strh	r2, [r3, #0]
 800263c:	e017      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x186>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d113      	bne.n	800266e <HAL_PCD_EP_DB_Transmit+0x186>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	4413      	add	r3, r2
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	4413      	add	r3, r2
 8002662:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f006 ffb0 	bl	80095da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 82fa 	beq.w	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800269c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a0:	82fb      	strh	r3, [r7, #22]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	8afb      	ldrh	r3, [r7, #22]
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
 80026c6:	e2d8      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d021      	beq.n	8002716 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800270a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800270e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002712:	b29b      	uxth	r3, r3
 8002714:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 82ac 	bne.w	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800272a:	441a      	add	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002738:	441a      	add	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	429a      	cmp	r2, r3
 8002748:	d30b      	bcc.n	8002762 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	621a      	str	r2, [r3, #32]
 8002760:	e017      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800276a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800276e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800277a:	e00a      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d165      	bne.n	8002866 <HAL_PCD_EP_DB_Transmit+0x37e>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ae:	4413      	add	r3, r2
 80027b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ba:	4413      	add	r3, r2
 80027bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80027d8:	d91d      	bls.n	8002816 <HAL_PCD_EP_DB_Transmit+0x32e>
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80027ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f0:	3b01      	subs	r3, #1
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	b29b      	uxth	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280e:	b29a      	uxth	r2, r3
 8002810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e044      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x34c>
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282c:	b29a      	uxth	r2, r3
 800282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	e035      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800283c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_PCD_EP_DB_Transmit+0x366>
 8002848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284a:	3301      	adds	r3, #1
 800284c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002856:	b29b      	uxth	r3, r3
 8002858:	029b      	lsls	r3, r3, #10
 800285a:	b29b      	uxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	b29a      	uxth	r2, r3
 8002860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	e01c      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d118      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	647b      	str	r3, [r7, #68]	@ 0x44
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002882:	4413      	add	r3, r2
 8002884:	647b      	str	r3, [r7, #68]	@ 0x44
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	00da      	lsls	r2, r3, #3
 800288c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288e:	4413      	add	r3, r2
 8002890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289a:	b29a      	uxth	r2, r3
 800289c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	891a      	ldrh	r2, [r3, #8]
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f004 ffa7 	bl	8007804 <USB_WritePMA>
 80028b6:	e1e0      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d307      	bcc.n	80028fc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	619a      	str	r2, [r3, #24]
 80028fa:	e002      	b.n	8002902 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80c0 	bne.w	8002a8c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d126      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002928:	4413      	add	r3, r2
 800292a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	00da      	lsls	r2, r3, #3
 8002932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002934:	4413      	add	r3, r2
 8002936:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800293a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800293c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002946:	b29a      	uxth	r2, r3
 8002948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295a:	b29a      	uxth	r2, r3
 800295c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e01a      	b.n	8002998 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d116      	bne.n	8002998 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297e:	4413      	add	r3, r2
 8002980:	667b      	str	r3, [r7, #100]	@ 0x64
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00da      	lsls	r2, r3, #3
 8002988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800298a:	4413      	add	r3, r2
 800298c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002990:	663b      	str	r3, [r7, #96]	@ 0x60
 8002992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002994:	2200      	movs	r2, #0
 8002996:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	677b      	str	r3, [r7, #116]	@ 0x74
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12b      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x516>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ba:	4413      	add	r3, r2
 80029bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	00da      	lsls	r2, r3, #3
 80029c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029dc:	b29a      	uxth	r2, r3
 80029de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	e017      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x546>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d113      	bne.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x546>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a14:	4413      	add	r3, r2
 8002a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00da      	lsls	r2, r3, #3
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a20:	4413      	add	r3, r2
 8002a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a26:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f006 fdd0 	bl	80095da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 811a 	bne.w	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a60:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]
 8002a8a:	e0f6      	b.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d121      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80ca 	bne.w	8002c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aee:	441a      	add	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002afc:	441a      	add	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d30b      	bcc.n	8002b26 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e017      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b3e:	e00a      	b.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d165      	bne.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x748>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b78:	4413      	add	r3, r2
 8002b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	00da      	lsls	r2, r3, #3
 8002b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ba2:	d91d      	bls.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	e041      	b.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x716>
 8002be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bfa:	801a      	strh	r2, [r3, #0]
 8002bfc:	e032      	b.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x730>
 8002c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c14:	3301      	adds	r3, #1
 8002c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	029b      	lsls	r3, r3, #10
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	e019      	b.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d115      	bne.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	4413      	add	r3, r2
 8002c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00da      	lsls	r2, r3, #3
 8002c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c52:	4413      	add	r3, r2
 8002c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6959      	ldr	r1, [r3, #20]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	895a      	ldrh	r2, [r3, #10]
 8002c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f004 fdc5 	bl	8007804 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c94:	82bb      	strh	r3, [r7, #20]
 8002c96:	8abb      	ldrh	r3, [r7, #20]
 8002c98:	f083 0310 	eor.w	r3, r3, #16
 8002c9c:	82bb      	strh	r3, [r7, #20]
 8002c9e:	8abb      	ldrh	r3, [r7, #20]
 8002ca0:	f083 0320 	eor.w	r3, r3, #32
 8002ca4:	82bb      	strh	r3, [r7, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	8abb      	ldrh	r3, [r7, #20]
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3790      	adds	r7, #144	@ 0x90
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	f003 0207 	and.w	r2, r3, #7
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3310      	adds	r3, #16
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e009      	b.n	8002d1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d0a:	897a      	ldrh	r2, [r7, #10]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	80da      	strh	r2, [r3, #6]
 8002d32:	e00b      	b.n	8002d4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2201      	movs	r2, #1
 8002d38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d141      	bne.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dca:	d131      	bne.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dcc:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd2:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ddc:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de4:	4a41      	ldr	r2, [pc, #260]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dec:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2232      	movs	r2, #50	@ 0x32
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	0c9b      	lsrs	r3, r3, #18
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e02:	e002      	b.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e16:	d102      	bne.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f2      	bne.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e1e:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2a:	d158      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e057      	b.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e36:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e40:	e04d      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e48:	d141      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4a:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d131      	bne.n	8002ebc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e58:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e5e:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e68:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e70:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2232      	movs	r2, #50	@ 0x32
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e8e:	e002      	b.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d102      	bne.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f2      	bne.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d112      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e011      	b.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ecc:	e007      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002edc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	431bde83 	.word	0x431bde83

08002ef8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a04      	ldr	r2, [pc, #16]	@ (8002f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f06:	6093      	str	r3, [r2, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e2fe      	b.n	8003528 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b97      	ldr	r3, [pc, #604]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3e>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d002      	beq.n	8002f5c <HAL_RCC_OscConfig+0x44>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05b      	beq.n	8003020 <HAL_RCC_OscConfig+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d157      	bne.n	8003020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e2d9      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x74>
 8002f7e:	4b85      	ldr	r3, [pc, #532]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a84      	ldr	r2, [pc, #528]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x98>
 8002f96:	4b7f      	ldr	r3, [pc, #508]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002fb0:	4b78      	ldr	r3, [pc, #480]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a77      	ldr	r2, [pc, #476]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b75      	ldr	r3, [pc, #468]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a74      	ldr	r2, [pc, #464]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fd fcdc 	bl	800098c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fd fcd8 	bl	800098c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e29e      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fea:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fcc8 	bl	800098c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fd fcc4 	bl	800098c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e28a      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003012:	4b60      	ldr	r3, [pc, #384]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0xe8>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d075      	beq.n	800311a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	4b56      	ldr	r3, [pc, #344]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d102      	bne.n	800304e <HAL_RCC_OscConfig+0x136>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d002      	beq.n	8003054 <HAL_RCC_OscConfig+0x13c>
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11f      	bne.n	8003094 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003054:	4b4f      	ldr	r3, [pc, #316]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x154>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e25d      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b49      	ldr	r3, [pc, #292]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	4946      	ldr	r1, [pc, #280]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003080:	4b45      	ldr	r3, [pc, #276]	@ (8003198 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fc35 	bl	80008f4 <HAL_InitTick>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d043      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e249      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b3d      	ldr	r3, [pc, #244]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fd fc70 	bl	800098c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fd fc6c 	bl	800098c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e232      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	492d      	ldr	r1, [pc, #180]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
 80030e2:	e01a      	b.n	800311a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fc4c 	bl	800098c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fd fc48 	bl	800098c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e20e      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310a:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1e0>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d041      	beq.n	80031aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01c      	beq.n	8003168 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fd fc25 	bl	800098c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003146:	f7fd fc21 	bl	800098c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1e7      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003158:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <HAL_RCC_OscConfig+0x22e>
 8003166:	e020      	b.n	80031aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_RCC_OscConfig+0x27c>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fd fc08 	bl	800098c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317e:	e00d      	b.n	800319c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7fd fc04 	bl	800098c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d906      	bls.n	800319c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ca      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319c:	4b8c      	ldr	r3, [pc, #560]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ea      	bne.n	8003180 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a6 	beq.w	8003304 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031bc:	4b84      	ldr	r3, [pc, #528]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x2b4>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x2b6>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b7f      	ldr	r3, [pc, #508]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	4a7e      	ldr	r2, [pc, #504]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031de:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b79      	ldr	r3, [pc, #484]	@ (80033d4 <HAL_RCC_OscConfig+0x4bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fa:	4b76      	ldr	r3, [pc, #472]	@ (80033d4 <HAL_RCC_OscConfig+0x4bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a75      	ldr	r2, [pc, #468]	@ (80033d4 <HAL_RCC_OscConfig+0x4bc>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fd fbc1 	bl	800098c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd fbbd 	bl	800098c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e183      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b6c      	ldr	r3, [pc, #432]	@ (80033d4 <HAL_RCC_OscConfig+0x4bc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_RCC_OscConfig+0x32e>
 8003234:	4b66      	ldr	r3, [pc, #408]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	4a65      	ldr	r2, [pc, #404]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003244:	e024      	b.n	8003290 <HAL_RCC_OscConfig+0x378>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d110      	bne.n	8003270 <HAL_RCC_OscConfig+0x358>
 800324e:	4b60      	ldr	r3, [pc, #384]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	4a5e      	ldr	r2, [pc, #376]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800325e:	4b5c      	ldr	r3, [pc, #368]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003264:	4a5a      	ldr	r2, [pc, #360]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800326e:	e00f      	b.n	8003290 <HAL_RCC_OscConfig+0x378>
 8003270:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003280:	4b53      	ldr	r3, [pc, #332]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	4a52      	ldr	r2, [pc, #328]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d016      	beq.n	80032c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fd fb78 	bl	800098c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fd fb74 	bl	800098c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e138      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ed      	beq.n	80032a0 <HAL_RCC_OscConfig+0x388>
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fd fb61 	bl	800098c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fd fb5d 	bl	800098c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e121      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e4:	4b3a      	ldr	r3, [pc, #232]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ed      	bne.n	80032ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	4a34      	ldr	r2, [pc, #208]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03c      	beq.n	800338a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01c      	beq.n	8003352 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 800331a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800331e:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fd fb30 	bl	800098c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003330:	f7fd fb2c 	bl	800098c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e0f2      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <HAL_RCC_OscConfig+0x418>
 8003350:	e01b      	b.n	800338a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003352:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003358:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fd fb13 	bl	800098c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336a:	f7fd fb0f 	bl	800098c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0d5      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800337c:	4b14      	ldr	r3, [pc, #80]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80c9 	beq.w	8003526 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003394:	4b0e      	ldr	r3, [pc, #56]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b0c      	cmp	r3, #12
 800339e:	f000 8083 	beq.w	80034a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d15e      	bne.n	8003468 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd fae9 	bl	800098c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033bc:	e00c      	b.n	80033d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fd fae5 	bl	800098c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d905      	bls.n	80033d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0ab      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d8:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ec      	bne.n	80033be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e4:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	4b52      	ldr	r3, [pc, #328]	@ (8003534 <HAL_RCC_OscConfig+0x61c>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6a11      	ldr	r1, [r2, #32]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033f4:	3a01      	subs	r2, #1
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033fe:	0212      	lsls	r2, r2, #8
 8003400:	4311      	orrs	r1, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003406:	0852      	lsrs	r2, r2, #1
 8003408:	3a01      	subs	r2, #1
 800340a:	0552      	lsls	r2, r2, #21
 800340c:	4311      	orrs	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	0652      	lsls	r2, r2, #25
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800341e:	06d2      	lsls	r2, r2, #27
 8003420:	430a      	orrs	r2, r1
 8003422:	4943      	ldr	r1, [pc, #268]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 8003424:	4313      	orrs	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a40      	ldr	r2, [pc, #256]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a3d      	ldr	r2, [pc, #244]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd faa4 	bl	800098c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fd faa0 	bl	800098c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e066      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b35      	ldr	r3, [pc, #212]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x530>
 8003466:	e05e      	b.n	8003526 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd fa8a 	bl	800098c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fa86 	bl	800098c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e04c      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348e:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800349a:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	4924      	ldr	r1, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 80034a0:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <HAL_RCC_OscConfig+0x620>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	60cb      	str	r3, [r1, #12]
 80034a6:	e03e      	b.n	8003526 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e039      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_RCC_OscConfig+0x618>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d12c      	bne.n	8003522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	3b01      	subs	r3, #1
 80034d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d123      	bne.n	8003522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11b      	bne.n	8003522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d113      	bne.n	8003522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d109      	bne.n	8003522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	3b01      	subs	r3, #1
 800351c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	019f800c 	.word	0x019f800c
 8003538:	feeefffc 	.word	0xfeeefffc

0800353c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e11e      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b91      	ldr	r3, [pc, #580]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d910      	bls.n	8003584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b8e      	ldr	r3, [pc, #568]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 020f 	bic.w	r2, r3, #15
 800356a:	498c      	ldr	r1, [pc, #560]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b8a      	ldr	r3, [pc, #552]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e106      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d073      	beq.n	8003678 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d129      	bne.n	80035ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	4b81      	ldr	r3, [pc, #516]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0f4      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035a8:	f000 f966 	bl	8003878 <RCC_GetSysClockFreqFromPLLSource>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a7c      	ldr	r2, [pc, #496]	@ (80037a4 <HAL_RCC_ClockConfig+0x268>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d93f      	bls.n	8003636 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035b6:	4b7a      	ldr	r3, [pc, #488]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d033      	beq.n	8003636 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d12f      	bne.n	8003636 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035d6:	4b72      	ldr	r3, [pc, #456]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035de:	4a70      	ldr	r2, [pc, #448]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e024      	b.n	8003636 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f4:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0c6      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b66      	ldr	r3, [pc, #408]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0be      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003614:	f000 f8ce 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4a61      	ldr	r2, [pc, #388]	@ (80037a4 <HAL_RCC_ClockConfig+0x268>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d909      	bls.n	8003636 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003622:	4b5f      	ldr	r3, [pc, #380]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800362a:	4a5d      	ldr	r2, [pc, #372]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 800362c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b5a      	ldr	r3, [pc, #360]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4957      	ldr	r1, [pc, #348]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd f9a0 	bl	800098c <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd f99c 	bl	800098c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e095      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b4e      	ldr	r3, [pc, #312]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b43      	ldr	r3, [pc, #268]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a42      	ldr	r2, [pc, #264]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800369a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036a8:	4b3d      	ldr	r3, [pc, #244]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036b0:	4a3b      	ldr	r2, [pc, #236]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4936      	ldr	r1, [pc, #216]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
 80036ca:	e008      	b.n	80036de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b80      	cmp	r3, #128	@ 0x80
 80036d0:	d105      	bne.n	80036de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036d2:	4b33      	ldr	r3, [pc, #204]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a32      	ldr	r2, [pc, #200]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036de:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d21d      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 020f 	bic.w	r2, r3, #15
 80036f4:	4929      	ldr	r1, [pc, #164]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036fc:	f7fd f946 	bl	800098c <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fd f942 	bl	800098c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e03b      	b.n	8003792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	@ (800379c <HAL_RCC_ClockConfig+0x260>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d1ed      	bne.n	8003704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4917      	ldr	r1, [pc, #92]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490f      	ldr	r1, [pc, #60]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003766:	f000 f825 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <HAL_RCC_ClockConfig+0x264>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490c      	ldr	r1, [pc, #48]	@ (80037a8 <HAL_RCC_ClockConfig+0x26c>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a0a      	ldr	r2, [pc, #40]	@ (80037ac <HAL_RCC_ClockConfig+0x270>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003786:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd f8b2 	bl	80008f4 <HAL_InitTick>
 8003790:	4603      	mov	r3, r0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	04c4b400 	.word	0x04c4b400
 80037a8:	08009bc8 	.word	0x08009bc8
 80037ac:	20000000 	.word	0x20000000
 80037b0:	20000004 	.word	0x20000004

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037ba:	4b2c      	ldr	r3, [pc, #176]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e047      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037cc:	4b27      	ldr	r3, [pc, #156]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d102      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d8:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e03e      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037de:	4b23      	ldr	r3, [pc, #140]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d136      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d10c      	bne.n	8003822 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003808:	4a1a      	ldr	r2, [pc, #104]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xc0>)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003812:	68d2      	ldr	r2, [r2, #12]
 8003814:	0a12      	lsrs	r2, r2, #8
 8003816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	617b      	str	r3, [r7, #20]
      break;
 8003820:	e00c      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003822:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4a10      	ldr	r2, [pc, #64]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	0a12      	lsrs	r2, r2, #8
 8003830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
      break;
 800383a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_GetSysClockFreq+0xb8>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0e5b      	lsrs	r3, r3, #25
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	3301      	adds	r3, #1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	e001      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800385c:	693b      	ldr	r3, [r7, #16]
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
 8003870:	00f42400 	.word	0x00f42400
 8003874:	007a1200 	.word	0x007a1200

08003878 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	3301      	adds	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d10c      	bne.n	80038b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	4a14      	ldr	r2, [pc, #80]	@ (80038f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038a6:	68d2      	ldr	r2, [r2, #12]
 80038a8:	0a12      	lsrs	r2, r2, #8
 80038aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	617b      	str	r3, [r7, #20]
    break;
 80038b4:	e00c      	b.n	80038d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b6:	4a12      	ldr	r2, [pc, #72]	@ (8003900 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	4a0e      	ldr	r2, [pc, #56]	@ (80038f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0a12      	lsrs	r2, r2, #8
 80038c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
    break;
 80038ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0e5b      	lsrs	r3, r3, #25
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038ea:	687b      	ldr	r3, [r7, #4]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40021000 	.word	0x40021000
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	00f42400 	.word	0x00f42400

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800390c:	2300      	movs	r3, #0
 800390e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003910:	2300      	movs	r3, #0
 8003912:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8098 	beq.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b43      	ldr	r3, [pc, #268]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b40      	ldr	r3, [pc, #256]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	4a3f      	ldr	r2, [pc, #252]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393c:	6593      	str	r3, [r2, #88]	@ 0x58
 800393e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800394e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a39      	ldr	r2, [pc, #228]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003958:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800395a:	f7fd f817 	bl	800098c <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003960:	e009      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fd f813 	bl	800098c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
        break;
 8003974:	e005      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003976:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ef      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d159      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003992:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01e      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d019      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039a4:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b0:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fc ffd3 	bl	800098c <HAL_GetTick>
 80039e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e8:	e00b      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fc ffcf 	bl	800098c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d902      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ec      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a24:	4903      	ldr	r1, [pc, #12]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	74bb      	strb	r3, [r7, #18]
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a40:	7c7b      	ldrb	r3, [r7, #17]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4ba7      	ldr	r3, [pc, #668]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4aa6      	ldr	r2, [pc, #664]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a5e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f023 0203 	bic.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	499d      	ldr	r1, [pc, #628]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a80:	4b98      	ldr	r3, [pc, #608]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f023 020c 	bic.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	4995      	ldr	r1, [pc, #596]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa2:	4b90      	ldr	r3, [pc, #576]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	498c      	ldr	r1, [pc, #560]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac4:	4b87      	ldr	r3, [pc, #540]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	4984      	ldr	r1, [pc, #528]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	497b      	ldr	r1, [pc, #492]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b08:	4b76      	ldr	r3, [pc, #472]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	4973      	ldr	r1, [pc, #460]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	496a      	ldr	r1, [pc, #424]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4c:	4b65      	ldr	r3, [pc, #404]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4962      	ldr	r1, [pc, #392]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	4959      	ldr	r1, [pc, #356]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b90:	4b54      	ldr	r3, [pc, #336]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	4951      	ldr	r1, [pc, #324]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4948      	ldr	r1, [pc, #288]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd4:	4b43      	ldr	r3, [pc, #268]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	4940      	ldr	r1, [pc, #256]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c0c:	4b35      	ldr	r3, [pc, #212]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	4932      	ldr	r1, [pc, #200]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c44:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	4924      	ldr	r1, [pc, #144]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	4916      	ldr	r1, [pc, #88]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a10      	ldr	r2, [pc, #64]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d019      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	4908      	ldr	r1, [pc, #32]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b03      	ldr	r3, [pc, #12]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a02      	ldr	r2, [pc, #8]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d015      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cf4:	4b29      	ldr	r3, [pc, #164]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	4926      	ldr	r1, [pc, #152]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d12:	d105      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d14:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a20      	ldr	r2, [pc, #128]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	4918      	ldr	r1, [pc, #96]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d4c:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a12      	ldr	r2, [pc, #72]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d64:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d72:	490a      	ldr	r1, [pc, #40]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d82:	d105      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d84:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a04      	ldr	r2, [pc, #16]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d90:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e09d      	b.n	8003eee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d108      	bne.n	8003dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc2:	d009      	beq.n	8003dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fc fb74 	bl	80004e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e18:	d902      	bls.n	8003e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e002      	b.n	8003e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_Init+0xa0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	ea42 0103 	orr.w	r1, r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 0204 	and.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ebc:	ea42 0103 	orr.w	r1, r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003edc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e049      	b.n	8003f9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fc fc1b 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f000 fc43 	bl	80047c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04c      	b.n	8004056 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <HAL_TIM_Base_Start+0xc0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd6:	d01d      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <HAL_TIM_Base_Start+0xc4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIM_Base_Start+0xc8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <HAL_TIM_Base_Start+0xcc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Base_Start+0xd0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_TIM_Base_Start+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start+0x70>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_TIM_Base_Start+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start+0xdc>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start+0xae>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40014000 	.word	0x40014000
 800407c:	40015000 	.word	0x40015000
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e049      	b.n	800412a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f841 	bl	8004132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fb7c 	bl	80047c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x24>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e03c      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d109      	bne.n	8004186 <HAL_TIM_PWM_Start+0x3e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e02f      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start+0x72>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x8c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0xb6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041fc:	e023      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0xc6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800420c:	e01b      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800421c:	e013      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0xe6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800422c:	e00b      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b10      	cmp	r3, #16
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start+0xf6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800423c:	e003      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2201      	movs	r2, #1
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 ff30 	bl	80050b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a3a      	ldr	r2, [pc, #232]	@ (8004344 <HAL_TIM_PWM_Start+0x1fc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_TIM_PWM_Start+0x148>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a39      	ldr	r2, [pc, #228]	@ (8004348 <HAL_TIM_PWM_Start+0x200>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_TIM_PWM_Start+0x148>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a37      	ldr	r2, [pc, #220]	@ (800434c <HAL_TIM_PWM_Start+0x204>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_TIM_PWM_Start+0x148>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a36      	ldr	r2, [pc, #216]	@ (8004350 <HAL_TIM_PWM_Start+0x208>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_TIM_PWM_Start+0x148>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a34      	ldr	r2, [pc, #208]	@ (8004354 <HAL_TIM_PWM_Start+0x20c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_PWM_Start+0x148>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a33      	ldr	r2, [pc, #204]	@ (8004358 <HAL_TIM_PWM_Start+0x210>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_TIM_PWM_Start+0x14c>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_TIM_PWM_Start+0x14e>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a25      	ldr	r2, [pc, #148]	@ (8004344 <HAL_TIM_PWM_Start+0x1fc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042bc:	d01d      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a26      	ldr	r2, [pc, #152]	@ (800435c <HAL_TIM_PWM_Start+0x214>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a24      	ldr	r2, [pc, #144]	@ (8004360 <HAL_TIM_PWM_Start+0x218>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a23      	ldr	r2, [pc, #140]	@ (8004364 <HAL_TIM_PWM_Start+0x21c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_TIM_PWM_Start+0x200>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	@ (800434c <HAL_TIM_PWM_Start+0x204>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIM_PWM_Start+0x1b2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <HAL_TIM_PWM_Start+0x210>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d115      	bne.n	8004326 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b19      	ldr	r3, [pc, #100]	@ (8004368 <HAL_TIM_PWM_Start+0x220>)
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d015      	beq.n	8004338 <HAL_TIM_PWM_Start+0x1f0>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004312:	d011      	beq.n	8004338 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	e008      	b.n	8004338 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e000      	b.n	800433a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800
 8004358:	40015000 	.word	0x40015000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	00010007 	.word	0x00010007

0800436c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0ff      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b14      	cmp	r3, #20
 8004396:	f200 80f0 	bhi.w	800457a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800439a:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	0800457b 	.word	0x0800457b
 80043a8:	0800457b 	.word	0x0800457b
 80043ac:	0800457b 	.word	0x0800457b
 80043b0:	08004435 	.word	0x08004435
 80043b4:	0800457b 	.word	0x0800457b
 80043b8:	0800457b 	.word	0x0800457b
 80043bc:	0800457b 	.word	0x0800457b
 80043c0:	08004477 	.word	0x08004477
 80043c4:	0800457b 	.word	0x0800457b
 80043c8:	0800457b 	.word	0x0800457b
 80043cc:	0800457b 	.word	0x0800457b
 80043d0:	080044b7 	.word	0x080044b7
 80043d4:	0800457b 	.word	0x0800457b
 80043d8:	0800457b 	.word	0x0800457b
 80043dc:	0800457b 	.word	0x0800457b
 80043e0:	080044f9 	.word	0x080044f9
 80043e4:	0800457b 	.word	0x0800457b
 80043e8:	0800457b 	.word	0x0800457b
 80043ec:	0800457b 	.word	0x0800457b
 80043f0:	08004539 	.word	0x08004539
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa94 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0208 	orr.w	r2, r2, #8
 800440e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0204 	bic.w	r2, r2, #4
 800441e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6999      	ldr	r1, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
      break;
 8004432:	e0a5      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fb0e 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6999      	ldr	r1, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]
      break;
 8004474:	e084      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fb81 	bl	8004b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0208 	orr.w	r2, r2, #8
 8004490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0204 	bic.w	r2, r2, #4
 80044a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	61da      	str	r2, [r3, #28]
      break;
 80044b4:	e064      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fbf3 	bl	8004ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69d9      	ldr	r1, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	021a      	lsls	r2, r3, #8
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	61da      	str	r2, [r3, #28]
      break;
 80044f6:	e043      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fc66 	bl	8004dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004536:	e023      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fcb0 	bl	8004ea4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004552:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004562:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004578:	e002      	b.n	8004580 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
      break;
 800457e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop

08004594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIM_ConfigClockSource+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e0f6      	b.n	800479e <HAL_TIM_ConfigClockSource+0x20a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80045ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6f      	ldr	r2, [pc, #444]	@ (80047a8 <HAL_TIM_ConfigClockSource+0x214>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	f000 80c1 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 80045f0:	4a6d      	ldr	r2, [pc, #436]	@ (80047a8 <HAL_TIM_ConfigClockSource+0x214>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	f200 80c6 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 80045f8:	4a6c      	ldr	r2, [pc, #432]	@ (80047ac <HAL_TIM_ConfigClockSource+0x218>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f000 80b9 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004600:	4a6a      	ldr	r2, [pc, #424]	@ (80047ac <HAL_TIM_ConfigClockSource+0x218>)
 8004602:	4293      	cmp	r3, r2
 8004604:	f200 80be 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004608:	4a69      	ldr	r2, [pc, #420]	@ (80047b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	f000 80b1 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004610:	4a67      	ldr	r2, [pc, #412]	@ (80047b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	f200 80b6 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004618:	4a66      	ldr	r2, [pc, #408]	@ (80047b4 <HAL_TIM_ConfigClockSource+0x220>)
 800461a:	4293      	cmp	r3, r2
 800461c:	f000 80a9 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004620:	4a64      	ldr	r2, [pc, #400]	@ (80047b4 <HAL_TIM_ConfigClockSource+0x220>)
 8004622:	4293      	cmp	r3, r2
 8004624:	f200 80ae 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004628:	4a63      	ldr	r2, [pc, #396]	@ (80047b8 <HAL_TIM_ConfigClockSource+0x224>)
 800462a:	4293      	cmp	r3, r2
 800462c:	f000 80a1 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004630:	4a61      	ldr	r2, [pc, #388]	@ (80047b8 <HAL_TIM_ConfigClockSource+0x224>)
 8004632:	4293      	cmp	r3, r2
 8004634:	f200 80a6 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004638:	4a60      	ldr	r2, [pc, #384]	@ (80047bc <HAL_TIM_ConfigClockSource+0x228>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f000 8099 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004640:	4a5e      	ldr	r2, [pc, #376]	@ (80047bc <HAL_TIM_ConfigClockSource+0x228>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f200 809e 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004648:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800464c:	f000 8091 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004650:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004654:	f200 8096 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465c:	f000 8089 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 8004660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004664:	f200 808e 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d03e      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0x158>
 800466e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004672:	f200 8087 	bhi.w	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	f000 8086 	beq.w	800478a <HAL_TIM_ConfigClockSource+0x1f6>
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004682:	d87f      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004684:	2b70      	cmp	r3, #112	@ 0x70
 8004686:	d01a      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x12a>
 8004688:	2b70      	cmp	r3, #112	@ 0x70
 800468a:	d87b      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 800468c:	2b60      	cmp	r3, #96	@ 0x60
 800468e:	d050      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x19e>
 8004690:	2b60      	cmp	r3, #96	@ 0x60
 8004692:	d877      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 8004694:	2b50      	cmp	r3, #80	@ 0x50
 8004696:	d03c      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x17e>
 8004698:	2b50      	cmp	r3, #80	@ 0x50
 800469a:	d873      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d058      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x1be>
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d86f      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 80046a4:	2b30      	cmp	r3, #48	@ 0x30
 80046a6:	d064      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 80046a8:	2b30      	cmp	r3, #48	@ 0x30
 80046aa:	d86b      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d060      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d867      	bhi.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05c      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d05a      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x1de>
 80046bc:	e062      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	f000 fcd1 	bl	8005074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	609a      	str	r2, [r3, #8]
      break;
 80046ea:	e04f      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	f000 fcba 	bl	8005074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800470e:	609a      	str	r2, [r3, #8]
      break;
 8004710:	e03c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	461a      	mov	r2, r3
 8004720:	f000 fc2c 	bl	8004f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2150      	movs	r1, #80	@ 0x50
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fc85 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004730:	e02c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	461a      	mov	r2, r3
 8004740:	f000 fc4b 	bl	8004fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2160      	movs	r1, #96	@ 0x60
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fc75 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004750:	e01c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	461a      	mov	r2, r3
 8004760:	f000 fc0c 	bl	8004f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fc65 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004770:	e00c      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f000 fc5c 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004782:	e003      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e000      	b.n	800478c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800478a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	00100070 	.word	0x00100070
 80047ac:	00100060 	.word	0x00100060
 80047b0:	00100050 	.word	0x00100050
 80047b4:	00100040 	.word	0x00100040
 80047b8:	00100030 	.word	0x00100030
 80047bc:	00100020 	.word	0x00100020

080047c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004904 <TIM_Base_SetConfig+0x144>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d017      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047de:	d013      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a49      	ldr	r2, [pc, #292]	@ (8004908 <TIM_Base_SetConfig+0x148>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a48      	ldr	r2, [pc, #288]	@ (800490c <TIM_Base_SetConfig+0x14c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a47      	ldr	r2, [pc, #284]	@ (8004910 <TIM_Base_SetConfig+0x150>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a46      	ldr	r2, [pc, #280]	@ (8004914 <TIM_Base_SetConfig+0x154>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x48>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a45      	ldr	r2, [pc, #276]	@ (8004918 <TIM_Base_SetConfig+0x158>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a39      	ldr	r2, [pc, #228]	@ (8004904 <TIM_Base_SetConfig+0x144>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d023      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a36      	ldr	r2, [pc, #216]	@ (8004908 <TIM_Base_SetConfig+0x148>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a35      	ldr	r2, [pc, #212]	@ (800490c <TIM_Base_SetConfig+0x14c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a34      	ldr	r2, [pc, #208]	@ (8004910 <TIM_Base_SetConfig+0x150>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a33      	ldr	r2, [pc, #204]	@ (8004914 <TIM_Base_SetConfig+0x154>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a33      	ldr	r2, [pc, #204]	@ (800491c <TIM_Base_SetConfig+0x15c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a32      	ldr	r2, [pc, #200]	@ (8004920 <TIM_Base_SetConfig+0x160>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a31      	ldr	r2, [pc, #196]	@ (8004924 <TIM_Base_SetConfig+0x164>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0xaa>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	@ (8004918 <TIM_Base_SetConfig+0x158>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <TIM_Base_SetConfig+0x144>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <TIM_Base_SetConfig+0x110>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004914 <TIM_Base_SetConfig+0x154>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0x110>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1a      	ldr	r2, [pc, #104]	@ (800491c <TIM_Base_SetConfig+0x15c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x110>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a19      	ldr	r2, [pc, #100]	@ (8004920 <TIM_Base_SetConfig+0x160>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x110>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <TIM_Base_SetConfig+0x164>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x110>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <TIM_Base_SetConfig+0x158>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]
  }
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40015000 	.word	0x40015000
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 0201 	bic.w	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 0302 	bic.w	r3, r3, #2
 8004974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <TIM_OC1_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_OC1_SetConfig+0x88>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <TIM_OC1_SetConfig+0x120>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00f      	beq.n	80049b0 <TIM_OC1_SetConfig+0x88>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <TIM_OC1_SetConfig+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_OC1_SetConfig+0x88>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <TIM_OC1_SetConfig+0x128>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_OC1_SetConfig+0x88>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <TIM_OC1_SetConfig+0x12c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_OC1_SetConfig+0x88>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <TIM_OC1_SetConfig+0x130>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10c      	bne.n	80049ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0308 	bic.w	r3, r3, #8
 80049b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <TIM_OC1_SetConfig+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_OC1_SetConfig+0xd2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <TIM_OC1_SetConfig+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_OC1_SetConfig+0xd2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a4c <TIM_OC1_SetConfig+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC1_SetConfig+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a50 <TIM_OC1_SetConfig+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC1_SetConfig+0xd2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <TIM_OC1_SetConfig+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC1_SetConfig+0xd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <TIM_OC1_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800
 8004a58:	40015000 	.word	0x40015000

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f023 0210 	bic.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <TIM_OC2_SetConfig+0x110>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_OC2_SetConfig+0x74>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <TIM_OC2_SetConfig+0x114>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC2_SetConfig+0x74>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <TIM_OC2_SetConfig+0x118>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10d      	bne.n	8004aec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1f      	ldr	r2, [pc, #124]	@ (8004b6c <TIM_OC2_SetConfig+0x110>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <TIM_OC2_SetConfig+0xc0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <TIM_OC2_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00f      	beq.n	8004b1c <TIM_OC2_SetConfig+0xc0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b78 <TIM_OC2_SetConfig+0x11c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_OC2_SetConfig+0xc0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <TIM_OC2_SetConfig+0x120>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC2_SetConfig+0xc0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <TIM_OC2_SetConfig+0x124>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0xc0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <TIM_OC2_SetConfig+0x118>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40013400 	.word	0x40013400
 8004b74:	40015000 	.word	0x40015000
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c90 <TIM_OC3_SetConfig+0x10c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x72>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c94 <TIM_OC3_SetConfig+0x110>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0x72>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	@ (8004c98 <TIM_OC3_SetConfig+0x114>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d10d      	bne.n	8004c12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	@ (8004c90 <TIM_OC3_SetConfig+0x10c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <TIM_OC3_SetConfig+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <TIM_OC3_SetConfig+0x110>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_OC3_SetConfig+0xbe>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <TIM_OC3_SetConfig+0x118>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_OC3_SetConfig+0xbe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <TIM_OC3_SetConfig+0x11c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_OC3_SetConfig+0xbe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca4 <TIM_OC3_SetConfig+0x120>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0xbe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <TIM_OC3_SetConfig+0x114>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d113      	bne.n	8004c6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40015000 	.word	0x40015000
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_OC4_SetConfig+0x110>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_OC4_SetConfig+0x74>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <TIM_OC4_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC4_SetConfig+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc0 <TIM_OC4_SetConfig+0x118>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10d      	bne.n	8004d38 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <TIM_OC4_SetConfig+0x110>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <TIM_OC4_SetConfig+0xc0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	@ (8004dbc <TIM_OC4_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00f      	beq.n	8004d68 <TIM_OC4_SetConfig+0xc0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc4 <TIM_OC4_SetConfig+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_OC4_SetConfig+0xc0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <TIM_OC4_SetConfig+0x120>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_OC4_SetConfig+0xc0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dcc <TIM_OC4_SetConfig+0x124>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_OC4_SetConfig+0xc0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a17      	ldr	r2, [pc, #92]	@ (8004dc0 <TIM_OC4_SetConfig+0x118>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d113      	bne.n	8004d90 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	019b      	lsls	r3, r3, #6
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40015000 	.word	0x40015000
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800

08004dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a19      	ldr	r2, [pc, #100]	@ (8004e8c <TIM_OC5_SetConfig+0xbc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_OC5_SetConfig+0x82>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <TIM_OC5_SetConfig+0xc0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_OC5_SetConfig+0x82>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <TIM_OC5_SetConfig+0xc4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_OC5_SetConfig+0x82>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <TIM_OC5_SetConfig+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_OC5_SetConfig+0x82>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <TIM_OC5_SetConfig+0xcc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_OC5_SetConfig+0x82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_OC5_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d109      	bne.n	8004e66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40015000 	.word	0x40015000

08004ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	051b      	lsls	r3, r3, #20
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <TIM_OC6_SetConfig+0xc0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <TIM_OC6_SetConfig+0x84>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <TIM_OC6_SetConfig+0xc4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <TIM_OC6_SetConfig+0x84>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC6_SetConfig+0xc8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_OC6_SetConfig+0x84>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC6_SetConfig+0xcc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_OC6_SetConfig+0x84>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_OC6_SetConfig+0xd0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC6_SetConfig+0x84>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_OC6_SetConfig+0xd4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d109      	bne.n	8004f3c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40013400 	.word	0x40013400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800
 8004f78:	40015000 	.word	0x40015000

08004f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0201 	bic.w	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f023 030a 	bic.w	r3, r3, #10
 8004fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f023 0210 	bic.w	r2, r3, #16
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	031b      	lsls	r3, r3, #12
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005016:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	f043 0307 	orr.w	r3, r3, #7
 8005060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800508e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	431a      	orrs	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	609a      	str	r2, [r3, #8]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	401a      	ands	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e074      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a34      	ldr	r2, [pc, #208]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a31      	ldr	r2, [pc, #196]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800515c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005198:	d01d      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a11      	ldr	r2, [pc, #68]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40015000 	.word	0x40015000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40014000 	.word	0x40014000

0800522c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800523c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005262:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005266:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	b29b      	uxth	r3, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	4013      	ands	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b09d      	sub	sp, #116	@ 0x74
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	78db      	ldrb	r3, [r3, #3]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d81f      	bhi.n	800533e <USB_ActivateEndpoint+0x72>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <USB_ActivateEndpoint+0x38>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005315 	.word	0x08005315
 8005308:	08005331 	.word	0x08005331
 800530c:	08005347 	.word	0x08005347
 8005310:	08005323 	.word	0x08005323
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005318:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800531c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005320:	e012      	b.n	8005348 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005322:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005326:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800532a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800532e:	e00b      	b.n	8005348 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005330:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005334:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005338:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800533c:	e004      	b.n	8005348 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005344:	e000      	b.n	8005348 <USB_ActivateEndpoint+0x7c>
      break;
 8005346:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	b21b      	sxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005382:	b21a      	sxth	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b21b      	sxth	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b21b      	sxth	r3, r3
 800538e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	7b1b      	ldrb	r3, [r3, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 8178 	bne.w	80056ae <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8084 	beq.w	80054d0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4413      	add	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00da      	lsls	r2, r3, #3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88db      	ldrh	r3, [r3, #6]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	827b      	strh	r3, [r7, #18]
 800540a:	8a7b      	ldrh	r3, [r7, #18]
 800540c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <USB_ActivateEndpoint+0x180>
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542a:	823b      	strh	r3, [r7, #16]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	8a3b      	ldrh	r3, [r7, #16]
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005444:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	78db      	ldrb	r3, [r3, #3]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d020      	beq.n	8005496 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800546a:	81bb      	strh	r3, [r7, #12]
 800546c:	89bb      	ldrh	r3, [r7, #12]
 800546e:	f083 0320 	eor.w	r3, r3, #32
 8005472:	81bb      	strh	r3, [r7, #12]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	89bb      	ldrh	r3, [r7, #12]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
 8005494:	e2d5      	b.n	8005a42 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
 80054ce:	e2b8      	b.n	8005a42 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	4413      	add	r3, r2
 80054e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	00da      	lsls	r2, r3, #3
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	88db      	ldrh	r3, [r3, #6]
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	4413      	add	r3, r2
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00da      	lsls	r2, r3, #3
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	4413      	add	r3, r2
 8005522:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005532:	b29a      	uxth	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b3e      	cmp	r3, #62	@ 0x3e
 800553e:	d91d      	bls.n	800557c <USB_ActivateEndpoint+0x2b0>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <USB_ActivateEndpoint+0x28e>
 8005554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005556:	3b01      	subs	r3, #1
 8005558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29a      	uxth	r2, r3
 8005560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005562:	b29b      	uxth	r3, r3
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	b29b      	uxth	r3, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005574:	b29a      	uxth	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e026      	b.n	80055ca <USB_ActivateEndpoint+0x2fe>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <USB_ActivateEndpoint+0x2ce>
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e017      	b.n	80055ca <USB_ActivateEndpoint+0x2fe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <USB_ActivateEndpoint+0x2e8>
 80055ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055b0:	3301      	adds	r3, #1
 80055b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055bc:	b29b      	uxth	r3, r3
 80055be:	029b      	lsls	r3, r3, #10
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80055d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01b      	beq.n	800561a <USB_ActivateEndpoint+0x34e>
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f8:	843b      	strh	r3, [r7, #32]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	441a      	add	r2, r3
 8005604:	8c3b      	ldrh	r3, [r7, #32]
 8005606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800560e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005616:	b29b      	uxth	r3, r3
 8005618:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d124      	bne.n	800566c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005638:	83bb      	strh	r3, [r7, #28]
 800563a:	8bbb      	ldrh	r3, [r7, #28]
 800563c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005640:	83bb      	strh	r3, [r7, #28]
 8005642:	8bbb      	ldrh	r3, [r7, #28]
 8005644:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005648:	83bb      	strh	r3, [r7, #28]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	8bbb      	ldrh	r3, [r7, #28]
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
 800566a:	e1ea      	b.n	8005a42 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005682:	83fb      	strh	r3, [r7, #30]
 8005684:	8bfb      	ldrh	r3, [r7, #30]
 8005686:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800568a:	83fb      	strh	r3, [r7, #30]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	8bfb      	ldrh	r3, [r7, #30]
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]
 80056ac:	e1c9      	b.n	8005a42 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	78db      	ldrb	r3, [r3, #3]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11e      	bne.n	80056f4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056cc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
 80056f2:	e01d      	b.n	8005730 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005740:	4413      	add	r3, r2
 8005742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	00da      	lsls	r2, r3, #3
 800574a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800574c:	4413      	add	r3, r2
 800574e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005752:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	891b      	ldrh	r3, [r3, #8]
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	b29b      	uxth	r3, r3
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	657b      	str	r3, [r7, #84]	@ 0x54
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005774:	4413      	add	r3, r2
 8005776:	657b      	str	r3, [r7, #84]	@ 0x54
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	00da      	lsls	r2, r3, #3
 800577e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005780:	4413      	add	r3, r2
 8005782:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005786:	653b      	str	r3, [r7, #80]	@ 0x50
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	895b      	ldrh	r3, [r3, #10]
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	b29b      	uxth	r3, r3
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005796:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8093 	bne.w	80058c8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80057b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80057b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01b      	beq.n	80057f6 <USB_ActivateEndpoint+0x52a>
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005804:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01b      	beq.n	8005846 <USB_ActivateEndpoint+0x57a>
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005824:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800585e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005860:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005864:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005866:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005868:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800586c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	441a      	add	r2, r3
 8005878:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800587a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
 80058c6:	e0bc      	b.n	8005a42 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80058d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01d      	beq.n	8005920 <USB_ActivateEndpoint+0x654>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01d      	beq.n	8005978 <USB_ActivateEndpoint+0x6ac>
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005970:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	78db      	ldrb	r3, [r3, #3]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d024      	beq.n	80059ca <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005996:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800599a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800599e:	f083 0320 	eor.w	r3, r3, #32
 80059a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80059b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
 80059c8:	e01d      	b.n	8005a06 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3774      	adds	r7, #116	@ 0x74
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b08d      	sub	sp, #52	@ 0x34
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	7b1b      	ldrb	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 808e 	bne.w	8005b84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d044      	beq.n	8005afa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	81bb      	strh	r3, [r7, #12]
 8005a7e:	89bb      	ldrh	r3, [r7, #12]
 8005a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <USB_DeactivateEndpoint+0x6c>
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	817b      	strh	r3, [r7, #10]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad6:	813b      	strh	r3, [r7, #8]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	893b      	ldrh	r3, [r7, #8]
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e192      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	827b      	strh	r3, [r7, #18]
 8005b08:	8a7b      	ldrh	r3, [r7, #18]
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01b      	beq.n	8005b4a <USB_DeactivateEndpoint+0xf6>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b28:	823b      	strh	r3, [r7, #16]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8a3b      	ldrh	r3, [r7, #16]
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b60:	81fb      	strh	r3, [r7, #14]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	89fb      	ldrh	r3, [r7, #14]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
 8005b82:	e14d      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 80a5 	bne.w	8005cd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	843b      	strh	r3, [r7, #32]
 8005b9c:	8c3b      	ldrh	r3, [r7, #32]
 8005b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01b      	beq.n	8005bde <USB_DeactivateEndpoint+0x18a>
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbc:	83fb      	strh	r3, [r7, #30]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	83bb      	strh	r3, [r7, #28]
 8005bec:	8bbb      	ldrh	r3, [r7, #28]
 8005bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <USB_DeactivateEndpoint+0x1da>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	837b      	strh	r3, [r7, #26]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8b7b      	ldrh	r3, [r7, #26]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	833b      	strh	r3, [r7, #24]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8b3b      	ldrh	r3, [r7, #24]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7c:	82fb      	strh	r3, [r7, #22]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	8afb      	ldrh	r3, [r7, #22]
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb4:	82bb      	strh	r3, [r7, #20]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	8abb      	ldrh	r3, [r7, #20]
 8005cc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8013      	strh	r3, [r2, #0]
 8005cd6:	e0a3      	b.n	8005e20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005ce6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <USB_DeactivateEndpoint+0x2d4>
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005d36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <USB_DeactivateEndpoint+0x324>
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	441a      	add	r2, r3
 8005d62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3734      	adds	r7, #52	@ 0x34
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b0c2      	sub	sp, #264	@ 0x108
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3c:	6018      	str	r0, [r3, #0]
 8005e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e46:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	f040 86b7 	bne.w	8006bc8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d908      	bls.n	8005e88 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e86:	e007      	b.n	8005e98 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	7b1b      	ldrb	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d13a      	bne.n	8005f1e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6959      	ldr	r1, [r3, #20]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	88da      	ldrh	r2, [r3, #6]
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005eca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ece:	6800      	ldr	r0, [r0, #0]
 8005ed0:	f001 fc98 	bl	8007804 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00da      	lsls	r2, r3, #3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	f000 be1f 	b.w	8006b5c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	78db      	ldrb	r3, [r3, #3]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	f040 8462 	bne.w	80067f4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	f240 83df 	bls.w	800670c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1a      	ldr	r2, [r3, #32]
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 81c7 	beq.w	800637e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d177      	bne.n	80060fc <USB_EPStartXfer+0x2ce>
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	4413      	add	r3, r2
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	00da      	lsls	r2, r3, #3
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	4413      	add	r3, r2
 8006042:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	b29a      	uxth	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	2b3e      	cmp	r3, #62	@ 0x3e
 800605e:	d921      	bls.n	80060a4 <USB_EPStartXfer+0x276>
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <USB_EPStartXfer+0x252>
 8006076:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800607a:	3b01      	subs	r3, #1
 800607c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800608a:	b29b      	uxth	r3, r3
 800608c:	029b      	lsls	r3, r3, #10
 800608e:	b29b      	uxth	r3, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e050      	b.n	8006146 <USB_EPStartXfer+0x318>
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <USB_EPStartXfer+0x294>
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e041      	b.n	8006146 <USB_EPStartXfer+0x318>
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <USB_EPStartXfer+0x2b4>
 80060d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060dc:	3301      	adds	r3, #1
 80060de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	029b      	lsls	r3, r3, #10
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	e024      	b.n	8006146 <USB_EPStartXfer+0x318>
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11c      	bne.n	8006146 <USB_EPStartXfer+0x318>
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	4413      	add	r3, r2
 8006122:	633b      	str	r3, [r7, #48]	@ 0x30
 8006124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00da      	lsls	r2, r3, #3
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	4413      	add	r3, r2
 8006136:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	b29a      	uxth	r2, r3
 8006142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006144:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	895b      	ldrh	r3, [r3, #10]
 8006152:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006166:	b29b      	uxth	r3, r3
 8006168:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800616c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006170:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006174:	6800      	ldr	r0, [r0, #0]
 8006176:	f001 fb45 	bl	8007804 <USB_WritePMA>
            ep->xfer_buff += len;
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	441a      	add	r2, r3
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a1a      	ldr	r2, [r3, #32]
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d90f      	bls.n	80061d4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80061b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	e00e      	b.n	80061f2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d177      	bne.n	80062f2 <USB_EPStartXfer+0x4c4>
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	4413      	add	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	00da      	lsls	r2, r3, #3
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	4413      	add	r3, r2
 8006238:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006248:	b29a      	uxth	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	2b3e      	cmp	r3, #62	@ 0x3e
 8006254:	d921      	bls.n	800629a <USB_EPStartXfer+0x46c>
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <USB_EPStartXfer+0x448>
 800626c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006270:	3b01      	subs	r3, #1
 8006272:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006280:	b29b      	uxth	r3, r3
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	b29b      	uxth	r3, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e056      	b.n	8006348 <USB_EPStartXfer+0x51a>
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <USB_EPStartXfer+0x48a>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e047      	b.n	8006348 <USB_EPStartXfer+0x51a>
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <USB_EPStartXfer+0x4aa>
 80062ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d2:	3301      	adds	r3, #1
 80062d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	4313      	orrs	r3, r2
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e02a      	b.n	8006348 <USB_EPStartXfer+0x51a>
 80062f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d122      	bne.n	8006348 <USB_EPStartXfer+0x51a>
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	623b      	str	r3, [r7, #32]
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	00da      	lsls	r2, r3, #3
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	4413      	add	r3, r2
 8006338:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006342:	b29a      	uxth	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	891b      	ldrh	r3, [r3, #8]
 8006354:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6959      	ldr	r1, [r3, #20]
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	b29b      	uxth	r3, r3
 800636a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800636e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006372:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006376:	6800      	ldr	r0, [r0, #0]
 8006378:	f001 fa44 	bl	8007804 <USB_WritePMA>
 800637c:	e3ee      	b.n	8006b5c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d177      	bne.n	800647e <USB_EPStartXfer+0x650>
 800638e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800639a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ae:	4413      	add	r3, r2
 80063b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	00da      	lsls	r2, r3, #3
 80063c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e0:	d921      	bls.n	8006426 <USB_EPStartXfer+0x5f8>
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <USB_EPStartXfer+0x5d4>
 80063f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063fc:	3b01      	subs	r3, #1
 80063fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29b      	uxth	r3, r3
 8006412:	4313      	orrs	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e056      	b.n	80064d4 <USB_EPStartXfer+0x6a6>
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <USB_EPStartXfer+0x616>
 800642e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643c:	b29a      	uxth	r2, r3
 800643e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e047      	b.n	80064d4 <USB_EPStartXfer+0x6a6>
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <USB_EPStartXfer+0x636>
 800645a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800645e:	3301      	adds	r3, #1
 8006460:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800646e:	b29b      	uxth	r3, r3
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	b29b      	uxth	r3, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	b29a      	uxth	r2, r3
 8006478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e02a      	b.n	80064d4 <USB_EPStartXfer+0x6a6>
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d122      	bne.n	80064d4 <USB_EPStartXfer+0x6a6>
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	653b      	str	r3, [r7, #80]	@ 0x50
 800649a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ae:	4413      	add	r3, r2
 80064b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00da      	lsls	r2, r3, #3
 80064c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	891b      	ldrh	r3, [r3, #8]
 80064e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6959      	ldr	r1, [r3, #20]
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	f001 f97e 	bl	8007804 <USB_WritePMA>
            ep->xfer_buff += len;
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	441a      	add	r2, r3
 800651a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d90f      	bls.n	8006562 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	621a      	str	r2, [r3, #32]
 8006560:	e00e      	b.n	8006580 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2200      	movs	r2, #0
 800657e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	643b      	str	r3, [r7, #64]	@ 0x40
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d177      	bne.n	800668c <USB_EPStartXfer+0x85e>
 800659c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	4413      	add	r3, r2
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	00da      	lsls	r2, r3, #3
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ee:	d921      	bls.n	8006634 <USB_EPStartXfer+0x806>
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <USB_EPStartXfer+0x7e2>
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	3b01      	subs	r3, #1
 800660c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29a      	uxth	r2, r3
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	b29b      	uxth	r3, r3
 800661c:	029b      	lsls	r3, r3, #10
 800661e:	b29b      	uxth	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b29b      	uxth	r3, r3
 8006624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662c:	b29a      	uxth	r2, r3
 800662e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e050      	b.n	80066d6 <USB_EPStartXfer+0x8a8>
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <USB_EPStartXfer+0x824>
 800663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e041      	b.n	80066d6 <USB_EPStartXfer+0x8a8>
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <USB_EPStartXfer+0x844>
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	3301      	adds	r3, #1
 800666e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	b29b      	uxth	r3, r3
 800667e:	029b      	lsls	r3, r3, #10
 8006680:	b29b      	uxth	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b29a      	uxth	r2, r3
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e024      	b.n	80066d6 <USB_EPStartXfer+0x8a8>
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11c      	bne.n	80066d6 <USB_EPStartXfer+0x8a8>
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066b0:	4413      	add	r3, r2
 80066b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	00da      	lsls	r2, r3, #3
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	895b      	ldrh	r3, [r3, #10]
 80066e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006700:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006704:	6800      	ldr	r0, [r0, #0]
 8006706:	f001 f87d 	bl	8007804 <USB_WritePMA>
 800670a:	e227      	b.n	8006b5c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006798:	4413      	add	r3, r2
 800679a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	00da      	lsls	r2, r3, #3
 80067aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	891b      	ldrh	r3, [r3, #8]
 80067ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f001 f809 	bl	8007804 <USB_WritePMA>
 80067f2:	e1b3      	b.n	8006b5c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80c6 	beq.w	80069c6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800683a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	673b      	str	r3, [r7, #112]	@ 0x70
 8006846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d177      	bne.n	8006946 <USB_EPStartXfer+0xb18>
 8006856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006876:	4413      	add	r3, r2
 8006878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800687a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	00da      	lsls	r2, r3, #3
 8006888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800688a:	4413      	add	r3, r2
 800688c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006890:	667b      	str	r3, [r7, #100]	@ 0x64
 8006892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689c:	b29a      	uxth	r2, r3
 800689e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80068a8:	d921      	bls.n	80068ee <USB_EPStartXfer+0xac0>
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <USB_EPStartXfer+0xa9c>
 80068c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068c4:	3b01      	subs	r3, #1
 80068c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	b29b      	uxth	r3, r3
 80068da:	4313      	orrs	r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e050      	b.n	8006990 <USB_EPStartXfer+0xb62>
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <USB_EPStartXfer+0xade>
 80068f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006904:	b29a      	uxth	r2, r3
 8006906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e041      	b.n	8006990 <USB_EPStartXfer+0xb62>
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <USB_EPStartXfer+0xafe>
 8006922:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006926:	3301      	adds	r3, #1
 8006928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29a      	uxth	r2, r3
 8006932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006936:	b29b      	uxth	r3, r3
 8006938:	029b      	lsls	r3, r3, #10
 800693a:	b29b      	uxth	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b29a      	uxth	r2, r3
 8006940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e024      	b.n	8006990 <USB_EPStartXfer+0xb62>
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d11c      	bne.n	8006990 <USB_EPStartXfer+0xb62>
 8006956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006964:	b29b      	uxth	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800696a:	4413      	add	r3, r2
 800696c:	673b      	str	r3, [r7, #112]	@ 0x70
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	00da      	lsls	r2, r3, #3
 800697c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800697e:	4413      	add	r3, r2
 8006980:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006984:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	b29a      	uxth	r2, r3
 800698c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	895b      	ldrh	r3, [r3, #10]
 800699c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6959      	ldr	r1, [r3, #20]
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069be:	6800      	ldr	r0, [r0, #0]
 80069c0:	f000 ff20 	bl	8007804 <USB_WritePMA>
 80069c4:	e0ca      	b.n	8006b5c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d177      	bne.n	8006ac6 <USB_EPStartXfer+0xc98>
 80069d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069f6:	4413      	add	r3, r2
 80069f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	00da      	lsls	r2, r3, #3
 8006a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a28:	d921      	bls.n	8006a6e <USB_EPStartXfer+0xc40>
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	f003 031f 	and.w	r3, r3, #31
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <USB_EPStartXfer+0xc1c>
 8006a40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a44:	3b01      	subs	r3, #1
 8006a46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e05c      	b.n	8006b28 <USB_EPStartXfer+0xcfa>
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USB_EPStartXfer+0xc5e>
 8006a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	e04d      	b.n	8006b28 <USB_EPStartXfer+0xcfa>
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <USB_EPStartXfer+0xc7e>
 8006aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e030      	b.n	8006b28 <USB_EPStartXfer+0xcfa>
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d128      	bne.n	8006b28 <USB_EPStartXfer+0xcfa>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006afa:	4413      	add	r3, r2
 8006afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00da      	lsls	r2, r3, #3
 8006b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b12:	4413      	add	r3, r2
 8006b14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	891b      	ldrh	r3, [r3, #8]
 8006b34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6959      	ldr	r1, [r3, #20]
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b56:	6800      	ldr	r0, [r0, #0]
 8006b58:	f000 fe54 	bl	8007804 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b82:	817b      	strh	r3, [r7, #10]
 8006b84:	897b      	ldrh	r3, [r7, #10]
 8006b86:	f083 0310 	eor.w	r3, r3, #16
 8006b8a:	817b      	strh	r3, [r7, #10]
 8006b8c:	897b      	ldrh	r3, [r7, #10]
 8006b8e:	f083 0320 	eor.w	r3, r3, #32
 8006b92:	817b      	strh	r3, [r7, #10]
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	897b      	ldrh	r3, [r7, #10]
 8006bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
 8006bc4:	f000 bcde 	b.w	8007584 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	7b1b      	ldrb	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 80bb 	bne.w	8006d50 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d917      	bls.n	8006c26 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	619a      	str	r2, [r3, #24]
 8006c24:	e00e      	b.n	8006c44 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c68:	4413      	add	r3, r2
 8006c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	00da      	lsls	r2, r3, #3
 8006c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ca4:	d924      	bls.n	8006cf0 <USB_EPStartXfer+0xec2>
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <USB_EPStartXfer+0xe98>
 8006cbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	f000 bc10 	b.w	8007510 <USB_EPStartXfer+0x16e2>
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <USB_EPStartXfer+0xee4>
 8006cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e3fe      	b.n	8007510 <USB_EPStartXfer+0x16e2>
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <USB_EPStartXfer+0xf04>
 8006d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	029b      	lsls	r3, r3, #10
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e3df      	b.n	8007510 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	78db      	ldrb	r3, [r3, #3]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	f040 8218 	bne.w	8007192 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 809d 	bne.w	8006eae <USB_EPStartXfer+0x1080>
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d98:	4413      	add	r3, r2
 8006d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00da      	lsls	r2, r3, #3
 8006dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ddc:	d92b      	bls.n	8006e36 <USB_EPStartXfer+0x1008>
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USB_EPStartXfer+0xfe0>
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e070      	b.n	8006f18 <USB_EPStartXfer+0x10ea>
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10c      	bne.n	8006e60 <USB_EPStartXfer+0x1032>
 8006e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e05b      	b.n	8006f18 <USB_EPStartXfer+0x10ea>
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <USB_EPStartXfer+0x1062>
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	e034      	b.n	8006f18 <USB_EPStartXfer+0x10ea>
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d12c      	bne.n	8006f18 <USB_EPStartXfer+0x10ea>
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	00da      	lsls	r2, r3, #3
 8006ef6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 809d 	bne.w	8007072 <USB_EPStartXfer+0x1244>
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa0:	d92b      	bls.n	8006ffa <USB_EPStartXfer+0x11cc>
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0x11a4>
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	e069      	b.n	80070ce <USB_EPStartXfer+0x12a0>
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10c      	bne.n	8007024 <USB_EPStartXfer+0x11f6>
 800700a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e054      	b.n	80070ce <USB_EPStartXfer+0x12a0>
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <USB_EPStartXfer+0x1226>
 800704a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	4313      	orrs	r3, r2
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	e02d      	b.n	80070ce <USB_EPStartXfer+0x12a0>
 8007072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d125      	bne.n	80070ce <USB_EPStartXfer+0x12a0>
 8007082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007098:	4413      	add	r3, r2
 800709a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	00da      	lsls	r2, r3, #3
 80070ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8218 	beq.w	8007510 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007100:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <USB_EPStartXfer+0x12ea>
 800710c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007118:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800711c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 81f5 	bne.w	8007510 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007126:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800712a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	f040 81ee 	bne.w	8007510 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800715e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007188:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]
 8007190:	e1be      	b.n	8007510 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	78db      	ldrb	r3, [r3, #3]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	f040 81b4 	bne.w	800750c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d917      	bls.n	80071f0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80071c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	619a      	str	r2, [r3, #24]
 80071ee:	e00e      	b.n	800720e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2200      	movs	r2, #0
 800720c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 8085 	bne.w	800732a <USB_EPStartXfer+0x14fc>
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007244:	4413      	add	r3, r2
 8007246:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00da      	lsls	r2, r3, #3
 8007258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800725c:	4413      	add	r3, r2
 800725e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007280:	d923      	bls.n	80072ca <USB_EPStartXfer+0x149c>
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <USB_EPStartXfer+0x1474>
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729c:	3b01      	subs	r3, #1
 800729e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e060      	b.n	800738c <USB_EPStartXfer+0x155e>
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <USB_EPStartXfer+0x14be>
 80072d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e04f      	b.n	800738c <USB_EPStartXfer+0x155e>
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <USB_EPStartXfer+0x14de>
 8007302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007306:	3301      	adds	r3, #1
 8007308:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800730c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29a      	uxth	r2, r3
 8007314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007318:	b29b      	uxth	r3, r3
 800731a:	029b      	lsls	r3, r3, #10
 800731c:	b29b      	uxth	r3, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	b29a      	uxth	r2, r3
 8007322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e030      	b.n	800738c <USB_EPStartXfer+0x155e>
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d128      	bne.n	800738c <USB_EPStartXfer+0x155e>
 800733a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800735e:	4413      	add	r3, r2
 8007360:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	00da      	lsls	r2, r3, #3
 8007372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007376:	4413      	add	r3, r2
 8007378:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800737c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 8085 	bne.w	80074b6 <USB_EPStartXfer+0x1688>
 80073ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073d0:	4413      	add	r3, r2
 80073d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	00da      	lsls	r2, r3, #3
 80073e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073e8:	4413      	add	r3, r2
 80073ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	2b3e      	cmp	r3, #62	@ 0x3e
 800740c:	d923      	bls.n	8007456 <USB_EPStartXfer+0x1628>
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <USB_EPStartXfer+0x1600>
 8007424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007428:	3b01      	subs	r3, #1
 800742a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800742e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29a      	uxth	r2, r3
 8007436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29b      	uxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b29b      	uxth	r3, r3
 8007444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e05c      	b.n	8007510 <USB_EPStartXfer+0x16e2>
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <USB_EPStartXfer+0x164a>
 800745e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e04b      	b.n	8007510 <USB_EPStartXfer+0x16e2>
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <USB_EPStartXfer+0x166a>
 800748e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007492:	3301      	adds	r3, #1
 8007494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007498:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e02c      	b.n	8007510 <USB_EPStartXfer+0x16e2>
 80074b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d124      	bne.n	8007510 <USB_EPStartXfer+0x16e2>
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074dc:	4413      	add	r3, r2
 80074de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00da      	lsls	r2, r3, #3
 80074f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e001      	b.n	8007510 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e03a      	b.n	8007586 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800753a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800753e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007542:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007546:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800754a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800754e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d020      	beq.n	80075e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b8:	81bb      	strh	r3, [r7, #12]
 80075ba:	89bb      	ldrh	r3, [r7, #12]
 80075bc:	f083 0310 	eor.w	r3, r3, #16
 80075c0:	81bb      	strh	r3, [r7, #12]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	89bb      	ldrh	r3, [r7, #12]
 80075ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]
 80075e2:	e01f      	b.n	8007624 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fa:	81fb      	strh	r3, [r7, #14]
 80075fc:	89fb      	ldrh	r3, [r7, #14]
 80075fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007602:	81fb      	strh	r3, [r7, #14]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	89fb      	ldrh	r3, [r7, #14]
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800761c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007632:	b480      	push	{r7}
 8007634:	b087      	sub	sp, #28
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	7b1b      	ldrb	r3, [r3, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 809d 	bne.w	8007780 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d04c      	beq.n	80076e8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	823b      	strh	r3, [r7, #16]
 800765c:	8a3b      	ldrh	r3, [r7, #16]
 800765e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01b      	beq.n	800769e <USB_EPClearStall+0x6c>
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767c:	81fb      	strh	r3, [r7, #14]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007696:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	78db      	ldrb	r3, [r3, #3]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d06c      	beq.n	8007780 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076bc:	81bb      	strh	r3, [r7, #12]
 80076be:	89bb      	ldrh	r3, [r7, #12]
 80076c0:	f083 0320 	eor.w	r3, r3, #32
 80076c4:	81bb      	strh	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	89bb      	ldrh	r3, [r7, #12]
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]
 80076e6:	e04b      	b.n	8007780 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	82fb      	strh	r3, [r7, #22]
 80076f6:	8afb      	ldrh	r3, [r7, #22]
 80076f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <USB_EPClearStall+0x106>
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007716:	82bb      	strh	r3, [r7, #20]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	8abb      	ldrh	r3, [r7, #20]
 8007724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800772c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007734:	b29b      	uxth	r3, r3
 8007736:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800774a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774e:	827b      	strh	r3, [r7, #18]
 8007750:	8a7b      	ldrh	r3, [r7, #18]
 8007752:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007756:	827b      	strh	r3, [r7, #18]
 8007758:	8a7b      	ldrh	r3, [r7, #18]
 800775a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800775e:	827b      	strh	r3, [r7, #18]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	441a      	add	r2, r3
 800776a:	8a7b      	ldrh	r3, [r7, #18]
 800776c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800777c:	b29b      	uxth	r3, r3
 800777e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d103      	bne.n	80077a8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2280      	movs	r2, #128	@ 0x80
 80077a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077f6:	68fb      	ldr	r3, [r7, #12]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007804:	b480      	push	{r7}
 8007806:	b08b      	sub	sp, #44	@ 0x2c
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4611      	mov	r1, r2
 8007810:	461a      	mov	r2, r3
 8007812:	460b      	mov	r3, r1
 8007814:	80fb      	strh	r3, [r7, #6]
 8007816:	4613      	mov	r3, r2
 8007818:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800781a:	88bb      	ldrh	r3, [r7, #4]
 800781c:	3301      	adds	r3, #1
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007834:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
 800783a:	e01b      	b.n	8007874 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	3301      	adds	r3, #1
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	b21a      	sxth	r2, r3
 800784c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007850:	4313      	orrs	r3, r2
 8007852:	b21b      	sxth	r3, r3
 8007854:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	8a7a      	ldrh	r2, [r7, #18]
 800785a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	3302      	adds	r3, #2
 8007860:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	3b01      	subs	r3, #1
 8007872:	627b      	str	r3, [r7, #36]	@ 0x24
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e0      	bne.n	800783c <USB_WritePMA+0x38>
  }
}
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	372c      	adds	r7, #44	@ 0x2c
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007888:	b480      	push	{r7}
 800788a:	b08b      	sub	sp, #44	@ 0x2c
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	460b      	mov	r3, r1
 8007898:	80fb      	strh	r3, [r7, #6]
 800789a:	4613      	mov	r3, r2
 800789c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800789e:	88bb      	ldrh	r3, [r7, #4]
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078be:	e018      	b.n	80078f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	3302      	adds	r3, #2
 80078cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3301      	adds	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3301      	adds	r3, #1
 80078ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	3b01      	subs	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e3      	bne.n	80078c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80078f8:	88bb      	ldrh	r3, [r7, #4]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	b2da      	uxtb	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	701a      	strb	r2, [r3, #0]
  }
}
 8007914:	bf00      	nop
 8007916:	372c      	adds	r7, #44	@ 0x2c
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800792c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007930:	f002 f8a4 	bl	8009a7c <USBD_static_malloc>
 8007934:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007944:	2302      	movs	r3, #2
 8007946:	e066      	b.n	8007a16 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7c1b      	ldrb	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d119      	bne.n	800798c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800795c:	2202      	movs	r2, #2
 800795e:	2181      	movs	r1, #129	@ 0x81
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 ff32 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800796c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007970:	2202      	movs	r2, #2
 8007972:	2101      	movs	r1, #1
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 ff28 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2210      	movs	r2, #16
 8007986:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800798a:	e016      	b.n	80079ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800798c:	2340      	movs	r3, #64	@ 0x40
 800798e:	2202      	movs	r2, #2
 8007990:	2181      	movs	r1, #129	@ 0x81
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 ff19 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800799e:	2340      	movs	r3, #64	@ 0x40
 80079a0:	2202      	movs	r2, #2
 80079a2:	2101      	movs	r1, #1
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 ff10 	bl	80097ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2210      	movs	r2, #16
 80079b6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079ba:	2308      	movs	r3, #8
 80079bc:	2203      	movs	r2, #3
 80079be:	2182      	movs	r1, #130	@ 0x82
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 ff02 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7c1b      	ldrb	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 ffd3 	bl	80099a8 <USBD_LL_PrepareReceive>
 8007a02:	e007      	b.n	8007a14 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a0a:	2340      	movs	r3, #64	@ 0x40
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 ffca 	bl	80099a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a2a:	2181      	movs	r1, #129	@ 0x81
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fef2 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a38:	2101      	movs	r1, #1
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 feeb 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a48:	2182      	movs	r1, #130	@ 0x82
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fee3 	bl	8009816 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 f80c 	bl	8009a98 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007aa4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e0af      	b.n	8007c1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d03f      	beq.n	8007b48 <USBD_CDC_Setup+0xb4>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	f040 809f 	bne.w	8007c0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d02e      	beq.n	8007b34 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da16      	bge.n	8007b0e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007aec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	88d2      	ldrh	r2, [r2, #6]
 8007af2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b07      	cmp	r3, #7
 8007afa:	bf28      	it	cs
 8007afc:	2307      	movcs	r3, #7
 8007afe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	89fa      	ldrh	r2, [r7, #14]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fa9d 	bl	8009046 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007b0c:	e085      	b.n	8007c1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	785a      	ldrb	r2, [r3, #1]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	88db      	ldrh	r3, [r3, #6]
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b24:	6939      	ldr	r1, [r7, #16]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	88db      	ldrh	r3, [r3, #6]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fab6 	bl	800909e <USBD_CtlPrepareRx>
      break;
 8007b32:	e072      	b.n	8007c1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	7850      	ldrb	r0, [r2, #1]
 8007b40:	2200      	movs	r2, #0
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	4798      	blx	r3
      break;
 8007b46:	e068      	b.n	8007c1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b0b      	cmp	r3, #11
 8007b4e:	d852      	bhi.n	8007bf6 <USBD_CDC_Setup+0x162>
 8007b50:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <USBD_CDC_Setup+0xc4>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b89 	.word	0x08007b89
 8007b5c:	08007c05 	.word	0x08007c05
 8007b60:	08007bf7 	.word	0x08007bf7
 8007b64:	08007bf7 	.word	0x08007bf7
 8007b68:	08007bf7 	.word	0x08007bf7
 8007b6c:	08007bf7 	.word	0x08007bf7
 8007b70:	08007bf7 	.word	0x08007bf7
 8007b74:	08007bf7 	.word	0x08007bf7
 8007b78:	08007bf7 	.word	0x08007bf7
 8007b7c:	08007bf7 	.word	0x08007bf7
 8007b80:	08007bb3 	.word	0x08007bb3
 8007b84:	08007bdd 	.word	0x08007bdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d107      	bne.n	8007ba4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b94:	f107 030a 	add.w	r3, r7, #10
 8007b98:	2202      	movs	r2, #2
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 fa52 	bl	8009046 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba2:	e032      	b.n	8007c0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f9dc 	bl	8008f64 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb0:	e02b      	b.n	8007c0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d107      	bne.n	8007bce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bbe:	f107 030d 	add.w	r3, r7, #13
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fa3d 	bl	8009046 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bcc:	e01d      	b.n	8007c0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 f9c7 	bl	8008f64 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bda:	e016      	b.n	8007c0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d00f      	beq.n	8007c08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 f9ba 	bl	8008f64 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bf4:	e008      	b.n	8007c08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f9b3 	bl	8008f64 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	75fb      	strb	r3, [r7, #23]
          break;
 8007c02:	e002      	b.n	8007c0a <USBD_CDC_Setup+0x176>
          break;
 8007c04:	bf00      	nop
 8007c06:	e008      	b.n	8007c1a <USBD_CDC_Setup+0x186>
          break;
 8007c08:	bf00      	nop
      }
      break;
 8007c0a:	e006      	b.n	8007c1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f9a8 	bl	8008f64 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	75fb      	strb	r3, [r7, #23]
      break;
 8007c18:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007c36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e04f      	b.n	8007ce6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d029      	beq.n	8007cb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	3318      	adds	r3, #24
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	78f9      	ldrb	r1, [r7, #3]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4403      	add	r3, r0
 8007c84:	3320      	adds	r3, #32
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d110      	bne.n	8007cb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3318      	adds	r3, #24
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007caa:	78f9      	ldrb	r1, [r7, #3]
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fe58 	bl	8009966 <USBD_LL_Transmit>
 8007cb6:	e015      	b.n	8007ce4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e015      	b.n	8007d3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fe68 	bl	80099ea <USBD_LL_GetRxDataSize>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d36:	4611      	mov	r1, r2
 8007d38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e01a      	b.n	8007d94 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d014      	beq.n	8007d92 <USBD_CDC_EP0_RxReady+0x4e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d6e:	2bff      	cmp	r3, #255	@ 0xff
 8007d70:	d00f      	beq.n	8007d92 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007d80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22ff      	movs	r2, #255	@ 0xff
 8007d8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2243      	movs	r2, #67	@ 0x43
 8007da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007daa:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	20000094 	.word	0x20000094

08007dbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2243      	movs	r2, #67	@ 0x43
 8007dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007dca:	4b03      	ldr	r3, [pc, #12]	@ (8007dd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20000050 	.word	0x20000050

08007ddc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2243      	movs	r2, #67	@ 0x43
 8007de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dea:	4b03      	ldr	r3, [pc, #12]	@ (8007df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	200000d8 	.word	0x200000d8

08007dfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	220a      	movs	r2, #10
 8007e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e0a:	4b03      	ldr	r3, [pc, #12]	@ (8007e18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	2000000c 	.word	0x2000000c

08007e1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e004      	b.n	8007e3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b087      	sub	sp, #28
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e008      	b.n	8007e76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e004      	b.n	8007ea8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e016      	b.n	8007f00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 fd5e 	bl	80099a8 <USBD_LL_PrepareReceive>
 8007eec:	e007      	b.n	8007efe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ef4:	2340      	movs	r3, #64	@ 0x40
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fd55 	bl	80099a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e01f      	b.n	8007f60 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	79fa      	ldrb	r2, [r7, #7]
 8007f52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f001 fbbd 	bl	80096d4 <USBD_LL_Init>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e016      	b.n	8007fae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9c:	f107 020e 	add.w	r2, r7, #14
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fbe8 	bl	8009794 <USBD_LL_Start>
 8007fc4:	4603      	mov	r3, r0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	4611      	mov	r1, r2
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
  }

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 ff46 	bl	8008ef0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2b02      	cmp	r3, #2
 8008086:	d01a      	beq.n	80080be <USBD_LL_SetupStage+0x72>
 8008088:	2b02      	cmp	r3, #2
 800808a:	d822      	bhi.n	80080d2 <USBD_LL_SetupStage+0x86>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <USBD_LL_SetupStage+0x4a>
 8008090:	2b01      	cmp	r3, #1
 8008092:	d00a      	beq.n	80080aa <USBD_LL_SetupStage+0x5e>
 8008094:	e01d      	b.n	80080d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f9ee 	bl	8008480 <USBD_StdDevReq>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
      break;
 80080a8:	e020      	b.n	80080ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa52 	bl	800855c <USBD_StdItfReq>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e016      	b.n	80080ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa91 	bl	80085ee <USBD_StdEPReq>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]
      break;
 80080d0:	e00c      	b.n	80080ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fbb7 	bl	8009854 <USBD_LL_StallEP>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ea:	bf00      	nop
  }

  return ret;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	460b      	mov	r3, r1
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d138      	bne.n	800817c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008110:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008118:	2b03      	cmp	r3, #3
 800811a:	d14a      	bne.n	80081b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	429a      	cmp	r2, r3
 8008126:	d913      	bls.n	8008150 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	1ad2      	subs	r2, r2, r3
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4293      	cmp	r3, r2
 8008140:	bf28      	it	cs
 8008142:	4613      	movcs	r3, r2
 8008144:	461a      	mov	r2, r3
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 ffc5 	bl	80090d8 <USBD_CtlContinueRx>
 800814e:	e030      	b.n	80081b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b03      	cmp	r3, #3
 800815a:	d10b      	bne.n	8008174 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 ffc0 	bl	80090fa <USBD_CtlSendStatus>
 800817a:	e01a      	b.n	80081b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b03      	cmp	r3, #3
 8008186:	d114      	bne.n	80081b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	7afa      	ldrb	r2, [r7, #11]
 800819e:	4611      	mov	r1, r2
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	4798      	blx	r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081a8:	7dfb      	ldrb	r3, [r7, #23]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	e000      	b.n	80081b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	460b      	mov	r3, r1
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d16b      	bne.n	80082a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3314      	adds	r3, #20
 80081d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d156      	bne.n	800828e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d914      	bls.n	8008216 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	461a      	mov	r2, r3
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 ff3a 	bl	800907c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008208:	2300      	movs	r3, #0
 800820a:	2200      	movs	r2, #0
 800820c:	2100      	movs	r1, #0
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f001 fbca 	bl	80099a8 <USBD_LL_PrepareReceive>
 8008214:	e03b      	b.n	800828e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	429a      	cmp	r2, r3
 8008220:	d11c      	bne.n	800825c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800822a:	429a      	cmp	r2, r3
 800822c:	d316      	bcc.n	800825c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008238:	429a      	cmp	r2, r3
 800823a:	d20f      	bcs.n	800825c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800823c:	2200      	movs	r2, #0
 800823e:	2100      	movs	r1, #0
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 ff1b 	bl	800907c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824e:	2300      	movs	r3, #0
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f001 fba7 	bl	80099a8 <USBD_LL_PrepareReceive>
 800825a:	e018      	b.n	800828e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b03      	cmp	r3, #3
 8008266:	d10b      	bne.n	8008280 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008280:	2180      	movs	r1, #128	@ 0x80
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f001 fae6 	bl	8009854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 ff49 	bl	8009120 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008294:	2b01      	cmp	r3, #1
 8008296:	d122      	bne.n	80082de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fe98 	bl	8007fce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082a6:	e01a      	b.n	80082de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d114      	bne.n	80082de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00e      	beq.n	80082de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	7afa      	ldrb	r2, [r7, #11]
 80082ca:	4611      	mov	r1, r2
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	4798      	blx	r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	e000      	b.n	80082e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	e02f      	b.n	800837c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00f      	beq.n	8008346 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6852      	ldr	r2, [r2, #4]
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	4611      	mov	r1, r2
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008346:	2340      	movs	r3, #64	@ 0x40
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fa3c 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2240      	movs	r2, #64	@ 0x40
 800835e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008362:	2340      	movs	r3, #64	@ 0x40
 8008364:	2200      	movs	r2, #0
 8008366:	2180      	movs	r1, #128	@ 0x80
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 fa2e 	bl	80097ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2240      	movs	r2, #64	@ 0x40
 8008378:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2204      	movs	r2, #4
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d106      	bne.n	80083f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008412:	2303      	movs	r3, #3
 8008414:	e012      	b.n	800843c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d10b      	bne.n	800843a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	3301      	adds	r3, #1
 800845a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008462:	8a3b      	ldrh	r3, [r7, #16]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	b21a      	sxth	r2, r3
 8008468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800846c:	4313      	orrs	r3, r2
 800846e:	b21b      	sxth	r3, r3
 8008470:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008472:	89fb      	ldrh	r3, [r7, #14]
}
 8008474:	4618      	mov	r0, r3
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d005      	beq.n	80084a6 <USBD_StdDevReq+0x26>
 800849a:	2b40      	cmp	r3, #64	@ 0x40
 800849c:	d853      	bhi.n	8008546 <USBD_StdDevReq+0xc6>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <USBD_StdDevReq+0x3a>
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d14f      	bne.n	8008546 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
      break;
 80084b8:	e04a      	b.n	8008550 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d83b      	bhi.n	800853a <USBD_StdDevReq+0xba>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <USBD_StdDevReq+0x48>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	0800851d 	.word	0x0800851d
 80084cc:	08008531 	.word	0x08008531
 80084d0:	0800853b 	.word	0x0800853b
 80084d4:	08008527 	.word	0x08008527
 80084d8:	0800853b 	.word	0x0800853b
 80084dc:	080084fb 	.word	0x080084fb
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	0800853b 	.word	0x0800853b
 80084e8:	08008513 	.word	0x08008513
 80084ec:	08008505 	.word	0x08008505
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9de 	bl	80088b4 <USBD_GetDescriptor>
          break;
 80084f8:	e024      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fb6d 	bl	8008bdc <USBD_SetAddress>
          break;
 8008502:	e01f      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fbac 	bl	8008c64 <USBD_SetConfig>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
          break;
 8008510:	e018      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc4b 	bl	8008db0 <USBD_GetConfig>
          break;
 800851a:	e013      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc7c 	bl	8008e1c <USBD_GetStatus>
          break;
 8008524:	e00e      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fcab 	bl	8008e84 <USBD_SetFeature>
          break;
 800852e:	e009      	b.n	8008544 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fcba 	bl	8008eac <USBD_ClrFeature>
          break;
 8008538:	e004      	b.n	8008544 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fd11 	bl	8008f64 <USBD_CtlError>
          break;
 8008542:	bf00      	nop
      }
      break;
 8008544:	e004      	b.n	8008550 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fd0b 	bl	8008f64 <USBD_CtlError>
      break;
 800854e:	bf00      	nop
  }

  return ret;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop

0800855c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008572:	2b40      	cmp	r3, #64	@ 0x40
 8008574:	d005      	beq.n	8008582 <USBD_StdItfReq+0x26>
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	d82f      	bhi.n	80085da <USBD_StdItfReq+0x7e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <USBD_StdItfReq+0x26>
 800857e:	2b20      	cmp	r3, #32
 8008580:	d12b      	bne.n	80085da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008588:	b2db      	uxtb	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	2b02      	cmp	r3, #2
 800858e:	d81d      	bhi.n	80085cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	889b      	ldrh	r3, [r3, #4]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b01      	cmp	r3, #1
 8008598:	d813      	bhi.n	80085c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d110      	bne.n	80085d6 <USBD_StdItfReq+0x7a>
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10d      	bne.n	80085d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd9d 	bl	80090fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085c0:	e009      	b.n	80085d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fccd 	bl	8008f64 <USBD_CtlError>
          break;
 80085ca:	e004      	b.n	80085d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fcc8 	bl	8008f64 <USBD_CtlError>
          break;
 80085d4:	e000      	b.n	80085d8 <USBD_StdItfReq+0x7c>
          break;
 80085d6:	bf00      	nop
      }
      break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fcc1 	bl	8008f64 <USBD_CtlError>
      break;
 80085e2:	bf00      	nop
  }

  return ret;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	889b      	ldrh	r3, [r3, #4]
 8008600:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800860a:	2b40      	cmp	r3, #64	@ 0x40
 800860c:	d007      	beq.n	800861e <USBD_StdEPReq+0x30>
 800860e:	2b40      	cmp	r3, #64	@ 0x40
 8008610:	f200 8145 	bhi.w	800889e <USBD_StdEPReq+0x2b0>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00c      	beq.n	8008632 <USBD_StdEPReq+0x44>
 8008618:	2b20      	cmp	r3, #32
 800861a:	f040 8140 	bne.w	800889e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
      break;
 8008630:	e13a      	b.n	80088a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d007      	beq.n	800864a <USBD_StdEPReq+0x5c>
 800863a:	2b03      	cmp	r3, #3
 800863c:	f300 8129 	bgt.w	8008892 <USBD_StdEPReq+0x2a4>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d07f      	beq.n	8008744 <USBD_StdEPReq+0x156>
 8008644:	2b01      	cmp	r3, #1
 8008646:	d03c      	beq.n	80086c2 <USBD_StdEPReq+0xd4>
 8008648:	e123      	b.n	8008892 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d002      	beq.n	800865c <USBD_StdEPReq+0x6e>
 8008656:	2b03      	cmp	r3, #3
 8008658:	d016      	beq.n	8008688 <USBD_StdEPReq+0x9a>
 800865a:	e02c      	b.n	80086b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <USBD_StdEPReq+0x90>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b80      	cmp	r3, #128	@ 0x80
 8008666:	d00a      	beq.n	800867e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f8f1 	bl	8009854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008672:	2180      	movs	r1, #128	@ 0x80
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f8ed 	bl	8009854 <USBD_LL_StallEP>
 800867a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800867c:	e020      	b.n	80086c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc6f 	bl	8008f64 <USBD_CtlError>
              break;
 8008686:	e01b      	b.n	80086c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10e      	bne.n	80086ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <USBD_StdEPReq+0xc0>
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b80      	cmp	r3, #128	@ 0x80
 800869a:	d008      	beq.n	80086ae <USBD_StdEPReq+0xc0>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f8d3 	bl	8009854 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fd23 	bl	80090fa <USBD_CtlSendStatus>

              break;
 80086b4:	e004      	b.n	80086c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc53 	bl	8008f64 <USBD_CtlError>
              break;
 80086be:	bf00      	nop
          }
          break;
 80086c0:	e0ec      	b.n	800889c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d002      	beq.n	80086d4 <USBD_StdEPReq+0xe6>
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d016      	beq.n	8008700 <USBD_StdEPReq+0x112>
 80086d2:	e030      	b.n	8008736 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <USBD_StdEPReq+0x108>
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b80      	cmp	r3, #128	@ 0x80
 80086de:	d00a      	beq.n	80086f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f8b5 	bl	8009854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ea:	2180      	movs	r1, #128	@ 0x80
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f8b1 	bl	8009854 <USBD_LL_StallEP>
 80086f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f4:	e025      	b.n	8008742 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc33 	bl	8008f64 <USBD_CtlError>
              break;
 80086fe:	e020      	b.n	8008742 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11b      	bne.n	8008740 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870e:	2b00      	cmp	r3, #0
 8008710:	d004      	beq.n	800871c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 f8bb 	bl	8009892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fcec 	bl	80090fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008734:	e004      	b.n	8008740 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fc13 	bl	8008f64 <USBD_CtlError>
              break;
 800873e:	e000      	b.n	8008742 <USBD_StdEPReq+0x154>
              break;
 8008740:	bf00      	nop
          }
          break;
 8008742:	e0ab      	b.n	800889c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d002      	beq.n	8008756 <USBD_StdEPReq+0x168>
 8008750:	2b03      	cmp	r3, #3
 8008752:	d032      	beq.n	80087ba <USBD_StdEPReq+0x1cc>
 8008754:	e097      	b.n	8008886 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <USBD_StdEPReq+0x17e>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b80      	cmp	r3, #128	@ 0x80
 8008760:	d004      	beq.n	800876c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fbfd 	bl	8008f64 <USBD_CtlError>
                break;
 800876a:	e091      	b.n	8008890 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da0b      	bge.n	800878c <USBD_StdEPReq+0x19e>
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	3310      	adds	r3, #16
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	3304      	adds	r3, #4
 800878a:	e00b      	b.n	80087a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	3304      	adds	r3, #4
 80087a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2202      	movs	r2, #2
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc47 	bl	8009046 <USBD_CtlSendData>
              break;
 80087b8:	e06a      	b.n	8008890 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da11      	bge.n	80087e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	f003 020f 	and.w	r2, r3, #15
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d117      	bne.n	800880c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fbc0 	bl	8008f64 <USBD_CtlError>
                  break;
 80087e4:	e054      	b.n	8008890 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fbad 	bl	8008f64 <USBD_CtlError>
                  break;
 800880a:	e041      	b.n	8008890 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800880c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da0b      	bge.n	800882c <USBD_StdEPReq+0x23e>
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	3310      	adds	r3, #16
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	4413      	add	r3, r2
 8008828:	3304      	adds	r3, #4
 800882a:	e00b      	b.n	8008844 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	3304      	adds	r3, #4
 8008844:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <USBD_StdEPReq+0x264>
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2b80      	cmp	r3, #128	@ 0x80
 8008850:	d103      	bne.n	800885a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e00e      	b.n	8008878 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 f836 	bl	80098d0 <USBD_LL_IsStallEP>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2201      	movs	r2, #1
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	e002      	b.n	8008878 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2202      	movs	r2, #2
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fbe1 	bl	8009046 <USBD_CtlSendData>
              break;
 8008884:	e004      	b.n	8008890 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fb6b 	bl	8008f64 <USBD_CtlError>
              break;
 800888e:	bf00      	nop
          }
          break;
 8008890:	e004      	b.n	800889c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb65 	bl	8008f64 <USBD_CtlError>
          break;
 800889a:	bf00      	nop
      }
      break;
 800889c:	e004      	b.n	80088a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fb5f 	bl	8008f64 <USBD_CtlError>
      break;
 80088a6:	bf00      	nop
  }

  return ret;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	885b      	ldrh	r3, [r3, #2]
 80088ce:	0a1b      	lsrs	r3, r3, #8
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	2b0e      	cmp	r3, #14
 80088d6:	f200 8152 	bhi.w	8008b7e <USBD_GetDescriptor+0x2ca>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <USBD_GetDescriptor+0x2c>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008951 	.word	0x08008951
 80088e4:	08008969 	.word	0x08008969
 80088e8:	080089a9 	.word	0x080089a9
 80088ec:	08008b7f 	.word	0x08008b7f
 80088f0:	08008b7f 	.word	0x08008b7f
 80088f4:	08008b1f 	.word	0x08008b1f
 80088f8:	08008b4b 	.word	0x08008b4b
 80088fc:	08008b7f 	.word	0x08008b7f
 8008900:	08008b7f 	.word	0x08008b7f
 8008904:	08008b7f 	.word	0x08008b7f
 8008908:	08008b7f 	.word	0x08008b7f
 800890c:	08008b7f 	.word	0x08008b7f
 8008910:	08008b7f 	.word	0x08008b7f
 8008914:	08008b7f 	.word	0x08008b7f
 8008918:	0800891d 	.word	0x0800891d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00b      	beq.n	8008940 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7c12      	ldrb	r2, [r2, #16]
 8008934:	f107 0108 	add.w	r1, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800893e:	e126      	b.n	8008b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fb0e 	bl	8008f64 <USBD_CtlError>
        err++;
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	3301      	adds	r3, #1
 800894c:	72fb      	strb	r3, [r7, #11]
      break;
 800894e:	e11e      	b.n	8008b8e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	7c12      	ldrb	r2, [r2, #16]
 800895c:	f107 0108 	add.w	r1, r7, #8
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
 8008964:	60f8      	str	r0, [r7, #12]
      break;
 8008966:	e112      	b.n	8008b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7c1b      	ldrb	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10d      	bne.n	800898c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008978:	f107 0208 	add.w	r2, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3301      	adds	r3, #1
 8008986:	2202      	movs	r2, #2
 8008988:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800898a:	e100      	b.n	8008b8e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	f107 0208 	add.w	r2, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	2202      	movs	r2, #2
 80089a4:	701a      	strb	r2, [r3, #0]
      break;
 80089a6:	e0f2      	b.n	8008b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	885b      	ldrh	r3, [r3, #2]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	f200 80ac 	bhi.w	8008b0c <USBD_GetDescriptor+0x258>
 80089b4:	a201      	add	r2, pc, #4	@ (adr r2, 80089bc <USBD_GetDescriptor+0x108>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	080089d5 	.word	0x080089d5
 80089c0:	08008a09 	.word	0x08008a09
 80089c4:	08008a3d 	.word	0x08008a3d
 80089c8:	08008a71 	.word	0x08008a71
 80089cc:	08008aa5 	.word	0x08008aa5
 80089d0:	08008ad9 	.word	0x08008ad9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f6:	e091      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fab2 	bl	8008f64 <USBD_CtlError>
            err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
          break;
 8008a06:	e089      	b.n	8008b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e077      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa98 	bl	8008f64 <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e06f      	b.n	8008b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e05d      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa7e 	bl	8008f64 <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e055      	b.n	8008b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a92:	e043      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa64 	bl	8008f64 <USBD_CtlError>
            err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa2:	e03b      	b.n	8008b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	7c12      	ldrb	r2, [r2, #16]
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac6:	e029      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa4a 	bl	8008f64 <USBD_CtlError>
            err++;
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad6:	e021      	b.n	8008b1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008afa:	e00f      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa30 	bl	8008f64 <USBD_CtlError>
            err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
          break;
 8008b0a:	e007      	b.n	8008b1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa28 	bl	8008f64 <USBD_CtlError>
          err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008b1a:	bf00      	nop
      }
      break;
 8008b1c:	e037      	b.n	8008b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7c1b      	ldrb	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2e:	f107 0208 	add.w	r2, r7, #8
 8008b32:	4610      	mov	r0, r2
 8008b34:	4798      	blx	r3
 8008b36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b38:	e029      	b.n	8008b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa11 	bl	8008f64 <USBD_CtlError>
        err++;
 8008b42:	7afb      	ldrb	r3, [r7, #11]
 8008b44:	3301      	adds	r3, #1
 8008b46:	72fb      	strb	r3, [r7, #11]
      break;
 8008b48:	e021      	b.n	8008b8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7c1b      	ldrb	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10d      	bne.n	8008b6e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5a:	f107 0208 	add.w	r2, r7, #8
 8008b5e:	4610      	mov	r0, r2
 8008b60:	4798      	blx	r3
 8008b62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	2207      	movs	r2, #7
 8008b6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b6c:	e00f      	b.n	8008b8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9f7 	bl	8008f64 <USBD_CtlError>
        err++;
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b7c:	e007      	b.n	8008b8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9ef 	bl	8008f64 <USBD_CtlError>
      err++;
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b8c:	bf00      	nop
  }

  if (err != 0U)
 8008b8e:	7afb      	ldrb	r3, [r7, #11]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11e      	bne.n	8008bd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	88db      	ldrh	r3, [r3, #6]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d016      	beq.n	8008bca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b9c:	893b      	ldrh	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00e      	beq.n	8008bc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88da      	ldrh	r2, [r3, #6]
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bf28      	it	cs
 8008bac:	4613      	movcs	r3, r2
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bb2:	893b      	ldrh	r3, [r7, #8]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa44 	bl	8009046 <USBD_CtlSendData>
 8008bbe:	e009      	b.n	8008bd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9ce 	bl	8008f64 <USBD_CtlError>
 8008bc8:	e004      	b.n	8008bd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa95 	bl	80090fa <USBD_CtlSendStatus>
 8008bd0:	e000      	b.n	8008bd4 <USBD_GetDescriptor+0x320>
    return;
 8008bd2:	bf00      	nop
  }
}
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop

08008bdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	889b      	ldrh	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d131      	bne.n	8008c52 <USBD_SetAddress+0x76>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	88db      	ldrh	r3, [r3, #6]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d12d      	bne.n	8008c52 <USBD_SetAddress+0x76>
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	885b      	ldrh	r3, [r3, #2]
 8008bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bfc:	d829      	bhi.n	8008c52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	885b      	ldrh	r3, [r3, #2]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d104      	bne.n	8008c20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f9a3 	bl	8008f64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1e:	e01d      	b.n	8008c5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7bfa      	ldrb	r2, [r7, #15]
 8008c24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fe7b 	bl	8009928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa61 	bl	80090fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c46:	e009      	b.n	8008c5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	e004      	b.n	8008c5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f985 	bl	8008f64 <USBD_CtlError>
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	4b4c      	ldr	r3, [pc, #304]	@ (8008dac <USBD_SetConfig+0x148>)
 8008c7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8008dac <USBD_SetConfig+0x148>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d905      	bls.n	8008c90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f96c 	bl	8008f64 <USBD_CtlError>
    return USBD_FAIL;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e088      	b.n	8008da2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d002      	beq.n	8008ca2 <USBD_SetConfig+0x3e>
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d025      	beq.n	8008cec <USBD_SetConfig+0x88>
 8008ca0:	e071      	b.n	8008d86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ca2:	4b42      	ldr	r3, [pc, #264]	@ (8008dac <USBD_SetConfig+0x148>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01c      	beq.n	8008ce4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008caa:	4b40      	ldr	r3, [pc, #256]	@ (8008dac <USBD_SetConfig+0x148>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8008dac <USBD_SetConfig+0x148>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff f992 	bl	8007fe4 <USBD_SetClassConfig>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f949 	bl	8008f64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cd2:	e065      	b.n	8008da0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fa10 	bl	80090fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2203      	movs	r2, #3
 8008cde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ce2:	e05d      	b.n	8008da0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa08 	bl	80090fa <USBD_CtlSendStatus>
      break;
 8008cea:	e059      	b.n	8008da0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008cec:	4b2f      	ldr	r3, [pc, #188]	@ (8008dac <USBD_SetConfig+0x148>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d112      	bne.n	8008d1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008dac <USBD_SetConfig+0x148>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d06:	4b29      	ldr	r3, [pc, #164]	@ (8008dac <USBD_SetConfig+0x148>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff f985 	bl	800801c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f9f1 	bl	80090fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d18:	e042      	b.n	8008da0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008d1a:	4b24      	ldr	r3, [pc, #144]	@ (8008dac <USBD_SetConfig+0x148>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d02a      	beq.n	8008d7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff f973 	bl	800801c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d36:	4b1d      	ldr	r3, [pc, #116]	@ (8008dac <USBD_SetConfig+0x148>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d40:	4b1a      	ldr	r3, [pc, #104]	@ (8008dac <USBD_SetConfig+0x148>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff f94c 	bl	8007fe4 <USBD_SetClassConfig>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00f      	beq.n	8008d76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f903 	bl	8008f64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff f958 	bl	800801c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d74:	e014      	b.n	8008da0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f9bf 	bl	80090fa <USBD_CtlSendStatus>
      break;
 8008d7c:	e010      	b.n	8008da0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9bb 	bl	80090fa <USBD_CtlSendStatus>
      break;
 8008d84:	e00c      	b.n	8008da0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8eb 	bl	8008f64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d8e:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <USBD_SetConfig+0x148>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f941 	bl	800801c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d9e:	bf00      	nop
  }

  return ret;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	200002b4 	.word	0x200002b4

08008db0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88db      	ldrh	r3, [r3, #6]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d004      	beq.n	8008dcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f8cd 	bl	8008f64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dca:	e023      	b.n	8008e14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	dc02      	bgt.n	8008dde <USBD_GetConfig+0x2e>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	dc03      	bgt.n	8008de4 <USBD_GetConfig+0x34>
 8008ddc:	e015      	b.n	8008e0a <USBD_GetConfig+0x5a>
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d00b      	beq.n	8008dfa <USBD_GetConfig+0x4a>
 8008de2:	e012      	b.n	8008e0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3308      	adds	r3, #8
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f927 	bl	8009046 <USBD_CtlSendData>
        break;
 8008df8:	e00c      	b.n	8008e14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f91f 	bl	8009046 <USBD_CtlSendData>
        break;
 8008e08:	e004      	b.n	8008e14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f8a9 	bl	8008f64 <USBD_CtlError>
        break;
 8008e12:	bf00      	nop
}
 8008e14:	bf00      	nop
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d81e      	bhi.n	8008e72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	88db      	ldrh	r3, [r3, #6]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d004      	beq.n	8008e46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f890 	bl	8008f64 <USBD_CtlError>
        break;
 8008e44:	e01a      	b.n	8008e7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f043 0202 	orr.w	r2, r3, #2
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	330c      	adds	r3, #12
 8008e66:	2202      	movs	r2, #2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f8eb 	bl	8009046 <USBD_CtlSendData>
      break;
 8008e70:	e004      	b.n	8008e7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f875 	bl	8008f64 <USBD_CtlError>
      break;
 8008e7a:	bf00      	nop
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d106      	bne.n	8008ea4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f92b 	bl	80090fa <USBD_CtlSendStatus>
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d80b      	bhi.n	8008edc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	885b      	ldrh	r3, [r3, #2]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d10c      	bne.n	8008ee6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f910 	bl	80090fa <USBD_CtlSendStatus>
      }
      break;
 8008eda:	e004      	b.n	8008ee6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f840 	bl	8008f64 <USBD_CtlError>
      break;
 8008ee4:	e000      	b.n	8008ee8 <USBD_ClrFeature+0x3c>
      break;
 8008ee6:	bf00      	nop
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	781a      	ldrb	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fa92 	bl	8008444 <SWAPBYTE>
 8008f20:	4603      	mov	r3, r0
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fa85 	bl	8008444 <SWAPBYTE>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fa78 	bl	8008444 <SWAPBYTE>
 8008f54:	4603      	mov	r3, r0
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	80da      	strh	r2, [r3, #6]
}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	@ 0x80
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fc6f 	bl	8009854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f76:	2100      	movs	r1, #0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fc6b 	bl	8009854 <USBD_LL_StallEP>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b086      	sub	sp, #24
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d036      	beq.n	800900a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f000 f836 	bl	8009012 <USBD_GetLen>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	4413      	add	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	7812      	ldrb	r2, [r2, #0]
 8008fbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4413      	add	r3, r2
 8008fcc:	2203      	movs	r2, #3
 8008fce:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fd6:	e013      	b.n	8009000 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	613b      	str	r3, [r7, #16]
    idx++;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	3301      	adds	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e7      	bne.n	8008fd8 <USBD_GetString+0x52>
 8009008:	e000      	b.n	800900c <USBD_GetString+0x86>
    return;
 800900a:	bf00      	nop
  }
}
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009022:	e005      	b.n	8009030 <USBD_GetLen+0x1e>
  {
    len++;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	3301      	adds	r3, #1
 8009028:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	3301      	adds	r3, #1
 800902e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1f5      	bne.n	8009024 <USBD_GetLen+0x12>
  }

  return len;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2202      	movs	r2, #2
 8009056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fc7a 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	2100      	movs	r1, #0
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fc69 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2203      	movs	r2, #3
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	2100      	movs	r1, #0
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fc6d 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	2100      	movs	r1, #0
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fc5c 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2204      	movs	r2, #4
 8009106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800910a:	2300      	movs	r3, #0
 800910c:	2200      	movs	r2, #0
 800910e:	2100      	movs	r1, #0
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fc28 	bl	8009966 <USBD_LL_Transmit>

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2205      	movs	r2, #5
 800912c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009130:	2300      	movs	r3, #0
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc36 	bl	80099a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800914c:	2200      	movs	r2, #0
 800914e:	4912      	ldr	r1, [pc, #72]	@ (8009198 <MX_USB_Device_Init+0x50>)
 8009150:	4812      	ldr	r0, [pc, #72]	@ (800919c <MX_USB_Device_Init+0x54>)
 8009152:	f7fe fed9 	bl	8007f08 <USBD_Init>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800915c:	f7f7 f97b 	bl	8000456 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009160:	490f      	ldr	r1, [pc, #60]	@ (80091a0 <MX_USB_Device_Init+0x58>)
 8009162:	480e      	ldr	r0, [pc, #56]	@ (800919c <MX_USB_Device_Init+0x54>)
 8009164:	f7fe ff00 	bl	8007f68 <USBD_RegisterClass>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800916e:	f7f7 f972 	bl	8000456 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009172:	490c      	ldr	r1, [pc, #48]	@ (80091a4 <MX_USB_Device_Init+0x5c>)
 8009174:	4809      	ldr	r0, [pc, #36]	@ (800919c <MX_USB_Device_Init+0x54>)
 8009176:	f7fe fe51 	bl	8007e1c <USBD_CDC_RegisterInterface>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009180:	f7f7 f969 	bl	8000456 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009184:	4805      	ldr	r0, [pc, #20]	@ (800919c <MX_USB_Device_Init+0x54>)
 8009186:	f7fe ff16 	bl	8007fb6 <USBD_Start>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009190:	f7f7 f961 	bl	8000456 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009194:	bf00      	nop
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000130 	.word	0x20000130
 800919c:	200002b8 	.word	0x200002b8
 80091a0:	20000018 	.word	0x20000018
 80091a4:	2000011c 	.word	0x2000011c

080091a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091ac:	2200      	movs	r2, #0
 80091ae:	4905      	ldr	r1, [pc, #20]	@ (80091c4 <CDC_Init_FS+0x1c>)
 80091b0:	4805      	ldr	r0, [pc, #20]	@ (80091c8 <CDC_Init_FS+0x20>)
 80091b2:	f7fe fe48 	bl	8007e46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091b6:	4905      	ldr	r1, [pc, #20]	@ (80091cc <CDC_Init_FS+0x24>)
 80091b8:	4803      	ldr	r0, [pc, #12]	@ (80091c8 <CDC_Init_FS+0x20>)
 80091ba:	f7fe fe62 	bl	8007e82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000d88 	.word	0x20000d88
 80091c8:	200002b8 	.word	0x200002b8
 80091cc:	20000588 	.word	0x20000588

080091d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	4613      	mov	r3, r2
 80091ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	2b23      	cmp	r3, #35	@ 0x23
 80091f4:	d84a      	bhi.n	800928c <CDC_Control_FS+0xac>
 80091f6:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <CDC_Control_FS+0x1c>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	0800928d 	.word	0x0800928d
 8009200:	0800928d 	.word	0x0800928d
 8009204:	0800928d 	.word	0x0800928d
 8009208:	0800928d 	.word	0x0800928d
 800920c:	0800928d 	.word	0x0800928d
 8009210:	0800928d 	.word	0x0800928d
 8009214:	0800928d 	.word	0x0800928d
 8009218:	0800928d 	.word	0x0800928d
 800921c:	0800928d 	.word	0x0800928d
 8009220:	0800928d 	.word	0x0800928d
 8009224:	0800928d 	.word	0x0800928d
 8009228:	0800928d 	.word	0x0800928d
 800922c:	0800928d 	.word	0x0800928d
 8009230:	0800928d 	.word	0x0800928d
 8009234:	0800928d 	.word	0x0800928d
 8009238:	0800928d 	.word	0x0800928d
 800923c:	0800928d 	.word	0x0800928d
 8009240:	0800928d 	.word	0x0800928d
 8009244:	0800928d 	.word	0x0800928d
 8009248:	0800928d 	.word	0x0800928d
 800924c:	0800928d 	.word	0x0800928d
 8009250:	0800928d 	.word	0x0800928d
 8009254:	0800928d 	.word	0x0800928d
 8009258:	0800928d 	.word	0x0800928d
 800925c:	0800928d 	.word	0x0800928d
 8009260:	0800928d 	.word	0x0800928d
 8009264:	0800928d 	.word	0x0800928d
 8009268:	0800928d 	.word	0x0800928d
 800926c:	0800928d 	.word	0x0800928d
 8009270:	0800928d 	.word	0x0800928d
 8009274:	0800928d 	.word	0x0800928d
 8009278:	0800928d 	.word	0x0800928d
 800927c:	0800928d 	.word	0x0800928d
 8009280:	0800928d 	.word	0x0800928d
 8009284:	0800928d 	.word	0x0800928d
 8009288:	0800928d 	.word	0x0800928d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800928c:	bf00      	nop
  }

  return (USBD_OK);
 800928e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	4805      	ldr	r0, [pc, #20]	@ (80092c0 <CDC_Receive_FS+0x24>)
 80092aa:	f7fe fdea 	bl	8007e82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092ae:	4804      	ldr	r0, [pc, #16]	@ (80092c0 <CDC_Receive_FS+0x24>)
 80092b0:	f7fe fe00 	bl	8007eb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200002b8 	.word	0x200002b8

080092c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2212      	movs	r2, #18
 80092f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092fa:	4b03      	ldr	r3, [pc, #12]	@ (8009308 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20000150 	.word	0x20000150

0800930c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2204      	movs	r2, #4
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	@ (800932c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20000164 	.word	0x20000164

08009330 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4907      	ldr	r1, [pc, #28]	@ (8009364 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009346:	4808      	ldr	r0, [pc, #32]	@ (8009368 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009348:	f7ff fe1d 	bl	8008f86 <USBD_GetString>
 800934c:	e004      	b.n	8009358 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4904      	ldr	r1, [pc, #16]	@ (8009364 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009352:	4805      	ldr	r0, [pc, #20]	@ (8009368 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009354:	f7ff fe17 	bl	8008f86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009358:	4b02      	ldr	r3, [pc, #8]	@ (8009364 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20001588 	.word	0x20001588
 8009368:	08009b80 	.word	0x08009b80

0800936c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	4904      	ldr	r1, [pc, #16]	@ (800938c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800937c:	4804      	ldr	r0, [pc, #16]	@ (8009390 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800937e:	f7ff fe02 	bl	8008f86 <USBD_GetString>
  return USBD_StrDesc;
 8009382:	4b02      	ldr	r3, [pc, #8]	@ (800938c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20001588 	.word	0x20001588
 8009390:	08009b98 	.word	0x08009b98

08009394 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	221a      	movs	r2, #26
 80093a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093a6:	f000 f843 	bl	8009430 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093aa:	4b02      	ldr	r3, [pc, #8]	@ (80093b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000168 	.word	0x20000168

080093b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4907      	ldr	r1, [pc, #28]	@ (80093ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093ce:	4808      	ldr	r0, [pc, #32]	@ (80093f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093d0:	f7ff fdd9 	bl	8008f86 <USBD_GetString>
 80093d4:	e004      	b.n	80093e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4904      	ldr	r1, [pc, #16]	@ (80093ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093da:	4805      	ldr	r0, [pc, #20]	@ (80093f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093dc:	f7ff fdd3 	bl	8008f86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e0:	4b02      	ldr	r3, [pc, #8]	@ (80093ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20001588 	.word	0x20001588
 80093f0:	08009bac 	.word	0x08009bac

080093f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	6039      	str	r1, [r7, #0]
 80093fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d105      	bne.n	8009412 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4907      	ldr	r1, [pc, #28]	@ (8009428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800940a:	4808      	ldr	r0, [pc, #32]	@ (800942c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800940c:	f7ff fdbb 	bl	8008f86 <USBD_GetString>
 8009410:	e004      	b.n	800941c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4904      	ldr	r1, [pc, #16]	@ (8009428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009416:	4805      	ldr	r0, [pc, #20]	@ (800942c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009418:	f7ff fdb5 	bl	8008f86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800941c:	4b02      	ldr	r3, [pc, #8]	@ (8009428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001588 	.word	0x20001588
 800942c:	08009bb8 	.word	0x08009bb8

08009430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009436:	4b0f      	ldr	r3, [pc, #60]	@ (8009474 <Get_SerialNum+0x44>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800943c:	4b0e      	ldr	r3, [pc, #56]	@ (8009478 <Get_SerialNum+0x48>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009442:	4b0e      	ldr	r3, [pc, #56]	@ (800947c <Get_SerialNum+0x4c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009456:	2208      	movs	r2, #8
 8009458:	4909      	ldr	r1, [pc, #36]	@ (8009480 <Get_SerialNum+0x50>)
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f814 	bl	8009488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009460:	2204      	movs	r2, #4
 8009462:	4908      	ldr	r1, [pc, #32]	@ (8009484 <Get_SerialNum+0x54>)
 8009464:	68b8      	ldr	r0, [r7, #8]
 8009466:	f000 f80f 	bl	8009488 <IntToUnicode>
  }
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	1fff7590 	.word	0x1fff7590
 8009478:	1fff7594 	.word	0x1fff7594
 800947c:	1fff7598 	.word	0x1fff7598
 8009480:	2000016a 	.word	0x2000016a
 8009484:	2000017a 	.word	0x2000017a

08009488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800949a:	2300      	movs	r3, #0
 800949c:	75fb      	strb	r3, [r7, #23]
 800949e:	e027      	b.n	80094f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d80b      	bhi.n	80094c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	0f1b      	lsrs	r3, r3, #28
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	4619      	mov	r1, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	440b      	add	r3, r1
 80094b8:	3230      	adds	r2, #48	@ 0x30
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e00a      	b.n	80094d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	0f1b      	lsrs	r3, r3, #28
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	4619      	mov	r1, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	440b      	add	r3, r1
 80094d0:	3237      	adds	r2, #55	@ 0x37
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	3301      	adds	r3, #1
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	3301      	adds	r3, #1
 80094ee:	75fb      	strb	r3, [r7, #23]
 80094f0:	7dfa      	ldrb	r2, [r7, #23]
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d3d3      	bcc.n	80094a0 <IntToUnicode+0x18>
  }
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b098      	sub	sp, #96	@ 0x60
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	2254      	movs	r2, #84	@ 0x54
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f000 faf9 	bl	8009b10 <memset>
  if(pcdHandle->Instance==USB)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a15      	ldr	r2, [pc, #84]	@ (8009578 <HAL_PCD_MspInit+0x70>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d122      	bne.n	800956e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800952c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800952e:	2300      	movs	r3, #0
 8009530:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009532:	f107 030c 	add.w	r3, r7, #12
 8009536:	4618      	mov	r0, r3
 8009538:	f7fa f9e4 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009542:	f7f6 ff88 	bl	8000456 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <HAL_PCD_MspInit+0x74>)
 8009548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954a:	4a0c      	ldr	r2, [pc, #48]	@ (800957c <HAL_PCD_MspInit+0x74>)
 800954c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009550:	6593      	str	r3, [r2, #88]	@ 0x58
 8009552:	4b0a      	ldr	r3, [pc, #40]	@ (800957c <HAL_PCD_MspInit+0x74>)
 8009554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800955a:	60bb      	str	r3, [r7, #8]
 800955c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	2014      	movs	r0, #20
 8009564:	f7f7 fb67 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009568:	2014      	movs	r0, #20
 800956a:	f7f7 fb7e 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800956e:	bf00      	nop
 8009570:	3760      	adds	r7, #96	@ 0x60
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40005c00 	.word	0x40005c00
 800957c:	40021000 	.word	0x40021000

08009580 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f7fe fd58 	bl	800804c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	440b      	add	r3, r1
 80095c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7fe fd92 	bl	80080f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	440b      	add	r3, r1
 80095fa:	3324      	adds	r3, #36	@ 0x24
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	4619      	mov	r1, r3
 8009602:	f7fe fddb 	bl	80081bc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe feef 	bl	8008400 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009632:	2301      	movs	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	795b      	ldrb	r3, [r3, #5]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d001      	beq.n	8009642 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800963e:	f7f6 ff0a 	bl	8000456 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009648:	7bfa      	ldrb	r2, [r7, #15]
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fe99 	bl	8008384 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fe45 	bl	80082e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fe94 	bl	80083a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7a5b      	ldrb	r3, [r3, #9]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009684:	4b04      	ldr	r3, [pc, #16]	@ (8009698 <HAL_PCD_SuspendCallback+0x30>)
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	4a03      	ldr	r2, [pc, #12]	@ (8009698 <HAL_PCD_SuspendCallback+0x30>)
 800968a:	f043 0306 	orr.w	r3, r3, #6
 800968e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	e000ed00 	.word	0xe000ed00

0800969c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7a5b      	ldrb	r3, [r3, #9]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096ac:	4b08      	ldr	r3, [pc, #32]	@ (80096d0 <HAL_PCD_ResumeCallback+0x34>)
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	4a07      	ldr	r2, [pc, #28]	@ (80096d0 <HAL_PCD_ResumeCallback+0x34>)
 80096b2:	f023 0306 	bic.w	r3, r3, #6
 80096b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096b8:	f000 f9f8 	bl	8009aac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fe84 	bl	80083d0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	e000ed00 	.word	0xe000ed00

080096d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096dc:	4a2b      	ldr	r2, [pc, #172]	@ (800978c <USBD_LL_Init+0xb8>)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a29      	ldr	r2, [pc, #164]	@ (800978c <USBD_LL_Init+0xb8>)
 80096e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096ec:	4b27      	ldr	r3, [pc, #156]	@ (800978c <USBD_LL_Init+0xb8>)
 80096ee:	4a28      	ldr	r2, [pc, #160]	@ (8009790 <USBD_LL_Init+0xbc>)
 80096f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096f2:	4b26      	ldr	r3, [pc, #152]	@ (800978c <USBD_LL_Init+0xb8>)
 80096f4:	2208      	movs	r2, #8
 80096f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096f8:	4b24      	ldr	r3, [pc, #144]	@ (800978c <USBD_LL_Init+0xb8>)
 80096fa:	2202      	movs	r2, #2
 80096fc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096fe:	4b23      	ldr	r3, [pc, #140]	@ (800978c <USBD_LL_Init+0xb8>)
 8009700:	2202      	movs	r2, #2
 8009702:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009704:	4b21      	ldr	r3, [pc, #132]	@ (800978c <USBD_LL_Init+0xb8>)
 8009706:	2200      	movs	r2, #0
 8009708:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800970a:	4b20      	ldr	r3, [pc, #128]	@ (800978c <USBD_LL_Init+0xb8>)
 800970c:	2200      	movs	r2, #0
 800970e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009710:	4b1e      	ldr	r3, [pc, #120]	@ (800978c <USBD_LL_Init+0xb8>)
 8009712:	2200      	movs	r2, #0
 8009714:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009716:	4b1d      	ldr	r3, [pc, #116]	@ (800978c <USBD_LL_Init+0xb8>)
 8009718:	2200      	movs	r2, #0
 800971a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800971c:	481b      	ldr	r0, [pc, #108]	@ (800978c <USBD_LL_Init+0xb8>)
 800971e:	f7f7 fe13 	bl	8001348 <HAL_PCD_Init>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009728:	f7f6 fe95 	bl	8000456 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009732:	2318      	movs	r3, #24
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	f7f9 facc 	bl	8002cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009742:	2358      	movs	r3, #88	@ 0x58
 8009744:	2200      	movs	r2, #0
 8009746:	2180      	movs	r1, #128	@ 0x80
 8009748:	f7f9 fac4 	bl	8002cd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009752:	23c0      	movs	r3, #192	@ 0xc0
 8009754:	2200      	movs	r2, #0
 8009756:	2181      	movs	r1, #129	@ 0x81
 8009758:	f7f9 fabc 	bl	8002cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009762:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009766:	2200      	movs	r2, #0
 8009768:	2101      	movs	r1, #1
 800976a:	f7f9 fab3 	bl	8002cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009778:	2200      	movs	r2, #0
 800977a:	2182      	movs	r1, #130	@ 0x82
 800977c:	f7f9 faaa 	bl	8002cd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20001788 	.word	0x20001788
 8009790:	40005c00 	.word	0x40005c00

08009794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f7 fe9a 	bl	80014e4 <HAL_PCD_Start>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f97e 	bl	8009ab8 <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	461a      	mov	r2, r3
 80097d8:	4603      	mov	r3, r0
 80097da:	70fb      	strb	r3, [r7, #3]
 80097dc:	460b      	mov	r3, r1
 80097de:	70bb      	strb	r3, [r7, #2]
 80097e0:	4613      	mov	r3, r2
 80097e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80097f2:	78bb      	ldrb	r3, [r7, #2]
 80097f4:	883a      	ldrh	r2, [r7, #0]
 80097f6:	78f9      	ldrb	r1, [r7, #3]
 80097f8:	f7f7 ffe1 	bl	80017be <HAL_PCD_EP_Open>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f958 	bl	8009ab8 <USBD_Get_USB_Status>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980c:	7bbb      	ldrb	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009830:	78fa      	ldrb	r2, [r7, #3]
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7f8 f81f 	bl	8001878 <HAL_PCD_EP_Close>
 800983a:	4603      	mov	r3, r0
 800983c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f939 	bl	8009ab8 <USBD_Get_USB_Status>
 8009846:	4603      	mov	r3, r0
 8009848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984a:	7bbb      	ldrb	r3, [r7, #14]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7f8 f8c8 	bl	8001a08 <HAL_PCD_EP_SetStall>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f91a 	bl	8009ab8 <USBD_Get_USB_Status>
 8009884:	4603      	mov	r3, r0
 8009886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009888:	7bbb      	ldrb	r3, [r7, #14]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f8 f8fb 	bl	8001aac <HAL_PCD_EP_ClrStall>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f8fb 	bl	8009ab8 <USBD_Get_USB_Status>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80098e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da0b      	bge.n	8009904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	440b      	add	r3, r1
 80098fe:	3312      	adds	r3, #18
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	e00b      	b.n	800991c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	440b      	add	r3, r1
 8009916:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800991a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7f7 ff15 	bl	8001776 <HAL_PCD_SetAddress>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f8b0 	bl	8009ab8 <USBD_Get_USB_Status>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995c:	7bbb      	ldrb	r3, [r7, #14]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
 8009972:	460b      	mov	r3, r1
 8009974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009984:	7af9      	ldrb	r1, [r7, #11]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	f7f8 f806 	bl	800199a <HAL_PCD_EP_Transmit>
 800998e:	4603      	mov	r3, r0
 8009990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f88f 	bl	8009ab8 <USBD_Get_USB_Status>
 800999a:	4603      	mov	r3, r0
 800999c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800999e:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	460b      	mov	r3, r1
 80099b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099c6:	7af9      	ldrb	r1, [r7, #11]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f7f7 ff9c 	bl	8001908 <HAL_PCD_EP_Receive>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f86e 	bl	8009ab8 <USBD_Get_USB_Status>
 80099dc:	4603      	mov	r3, r0
 80099de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7f7 ffb2 	bl	800196a <HAL_PCD_EP_GetRxCount>
 8009a06:	4603      	mov	r3, r0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <HAL_PCDEx_LPM_Callback+0x18>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d013      	beq.n	8009a4e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a26:	e023      	b.n	8009a70 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7a5b      	ldrb	r3, [r3, #9]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d007      	beq.n	8009a40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a30:	f000 f83c 	bl	8009aac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a34:	4b10      	ldr	r3, [pc, #64]	@ (8009a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	4a0f      	ldr	r2, [pc, #60]	@ (8009a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a3a:	f023 0306 	bic.w	r3, r3, #6
 8009a3e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fcc2 	bl	80083d0 <USBD_LL_Resume>
    break;
 8009a4c:	e010      	b.n	8009a70 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fca5 	bl	80083a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	7a5b      	ldrb	r3, [r3, #9]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a62:	4b05      	ldr	r3, [pc, #20]	@ (8009a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a68:	f043 0306 	orr.w	r3, r3, #6
 8009a6c:	6113      	str	r3, [r2, #16]
    break;
 8009a6e:	bf00      	nop
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a84:	4b03      	ldr	r3, [pc, #12]	@ (8009a94 <USBD_static_malloc+0x18>)
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20001a64 	.word	0x20001a64

08009a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009ab0:	f7f6 fc86 	bl	80003c0 <SystemClock_Config>
}
 8009ab4:	bf00      	nop
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d817      	bhi.n	8009afc <USBD_Get_USB_Status+0x44>
 8009acc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <USBD_Get_USB_Status+0x1c>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009ae5 	.word	0x08009ae5
 8009ad8:	08009aeb 	.word	0x08009aeb
 8009adc:	08009af1 	.word	0x08009af1
 8009ae0:	08009af7 	.word	0x08009af7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae8:	e00b      	b.n	8009b02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	73fb      	strb	r3, [r7, #15]
    break;
 8009aee:	e008      	b.n	8009b02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009af0:	2301      	movs	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
    break;
 8009af4:	e005      	b.n	8009b02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	73fb      	strb	r3, [r7, #15]
    break;
 8009afa:	e002      	b.n	8009b02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009afc:	2303      	movs	r3, #3
 8009afe:	73fb      	strb	r3, [r7, #15]
    break;
 8009b00:	bf00      	nop
  }
  return usb_status;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <__libc_init_array>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	4d0d      	ldr	r5, [pc, #52]	@ (8009b58 <__libc_init_array+0x38>)
 8009b24:	4c0d      	ldr	r4, [pc, #52]	@ (8009b5c <__libc_init_array+0x3c>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	d109      	bne.n	8009b44 <__libc_init_array+0x24>
 8009b30:	4d0b      	ldr	r5, [pc, #44]	@ (8009b60 <__libc_init_array+0x40>)
 8009b32:	4c0c      	ldr	r4, [pc, #48]	@ (8009b64 <__libc_init_array+0x44>)
 8009b34:	f000 f818 	bl	8009b68 <_init>
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	d105      	bne.n	8009b4e <__libc_init_array+0x2e>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b48:	4798      	blx	r3
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7ee      	b.n	8009b2c <__libc_init_array+0xc>
 8009b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b52:	4798      	blx	r3
 8009b54:	3601      	adds	r6, #1
 8009b56:	e7f2      	b.n	8009b3e <__libc_init_array+0x1e>
 8009b58:	08009bd8 	.word	0x08009bd8
 8009b5c:	08009bd8 	.word	0x08009bd8
 8009b60:	08009bd8 	.word	0x08009bd8
 8009b64:	08009bdc 	.word	0x08009bdc

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
