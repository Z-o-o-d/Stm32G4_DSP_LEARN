
PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d04  08002d04  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d04  08002d04  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d04  08002d04  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d08  08002d08  00003d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002d18  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002d18  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a290  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  0000e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0000fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000928  00000000  00000000  000106e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002484b  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c224  00000000  00000000  00035853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f106e  00000000  00000000  00041a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d8  00000000  00000000  00132b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00135d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002cdc 	.word	0x08002cdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002cdc 	.word	0x08002cdc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 faf2 	bl	8000806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f851 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f991 	bl	800054c <MX_GPIO_Init>
  MX_TIM2_Init();
 800022a:	f000 f897 	bl	800035c <MX_TIM2_Init>
  MX_TIM3_Init();
 800022e:	f000 f917 	bl	8000460 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000232:	4823      	ldr	r0, [pc, #140]	@ (80002c0 <main+0xa8>)
 8000234:	f001 fbe2 	bl	80019fc <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 8000238:	4822      	ldr	r0, [pc, #136]	@ (80002c4 <main+0xac>)
 800023a:	f001 fbdf 	bl	80019fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800023e:	2108      	movs	r1, #8
 8000240:	4820      	ldr	r0, [pc, #128]	@ (80002c4 <main+0xac>)
 8000242:	f001 fcad 	bl	8001ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000246:	210c      	movs	r1, #12
 8000248:	481e      	ldr	r0, [pc, #120]	@ (80002c4 <main+0xac>)
 800024a:	f001 fca9 	bl	8001ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800024e:	210c      	movs	r1, #12
 8000250:	481b      	ldr	r0, [pc, #108]	@ (80002c0 <main+0xa8>)
 8000252:	f001 fca5 	bl	8001ba0 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
      // PWM通道CH1-3分别对应三个颜色，下面示例三个颜色一起呼吸灯
      // 0-99为占空比�??0为最小亮度，99为最大亮�??
      // �??7ms调整�??次占空比，从0逐渐增加�??99
      for (int period = 0; period < 100; period++) {
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e011      	b.n	8000280 <main+0x68>
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period);
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, period);
 800025c:	4b19      	ldr	r3, [pc, #100]	@ (80002c4 <main+0xac>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	641a      	str	r2, [r3, #64]	@ 0x40
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, period);
 8000264:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <main+0xa8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	641a      	str	r2, [r3, #64]	@ 0x40

          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, period);
 800026c:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <main+0xac>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	63da      	str	r2, [r3, #60]	@ 0x3c
          HAL_Delay(7);
 8000274:	2007      	movs	r0, #7
 8000276:	f000 fb37 	bl	80008e8 <HAL_Delay>
      for (int period = 0; period < 100; period++) {
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b63      	cmp	r3, #99	@ 0x63
 8000284:	ddea      	ble.n	800025c <main+0x44>
      }
      // �??99逐渐减小�??0
      for (int period = 99; period >= 0; period--) {
 8000286:	2363      	movs	r3, #99	@ 0x63
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	e011      	b.n	80002b0 <main+0x98>
//          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period);
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, period);
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <main+0xac>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	641a      	str	r2, [r3, #64]	@ 0x40
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, period);
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <main+0xac>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	63da      	str	r2, [r3, #60]	@ 0x3c
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, period);
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <main+0xa8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	641a      	str	r2, [r3, #64]	@ 0x40


          HAL_Delay(7);
 80002a4:	2007      	movs	r0, #7
 80002a6:	f000 fb1f 	bl	80008e8 <HAL_Delay>
      for (int period = 99; period >= 0; period--) {
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	603b      	str	r3, [r7, #0]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	daea      	bge.n	800028c <main+0x74>
      }
      HAL_Delay(100);
 80002b6:	2064      	movs	r0, #100	@ 0x64
 80002b8:	f000 fb16 	bl	80008e8 <HAL_Delay>
      for (int period = 0; period < 100; period++) {
 80002bc:	e7cb      	b.n	8000256 <main+0x3e>
 80002be:	bf00      	nop
 80002c0:	20000074 	.word	0x20000074
 80002c4:	20000028 	.word	0x20000028

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2238      	movs	r2, #56	@ 0x38
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fcd4 	bl	8002c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 fd84 	bl	8000df8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f0:	2301      	movs	r3, #1
 80002f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	2303      	movs	r3, #3
 8000300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000302:	2302      	movs	r3, #2
 8000304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000306:	2355      	movs	r3, #85	@ 0x55
 8000308:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fe20 	bl	8000f60 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000326:	f000 f94d 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f91e 	bl	8001584 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800034e:	f000 f939 	bl	80005c4 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3750      	adds	r7, #80	@ 0x50
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08e      	sub	sp, #56	@ 0x38
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037c:	463b      	mov	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038e:	4b33      	ldr	r3, [pc, #204]	@ (800045c <MX_TIM2_Init+0x100>)
 8000390:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700;
 8000396:	4b31      	ldr	r3, [pc, #196]	@ (800045c <MX_TIM2_Init+0x100>)
 8000398:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800039c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039e:	4b2f      	ldr	r3, [pc, #188]	@ (800045c <MX_TIM2_Init+0x100>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80003a4:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <MX_TIM2_Init+0x100>)
 80003a6:	2264      	movs	r2, #100	@ 0x64
 80003a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003aa:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <MX_TIM2_Init+0x100>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b0:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <MX_TIM2_Init+0x100>)
 80003b2:	2280      	movs	r2, #128	@ 0x80
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b6:	4829      	ldr	r0, [pc, #164]	@ (800045c <MX_TIM2_Init+0x100>)
 80003b8:	f001 fac8 	bl	800194c <HAL_TIM_Base_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003c2:	f000 f8ff 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003d0:	4619      	mov	r1, r3
 80003d2:	4822      	ldr	r0, [pc, #136]	@ (800045c <MX_TIM2_Init+0x100>)
 80003d4:	f001 fe0a 	bl	8001fec <HAL_TIM_ConfigClockSource>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003de:	f000 f8f1 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e2:	481e      	ldr	r0, [pc, #120]	@ (800045c <MX_TIM2_Init+0x100>)
 80003e4:	f001 fb7a 	bl	8001adc <HAL_TIM_PWM_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003ee:	f000 f8e9 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	4619      	mov	r1, r3
 8000400:	4816      	ldr	r0, [pc, #88]	@ (800045c <MX_TIM2_Init+0x100>)
 8000402:	f002 fba9 	bl	8002b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800040c:	f000 f8da 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000410:	2360      	movs	r3, #96	@ 0x60
 8000412:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000418:	2300      	movs	r3, #0
 800041a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000420:	463b      	mov	r3, r7
 8000422:	2208      	movs	r2, #8
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	@ (800045c <MX_TIM2_Init+0x100>)
 8000428:	f001 fccc 	bl	8001dc4 <HAL_TIM_PWM_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000432:	f000 f8c7 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	220c      	movs	r2, #12
 800043a:	4619      	mov	r1, r3
 800043c:	4807      	ldr	r0, [pc, #28]	@ (800045c <MX_TIM2_Init+0x100>)
 800043e:	f001 fcc1 	bl	8001dc4 <HAL_TIM_PWM_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000448:	f000 f8bc 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800044c:	4803      	ldr	r0, [pc, #12]	@ (800045c <MX_TIM2_Init+0x100>)
 800044e:	f000 f915 	bl	800067c <HAL_TIM_MspPostInit>

}
 8000452:	bf00      	nop
 8000454:	3738      	adds	r7, #56	@ 0x38
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000028 	.word	0x20000028

08000460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08e      	sub	sp, #56	@ 0x38
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	f107 031c 	add.w	r3, r7, #28
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000492:	4b2c      	ldr	r3, [pc, #176]	@ (8000544 <MX_TIM3_Init+0xe4>)
 8000494:	4a2c      	ldr	r2, [pc, #176]	@ (8000548 <MX_TIM3_Init+0xe8>)
 8000496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170;
 8000498:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <MX_TIM3_Init+0xe4>)
 800049a:	22aa      	movs	r2, #170	@ 0xaa
 800049c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b29      	ldr	r3, [pc, #164]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80004a4:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004a6:	2264      	movs	r2, #100	@ 0x64
 80004a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b26      	ldr	r3, [pc, #152]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b24      	ldr	r3, [pc, #144]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004b6:	4823      	ldr	r0, [pc, #140]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004b8:	f001 fa48 	bl	800194c <HAL_TIM_Base_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80004c2:	f000 f87f 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004d0:	4619      	mov	r1, r3
 80004d2:	481c      	ldr	r0, [pc, #112]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004d4:	f001 fd8a 	bl	8001fec <HAL_TIM_ConfigClockSource>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80004de:	f000 f871 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004e2:	4818      	ldr	r0, [pc, #96]	@ (8000544 <MX_TIM3_Init+0xe4>)
 80004e4:	f001 fafa 	bl	8001adc <HAL_TIM_PWM_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80004ee:	f000 f869 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	4619      	mov	r1, r3
 8000500:	4810      	ldr	r0, [pc, #64]	@ (8000544 <MX_TIM3_Init+0xe4>)
 8000502:	f002 fb29 	bl	8002b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800050c:	f000 f85a 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000510:	2360      	movs	r3, #96	@ 0x60
 8000512:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	220c      	movs	r2, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4807      	ldr	r0, [pc, #28]	@ (8000544 <MX_TIM3_Init+0xe4>)
 8000528:	f001 fc4c 	bl	8001dc4 <HAL_TIM_PWM_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000532:	f000 f847 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000536:	4803      	ldr	r0, [pc, #12]	@ (8000544 <MX_TIM3_Init+0xe4>)
 8000538:	f000 f8a0 	bl	800067c <HAL_TIM_MspPostInit>

}
 800053c:	bf00      	nop
 800053e:	3738      	adds	r7, #56	@ 0x38
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000074 	.word	0x20000074
 8000548:	40000400 	.word	0x40000400

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a1a      	ldr	r2, [pc, #104]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_GPIO_Init+0x74>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a14      	ldr	r2, [pc, #80]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0320 	and.w	r3, r3, #32
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_GPIO_Init+0x74>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_GPIO_Init+0x74>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <MX_GPIO_Init+0x74>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_GPIO_Init+0x74>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <Error_Handler+0x8>

080005d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000606:	f000 fc9b 	bl	8000f40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000628:	d10c      	bne.n	8000644 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062e:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6593      	str	r3, [r2, #88]	@ 0x58
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000642:	e010      	b.n	8000666 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <HAL_TIM_Base_MspInit+0x60>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d10b      	bne.n	8000666 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000652:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6593      	str	r3, [r2, #88]	@ 0x58
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_TIM_Base_MspInit+0x5c>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40000400 	.word	0x40000400

0800067c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800069c:	d11d      	bne.n	80006da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006bc:	2312      	movs	r3, #18
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006c8:	2301      	movs	r3, #1
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <HAL_TIM_MspPostInit+0xac>)
 80006d4:	f000 fa0e 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006d8:	e020      	b.n	800071c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a13      	ldr	r2, [pc, #76]	@ (800072c <HAL_TIM_MspPostInit+0xb0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d11b      	bne.n	800071c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <HAL_TIM_MspPostInit+0xa8>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800070c:	230a      	movs	r3, #10
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <HAL_TIM_MspPostInit+0xac>)
 8000718:	f000 f9ec 	bl	8000af4 <HAL_GPIO_Init>
}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	@ 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400
 800072c:	40000400 	.word	0x40000400

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f891 	bl	80008ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <SystemInit+0x20>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <SystemInit+0x20>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff ffea 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 fa57 	bl	8002c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007e6:	f7ff fd17 	bl	8000218 <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   r0, =_estack
 80007ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	08002d0c 	.word	0x08002d0c
  ldr r2, =_sbss
 80007fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000800:	200000c4 	.word	0x200000c4

08000804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_2_IRQHandler>

08000806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f93d 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f80e 	bl	8000838 <HAL_InitTick>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	e001      	b.n	800082c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000828:	f7ff fed2 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082c:	79fb      	ldrb	r3, [r7, #7]

}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_InitTick+0x68>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d022      	beq.n	8000892 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_InitTick+0x6c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_InitTick+0x68>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000858:	fbb1 f3f3 	udiv	r3, r1, r3
 800085c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f93a 	bl	8000ada <HAL_SYSTICK_Config>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10f      	bne.n	800088c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d809      	bhi.n	8000886 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000872:	2200      	movs	r2, #0
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	f04f 30ff 	mov.w	r0, #4294967295
 800087a:	f000 f914 	bl	8000aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_InitTick+0x70>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	e007      	b.n	8000896 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e004      	b.n	8000896 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e001      	b.n	8000896 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000004 	.word	0x20000004

080008ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_IncTick+0x1c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <HAL_IncTick+0x20>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a03      	ldr	r2, [pc, #12]	@ (80008c8 <HAL_IncTick+0x1c>)
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	200000c0 	.word	0x200000c0
 80008cc:	20000008 	.word	0x20000008

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200000c0 	.word	0x200000c0

080008e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff ffee 	bl	80008d0 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d004      	beq.n	800090c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_Delay+0x40>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4413      	add	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090c:	bf00      	nop
 800090e:	f7ff ffdf 	bl	80008d0 <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	429a      	cmp	r2, r3
 800091c:	d8f7      	bhi.n	800090e <HAL_Delay+0x26>
  {
  }
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	@ (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	@ 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff47 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff90 	bl	80009e4 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5f 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb2 	bl	8000a4c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b02:	e15a      	b.n	8000dba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 814c 	beq.w	8000db4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d005      	beq.n	8000b34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d130      	bne.n	8000b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68da      	ldr	r2, [r3, #12]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	091b      	lsrs	r3, r3, #4
 8000b80:	f003 0201 	and.w	r2, r3, #1
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d017      	beq.n	8000bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d123      	bne.n	8000c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	08da      	lsrs	r2, r3, #3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3208      	adds	r2, #8
 8000be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	08da      	lsrs	r2, r3, #3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3208      	adds	r2, #8
 8000c20:	6939      	ldr	r1, [r7, #16]
 8000c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0203 	and.w	r2, r3, #3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80a6 	beq.w	8000db4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c68:	4b5b      	ldr	r3, [pc, #364]	@ (8000dd8 <HAL_GPIO_Init+0x2e4>)
 8000c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8000dd8 <HAL_GPIO_Init+0x2e4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c74:	4b58      	ldr	r3, [pc, #352]	@ (8000dd8 <HAL_GPIO_Init+0x2e4>)
 8000c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c80:	4a56      	ldr	r2, [pc, #344]	@ (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000caa:	d01f      	beq.n	8000cec <HAL_GPIO_Init+0x1f8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4c      	ldr	r2, [pc, #304]	@ (8000de0 <HAL_GPIO_Init+0x2ec>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d019      	beq.n	8000ce8 <HAL_GPIO_Init+0x1f4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a4b      	ldr	r2, [pc, #300]	@ (8000de4 <HAL_GPIO_Init+0x2f0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1f0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000de8 <HAL_GPIO_Init+0x2f4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1ec>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a49      	ldr	r2, [pc, #292]	@ (8000dec <HAL_GPIO_Init+0x2f8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1e8>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a48      	ldr	r2, [pc, #288]	@ (8000df0 <HAL_GPIO_Init+0x2fc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1e4>
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e00a      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000cd8:	2306      	movs	r3, #6
 8000cda:	e008      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e006      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e004      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000cec:	2300      	movs	r3, #0
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	f002 0203 	and.w	r2, r2, #3
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	4093      	lsls	r3, r2
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cfe:	4937      	ldr	r1, [pc, #220]	@ (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d0c:	4b39      	ldr	r3, [pc, #228]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d30:	4a30      	ldr	r2, [pc, #192]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d36:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d5a:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dae:	4a11      	ldr	r2, [pc, #68]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f47f ae9d 	bne.w	8000b04 <HAL_GPIO_Init+0x10>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	371c      	adds	r7, #28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	48000400 	.word	0x48000400
 8000de4:	48000800 	.word	0x48000800
 8000de8:	48000c00 	.word	0x48000c00
 8000dec:	48001000 	.word	0x48001000
 8000df0:	48001400 	.word	0x48001400
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d141      	bne.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e06:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e12:	d131      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e14:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1a:	4a46      	ldr	r2, [pc, #280]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e2c:	4a41      	ldr	r2, [pc, #260]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e34:	4b40      	ldr	r3, [pc, #256]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2232      	movs	r2, #50	@ 0x32
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4a:	e002      	b.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e52:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e5e:	d102      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f2      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e66:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e72:	d158      	bne.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e057      	b.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e78:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e88:	e04d      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e90:	d141      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e9e:	d131      	bne.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea6:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb0:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2232      	movs	r2, #50	@ 0x32
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	0c9b      	lsrs	r3, r3, #18
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed6:	e002      	b.n	8000ede <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eea:	d102      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f2      	bne.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000efe:	d112      	bne.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e011      	b.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f14:	e007      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40007000 	.word	0x40007000
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	431bde83 	.word	0x431bde83

08000f40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4e:	6093      	str	r3, [r2, #8]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e2fe      	b.n	8001570 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d075      	beq.n	800106a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f7e:	4b97      	ldr	r3, [pc, #604]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f88:	4b94      	ldr	r3, [pc, #592]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d102      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3e>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d002      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x44>
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d10b      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	4b8d      	ldr	r3, [pc, #564]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d05b      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d157      	bne.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e2d9      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x74>
 8000fc6:	4b85      	ldr	r3, [pc, #532]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a84      	ldr	r2, [pc, #528]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x98>
 8000fde:	4b7f      	ldr	r3, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b7c      	ldr	r3, [pc, #496]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7b      	ldr	r2, [pc, #492]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000ff8:	4b78      	ldr	r3, [pc, #480]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a77      	ldr	r2, [pc, #476]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b75      	ldr	r3, [pc, #468]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a74      	ldr	r2, [pc, #464]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fc5a 	bl	80008d0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fc56 	bl	80008d0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e29e      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001032:	4b6a      	ldr	r3, [pc, #424]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xc0>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001040:	f7ff fc46 	bl	80008d0 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc42 	bl	80008d0 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e28a      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105a:	4b60      	ldr	r3, [pc, #384]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0xe8>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d075      	beq.n	8001162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4b59      	ldr	r3, [pc, #356]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001080:	4b56      	ldr	r3, [pc, #344]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b0c      	cmp	r3, #12
 800108e:	d102      	bne.n	8001096 <HAL_RCC_OscConfig+0x136>
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d002      	beq.n	800109c <HAL_RCC_OscConfig+0x13c>
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d11f      	bne.n	80010dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x154>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e25d      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	061b      	lsls	r3, r3, #24
 80010c2:	4946      	ldr	r1, [pc, #280]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <HAL_RCC_OscConfig+0x280>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fbb3 	bl	8000838 <HAL_InitTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d043      	beq.n	8001160 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e249      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d023      	beq.n	800112c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3c      	ldr	r2, [pc, #240]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fbee 	bl	80008d0 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fbea 	bl	80008d0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e232      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	061b      	lsls	r3, r3, #24
 8001124:	492d      	ldr	r1, [pc, #180]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e01a      	b.n	8001162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112c:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fbca 	bl	80008d0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001140:	f7ff fbc6 	bl	80008d0 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e20e      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x1e0>
 800115e:	e000      	b.n	8001162 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d041      	beq.n	80011f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d01c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800117c:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fba3 	bl	80008d0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fb9f 	bl	80008d0 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1e7      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80011a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0ef      	beq.n	800118e <HAL_RCC_OscConfig+0x22e>
 80011ae:	e020      	b.n	80011f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <HAL_RCC_OscConfig+0x27c>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c0:	f7ff fb86 	bl	80008d0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c6:	e00d      	b.n	80011e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fb82 	bl	80008d0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d906      	bls.n	80011e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1ca      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80011e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ea      	bne.n	80011c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80a6 	beq.w	800134c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001204:	4b84      	ldr	r3, [pc, #528]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x2b4>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x2b6>
 8001214:	2300      	movs	r3, #0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00d      	beq.n	8001236 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b7f      	ldr	r3, [pc, #508]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	4a7e      	ldr	r2, [pc, #504]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	@ 0x58
 8001226:	4b7c      	ldr	r3, [pc, #496]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001236:	4b79      	ldr	r3, [pc, #484]	@ (800141c <HAL_RCC_OscConfig+0x4bc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001242:	4b76      	ldr	r3, [pc, #472]	@ (800141c <HAL_RCC_OscConfig+0x4bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	@ (800141c <HAL_RCC_OscConfig+0x4bc>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb3f 	bl	80008d0 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fb3b 	bl	80008d0 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e183      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001268:	4b6c      	ldr	r3, [pc, #432]	@ (800141c <HAL_RCC_OscConfig+0x4bc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <HAL_RCC_OscConfig+0x32e>
 800127c:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001282:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800128c:	e024      	b.n	80012d8 <HAL_RCC_OscConfig+0x378>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d110      	bne.n	80012b8 <HAL_RCC_OscConfig+0x358>
 8001296:	4b60      	ldr	r3, [pc, #384]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129c:	4a5e      	ldr	r2, [pc, #376]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012b6:	e00f      	b.n	80012d8 <HAL_RCC_OscConfig+0x378>
 80012b8:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012be:	4a56      	ldr	r2, [pc, #344]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ce:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d016      	beq.n	800130e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff faf6 	bl	80008d0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff faf2 	bl	80008d0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e138      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ed      	beq.n	80012e8 <HAL_RCC_OscConfig+0x388>
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff fadf 	bl	80008d0 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fadb 	bl	80008d0 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e121      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800132c:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ed      	bne.n	8001316 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d105      	bne.n	800134c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	4a34      	ldr	r2, [pc, #208]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01c      	beq.n	800139a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001366:	4a2c      	ldr	r2, [pc, #176]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff faae 	bl	80008d0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001378:	f7ff faaa 	bl	80008d0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0f2      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800138c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ef      	beq.n	8001378 <HAL_RCC_OscConfig+0x418>
 8001398:	e01b      	b.n	80013d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 800139c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa91 	bl	80008d0 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b2:	f7ff fa8d 	bl	80008d0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0d5      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80013c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ef      	bne.n	80013b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80c9 	beq.w	800156e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	f000 8083 	beq.w	80014f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d15e      	bne.n	80014b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_RCC_OscConfig+0x4b8>)
 80013f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa67 	bl	80008d0 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001404:	e00c      	b.n	8001420 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fa63 	bl	80008d0 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d905      	bls.n	8001420 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ab      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001420:	4b55      	ldr	r3, [pc, #340]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ec      	bne.n	8001406 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142c:	4b52      	ldr	r3, [pc, #328]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	4b52      	ldr	r3, [pc, #328]	@ (800157c <HAL_RCC_OscConfig+0x61c>)
 8001432:	4013      	ands	r3, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6a11      	ldr	r1, [r2, #32]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800143c:	3a01      	subs	r2, #1
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001446:	0212      	lsls	r2, r2, #8
 8001448:	4311      	orrs	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800144e:	0852      	lsrs	r2, r2, #1
 8001450:	3a01      	subs	r2, #1
 8001452:	0552      	lsls	r2, r2, #21
 8001454:	4311      	orrs	r1, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800145a:	0852      	lsrs	r2, r2, #1
 800145c:	3a01      	subs	r2, #1
 800145e:	0652      	lsls	r2, r2, #25
 8001460:	4311      	orrs	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001466:	06d2      	lsls	r2, r2, #27
 8001468:	430a      	orrs	r2, r1
 800146a:	4943      	ldr	r1, [pc, #268]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 800146c:	4313      	orrs	r3, r2
 800146e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a40      	ldr	r2, [pc, #256]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 8001476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800147c:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a3d      	ldr	r2, [pc, #244]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 8001482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001486:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fa22 	bl	80008d0 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fa1e 	bl	80008d0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e066      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x530>
 80014ae:	e05e      	b.n	800156e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fa08 	bl	80008d0 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fa04 	bl	80008d0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e04c      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	4924      	ldr	r1, [pc, #144]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <HAL_RCC_OscConfig+0x620>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	60cb      	str	r3, [r1, #12]
 80014ee:	e03e      	b.n	800156e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e039      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_RCC_OscConfig+0x618>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0203 	and.w	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	429a      	cmp	r2, r3
 800150e:	d12c      	bne.n	800156a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	3b01      	subs	r3, #1
 800151c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d123      	bne.n	800156a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11b      	bne.n	800156a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d113      	bne.n	800156a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d109      	bne.n	800156a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	019f800c 	.word	0x019f800c
 8001580:	feeefffc 	.word	0xfeeefffc

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e11e      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b91      	ldr	r3, [pc, #580]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d910      	bls.n	80015cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b8e      	ldr	r3, [pc, #568]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 020f 	bic.w	r2, r3, #15
 80015b2:	498c      	ldr	r1, [pc, #560]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b8a      	ldr	r3, [pc, #552]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e106      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d073      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d129      	bne.n	8001634 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e0:	4b81      	ldr	r3, [pc, #516]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0f4      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015f0:	f000 f966 	bl	80018c0 <RCC_GetSysClockFreqFromPLLSource>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4a7c      	ldr	r2, [pc, #496]	@ (80017ec <HAL_RCC_ClockConfig+0x268>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d93f      	bls.n	800167e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015fe:	4b7a      	ldr	r3, [pc, #488]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001612:	2b00      	cmp	r3, #0
 8001614:	d033      	beq.n	800167e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d12f      	bne.n	800167e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800161e:	4b72      	ldr	r3, [pc, #456]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001626:	4a70      	ldr	r2, [pc, #448]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800162c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e024      	b.n	800167e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d107      	bne.n	800164c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163c:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0c6      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0be      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800165c:	f000 f8ce 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 8001660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4a61      	ldr	r2, [pc, #388]	@ (80017ec <HAL_RCC_ClockConfig+0x268>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d909      	bls.n	800167e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800166a:	4b5f      	ldr	r3, [pc, #380]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001672:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b5a      	ldr	r3, [pc, #360]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4957      	ldr	r1, [pc, #348]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001690:	f7ff f91e 	bl	80008d0 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff f91a 	bl	80008d0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e095      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a42      	ldr	r2, [pc, #264]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80016de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016f0:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80016f8:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80016fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4936      	ldr	r1, [pc, #216]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
 8001712:	e008      	b.n	8001726 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b80      	cmp	r3, #128	@ 0x80
 8001718:	d105      	bne.n	8001726 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800171a:	4b33      	ldr	r3, [pc, #204]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4a32      	ldr	r2, [pc, #200]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 8001720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001724:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001726:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d21d      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001734:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 020f 	bic.w	r2, r3, #15
 800173c:	4929      	ldr	r1, [pc, #164]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001744:	f7ff f8c4 	bl	80008d0 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff f8c0 	bl	80008d0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e03b      	b.n	80017da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_RCC_ClockConfig+0x260>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d1ed      	bne.n	800174c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4917      	ldr	r1, [pc, #92]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490f      	ldr	r1, [pc, #60]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ae:	f000 f825 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_RCC_ClockConfig+0x264>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <HAL_RCC_ClockConfig+0x26c>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_RCC_ClockConfig+0x270>)
 80017cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_RCC_ClockConfig+0x274>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f830 	bl	8000838 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	04c4b400 	.word	0x04c4b400
 80017f0:	08002cf4 	.word	0x08002cf4
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001802:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d102      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e047      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d102      	bne.n	8001826 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001820:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	e03e      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d136      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183c:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3301      	adds	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d10c      	bne.n	800186a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001850:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	4a16      	ldr	r2, [pc, #88]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185a:	68d2      	ldr	r2, [r2, #12]
 800185c:	0a12      	lsrs	r2, r2, #8
 800185e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
      break;
 8001868:	e00c      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001874:	68d2      	ldr	r2, [r2, #12]
 8001876:	0a12      	lsrs	r2, r2, #8
 8001878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
      break;
 8001882:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0e5b      	lsrs	r3, r3, #25
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	3301      	adds	r3, #1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	fbb2 f3f3 	udiv	r3, r2, r3
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e001      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018a4:	693b      	ldr	r3, [r7, #16]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	00f42400 	.word	0x00f42400
 80018bc:	007a1200 	.word	0x007a1200

080018c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d10c      	bne.n	80018fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e4:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ee:	68d2      	ldr	r2, [r2, #12]
 80018f0:	0a12      	lsrs	r2, r2, #8
 80018f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
    break;
 80018fc:	e00c      	b.n	8001918 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	0a12      	lsrs	r2, r2, #8
 800190c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    break;
 8001916:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0e5b      	lsrs	r3, r3, #25
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001932:	687b      	ldr	r3, [r7, #4]
}
 8001934:	4618      	mov	r0, r3
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	007a1200 	.word	0x007a1200
 8001948:	00f42400 	.word	0x00f42400

0800194c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e049      	b.n	80019f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fe50 	bl	8000618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3304      	adds	r3, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f000 fc44 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d001      	beq.n	8001a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04c      	b.n	8001aae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <HAL_TIM_Base_Start+0xc0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d022      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a2e:	d01d      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <HAL_TIM_Base_Start+0xc4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d018      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <HAL_TIM_Base_Start+0xc8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <HAL_TIM_Base_Start+0xcc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00e      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_TIM_Base_Start+0xd0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d009      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_TIM_Base_Start+0xd4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_TIM_Base_Start+0x70>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <HAL_TIM_Base_Start+0xd8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d115      	bne.n	8001a98 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_TIM_Base_Start+0xdc>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d015      	beq.n	8001aaa <HAL_TIM_Base_Start+0xae>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a84:	d011      	beq.n	8001aaa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	e008      	b.n	8001aaa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e000      	b.n	8001aac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40000800 	.word	0x40000800
 8001ac8:	40000c00 	.word	0x40000c00
 8001acc:	40013400 	.word	0x40013400
 8001ad0:	40014000 	.word	0x40014000
 8001ad4:	40015000 	.word	0x40015000
 8001ad8:	00010007 	.word	0x00010007

08001adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e049      	b.n	8001b82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f841 	bl	8001b8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fb7c 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_TIM_PWM_Start+0x24>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e03c      	b.n	8001c3e <HAL_TIM_PWM_Start+0x9e>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d109      	bne.n	8001bde <HAL_TIM_PWM_Start+0x3e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	e02f      	b.n	8001c3e <HAL_TIM_PWM_Start+0x9e>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d109      	bne.n	8001bf8 <HAL_TIM_PWM_Start+0x58>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	e022      	b.n	8001c3e <HAL_TIM_PWM_Start+0x9e>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d109      	bne.n	8001c12 <HAL_TIM_PWM_Start+0x72>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	e015      	b.n	8001c3e <HAL_TIM_PWM_Start+0x9e>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d109      	bne.n	8001c2c <HAL_TIM_PWM_Start+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e008      	b.n	8001c3e <HAL_TIM_PWM_Start+0x9e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0a6      	b.n	8001d94 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_TIM_PWM_Start+0xb6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c54:	e023      	b.n	8001c9e <HAL_TIM_PWM_Start+0xfe>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PWM_Start+0xc6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c64:	e01b      	b.n	8001c9e <HAL_TIM_PWM_Start+0xfe>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_PWM_Start+0xd6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c74:	e013      	b.n	8001c9e <HAL_TIM_PWM_Start+0xfe>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_PWM_Start+0xe6>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c84:	e00b      	b.n	8001c9e <HAL_TIM_PWM_Start+0xfe>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_PWM_Start+0xf6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c94:	e003      	b.n	8001c9e <HAL_TIM_PWM_Start+0xfe>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 ff30 	bl	8002b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d9c <HAL_TIM_PWM_Start+0x1fc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d018      	beq.n	8001ce8 <HAL_TIM_PWM_Start+0x148>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a39      	ldr	r2, [pc, #228]	@ (8001da0 <HAL_TIM_PWM_Start+0x200>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_TIM_PWM_Start+0x148>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a37      	ldr	r2, [pc, #220]	@ (8001da4 <HAL_TIM_PWM_Start+0x204>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_TIM_PWM_Start+0x148>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a36      	ldr	r2, [pc, #216]	@ (8001da8 <HAL_TIM_PWM_Start+0x208>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_TIM_PWM_Start+0x148>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	@ (8001dac <HAL_TIM_PWM_Start+0x20c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_TIM_PWM_Start+0x148>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a33      	ldr	r2, [pc, #204]	@ (8001db0 <HAL_TIM_PWM_Start+0x210>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_TIM_PWM_Start+0x14c>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_TIM_PWM_Start+0x14e>
 8001cec:	2300      	movs	r3, #0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a25      	ldr	r2, [pc, #148]	@ (8001d9c <HAL_TIM_PWM_Start+0x1fc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d14:	d01d      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <HAL_TIM_PWM_Start+0x214>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a24      	ldr	r2, [pc, #144]	@ (8001db8 <HAL_TIM_PWM_Start+0x218>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <HAL_TIM_PWM_Start+0x21c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <HAL_TIM_PWM_Start+0x200>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <HAL_TIM_PWM_Start+0x204>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x1b2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <HAL_TIM_PWM_Start+0x210>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d115      	bne.n	8001d7e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_TIM_PWM_Start+0x220>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d015      	beq.n	8001d90 <HAL_TIM_PWM_Start+0x1f0>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6a:	d011      	beq.n	8001d90 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	e008      	b.n	8001d90 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e000      	b.n	8001d92 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40013400 	.word	0x40013400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800
 8001db0:	40015000 	.word	0x40015000
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40000c00 	.word	0x40000c00
 8001dc0:	00010007 	.word	0x00010007

08001dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e0ff      	b.n	8001fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b14      	cmp	r3, #20
 8001dee:	f200 80f0 	bhi.w	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001fd3 	.word	0x08001fd3
 8001e00:	08001fd3 	.word	0x08001fd3
 8001e04:	08001fd3 	.word	0x08001fd3
 8001e08:	08001e8d 	.word	0x08001e8d
 8001e0c:	08001fd3 	.word	0x08001fd3
 8001e10:	08001fd3 	.word	0x08001fd3
 8001e14:	08001fd3 	.word	0x08001fd3
 8001e18:	08001ecf 	.word	0x08001ecf
 8001e1c:	08001fd3 	.word	0x08001fd3
 8001e20:	08001fd3 	.word	0x08001fd3
 8001e24:	08001fd3 	.word	0x08001fd3
 8001e28:	08001f0f 	.word	0x08001f0f
 8001e2c:	08001fd3 	.word	0x08001fd3
 8001e30:	08001fd3 	.word	0x08001fd3
 8001e34:	08001fd3 	.word	0x08001fd3
 8001e38:	08001f51 	.word	0x08001f51
 8001e3c:	08001fd3 	.word	0x08001fd3
 8001e40:	08001fd3 	.word	0x08001fd3
 8001e44:	08001fd3 	.word	0x08001fd3
 8001e48:	08001f91 	.word	0x08001f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa94 	bl	8002380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0204 	bic.w	r2, r2, #4
 8001e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6999      	ldr	r1, [r3, #24]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	619a      	str	r2, [r3, #24]
      break;
 8001e8a:	e0a5      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb0e 	bl	80024b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6999      	ldr	r1, [r3, #24]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	021a      	lsls	r2, r3, #8
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]
      break;
 8001ecc:	e084      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fb81 	bl	80025dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0208 	orr.w	r2, r2, #8
 8001ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0204 	bic.w	r2, r2, #4
 8001ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69d9      	ldr	r1, [r3, #28]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	61da      	str	r2, [r3, #28]
      break;
 8001f0c:	e064      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fbf3 	bl	8002700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69d9      	ldr	r1, [r3, #28]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	021a      	lsls	r2, r3, #8
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	61da      	str	r2, [r3, #28]
      break;
 8001f4e:	e043      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fc66 	bl	8002828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0208 	orr.w	r2, r2, #8
 8001f6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0204 	bic.w	r2, r2, #4
 8001f7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001f8e:	e023      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fcb0 	bl	80028fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001faa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	021a      	lsls	r2, r3, #8
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8001fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_TIM_ConfigClockSource+0x1c>
 8002004:	2302      	movs	r3, #2
 8002006:	e0f6      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x20a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6f      	ldr	r2, [pc, #444]	@ (8002200 <HAL_TIM_ConfigClockSource+0x214>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f000 80c1 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002048:	4a6d      	ldr	r2, [pc, #436]	@ (8002200 <HAL_TIM_ConfigClockSource+0x214>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f200 80c6 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002050:	4a6c      	ldr	r2, [pc, #432]	@ (8002204 <HAL_TIM_ConfigClockSource+0x218>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f000 80b9 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002058:	4a6a      	ldr	r2, [pc, #424]	@ (8002204 <HAL_TIM_ConfigClockSource+0x218>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f200 80be 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002060:	4a69      	ldr	r2, [pc, #420]	@ (8002208 <HAL_TIM_ConfigClockSource+0x21c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	f000 80b1 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002068:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_TIM_ConfigClockSource+0x21c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	f200 80b6 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002070:	4a66      	ldr	r2, [pc, #408]	@ (800220c <HAL_TIM_ConfigClockSource+0x220>)
 8002072:	4293      	cmp	r3, r2
 8002074:	f000 80a9 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002078:	4a64      	ldr	r2, [pc, #400]	@ (800220c <HAL_TIM_ConfigClockSource+0x220>)
 800207a:	4293      	cmp	r3, r2
 800207c:	f200 80ae 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002080:	4a63      	ldr	r2, [pc, #396]	@ (8002210 <HAL_TIM_ConfigClockSource+0x224>)
 8002082:	4293      	cmp	r3, r2
 8002084:	f000 80a1 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002088:	4a61      	ldr	r2, [pc, #388]	@ (8002210 <HAL_TIM_ConfigClockSource+0x224>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f200 80a6 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002090:	4a60      	ldr	r2, [pc, #384]	@ (8002214 <HAL_TIM_ConfigClockSource+0x228>)
 8002092:	4293      	cmp	r3, r2
 8002094:	f000 8099 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002098:	4a5e      	ldr	r2, [pc, #376]	@ (8002214 <HAL_TIM_ConfigClockSource+0x228>)
 800209a:	4293      	cmp	r3, r2
 800209c:	f200 809e 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80020a4:	f000 8091 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 80020a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80020ac:	f200 8096 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020b4:	f000 8089 	beq.w	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 80020b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020bc:	f200 808e 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020c4:	d03e      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x158>
 80020c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ca:	f200 8087 	bhi.w	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d2:	f000 8086 	beq.w	80021e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80020d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020da:	d87f      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020dc:	2b70      	cmp	r3, #112	@ 0x70
 80020de:	d01a      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x12a>
 80020e0:	2b70      	cmp	r3, #112	@ 0x70
 80020e2:	d87b      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020e4:	2b60      	cmp	r3, #96	@ 0x60
 80020e6:	d050      	beq.n	800218a <HAL_TIM_ConfigClockSource+0x19e>
 80020e8:	2b60      	cmp	r3, #96	@ 0x60
 80020ea:	d877      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020ec:	2b50      	cmp	r3, #80	@ 0x50
 80020ee:	d03c      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x17e>
 80020f0:	2b50      	cmp	r3, #80	@ 0x50
 80020f2:	d873      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020f4:	2b40      	cmp	r3, #64	@ 0x40
 80020f6:	d058      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x1be>
 80020f8:	2b40      	cmp	r3, #64	@ 0x40
 80020fa:	d86f      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 80020fc:	2b30      	cmp	r3, #48	@ 0x30
 80020fe:	d064      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002100:	2b30      	cmp	r3, #48	@ 0x30
 8002102:	d86b      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 8002104:	2b20      	cmp	r3, #32
 8002106:	d060      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002108:	2b20      	cmp	r3, #32
 800210a:	d867      	bhi.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05c      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002110:	2b10      	cmp	r3, #16
 8002112:	d05a      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x1de>
 8002114:	e062      	b.n	80021dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002126:	f000 fcd1 	bl	8002acc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	609a      	str	r2, [r3, #8]
      break;
 8002142:	e04f      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002154:	f000 fcba 	bl	8002acc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002166:	609a      	str	r2, [r3, #8]
      break;
 8002168:	e03c      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002176:	461a      	mov	r2, r3
 8002178:	f000 fc2c 	bl	80029d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2150      	movs	r1, #80	@ 0x50
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fc85 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002188:	e02c      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002196:	461a      	mov	r2, r3
 8002198:	f000 fc4b 	bl	8002a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2160      	movs	r1, #96	@ 0x60
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fc75 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 80021a8:	e01c      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	461a      	mov	r2, r3
 80021b8:	f000 fc0c 	bl	80029d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2140      	movs	r1, #64	@ 0x40
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc65 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 80021c8:	e00c      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f000 fc5c 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 80021da:	e003      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e000      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80021e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	00100070 	.word	0x00100070
 8002204:	00100060 	.word	0x00100060
 8002208:	00100050 	.word	0x00100050
 800220c:	00100040 	.word	0x00100040
 8002210:	00100030 	.word	0x00100030
 8002214:	00100020 	.word	0x00100020

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <TIM_Base_SetConfig+0x144>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d017      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d013      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a49      	ldr	r2, [pc, #292]	@ (8002360 <TIM_Base_SetConfig+0x148>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00f      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a48      	ldr	r2, [pc, #288]	@ (8002364 <TIM_Base_SetConfig+0x14c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a47      	ldr	r2, [pc, #284]	@ (8002368 <TIM_Base_SetConfig+0x150>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a46      	ldr	r2, [pc, #280]	@ (800236c <TIM_Base_SetConfig+0x154>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x48>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a45      	ldr	r2, [pc, #276]	@ (8002370 <TIM_Base_SetConfig+0x158>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a39      	ldr	r2, [pc, #228]	@ (800235c <TIM_Base_SetConfig+0x144>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d023      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002280:	d01f      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a36      	ldr	r2, [pc, #216]	@ (8002360 <TIM_Base_SetConfig+0x148>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01b      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a35      	ldr	r2, [pc, #212]	@ (8002364 <TIM_Base_SetConfig+0x14c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d017      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <TIM_Base_SetConfig+0x150>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a33      	ldr	r2, [pc, #204]	@ (800236c <TIM_Base_SetConfig+0x154>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00f      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a33      	ldr	r2, [pc, #204]	@ (8002374 <TIM_Base_SetConfig+0x15c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00b      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <TIM_Base_SetConfig+0x160>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <TIM_Base_SetConfig+0x164>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_Base_SetConfig+0xaa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002370 <TIM_Base_SetConfig+0x158>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d108      	bne.n	80022d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a18      	ldr	r2, [pc, #96]	@ (800235c <TIM_Base_SetConfig+0x144>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <TIM_Base_SetConfig+0x110>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1a      	ldr	r2, [pc, #104]	@ (800236c <TIM_Base_SetConfig+0x154>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00f      	beq.n	8002328 <TIM_Base_SetConfig+0x110>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a1a      	ldr	r2, [pc, #104]	@ (8002374 <TIM_Base_SetConfig+0x15c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00b      	beq.n	8002328 <TIM_Base_SetConfig+0x110>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <TIM_Base_SetConfig+0x160>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <TIM_Base_SetConfig+0x110>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a18      	ldr	r2, [pc, #96]	@ (800237c <TIM_Base_SetConfig+0x164>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0x110>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <TIM_Base_SetConfig+0x158>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d105      	bne.n	800234e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f023 0201 	bic.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]
  }
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40013400 	.word	0x40013400
 8002370:	40015000 	.word	0x40015000
 8002374:	40014000 	.word	0x40014000
 8002378:	40014400 	.word	0x40014400
 800237c:	40014800 	.word	0x40014800

08002380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f023 0201 	bic.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f023 0302 	bic.w	r3, r3, #2
 80023cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a30      	ldr	r2, [pc, #192]	@ (800249c <TIM_OC1_SetConfig+0x11c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <TIM_OC1_SetConfig+0x88>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <TIM_OC1_SetConfig+0x120>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00f      	beq.n	8002408 <TIM_OC1_SetConfig+0x88>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <TIM_OC1_SetConfig+0x124>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00b      	beq.n	8002408 <TIM_OC1_SetConfig+0x88>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <TIM_OC1_SetConfig+0x128>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <TIM_OC1_SetConfig+0x88>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a2c      	ldr	r2, [pc, #176]	@ (80024ac <TIM_OC1_SetConfig+0x12c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d003      	beq.n	8002408 <TIM_OC1_SetConfig+0x88>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a2b      	ldr	r2, [pc, #172]	@ (80024b0 <TIM_OC1_SetConfig+0x130>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10c      	bne.n	8002422 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0308 	bic.w	r3, r3, #8
 800240e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <TIM_OC1_SetConfig+0x11c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <TIM_OC1_SetConfig+0xd2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <TIM_OC1_SetConfig+0x120>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00f      	beq.n	8002452 <TIM_OC1_SetConfig+0xd2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <TIM_OC1_SetConfig+0x124>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00b      	beq.n	8002452 <TIM_OC1_SetConfig+0xd2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1a      	ldr	r2, [pc, #104]	@ (80024a8 <TIM_OC1_SetConfig+0x128>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <TIM_OC1_SetConfig+0xd2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <TIM_OC1_SetConfig+0x12c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_OC1_SetConfig+0xd2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <TIM_OC1_SetConfig+0x130>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	621a      	str	r2, [r3, #32]
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40013400 	.word	0x40013400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40015000 	.word	0x40015000

080024b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 0210 	bic.w	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0320 	bic.w	r3, r3, #32
 8002502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <TIM_OC2_SetConfig+0x110>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_OC2_SetConfig+0x74>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a2b      	ldr	r2, [pc, #172]	@ (80025c8 <TIM_OC2_SetConfig+0x114>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_OC2_SetConfig+0x74>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a2a      	ldr	r2, [pc, #168]	@ (80025cc <TIM_OC2_SetConfig+0x118>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10d      	bne.n	8002544 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <TIM_OC2_SetConfig+0x110>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <TIM_OC2_SetConfig+0xc0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <TIM_OC2_SetConfig+0x114>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00f      	beq.n	8002574 <TIM_OC2_SetConfig+0xc0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a1e      	ldr	r2, [pc, #120]	@ (80025d0 <TIM_OC2_SetConfig+0x11c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00b      	beq.n	8002574 <TIM_OC2_SetConfig+0xc0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <TIM_OC2_SetConfig+0x120>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <TIM_OC2_SetConfig+0xc0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <TIM_OC2_SetConfig+0x124>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_OC2_SetConfig+0xc0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <TIM_OC2_SetConfig+0x118>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d113      	bne.n	800259c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800257a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	621a      	str	r2, [r3, #32]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40013400 	.word	0x40013400
 80025cc:	40015000 	.word	0x40015000
 80025d0:	40014000 	.word	0x40014000
 80025d4:	40014400 	.word	0x40014400
 80025d8:	40014800 	.word	0x40014800

080025dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2b      	ldr	r2, [pc, #172]	@ (80026e8 <TIM_OC3_SetConfig+0x10c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <TIM_OC3_SetConfig+0x72>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <TIM_OC3_SetConfig+0x110>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_OC3_SetConfig+0x72>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a29      	ldr	r2, [pc, #164]	@ (80026f0 <TIM_OC3_SetConfig+0x114>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10d      	bne.n	800266a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <TIM_OC3_SetConfig+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <TIM_OC3_SetConfig+0xbe>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <TIM_OC3_SetConfig+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00f      	beq.n	800269a <TIM_OC3_SetConfig+0xbe>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <TIM_OC3_SetConfig+0x118>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00b      	beq.n	800269a <TIM_OC3_SetConfig+0xbe>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1c      	ldr	r2, [pc, #112]	@ (80026f8 <TIM_OC3_SetConfig+0x11c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_OC3_SetConfig+0xbe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <TIM_OC3_SetConfig+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_OC3_SetConfig+0xbe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a16      	ldr	r2, [pc, #88]	@ (80026f0 <TIM_OC3_SetConfig+0x114>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d113      	bne.n	80026c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	621a      	str	r2, [r3, #32]
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40013400 	.word	0x40013400
 80026f0:	40015000 	.word	0x40015000
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400
 80026fc:	40014800 	.word	0x40014800

08002700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	031b      	lsls	r3, r3, #12
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a2c      	ldr	r2, [pc, #176]	@ (8002810 <TIM_OC4_SetConfig+0x110>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <TIM_OC4_SetConfig+0x74>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <TIM_OC4_SetConfig+0x114>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_OC4_SetConfig+0x74>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <TIM_OC4_SetConfig+0x118>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10d      	bne.n	8002790 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800277a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	031b      	lsls	r3, r3, #12
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800278e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <TIM_OC4_SetConfig+0x110>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <TIM_OC4_SetConfig+0xc0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <TIM_OC4_SetConfig+0x114>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00f      	beq.n	80027c0 <TIM_OC4_SetConfig+0xc0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <TIM_OC4_SetConfig+0x11c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <TIM_OC4_SetConfig+0xc0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <TIM_OC4_SetConfig+0x120>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_OC4_SetConfig+0xc0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <TIM_OC4_SetConfig+0x124>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_OC4_SetConfig+0xc0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <TIM_OC4_SetConfig+0x118>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d113      	bne.n	80027e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80027ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40013400 	.word	0x40013400
 8002818:	40015000 	.word	0x40015000
 800281c:	40014000 	.word	0x40014000
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800

08002828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800285a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800286c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <TIM_OC5_SetConfig+0xbc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <TIM_OC5_SetConfig+0x82>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <TIM_OC5_SetConfig+0xc0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00f      	beq.n	80028aa <TIM_OC5_SetConfig+0x82>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <TIM_OC5_SetConfig+0xc4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00b      	beq.n	80028aa <TIM_OC5_SetConfig+0x82>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <TIM_OC5_SetConfig+0xc8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_OC5_SetConfig+0x82>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <TIM_OC5_SetConfig+0xcc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_OC5_SetConfig+0x82>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <TIM_OC5_SetConfig+0xd0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d109      	bne.n	80028be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40013400 	.word	0x40013400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40014400 	.word	0x40014400
 80028f4:	40014800 	.word	0x40014800
 80028f8:	40015000 	.word	0x40015000

080028fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800292a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	051b      	lsls	r3, r3, #20
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <TIM_OC6_SetConfig+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <TIM_OC6_SetConfig+0x84>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <TIM_OC6_SetConfig+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00f      	beq.n	8002980 <TIM_OC6_SetConfig+0x84>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <TIM_OC6_SetConfig+0xc8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_OC6_SetConfig+0x84>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <TIM_OC6_SetConfig+0xcc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_OC6_SetConfig+0x84>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <TIM_OC6_SetConfig+0xd0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC6_SetConfig+0x84>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a15      	ldr	r2, [pc, #84]	@ (80029d0 <TIM_OC6_SetConfig+0xd4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d109      	bne.n	8002994 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002986:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40013400 	.word	0x40013400
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800
 80029d0:	40015000 	.word	0x40015000

080029d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 030a 	bic.w	r3, r3, #10
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 0210 	bic.w	r2, r3, #16
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	031b      	lsls	r3, r3, #12
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f043 0307 	orr.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	021a      	lsls	r2, r3, #8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2201      	movs	r2, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e074      	b.n	8002c5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	@ (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002bb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a21      	ldr	r2, [pc, #132]	@ (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d01d      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10c      	bne.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40013400 	.word	0x40013400
 8002c70:	40015000 	.word	0x40015000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40014000 	.word	0x40014000

08002c84 <memset>:
 8002c84:	4402      	add	r2, r0
 8002c86:	4603      	mov	r3, r0
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <memset+0xa>
 8002c8c:	4770      	bx	lr
 8002c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c92:	e7f9      	b.n	8002c88 <memset+0x4>

08002c94 <__libc_init_array>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	4d0d      	ldr	r5, [pc, #52]	@ (8002ccc <__libc_init_array+0x38>)
 8002c98:	4c0d      	ldr	r4, [pc, #52]	@ (8002cd0 <__libc_init_array+0x3c>)
 8002c9a:	1b64      	subs	r4, r4, r5
 8002c9c:	10a4      	asrs	r4, r4, #2
 8002c9e:	2600      	movs	r6, #0
 8002ca0:	42a6      	cmp	r6, r4
 8002ca2:	d109      	bne.n	8002cb8 <__libc_init_array+0x24>
 8002ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8002cd4 <__libc_init_array+0x40>)
 8002ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8002cd8 <__libc_init_array+0x44>)
 8002ca8:	f000 f818 	bl	8002cdc <_init>
 8002cac:	1b64      	subs	r4, r4, r5
 8002cae:	10a4      	asrs	r4, r4, #2
 8002cb0:	2600      	movs	r6, #0
 8002cb2:	42a6      	cmp	r6, r4
 8002cb4:	d105      	bne.n	8002cc2 <__libc_init_array+0x2e>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbc:	4798      	blx	r3
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7ee      	b.n	8002ca0 <__libc_init_array+0xc>
 8002cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc6:	4798      	blx	r3
 8002cc8:	3601      	adds	r6, #1
 8002cca:	e7f2      	b.n	8002cb2 <__libc_init_array+0x1e>
 8002ccc:	08002d04 	.word	0x08002d04
 8002cd0:	08002d04 	.word	0x08002d04
 8002cd4:	08002d04 	.word	0x08002d04
 8002cd8:	08002d08 	.word	0x08002d08

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr
