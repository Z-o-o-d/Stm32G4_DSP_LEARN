
FMAC_431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac04  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  0000c184  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae34  0800ae34  0000c184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae34  0800ae34  0000c184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae38  0800ae38  0000be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800ae3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  20000184  0800afc0  0000c184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800afc0  0000c63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0c2  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004606  00000000  00000000  00029276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142c  00000000  00000000  0002f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002443b  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd49  00000000  00000000  00054b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2909  00000000  00000000  000748b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001571b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f98  00000000  00000000  001571fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015e194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800adc4 	.word	0x0800adc4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800adc4 	.word	0x0800adc4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fce2 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f845 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fa15 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f9d9 	bl	80005e0 <MX_DMA_Init>
  MX_ADC2_Init();
 800022e:	f000 f88b 	bl	8000348 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000232:	f000 f99f 	bl	8000574 <MX_TIM6_Init>
  MX_DAC3_Init();
 8000236:	f000 f903 	bl	8000440 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 800023a:	f000 f94f 	bl	80004dc <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800023e:	f000 f973 	bl	8000528 <MX_OPAMP3_Init>
  MX_CORDIC_Init();
 8000242:	f000 f8e9 	bl	8000418 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8000246:	f000 f935 	bl	80004b4 <MX_FMAC_Init>
  MX_USB_Device_Init();
 800024a:	f00a f8ab 	bl	800a3a4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

HAL_OPAMP_Start(&hopamp1);
 800024e:	4810      	ldr	r0, [pc, #64]	@ (8000290 <main+0x78>)
 8000250:	f003 fa38 	bl	80036c4 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000254:	480f      	ldr	r0, [pc, #60]	@ (8000294 <main+0x7c>)
 8000256:	f003 fa35 	bl	80036c4 <HAL_OPAMP_Start>
//HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
//HAL_TIM_Base_Start(&htim6);
//
//
//HAL_Delay(100);
uint16_t Filter_output_Size = FILTER_OUT_BUFFER_SIZE;
 800025a:	2301      	movs	r3, #1
 800025c:	80fb      	strh	r3, [r7, #6]

HAL_FMAC_FilterStart(&hfmac, (int16_t*)&FMAC_out, &Filter_output_Size);										// Запускаем фильтр
 800025e:	1dbb      	adds	r3, r7, #6
 8000260:	461a      	mov	r2, r3
 8000262:	490d      	ldr	r1, [pc, #52]	@ (8000298 <main+0x80>)
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <main+0x84>)
 8000266:	f002 fe30 	bl	8002eca <HAL_FMAC_FilterStart>
//HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);														// Калибруем АЦП
HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&FMAC->WDATA, FILTER_IN_BUFFER_SIZE);									// Запускаем АЦП с сохранением по DMA по указателю на FMAC->WDATA
 800026a:	2201      	movs	r2, #1
 800026c:	490c      	ldr	r1, [pc, #48]	@ (80002a0 <main+0x88>)
 800026e:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <main+0x8c>)
 8000270:	f001 f918 	bl	80014a4 <HAL_ADC_Start_DMA>
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)&FMAC_out, FILTER_OUT_BUFFER_SIZE, DAC_ALIGN_12B_R); 	// Выводим входные данные FIR фильтра на ЦАП
 8000274:	2300      	movs	r3, #0
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	4a07      	ldr	r2, [pc, #28]	@ (8000298 <main+0x80>)
 800027c:	2100      	movs	r1, #0
 800027e:	480a      	ldr	r0, [pc, #40]	@ (80002a8 <main+0x90>)
 8000280:	f002 f83c 	bl	80022fc <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);																					// Запускаем таймер
 8000284:	4809      	ldr	r0, [pc, #36]	@ (80002ac <main+0x94>)
 8000286:	f005 ff7f 	bl	8006188 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028a:	bf00      	nop
 800028c:	e7fd      	b.n	800028a <main+0x72>
 800028e:	bf00      	nop
 8000290:	200003a0 	.word	0x200003a0
 8000294:	200003dc 	.word	0x200003dc
 8000298:	20000464 	.word	0x20000464
 800029c:	20000308 	.word	0x20000308
 80002a0:	40021418 	.word	0x40021418
 80002a4:	200001a0 	.word	0x200001a0
 80002a8:	20000294 	.word	0x20000294
 80002ac:	20000418 	.word	0x20000418

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b094      	sub	sp, #80	@ 0x50
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2238      	movs	r2, #56	@ 0x38
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f00a fd54 	bl	800ad6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f004 ff5a 	bl	800518c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80002d8:	2321      	movs	r3, #33	@ 0x21
 80002da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	2303      	movs	r3, #3
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002f2:	2355      	movs	r3, #85	@ 0x55
 80002f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f004 fff4 	bl	80052f4 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000312:	f000 fa13 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031a:	2303      	movs	r3, #3
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2104      	movs	r1, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f005 faf2 	bl	8005918 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800033a:	f000 f9ff 	bl	800073c <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3750      	adds	r7, #80	@ 0x50
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2220      	movs	r2, #32
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f00a fd09 	bl	800ad6c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <MX_ADC2_Init+0xc4>)
 800035c:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <MX_ADC2_Init+0xc8>)
 800035e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000362:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000366:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000368:	4b28      	ldr	r3, [pc, #160]	@ (800040c <MX_ADC2_Init+0xc4>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036e:	4b27      	ldr	r3, [pc, #156]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000374:	4b25      	ldr	r3, [pc, #148]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <MX_ADC2_Init+0xc4>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000380:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000382:	2204      	movs	r2, #4
 8000384:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000386:	4b21      	ldr	r3, [pc, #132]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000388:	2200      	movs	r2, #0
 800038a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800038c:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_ADC2_Init+0xc4>)
 800038e:	2200      	movs	r2, #0
 8000390:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000392:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <MX_ADC2_Init+0xc4>)
 8000394:	2201      	movs	r2, #1
 8000396:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000398:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <MX_ADC2_Init+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003a2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80003a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80003b0:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80003be:	4b13      	ldr	r3, [pc, #76]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003c6:	4811      	ldr	r0, [pc, #68]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003c8:	f000 fee8 	bl	800119c <HAL_ADC_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80003d2:	f000 f9b3 	bl	800073c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_ADC2_Init+0xcc>)
 80003d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003da:	2306      	movs	r3, #6
 80003dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e2:	237f      	movs	r3, #127	@ 0x7f
 80003e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003e6:	2304      	movs	r3, #4
 80003e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	@ (800040c <MX_ADC2_Init+0xc4>)
 80003f4:	f001 f914 	bl	8001620 <HAL_ADC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80003fe:	f000 f99d 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200001a0 	.word	0x200001a0
 8000410:	50000100 	.word	0x50000100
 8000414:	cb8c0000 	.word	0xcb8c0000

08000418 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <MX_CORDIC_Init+0x20>)
 800041e:	4a07      	ldr	r2, [pc, #28]	@ (800043c <MX_CORDIC_Init+0x24>)
 8000420:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_CORDIC_Init+0x20>)
 8000424:	f001 fe06 	bl	8002034 <HAL_CORDIC_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800042e:	f000 f985 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000026c 	.word	0x2000026c
 800043c:	40020c00 	.word	0x40020c00

08000440 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08c      	sub	sp, #48	@ 0x30
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000446:	463b      	mov	r3, r7
 8000448:	2230      	movs	r2, #48	@ 0x30
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f00a fc8d 	bl	800ad6c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000452:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <MX_DAC3_Init+0x6c>)
 8000454:	4a16      	ldr	r2, [pc, #88]	@ (80004b0 <MX_DAC3_Init+0x70>)
 8000456:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000458:	4814      	ldr	r0, [pc, #80]	@ (80004ac <MX_DAC3_Init+0x6c>)
 800045a:	f001 ff2c 	bl	80022b6 <HAL_DAC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000464:	f000 f96a 	bl	800073c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000468:	2302      	movs	r3, #2
 800046a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800046c:	2300      	movs	r3, #0
 800046e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000478:	231e      	movs	r3, #30
 800047a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000480:	2302      	movs	r3, #2
 8000482:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000484:	2302      	movs	r3, #2
 8000486:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800048c:	463b      	mov	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	4619      	mov	r1, r3
 8000492:	4806      	ldr	r0, [pc, #24]	@ (80004ac <MX_DAC3_Init+0x6c>)
 8000494:	f002 f824 	bl	80024e0 <HAL_DAC_ConfigChannel>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800049e:	f000 f94d 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	3730      	adds	r7, #48	@ 0x30
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000294 	.word	0x20000294
 80004b0:	50001000 	.word	0x50001000

080004b4 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_FMAC_Init+0x20>)
 80004ba:	4a07      	ldr	r2, [pc, #28]	@ (80004d8 <MX_FMAC_Init+0x24>)
 80004bc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_FMAC_Init+0x20>)
 80004c0:	f002 fcc2 	bl	8002e48 <HAL_FMAC_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80004ca:	f000 f937 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000308 	.word	0x20000308
 80004d8:	40021400 	.word	0x40021400

080004dc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 80004e2:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <MX_OPAMP1_Init+0x48>)
 80004e4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 80004ee:	2260      	movs	r2, #96	@ 0x60
 80004f0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 80004f4:	220c      	movs	r2, #12
 80004f6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_OPAMP1_Init+0x44>)
 800050c:	f003 f80a 	bl	8003524 <HAL_OPAMP_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000516:	f000 f911 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200003a0 	.word	0x200003a0
 8000524:	40010300 	.word	0x40010300

08000528 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_OPAMP3_Init+0x44>)
 800052e:	4a10      	ldr	r2, [pc, #64]	@ (8000570 <MX_OPAMP3_Init+0x48>)
 8000530:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_OPAMP3_Init+0x44>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_OPAMP3_Init+0x44>)
 800053a:	2260      	movs	r2, #96	@ 0x60
 800053c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_OPAMP3_Init+0x44>)
 8000540:	2208      	movs	r2, #8
 8000542:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_OPAMP3_Init+0x44>)
 8000546:	2201      	movs	r2, #1
 8000548:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_OPAMP3_Init+0x44>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_OPAMP3_Init+0x44>)
 8000552:	2200      	movs	r2, #0
 8000554:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_OPAMP3_Init+0x44>)
 8000558:	f002 ffe4 	bl	8003524 <HAL_OPAMP_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000562:	f000 f8eb 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200003dc 	.word	0x200003dc
 8000570:	40010308 	.word	0x40010308

08000574 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_TIM6_Init+0x64>)
 8000586:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <MX_TIM6_Init+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_TIM6_Init+0x64>)
 800058c:	2210      	movs	r2, #16
 800058e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_TIM6_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_TIM6_Init+0x64>)
 8000598:	2263      	movs	r2, #99	@ 0x63
 800059a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059c:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_TIM6_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <MX_TIM6_Init+0x64>)
 80005a4:	f005 fd98 	bl	80060d8 <HAL_TIM_Base_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80005ae:	f000 f8c5 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005b2:	2320      	movs	r3, #32
 80005b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <MX_TIM6_Init+0x64>)
 80005c0:	f005 fee0 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80005ca:	f000 f8b7 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000418 	.word	0x20000418
 80005dc:	40001000 	.word	0x40001000

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_DMA_Init+0x70>)
 80005e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ea:	4a19      	ldr	r2, [pc, #100]	@ (8000650 <MX_DMA_Init+0x70>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005f2:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_DMA_Init+0x70>)
 80005f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_DMA_Init+0x70>)
 8000600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000602:	4a13      	ldr	r2, [pc, #76]	@ (8000650 <MX_DMA_Init+0x70>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6493      	str	r3, [r2, #72]	@ 0x48
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_DMA_Init+0x70>)
 800060c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	200b      	movs	r0, #11
 800061c:	f001 fe17 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000620:	200b      	movs	r0, #11
 8000622:	f001 fe2e 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200c      	movs	r0, #12
 800062c:	f001 fe0f 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000630:	200c      	movs	r0, #12
 8000632:	f001 fe26 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200e      	movs	r0, #14
 800063c:	f001 fe07 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000640:	200e      	movs	r0, #14
 8000642:	f001 fe1e 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <MX_GPIO_Init+0xb8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a27      	ldr	r2, [pc, #156]	@ (800070c <MX_GPIO_Init+0xb8>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_GPIO_Init+0xb8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <MX_GPIO_Init+0xb8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a21      	ldr	r2, [pc, #132]	@ (800070c <MX_GPIO_Init+0xb8>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <MX_GPIO_Init+0xb8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <MX_GPIO_Init+0xb8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <MX_GPIO_Init+0xb8>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_GPIO_Init+0xb8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f002 ff1b 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2107      	movs	r1, #7
 80006c2:	4813      	ldr	r0, [pc, #76]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006c4:	f002 ff16 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e2:	f002 fd85 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006e6:	2307      	movs	r3, #7
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006fe:	f002 fd77 	bl	80031f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_ADC_ConvHalfCpltCallback>:
//}


//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]


#endif


}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
		WHILE_FLAG=2;
	}

#endif
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <HAL_MspInit+0x54>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <HAL_MspInit+0x54>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6613      	str	r3, [r2, #96]	@ 0x60
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x54>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x54>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <HAL_MspInit+0x54>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6593      	str	r3, [r2, #88]	@ 0x58
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_MspInit+0x54>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 faa2 	bl	8000cc8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000784:	f000 fac8 	bl	8000d18 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fab1 	bl	8000cf0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800078e:	f004 fda1 	bl	80052d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2244      	movs	r2, #68	@ 0x44
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00a fadb 	bl	800ad6c <memset>
  if(hadc->Instance==ADC2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <HAL_ADC_MspInit+0xb8>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d146      	bne.n	800084e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 fa91 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80007dc:	f7ff ffae 	bl	800073c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <HAL_ADC_MspInit+0xbc>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e4:	4a1d      	ldr	r2, [pc, #116]	@ (800085c <HAL_ADC_MspInit+0xbc>)
 80007e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <HAL_ADC_MspInit+0xbc>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80007f8:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 80007fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000864 <HAL_ADC_MspInit+0xc4>)
 80007fc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000800:	2224      	movs	r2, #36	@ 0x24
 8000802:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000824:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000828:	2220      	movs	r2, #32
 800082a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000832:	480b      	ldr	r0, [pc, #44]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000834:	f002 f896 	bl	8002964 <HAL_DMA_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800083e:	f7ff ff7d 	bl	800073c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 8000846:	655a      	str	r2, [r3, #84]	@ 0x54
 8000848:	4a05      	ldr	r2, [pc, #20]	@ (8000860 <HAL_ADC_MspInit+0xc0>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	@ 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	50000100 	.word	0x50000100
 800085c:	40021000 	.word	0x40021000
 8000860:	2000020c 	.word	0x2000020c
 8000864:	40020008 	.word	0x40020008

08000868 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_CORDIC_MspInit+0x38>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10b      	bne.n	8000892 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_CORDIC_MspInit+0x3c>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <HAL_CORDIC_MspInit+0x3c>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6493      	str	r3, [r2, #72]	@ 0x48
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <HAL_CORDIC_MspInit+0x3c>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <HAL_DAC_MspInit+0x88>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d136      	bne.n	8000928 <HAL_DAC_MspInit+0x80>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <HAL_DAC_MspInit+0x8c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <HAL_DAC_MspInit+0x8c>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_DAC_MspInit+0x8c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008d4:	4a19      	ldr	r2, [pc, #100]	@ (800093c <HAL_DAC_MspInit+0x94>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008da:	2266      	movs	r2, #102	@ 0x66
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 80008fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008fe:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 8000902:	2220      	movs	r2, #32
 8000904:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 800090c:	480a      	ldr	r0, [pc, #40]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 800090e:	f002 f829 	bl	8002964 <HAL_DMA_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 8000918:	f7ff ff10 	bl	800073c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a06      	ldr	r2, [pc, #24]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <HAL_DAC_MspInit+0x90>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	50001000 	.word	0x50001000
 8000934:	40021000 	.word	0x40021000
 8000938:	200002a8 	.word	0x200002a8
 800093c:	4002001c 	.word	0x4002001c

08000940 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <HAL_FMAC_MspInit+0x88>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d136      	bne.n	80009c0 <HAL_FMAC_MspInit+0x80>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <HAL_FMAC_MspInit+0x8c>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	4a1d      	ldr	r2, [pc, #116]	@ (80009cc <HAL_FMAC_MspInit+0x8c>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	6493      	str	r3, [r2, #72]	@ 0x48
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_FMAC_MspInit+0x8c>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_READ Init */
    hdma_fmac_read.Instance = DMA1_Channel4;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 800096c:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <HAL_FMAC_MspInit+0x94>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_fmac_read.Init.Request = DMA_REQUEST_FMAC_READ;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 8000972:	226e      	movs	r2, #110	@ 0x6e
 8000974:	605a      	str	r2, [r3, #4]
    hdma_fmac_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    hdma_fmac_read.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_fmac_read.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	611a      	str	r2, [r3, #16]
    hdma_fmac_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 800098a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800098e:	615a      	str	r2, [r3, #20]
    hdma_fmac_read.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 8000992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000996:	619a      	str	r2, [r3, #24]
    hdma_fmac_read.Init.Mode = DMA_CIRCULAR;
 8000998:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 800099a:	2220      	movs	r2, #32
 800099c:	61da      	str	r2, [r3, #28]
    hdma_fmac_read.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_read) != HAL_OK)
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 80009a6:	f001 ffdd 	bl	8002964 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_FMAC_MspInit+0x74>
    {
      Error_Handler();
 80009b0:	f7ff fec4 	bl	800073c <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaOut,hdma_fmac_read);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <HAL_FMAC_MspInit+0x90>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021400 	.word	0x40021400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	20000340 	.word	0x20000340
 80009d4:	40020044 	.word	0x40020044

080009d8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a74 <HAL_OPAMP_MspInit+0x9c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d119      	bne.n	8000a2e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a12:	2304      	movs	r3, #4
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a16:	2303      	movs	r3, #3
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f002 fbe2 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8000a2c:	e01d      	b.n	8000a6a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <HAL_OPAMP_MspInit+0xa4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d118      	bne.n	8000a6a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_OPAMP_MspInit+0xa0>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f002 fbc3 	bl	80031f0 <HAL_GPIO_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010300 	.word	0x40010300
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010308 	.word	0x40010308

08000a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x38>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10b      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a96:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40001000 	.word	0x40001000
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f8b9 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <DMA1_Channel1_IRQHandler+0x10>)
 8000b26:	f002 f840 	bl	8002baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000020c 	.word	0x2000020c

08000b34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <DMA1_Channel2_IRQHandler+0x10>)
 8000b3a:	f002 f836 	bl	8002baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200002a8 	.word	0x200002a8

08000b48 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_read);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel4_IRQHandler+0x10>)
 8000b4e:	f002 f82c 	bl	8002baa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000340 	.word	0x20000340

08000b5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_IRQHandler+0x10>)
 8000b62:	f002 fed0 	bl	8003906 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001140 	.word	0x20001140

08000b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f00a f8db 	bl	800ad7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fb27 	bl	8000218 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   r0, =_estack
 8000bcc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000bd8:	0800ae3c 	.word	0x0800ae3c
  ldr r2, =_sbss
 8000bdc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000be0:	2000163c 	.word	0x2000163c

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f001 fb21 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fd9e 	bl	8000748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d022      	beq.n	8000c72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <HAL_InitTick+0x68>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fb2c 	bl	800229e <HAL_SYSTICK_Config>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10f      	bne.n	8000c6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d809      	bhi.n	8000c66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c52:	2200      	movs	r2, #0
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5a:	f001 faf8 	bl	800224e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e007      	b.n	8000c76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e004      	b.n	8000c76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e001      	b.n	8000c76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_IncTick+0x20>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a03      	ldr	r2, [pc, #12]	@ (8000ca8 <HAL_IncTick+0x1c>)
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20000468 	.word	0x20000468
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000468 	.word	0x20000468

08000cc8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000cd8:	4904      	ldr	r1, [pc, #16]	@ (8000cec <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40010030 	.word	0x40010030

08000cf0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 0202 	bic.w	r2, r3, #2
 8000d00:	4904      	ldr	r1, [pc, #16]	@ (8000d14 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40010030 	.word	0x40010030

08000d18 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000d2a:	f7ff ffc1 	bl	8000cb0 <HAL_GetTick>
 8000d2e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000d30:	e008      	b.n	8000d44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000d32:	f7ff ffbd 	bl	8000cb0 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b0a      	cmp	r3, #10
 8000d3e:	d901      	bls.n	8000d44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e006      	b.n	8000d52 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010030 	.word	0x40010030

08000d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3360      	adds	r3, #96	@ 0x60
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <LL_ADC_SetOffset+0x44>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	4313      	orrs	r3, r2
 8000df8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	03fff000 	.word	0x03fff000

08000e10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3360      	adds	r3, #96	@ 0x60
 8000e1e:	461a      	mov	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3360      	adds	r3, #96	@ 0x60
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b087      	sub	sp, #28
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3360      	adds	r3, #96	@ 0x60
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3360      	adds	r3, #96	@ 0x60
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	615a      	str	r2, [r3, #20]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3330      	adds	r3, #48	@ 0x30
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	211f      	movs	r1, #31
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0e9b      	lsrs	r3, r3, #26
 8000f62:	f003 011f 	and.w	r1, r3, #31
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3314      	adds	r3, #20
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0e5b      	lsrs	r3, r3, #25
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	0d1b      	lsrs	r3, r3, #20
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2107      	movs	r1, #7
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	0d1b      	lsrs	r3, r3, #20
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0318 	and.w	r3, r3, #24
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	400b      	ands	r3, r1
 8001002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001006:	431a      	orrs	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0007ffff 	.word	0x0007ffff

08001020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 031f 	and.w	r3, r3, #31
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800104c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6093      	str	r3, [r2, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001074:	d101      	bne.n	800107a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800109c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010c4:	d101      	bne.n	80010ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <LL_ADC_IsEnabled+0x18>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <LL_ADC_IsEnabled+0x1a>
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001136:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800113a:	f043 0204 	orr.w	r2, r3, #4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b04      	cmp	r3, #4
 8001160:	d101      	bne.n	8001166 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b08      	cmp	r3, #8
 8001186:	d101      	bne.n	800118c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e167      	b.n	8001486 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff faeb 	bl	80007a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff3f 	bl	8001060 <LL_ADC_IsDeepPowerDownEnabled>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff25 	bl	800103c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff5a 	bl	80010b0 <LL_ADC_IsInternalRegulatorEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d115      	bne.n	800122e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff3e 	bl	8001088 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800120c:	4ba0      	ldr	r3, [pc, #640]	@ (8001490 <HAL_ADC_Init+0x2f4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	4aa0      	ldr	r2, [pc, #640]	@ (8001494 <HAL_ADC_Init+0x2f8>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	3301      	adds	r3, #1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001220:	e002      	b.n	8001228 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff3c 	bl	80010b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001242:	f043 0210 	orr.w	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff75 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 8001264:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 8100 	bne.w	8001474 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 80fc 	bne.w	8001474 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001284:	f043 0202 	orr.w	r2, r3, #2
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <LL_ADC_IsEnabled>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800129c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80012a0:	f7ff ff2e 	bl	8001100 <LL_ADC_IsEnabled>
 80012a4:	4604      	mov	r4, r0
 80012a6:	487c      	ldr	r0, [pc, #496]	@ (8001498 <HAL_ADC_Init+0x2fc>)
 80012a8:	f7ff ff2a 	bl	8001100 <LL_ADC_IsEnabled>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4323      	orrs	r3, r4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4878      	ldr	r0, [pc, #480]	@ (800149c <HAL_ADC_Init+0x300>)
 80012bc:	f7ff fd50 	bl	8000d60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7f5b      	ldrb	r3, [r3, #29]
 80012c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d106      	bne.n	80012fc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	3b01      	subs	r3, #1
 80012f4:	045b      	lsls	r3, r3, #17
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <HAL_ADC_Init+0x304>)
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	430b      	orrs	r3, r1
 800132a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff14 	bl	8001174 <LL_ADC_INJ_IsConversionOngoing>
 800134c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d16d      	bne.n	8001430 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d16a      	bne.n	8001430 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800135e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001366:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	430b      	orrs	r3, r1
 8001382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d017      	beq.n	80013bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800139a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6911      	ldr	r1, [r2, #16]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80013ba:	e013      	b.n	80013e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d118      	bne.n	8001420 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001410:	430a      	orrs	r2, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	e007      	b.n	8001430 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10c      	bne.n	8001452 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f023 010f 	bic.w	r1, r3, #15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001450:	e007      	b.n	8001462 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 020f 	bic.w	r2, r2, #15
 8001460:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001472:	e007      	b.n	8001484 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001478:	f043 0210 	orr.w	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001484:	7ffb      	ldrb	r3, [r7, #31]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	@ 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	053e2d63 	.word	0x053e2d63
 8001498:	50000100 	.word	0x50000100
 800149c:	50000300 	.word	0x50000300
 80014a0:	fff04007 	.word	0xfff04007

080014a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014b0:	4851      	ldr	r0, [pc, #324]	@ (80015f8 <HAL_ADC_Start_DMA+0x154>)
 80014b2:	f7ff fdb5 	bl	8001020 <LL_ADC_GetMultimode>
 80014b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe46 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 808f 	bne.w	80015e8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_ADC_Start_DMA+0x34>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e08a      	b.n	80015ee <HAL_ADC_Start_DMA+0x14a>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d002      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d173      	bne.n	80015da <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 fc84 	bl	8001e00 <ADC_Enable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d166      	bne.n	80015d0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001506:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a38      	ldr	r2, [pc, #224]	@ (80015fc <HAL_ADC_Start_DMA+0x158>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d002      	beq.n	8001526 <HAL_ADC_Start_DMA+0x82>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	e001      	b.n	800152a <HAL_ADC_Start_DMA+0x86>
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4293      	cmp	r3, r2
 8001530:	d002      	beq.n	8001538 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001554:	f023 0206 	bic.w	r2, r3, #6
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	661a      	str	r2, [r3, #96]	@ 0x60
 800155c:	e002      	b.n	8001564 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001568:	4a25      	ldr	r2, [pc, #148]	@ (8001600 <HAL_ADC_Start_DMA+0x15c>)
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001570:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <HAL_ADC_Start_DMA+0x160>)
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_ADC_Start_DMA+0x164>)
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	221c      	movs	r2, #28
 8001582:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3340      	adds	r3, #64	@ 0x40
 80015b6:	4619      	mov	r1, r3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f001 fa7a 	bl	8002ab4 <HAL_DMA_Start_IT>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdac 	bl	8001126 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80015ce:	e00d      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80015d8:	e008      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80015e6:	e001      	b.n	80015ec <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
 80015ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	50000300 	.word	0x50000300
 80015fc:	50000100 	.word	0x50000100
 8001600:	08001f0d 	.word	0x08001f0d
 8001604:	08001fe5 	.word	0x08001fe5
 8001608:	08002001 	.word	0x08002001

0800160c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0b6      	sub	sp, #216	@ 0xd8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x22>
 800163e:	2302      	movs	r3, #2
 8001640:	e3c8      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x7b4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd7d 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 83ad 	bne.w	8001db6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	f7ff fc5e 	bl	8000f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd6b 	bl	800114e <LL_ADC_REG_IsConversionOngoing>
 8001678:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd77 	bl	8001174 <LL_ADC_INJ_IsConversionOngoing>
 8001686:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800168a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 81d9 	bne.w	8001a46 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 81d4 	bne.w	8001a46 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016a6:	d10f      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fc65 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc0c 	bl	8000ede <LL_ADC_SetSamplingTimeCommonConfig>
 80016c6:	e00e      	b.n	80016e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f7ff fc54 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fbfc 	bl	8000ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d022      	beq.n	800174e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6919      	ldr	r1, [r3, #16]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001718:	f7ff fb56 	bl	8000dc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	461a      	mov	r2, r3
 800172a:	f7ff fba2 	bl	8000e72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x124>
 800173e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001742:	e000      	b.n	8001746 <HAL_ADC_ConfigChannel+0x126>
 8001744:	2300      	movs	r3, #0
 8001746:	461a      	mov	r2, r3
 8001748:	f7ff fbae 	bl	8000ea8 <LL_ADC_SetOffsetSaturation>
 800174c:	e17b      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fb5b 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <HAL_ADC_ConfigChannel+0x15a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fb50 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	e01e      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x198>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb45 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800179c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80017a8:	2320      	movs	r3, #32
 80017aa:	e004      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80017ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1b0>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e9b      	lsrs	r3, r3, #26
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	e018      	b.n	8001802 <HAL_ADC_ConfigChannel+0x1e2>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80017e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80017ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80017f4:	2320      	movs	r3, #32
 80017f6:	e004      	b.n	8001802 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80017f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb14 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff faf8 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x220>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff faed 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	f003 021f 	and.w	r2, r3, #31
 800183e:	e01e      	b.n	800187e <HAL_ADC_ConfigChannel+0x25e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fae2 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800185e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800186e:	2320      	movs	r3, #32
 8001870:	e004      	b.n	800187c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x276>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0e9b      	lsrs	r3, r3, #26
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	e018      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x2a8>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80018aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80018b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80018ba:	2320      	movs	r3, #32
 80018bc:	e004      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80018be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d106      	bne.n	80018da <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fab1 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2102      	movs	r1, #2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa95 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x2e6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2102      	movs	r1, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa8a 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	0e9b      	lsrs	r3, r3, #26
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	e01e      	b.n	8001944 <HAL_ADC_ConfigChannel+0x324>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2102      	movs	r1, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa7f 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800192c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e004      	b.n	8001942 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001938:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_ConfigChannel+0x33c>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e9b      	lsrs	r3, r3, #26
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	e016      	b.n	800198a <HAL_ADC_ConfigChannel+0x36a>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800196e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e004      	b.n	800198a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800198a:	429a      	cmp	r2, r3
 800198c:	d106      	bne.n	800199c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa50 	bl	8000e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2103      	movs	r1, #3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa34 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x3a8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa29 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	f003 021f 	and.w	r2, r3, #31
 80019c6:	e017      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x3d8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2103      	movs	r1, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa1e 	bl	8000e10 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80019e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80019e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80019ea:	2320      	movs	r3, #32
 80019ec:	e003      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80019ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x3f0>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	e011      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x414>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2103      	movs	r1, #3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f9fb 	bl	8000e3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb58 	bl	8001100 <LL_ADC_IsEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 8140 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fab7 	bl	8000fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001cac <HAL_ADC_ConfigChannel+0x68c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 8131 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x47e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	bf94      	ite	ls
 8001a96:	2301      	movls	r3, #1
 8001a98:	2300      	movhi	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	e019      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x4b2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d079      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d107      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x4d2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	3301      	adds	r3, #1
 8001aea:	069b      	lsls	r3, r3, #26
 8001aec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001af0:	e015      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x4fe>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	069b      	lsls	r3, r3, #26
 8001b1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x51e>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	e017      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x54e>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	ea42 0103 	orr.w	r1, r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x574>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	3301      	adds	r3, #1
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	e018      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x5a6>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	e081      	b.n	8001cce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x5c6>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	3301      	adds	r3, #1
 8001bde:	069b      	lsls	r3, r3, #26
 8001be0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001be4:	e015      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x5f2>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	069b      	lsls	r3, r3, #26
 8001c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x612>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	e017      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x642>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	61fb      	str	r3, [r7, #28]
  return result;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	ea42 0103 	orr.w	r1, r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x66e>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	051b      	lsls	r3, r3, #20
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	e01e      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x6ac>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	613b      	str	r3, [r7, #16]
  return result;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e006      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x698>
 8001caa:	bf00      	nop
 8001cac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	051b      	lsls	r3, r3, #20
 8001cc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ccc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff f955 	bl	8000f82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ddc <HAL_ADC_ConfigChannel+0x7bc>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d071      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce4:	483e      	ldr	r0, [pc, #248]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ce6:	f7ff f861 	bl	8000dac <LL_ADC_GetCommonPathInternalCh>
 8001cea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001de4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_ConfigChannel+0x6e2>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8001de8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d127      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d16:	d157      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d20:	4619      	mov	r1, r3
 8001d22:	482f      	ldr	r0, [pc, #188]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d24:	f7ff f82f 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d28:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <HAL_ADC_ConfigChannel+0x7cc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d42:	e002      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d50:	e03a      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d113      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10d      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	@ (8001df8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02a      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4818      	ldr	r0, [pc, #96]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d7e:	f7ff f802 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d82:	e021      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1c      	ldr	r2, [pc, #112]	@ (8001dfc <HAL_ADC_ConfigChannel+0x7dc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d011      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001db0:	f7fe ffe9 	bl	8000d86 <LL_ADC_SetCommonPathInternalCh>
 8001db4:	e008      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001dd0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	37d8      	adds	r7, #216	@ 0xd8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	80080000 	.word	0x80080000
 8001de0:	50000300 	.word	0x50000300
 8001de4:	c3210000 	.word	0xc3210000
 8001de8:	90c00010 	.word	0x90c00010
 8001dec:	20000000 	.word	0x20000000
 8001df0:	053e2d63 	.word	0x053e2d63
 8001df4:	c7520000 	.word	0xc7520000
 8001df8:	50000100 	.word	0x50000100
 8001dfc:	cb840000 	.word	0xcb840000

08001e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f975 	bl	8001100 <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d169      	bne.n	8001ef0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <ADC_Enable+0xfc>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e055      	b.n	8001ef2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f944 	bl	80010d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e50:	482b      	ldr	r0, [pc, #172]	@ (8001f00 <ADC_Enable+0x100>)
 8001e52:	f7fe ffab 	bl	8000dac <LL_ADC_GetCommonPathInternalCh>
 8001e56:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <ADC_Enable+0x104>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	4a28      	ldr	r2, [pc, #160]	@ (8001f08 <ADC_Enable+0x108>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e7a:	e002      	b.n	8001e82 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f9      	bne.n	8001e7c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e88:	f7fe ff12 	bl	8000cb0 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e8e:	e028      	b.n	8001ee2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f933 	bl	8001100 <LL_ADC_IsEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f917 	bl	80010d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eaa:	f7fe ff01 	bl	8000cb0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d914      	bls.n	8001ee2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d00d      	beq.n	8001ee2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e007      	b.n	8001ef2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d1cf      	bne.n	8001e90 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	8000003f 	.word	0x8000003f
 8001f00:	50000300 	.word	0x50000300
 8001f04:	20000000 	.word	0x20000000
 8001f08:	053e2d63 	.word	0x053e2d63

08001f0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d14b      	bne.n	8001fbe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d021      	beq.n	8001f84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe ffdd 	bl	8000f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d032      	beq.n	8001fb6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d12b      	bne.n	8001fb6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11f      	bne.n	8001fb6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f82:	e018      	b.n	8001fb6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d111      	bne.n	8001fb6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7fe fbb6 	bl	8000728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fbc:	e00e      	b.n	8001fdc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fb1e 	bl	800160c <HAL_ADC_ErrorCallback>
}
 8001fd0:	e004      	b.n	8001fdc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7fe fb8e 	bl	8000714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff faf0 	bl	800160c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e023      	b.n	800208e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fc04 	bl	8000868 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff40 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff90 	bl	800218c <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5f 	bl	8002138 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff33 	bl	80020fc <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa4 	bl	80021f4 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e014      	b.n	80022f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fae5 	bl	80008a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b2      	b.n	800247a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	795b      	ldrb	r3, [r3, #5]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_DAC_Start_DMA+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e0ac      	b.n	800247a <HAL_DAC_Start_DMA+0x17e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d129      	bne.n	8002386 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4a53      	ldr	r2, [pc, #332]	@ (8002484 <HAL_DAC_Start_DMA+0x188>)
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_DAC_Start_DMA+0x18c>)
 8002340:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4a51      	ldr	r2, [pc, #324]	@ (800248c <HAL_DAC_Start_DMA+0x190>)
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002358:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DAC_Start_DMA+0x6c>
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	2b04      	cmp	r3, #4
 8002364:	d005      	beq.n	8002372 <HAL_DAC_Start_DMA+0x76>
 8002366:	e009      	b.n	800237c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3308      	adds	r3, #8
 800236e:	61bb      	str	r3, [r7, #24]
        break;
 8002370:	e033      	b.n	80023da <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	61bb      	str	r3, [r7, #24]
        break;
 800237a:	e02e      	b.n	80023da <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3310      	adds	r3, #16
 8002382:	61bb      	str	r3, [r7, #24]
        break;
 8002384:	e029      	b.n	80023da <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a41      	ldr	r2, [pc, #260]	@ (8002490 <HAL_DAC_Start_DMA+0x194>)
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a40      	ldr	r2, [pc, #256]	@ (8002494 <HAL_DAC_Start_DMA+0x198>)
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a3f      	ldr	r2, [pc, #252]	@ (8002498 <HAL_DAC_Start_DMA+0x19c>)
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DAC_Start_DMA+0xc0>
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d005      	beq.n	80023c6 <HAL_DAC_Start_DMA+0xca>
 80023ba:	e009      	b.n	80023d0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3314      	adds	r3, #20
 80023c2:	61bb      	str	r3, [r7, #24]
        break;
 80023c4:	e009      	b.n	80023da <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3318      	adds	r3, #24
 80023cc:	61bb      	str	r3, [r7, #24]
        break;
 80023ce:	e004      	b.n	80023da <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	331c      	adds	r3, #28
 80023d6:	61bb      	str	r3, [r7, #24]
        break;
 80023d8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6898      	ldr	r0, [r3, #8]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f000 fb5b 	bl	8002ab4 <HAL_DMA_Start_IT>
 80023fe:	4603      	mov	r3, r0
 8002400:	77fb      	strb	r3, [r7, #31]
 8002402:	e010      	b.n	8002426 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002412:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68d8      	ldr	r0, [r3, #12]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	f000 fb49 	bl	8002ab4 <HAL_DMA_Start_IT>
 8002422:	4603      	mov	r3, r0
 8002424:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11c      	bne.n	800246c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <HAL_DAC_Start_DMA+0x1a0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <HAL_DAC_Start_DMA+0x1a4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800245c:	e002      	b.n	8002464 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3b01      	subs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_DAC_Start_DMA+0x162>
 800246a:	e005      	b.n	8002478 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002478:	7ffb      	ldrb	r3, [r7, #31]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	08002851 	.word	0x08002851
 8002488:	08002873 	.word	0x08002873
 800248c:	0800288f 	.word	0x0800288f
 8002490:	080028f9 	.word	0x080028f9
 8002494:	0800291b 	.word	0x0800291b
 8002498:	08002937 	.word	0x08002937
 800249c:	20000000 	.word	0x20000000
 80024a0:	053e2d63 	.word	0x053e2d63

080024a4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_DAC_ConfigChannel+0x1c>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e19e      	b.n	800283e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	795b      	ldrb	r3, [r3, #5]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_DAC_ConfigChannel+0x2c>
 8002508:	2302      	movs	r3, #2
 800250a:	e198      	b.n	800283e <HAL_DAC_ConfigChannel+0x35e>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d17a      	bne.n	8002616 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002520:	f7fe fbc6 	bl	8000cb0 <HAL_GetTick>
 8002524:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13d      	bne.n	80025a8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800252c:	e018      	b.n	8002560 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800252e:	f7fe fbbf 	bl	8000cb0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d911      	bls.n	8002560 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f043 0208 	orr.w	r2, r3, #8
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2203      	movs	r2, #3
 800255a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e16e      	b.n	800283e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1df      	bne.n	800252e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
 8002578:	e020      	b.n	80025bc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800257a:	f7fe fb99 	bl	8000cb0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d90f      	bls.n	80025a8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258e:	2b00      	cmp	r3, #0
 8002590:	da0a      	bge.n	80025a8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f043 0208 	orr.w	r2, r3, #8
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2203      	movs	r2, #3
 80025a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e14a      	b.n	800283e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dbe3      	blt.n	800257a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	ea02 0103 	and.w	r1, r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	21ff      	movs	r1, #255	@ 0xff
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	ea02 0103 	and.w	r1, r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d11d      	bne.n	800265a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	221f      	movs	r2, #31
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002636:	4013      	ands	r3, r2
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264e:	4313      	orrs	r3, r2
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2207      	movs	r2, #7
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002672:	4013      	ands	r3, r2
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	e00f      	b.n	80026a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d102      	bne.n	8002692 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800268c:	2301      	movs	r3, #1
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	e008      	b.n	80026a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800269a:	2301      	movs	r3, #1
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	e001      	b.n	80026a4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c6:	4013      	ands	r3, r2
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	791b      	ldrb	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_DAC_ConfigChannel+0x1f8>
 80026d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026d6:	e000      	b.n	80026da <HAL_DAC_ConfigChannel+0x1fa>
 80026d8:	2300      	movs	r3, #0
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	4013      	ands	r3, r2
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	795b      	ldrb	r3, [r3, #5]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_DAC_ConfigChannel+0x224>
 80026fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002702:	e000      	b.n	8002706 <HAL_DAC_ConfigChannel+0x226>
 8002704:	2300      	movs	r3, #0
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d114      	bne.n	8002746 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800271c:	f003 fa9a 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8002720:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4a48      	ldr	r2, [pc, #288]	@ (8002848 <HAL_DAC_ConfigChannel+0x368>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d904      	bls.n	8002734 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
 8002732:	e00f      	b.n	8002754 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4a45      	ldr	r2, [pc, #276]	@ (800284c <HAL_DAC_ConfigChannel+0x36c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d90a      	bls.n	8002752 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
 8002744:	e006      	b.n	8002754 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274c:	4313      	orrs	r3, r2
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	e000      	b.n	8002754 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002752:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002762:	4313      	orrs	r3, r2
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a6:	4013      	ands	r3, r2
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	4313      	orrs	r3, r2
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	22c0      	movs	r2, #192	@ 0xc0
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	400a      	ands	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	ea02 0103 	and.w	r1, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800283c:	7ffb      	ldrb	r3, [r7, #31]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3728      	adds	r7, #40	@ 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	09896800 	.word	0x09896800
 800284c:	04c4b400 	.word	0x04c4b400

08002850 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fe20 	bl	80024a4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	711a      	strb	r2, [r3, #4]
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fe19 	bl	80024b8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fe0f 	bl	80024cc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	711a      	strb	r2, [r3, #4]
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff ffd8 	bl	80028bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	711a      	strb	r2, [r3, #4]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff ffd1 	bl	80028d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ffc7 	bl	80028e4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	711a      	strb	r2, [r3, #4]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e08d      	b.n	8002a92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_DMA_Init+0x138>)
 800297e:	429a      	cmp	r2, r3
 8002980:	d80f      	bhi.n	80029a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <HAL_DMA_Init+0x13c>)
 800298a:	4413      	add	r3, r2
 800298c:	4a45      	ldr	r2, [pc, #276]	@ (8002aa4 <HAL_DMA_Init+0x140>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	009a      	lsls	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a42      	ldr	r2, [pc, #264]	@ (8002aa8 <HAL_DMA_Init+0x144>)
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
 80029a0:	e00e      	b.n	80029c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b40      	ldr	r3, [pc, #256]	@ (8002aac <HAL_DMA_Init+0x148>)
 80029aa:	4413      	add	r3, r2
 80029ac:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa4 <HAL_DMA_Init+0x140>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	009a      	lsls	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab0 <HAL_DMA_Init+0x14c>)
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80029d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9b6 	bl	8002d84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a20:	d102      	bne.n	8002a28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d010      	beq.n	8002a68 <HAL_DMA_Init+0x104>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d80c      	bhi.n	8002a68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9d6 	bl	8002e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e008      	b.n	8002a7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40020407 	.word	0x40020407
 8002aa0:	bffdfff8 	.word	0xbffdfff8
 8002aa4:	cccccccd 	.word	0xcccccccd
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	bffdfbf8 	.word	0xbffdfbf8
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Start_IT+0x20>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e066      	b.n	8002ba2 <HAL_DMA_Start_IT+0xee>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d155      	bne.n	8002b94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8fb 	bl	8002d08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 020e 	orr.w	r2, r2, #14
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00f      	b.n	8002b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 020a 	orr.w	r2, r2, #10
 8002b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e005      	b.n	8002ba0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2204      	movs	r2, #4
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d026      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x7a>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0204 	bic.w	r2, r2, #4
 8002bfc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d071      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c22:	e06c      	b.n	8002cfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02e      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d029      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10b      	bne.n	8002c68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020a 	bic.w	r2, r2, #10
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	2102      	movs	r1, #2
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d038      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c94:	e033      	b.n	8002cfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02a      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d025      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020e 	bic.w	r2, r2, #14
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
}
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d108      	bne.n	8002d68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d66:	e007      	b.n	8002d78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d802      	bhi.n	8002d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002d98:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e001      	b.n	8002da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002da0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3b08      	subs	r3, #8
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002dce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40020407 	.word	0x40020407
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020820 	.word	0x40020820
 8002df8:	cccccccd 	.word	0xcccccccd
 8002dfc:	40020880 	.word	0x40020880

08002e00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	1000823f 	.word	0x1000823f
 8002e44:	40020940 	.word	0x40020940

08002e48 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e033      	b.n	8002ec2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fd66 	bl	8000940 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8da 	bl	8003034 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8a8 	bl	8002fd6 <FMAC_Reset>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	22a0      	movs	r2, #160	@ 0xa0
 8002e9c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e008      	b.n	8002eb8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_FMAC_FilterStart>:
  *         an external IP to empty the output buffer.
  * @param  pOutputSize pointer to the size of the output buffer. The number of read data will be written here.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterStart(FMAC_HandleTypeDef *hfmac, int16_t *pOutput, uint16_t *pOutputSize)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpcr = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da01      	bge.n	8002ee8 <HAL_FMAC_FilterStart+0x1e>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e054      	b.n	8002f92 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_FMAC_FilterStart+0x2a>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e04e      	b.n	8002f92 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check handle state is ready */
  if (hfmac->State == HAL_FMAC_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d145      	bne.n	8002f8c <HAL_FMAC_FilterStart+0xc2>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_BUSY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2224      	movs	r2, #36	@ 0x24
 8002f04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    /* CR: Configure the input access (error interruptions enabled only for IT or DMA) */
    if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_DMA)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	7a1b      	ldrb	r3, [r3, #8]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d104      	bne.n	8002f1a <HAL_FMAC_FilterStart+0x50>
    {
      tmpcr |= FMAC_DMA_WEN;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e007      	b.n	8002f2a <HAL_FMAC_FilterStart+0x60>
    }
    else if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_IT)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	7a1b      	ldrb	r3, [r3, #8]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d103      	bne.n	8002f2a <HAL_FMAC_FilterStart+0x60>
    {
      tmpcr |= FMAC_IT_WIEN;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Configure the output access (error interruptions enabled only for IT or DMA) */
    if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	7a5b      	ldrb	r3, [r3, #9]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d104      	bne.n	8002f3c <HAL_FMAC_FilterStart+0x72>
    {
      tmpcr |= FMAC_DMA_REN;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e007      	b.n	8002f4c <HAL_FMAC_FilterStart+0x82>
    }
    else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_IT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	7a5b      	ldrb	r3, [r3, #9]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d103      	bne.n	8002f4c <HAL_FMAC_FilterStart+0x82>
    {
      tmpcr |= FMAC_IT_RIEN;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Write the configuration */
    MODIFY_REG(hfmac->Instance->CR, \
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6113      	str	r3, [r2, #16]
               FMAC_IT_RIEN | FMAC_IT_WIEN | FMAC_DMA_REN | FMAC_CR_DMAWEN, \
               tmpcr);

    /* Register the new output buffer */
    status = FMAC_ConfigFilterOutputBufferUpdateState(hfmac, pOutput, pOutputSize);
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f89f 	bl	80030ac <FMAC_ConfigFilterOutputBufferUpdateState>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	74fb      	strb	r3, [r7, #19]

    if (status == HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <HAL_FMAC_FilterStart+0xb8>
    {
      /* PARAM: Start the filter ( this can generate interrupts before the end of the HAL_FMAC_FilterStart ) */
      WRITE_REG(hfmac->Instance->PARAM, (uint32_t)(hfmac->FilterParam));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	6852      	ldr	r2, [r2, #4]
 8002f80:	60da      	str	r2, [r3, #12]
    }

    /* Reset the busy flag (do not overwrite the possible write and read flag) */
    hfmac->State = HAL_FMAC_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002f8a:	e001      	b.n	8002f90 <HAL_FMAC_FilterStart+0xc6>
  }
  else
  {
    status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_FMAC_HalfOutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_HalfOutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_HalfOutputDataReadyCallback can be implemented in the user file.
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fde:	f7fd fe67 	bl	8000cb0 <HAL_GetTick>
 8002fe2:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ff2:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8002ff4:	e00f      	b.n	8003016 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8002ff6:	f7fd fe5b 	bl	8000cb0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003004:	d907      	bls.n	8003016 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00a      	b.n	800302c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f807 	bl	8003050 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f81b 	bl	800307e <FMAC_ResetOutputStateAndDataPointers>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <FMAC_ConfigFilterOutputBufferUpdateState>:
  *         of data read from FMAC).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_ConfigFilterOutputBufferUpdateState(FMAC_HandleTypeDef *hfmac, int16_t *pOutput,
                                                                  uint16_t *pOutputSize)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  /* Reset the current size */
  hfmac->OutputCurrentSize = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	839a      	strh	r2, [r3, #28]

  /* Check whether a valid pointer was provided */
  if ((pOutput == NULL) || (pOutputSize == NULL) || (*pOutputSize == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <FMAC_ConfigFilterOutputBufferUpdateState+0x3c>
  {
    /* The user will have to provide a valid configuration later */
    hfmac->pOutput = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80030e6:	e03f      	b.n	8003168 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  /* Handle the pointer depending on the input access */
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	7a5b      	ldrb	r3, [r3, #9]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d122      	bne.n	8003136 <FMAC_ConfigFilterOutputBufferUpdateState+0x8a>
  {
    hfmac->pOutput = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2225      	movs	r2, #37	@ 0x25
 8003100:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaOut->XferHalfCpltCallback = FMAC_DMAHalfOutputDataReady;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	4a1a      	ldr	r2, [pc, #104]	@ (8003174 <FMAC_ConfigFilterOutputBufferUpdateState+0xc8>)
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
    hfmac->hdmaOut->XferCpltCallback = FMAC_DMAOutputDataReady;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <FMAC_ConfigFilterOutputBufferUpdateState+0xcc>)
 8003112:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaOut->XferErrorCallback = FMAC_DMAError;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	4a18      	ldr	r2, [pc, #96]	@ (800317c <FMAC_ConfigFilterOutputBufferUpdateState+0xd0>)
 800311a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA stream managing FMAC output data read */
    return (HAL_DMA_Start_IT(hfmac->hdmaOut, (uint32_t)&hfmac->Instance->RDATA, (uint32_t)pOutput, *pOutputSize));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	331c      	adds	r3, #28
 8003126:	4619      	mov	r1, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	f7ff fcc1 	bl	8002ab4 <HAL_DMA_Start_IT>
 8003132:	4603      	mov	r3, r0
 8003134:	e019      	b.n	800316a <FMAC_ConfigFilterOutputBufferUpdateState+0xbe>
  }
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_NONE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	7a5b      	ldrb	r3, [r3, #9]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <FMAC_ConfigFilterOutputBufferUpdateState+0xa8>
  {
    hfmac->pOutput = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8003152:	e009      	b.n	8003168 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  else
  {
    /* Update the output data information (polling, IT) */
    hfmac->pOutput = pOutput;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = pOutputSize;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2225      	movs	r2, #37	@ 0x25
 8003164:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	08003181 	.word	0x08003181
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031bf 	.word	0x080031bf

08003180 <FMAC_DMAHalfOutputDataReady>:
  * @brief  DMA FMAC Output Data process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAHalfOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	60fb      	str	r3, [r7, #12]

  /* Call half output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->HalfOutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_HalfOutputDataReadyCallback(hfmac);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff ff0d 	bl	8002fae <HAL_FMAC_HalfOutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <FMAC_DMAOutputDataReady>:
  * @brief  DMA FMAC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAOutputDataReady(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Reset the pointers to indicate new data will be needed */
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ff67 	bl	800307e <FMAC_ResetOutputStateAndDataPointers>

  /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->OutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_OutputDataReadyCallback(hfmac);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7ff ff06 	bl	8002fc2 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <FMAC_DMAError>:
  * @brief  DMA FMAC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22e0      	movs	r2, #224	@ 0xe0
 80031d0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d8:	f043 0208 	orr.w	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff feda 	bl	8002f9a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031fe:	e15a      	b.n	80034b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 814c 	beq.w	80034b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d005      	beq.n	8003230 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800322c:	2b02      	cmp	r3, #2
 800322e:	d130      	bne.n	8003292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003266:	2201      	movs	r2, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0201 	and.w	r2, r3, #1
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d123      	bne.n	8003322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0203 	and.w	r2, r3, #3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80a6 	beq.w	80034b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003364:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <HAL_GPIO_Init+0x2e4>)
 8003366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003368:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <HAL_GPIO_Init+0x2e4>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003370:	4b58      	ldr	r3, [pc, #352]	@ (80034d4 <HAL_GPIO_Init+0x2e4>)
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337c:	4a56      	ldr	r2, [pc, #344]	@ (80034d8 <HAL_GPIO_Init+0x2e8>)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	220f      	movs	r2, #15
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a6:	d01f      	beq.n	80033e8 <HAL_GPIO_Init+0x1f8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a4c      	ldr	r2, [pc, #304]	@ (80034dc <HAL_GPIO_Init+0x2ec>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d019      	beq.n	80033e4 <HAL_GPIO_Init+0x1f4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a4b      	ldr	r2, [pc, #300]	@ (80034e0 <HAL_GPIO_Init+0x2f0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_GPIO_Init+0x1f0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a4a      	ldr	r2, [pc, #296]	@ (80034e4 <HAL_GPIO_Init+0x2f4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_GPIO_Init+0x1ec>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a49      	ldr	r2, [pc, #292]	@ (80034e8 <HAL_GPIO_Init+0x2f8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_Init+0x1e8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a48      	ldr	r2, [pc, #288]	@ (80034ec <HAL_GPIO_Init+0x2fc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_GPIO_Init+0x1e4>
 80033d0:	2305      	movs	r3, #5
 80033d2:	e00a      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033d4:	2306      	movs	r3, #6
 80033d6:	e008      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033d8:	2304      	movs	r3, #4
 80033da:	e006      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033dc:	2303      	movs	r3, #3
 80033de:	e004      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e002      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_GPIO_Init+0x1fa>
 80033e8:	2300      	movs	r3, #0
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	f002 0203 	and.w	r2, r2, #3
 80033f0:	0092      	lsls	r2, r2, #2
 80033f2:	4093      	lsls	r3, r2
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fa:	4937      	ldr	r1, [pc, #220]	@ (80034d8 <HAL_GPIO_Init+0x2e8>)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	3302      	adds	r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800342c:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003432:	4b2f      	ldr	r3, [pc, #188]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003456:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800345c:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003480:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003486:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034aa:	4a11      	ldr	r2, [pc, #68]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f ae9d 	bne.w	8003200 <HAL_GPIO_Init+0x10>
  }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010000 	.word	0x40010000
 80034dc:	48000400 	.word	0x48000400
 80034e0:	48000800 	.word	0x48000800
 80034e4:	48000c00 	.word	0x48000c00
 80034e8:	48001000 	.word	0x48001000
 80034ec:	48001400 	.word	0x48001400
 80034f0:	40010400 	.word	0x40010400

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003510:	e002      	b.n	8003518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0bb      	b.n	80036b2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b05      	cmp	r3, #5
 8003544:	d101      	bne.n	800354a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0b3      	b.n	80036b2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d101      	bne.n	800355a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0ab      	b.n	80036b2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	4b58      	ldr	r3, [pc, #352]	@ (80036bc <HAL_OPAMP_Init+0x198>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_OPAMP_Init+0x198>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6613      	str	r3, [r2, #96]	@ 0x60
 8003566:	4b55      	ldr	r3, [pc, #340]	@ (80036bc <HAL_OPAMP_Init+0x198>)
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fa26 	bl	80009d8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d003      	beq.n	800359c <HAL_OPAMP_Init+0x78>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b60      	cmp	r3, #96	@ 0x60
 800359a:	d133      	bne.n	8003604 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0110 	bic.w	r1, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_OPAMP_Init+0x19c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6851      	ldr	r1, [r2, #4]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6912      	ldr	r2, [r2, #16]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	7d09      	ldrb	r1, [r1, #20]
 80035d0:	2901      	cmp	r1, #1
 80035d2:	d102      	bne.n	80035da <HAL_OPAMP_Init+0xb6>
 80035d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035d8:	e000      	b.n	80035dc <HAL_OPAMP_Init+0xb8>
 80035da:	2100      	movs	r1, #0
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035ee:	04d2      	lsls	r2, r2, #19
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035f6:	0612      	lsls	r2, r2, #24
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	430b      	orrs	r3, r1
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e035      	b.n	8003670 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 0110 	bic.w	r1, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <HAL_OPAMP_Init+0x19c>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6851      	ldr	r1, [r2, #4]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6912      	ldr	r2, [r2, #16]
 8003638:	430a      	orrs	r2, r1
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	7d09      	ldrb	r1, [r1, #20]
 800363e:	2901      	cmp	r1, #1
 8003640:	d102      	bne.n	8003648 <HAL_OPAMP_Init+0x124>
 8003642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003646:	e000      	b.n	800364a <HAL_OPAMP_Init+0x126>
 8003648:	2100      	movs	r1, #0
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003656:	4311      	orrs	r1, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800365c:	04d2      	lsls	r2, r2, #19
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003664:	0612      	lsls	r2, r2, #24
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db10      	blt.n	800369c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	e0003e11 	.word	0xe0003e11

080036c4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e01d      	b.n	8003718 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d102      	bne.n	80036ee <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	e014      	b.n	8003718 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10c      	bne.n	8003714 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003712:	e001      	b.n	8003718 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0c0      	b.n	80038ba <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f007 f809 	bl	800a764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2203      	movs	r2, #3
 8003756:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f002 fea9 	bl	80064b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e03e      	b.n	80037e8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	3311      	adds	r3, #17
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	3310      	adds	r3, #16
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	3313      	adds	r3, #19
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	440b      	add	r3, r1
 80037b4:	3320      	adds	r3, #32
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	3324      	adds	r3, #36	@ 0x24
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3301      	adds	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3bb      	bcc.n	800376a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	e044      	b.n	8003882 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800383a:	7bfa      	ldrb	r2, [r7, #15]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	440b      	add	r3, r1
 8003848:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	791b      	ldrb	r3, [r3, #4]
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3b5      	bcc.n	80037f8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003898:	f002 fe28 	bl	80064ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	7a9b      	ldrb	r3, [r3, #10]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f001 fc40 	bl	8005138 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_Start+0x16>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e012      	b.n	80038fe <HAL_PCD_Start+0x3c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 fdcf 	bl	8006488 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 f88f 	bl	8008a12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f005 f894 	bl	8008a40 <USB_ReadInterrupts>
 8003918:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb04 	bl	8003f32 <PCD_EP_ISR_Handler>

    return;
 800392a:	e110      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003948:	b292      	uxth	r2, r2
 800394a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f006 ff99 	bl	800a886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003954:	2100      	movs	r1, #0
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8fc 	bl	8003b54 <HAL_PCD_SetAddress>

    return;
 800395c:	e0f7      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800397a:	b292      	uxth	r2, r2
 800397c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003980:	e0e5      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399e:	b292      	uxth	r2, r2
 80039a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039a4:	e0d3      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d034      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	b292      	uxth	r2, r2
 80039c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	b292      	uxth	r2, r2
 80039dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039f2:	2100      	movs	r1, #0
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f007 f939 	bl	800ac6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f006 ff7c 	bl	800a8f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a12:	b292      	uxth	r2, r2
 8003a14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a18:	e099      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d027      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0208 	orr.w	r2, r2, #8
 8003a36:	b292      	uxth	r2, r2
 8003a38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0204 	orr.w	r2, r2, #4
 8003a66:	b292      	uxth	r2, r2
 8003a68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f006 ff29 	bl	800a8c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a72:	e06c      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d040      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a90:	b292      	uxth	r2, r2
 8003a92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d12b      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0204 	orr.w	r2, r2, #4
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	b292      	uxth	r2, r2
 8003acc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003aee:	2101      	movs	r1, #1
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f007 f8bb 	bl	800ac6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003af6:	e02a      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f006 fee3 	bl	800a8c4 <HAL_PCD_SuspendCallback>
    return;
 8003afe:	e026      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f006 fea1 	bl	800a86a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b28:	e011      	b.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00c      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b46:	b292      	uxth	r2, r2
 8003b48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b4c:	bf00      	nop
  }
}
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_SetAddress+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e012      	b.n	8003b94 <HAL_PCD_SetAddress+0x40>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 ff30 	bl	80089ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	70fb      	strb	r3, [r7, #3]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	803b      	strh	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da0e      	bge.n	8003be0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 0207 	and.w	r2, r3, #7
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3310      	adds	r3, #16
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	e00e      	b.n	8003bfe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 0207 	and.w	r2, r3, #7
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c0a:	883a      	ldrh	r2, [r7, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	78ba      	ldrb	r2, [r7, #2]
 8003c14:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c16:	78bb      	ldrb	r3, [r7, #2]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d102      	bne.n	8003c22 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_PCD_EP_Open+0x94>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e00e      	b.n	8003c4e <HAL_PCD_EP_Open+0xb2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68f9      	ldr	r1, [r7, #12]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f002 fc72 	bl	8006528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da0e      	bge.n	8003c88 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 0207 	and.w	r2, r3, #7
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	705a      	strb	r2, [r3, #1]
 8003c86:	e00e      	b.n	8003ca6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 0207 	and.w	r2, r3, #7
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_PCD_EP_Close+0x6a>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e00e      	b.n	8003cde <HAL_PCD_EP_Close+0x88>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 ffee 	bl	8006cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	f003 0207 	and.w	r2, r3, #7
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 f9a6 	bl	800708a <USB_EPStartXfer>

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 0207 	and.w	r2, r3, #7
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	460b      	mov	r3, r1
 8003d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	7afb      	ldrb	r3, [r7, #11]
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	3310      	adds	r3, #16
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 f957 	bl	800708a <USB_EPStartXfer>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	7912      	ldrb	r2, [r2, #4]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03e      	b.n	8003e82 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	da0e      	bge.n	8003e2a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0207 	and.w	r2, r3, #7
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	705a      	strb	r2, [r3, #1]
 8003e28:	e00c      	b.n	8003e44 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_PCD_EP_SetStall+0x7e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e00e      	b.n	8003e82 <HAL_PCD_EP_SetStall+0x9c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f004 fcba 	bl	80087ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	7912      	ldrb	r2, [r2, #4]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e040      	b.n	8003f2a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da0e      	bge.n	8003ece <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	705a      	strb	r2, [r3, #1]
 8003ecc:	e00e      	b.n	8003eec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 0207 	and.w	r2, r3, #7
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_PCD_EP_ClrStall+0x82>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e00e      	b.n	8003f2a <HAL_PCD_EP_ClrStall+0xa0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 fcb7 	bl	800888e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b096      	sub	sp, #88	@ 0x58
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f3a:	e3ad      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003f56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 816f 	bne.w	800423e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d14c      	bne.n	8004006 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7c:	81fb      	strh	r3, [r7, #14]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3310      	adds	r3, #16
 8003f94:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f006 fc31 	bl	800a836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7b1b      	ldrb	r3, [r3, #12]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 835c 	beq.w	8004698 <PCD_EP_ISR_Handler+0x766>
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 8357 	bne.w	8004698 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7b1b      	ldrb	r3, [r3, #12]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	731a      	strb	r2, [r3, #12]
 8004004:	e348      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800400c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800401c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004020:	2b00      	cmp	r3, #0
 8004022:	d032      	beq.n	800408a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	4413      	add	r3, r2
 800403e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800405a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800405e:	b29b      	uxth	r3, r3
 8004060:	f004 fd40 	bl	8008ae4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29a      	uxth	r2, r3
 800406c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004070:	4013      	ands	r3, r2
 8004072:	823b      	strh	r3, [r7, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	8a3a      	ldrh	r2, [r7, #16]
 800407a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800407e:	b292      	uxth	r2, r2
 8004080:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f006 fbaa 	bl	800a7dc <HAL_PCD_SetupStageCallback>
 8004088:	e306      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800408a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800408e:	2b00      	cmp	r3, #0
 8004090:	f280 8302 	bge.w	8004698 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29a      	uxth	r2, r3
 800409c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80040a0:	4013      	ands	r3, r2
 80040a2:	83fb      	strh	r3, [r7, #30]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	8bfa      	ldrh	r2, [r7, #30]
 80040aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040ae:	b292      	uxth	r2, r2
 80040b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <PCD_EP_ISR_Handler+0x1e4>
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	6959      	ldr	r1, [r3, #20]
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f004 fcf2 	bl	8008ae4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	441a      	add	r2, r3
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800410e:	2100      	movs	r1, #0
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f006 fb75 	bl	800a800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004120:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 82b5 	bne.w	8004698 <PCD_EP_ISR_Handler+0x766>
 800412e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004132:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004136:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800413a:	f000 82ad 	beq.w	8004698 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4413      	add	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004168:	b29a      	uxth	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b3e      	cmp	r3, #62	@ 0x3e
 8004174:	d91d      	bls.n	80041b2 <PCD_EP_ISR_Handler+0x280>
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
 800417e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <PCD_EP_ISR_Handler+0x25e>
 800418a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418c:	3b01      	subs	r3, #1
 800418e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29a      	uxth	r2, r3
 8004196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004198:	b29b      	uxth	r3, r3
 800419a:	029b      	lsls	r3, r3, #10
 800419c:	b29b      	uxth	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	e026      	b.n	8004200 <PCD_EP_ISR_Handler+0x2ce>
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <PCD_EP_ISR_Handler+0x29e>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e017      	b.n	8004200 <PCD_EP_ISR_Handler+0x2ce>
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <PCD_EP_ISR_Handler+0x2b8>
 80041e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e6:	3301      	adds	r3, #1
 80041e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800420c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004210:	827b      	strh	r3, [r7, #18]
 8004212:	8a7b      	ldrh	r3, [r7, #18]
 8004214:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004218:	827b      	strh	r3, [r7, #18]
 800421a:	8a7b      	ldrh	r3, [r7, #18]
 800421c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004220:	827b      	strh	r3, [r7, #18]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	8a7b      	ldrh	r3, [r7, #18]
 8004228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004238:	b29b      	uxth	r3, r3
 800423a:	8013      	strh	r3, [r2, #0]
 800423c:	e22c      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004252:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004256:	2b00      	cmp	r3, #0
 8004258:	f280 80f6 	bge.w	8004448 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29a      	uxth	r2, r3
 800426e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004272:	4013      	ands	r3, r2
 8004274:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800428a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800428e:	b292      	uxth	r2, r2
 8004290:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004292:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042aa:	7b1b      	ldrb	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d123      	bne.n	80042f8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80042d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 808e 	beq.w	80043fe <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e8:	6959      	ldr	r1, [r3, #20]
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	88da      	ldrh	r2, [r3, #6]
 80042ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042f2:	f004 fbf7 	bl	8008ae4 <USB_ReadPMA>
 80042f6:	e082      	b.n	80043fe <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	78db      	ldrb	r3, [r3, #3]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d10a      	bne.n	8004316 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004304:	461a      	mov	r2, r3
 8004306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f9d3 	bl	80046b4 <HAL_PCD_EP_DB_Receive>
 800430e:	4603      	mov	r3, r0
 8004310:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004314:	e073      	b.n	80043fe <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d022      	beq.n	80043ba <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	4413      	add	r3, r2
 800438e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004398:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800439c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02c      	beq.n	80043fe <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	891a      	ldrh	r2, [r3, #8]
 80043b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043b4:	f004 fb96 	bl	8008ae4 <USB_ReadPMA>
 80043b8:	e021      	b.n	80043fe <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80043e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f0:	6959      	ldr	r1, [r3, #20]
 80043f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f4:	895a      	ldrh	r2, [r3, #10]
 80043f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043fa:	f004 fb73 	bl	8008ae4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004406:	441a      	add	r2, r3
 8004408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004414:	441a      	add	r2, r3
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <PCD_EP_ISR_Handler+0x4fc>
 8004422:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d206      	bcs.n	800443c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f006 f9e3 	bl	800a800 <HAL_PCD_DataOutStageCallback>
 800443a:	e005      	b.n	8004448 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004442:	4618      	mov	r0, r3
 8004444:	f002 fe21 	bl	800708a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800444c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8121 	beq.w	8004698 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004456:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	3310      	adds	r3, #16
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004484:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800449a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	78db      	ldrb	r3, [r3, #3]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f040 80a2 	bne.w	80045f4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80044b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b8:	7b1b      	ldrb	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8093 	beq.w	80045e6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d046      	beq.n	800455a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d126      	bne.n	8004522 <PCD_EP_ISR_Handler+0x5f0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	4413      	add	r3, r2
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	00da      	lsls	r2, r3, #3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	4413      	add	r3, r2
 80044f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004506:	b29a      	uxth	r2, r3
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451a:	b29a      	uxth	r2, r3
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	e061      	b.n	80045e6 <PCD_EP_ISR_Handler+0x6b4>
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	785b      	ldrb	r3, [r3, #1]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d15d      	bne.n	80045e6 <PCD_EP_ISR_Handler+0x6b4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	4413      	add	r3, r2
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	00da      	lsls	r2, r3, #3
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	4413      	add	r3, r2
 800454c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	2200      	movs	r2, #0
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e045      	b.n	80045e6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d126      	bne.n	80045b6 <PCD_EP_ISR_Handler+0x684>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457c:	4413      	add	r3, r2
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00da      	lsls	r2, r3, #3
 8004586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004588:	4413      	add	r3, r2
 800458a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800458e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459a:	b29a      	uxth	r2, r3
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e017      	b.n	80045e6 <PCD_EP_ISR_Handler+0x6b4>
 80045b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d113      	bne.n	80045e6 <PCD_EP_ISR_Handler+0x6b4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045cc:	4413      	add	r3, r2
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	00da      	lsls	r2, r3, #3
 80045d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d8:	4413      	add	r3, r2
 80045da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	2200      	movs	r2, #0
 80045e4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f006 f922 	bl	800a836 <HAL_PCD_DataInStageCallback>
 80045f2:	e051      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80045f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d144      	bne.n	800468a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004608:	b29b      	uxth	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	4413      	add	r3, r2
 800461a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004624:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004630:	429a      	cmp	r2, r3
 8004632:	d907      	bls.n	8004644 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	619a      	str	r2, [r3, #24]
 8004642:	e002      	b.n	800464a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f006 f8ec 	bl	800a836 <HAL_PCD_DataInStageCallback>
 800465e:	e01b      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004668:	441a      	add	r2, r3
 800466a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004676:	441a      	add	r2, r3
 8004678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fd01 	bl	800708a <USB_EPStartXfer>
 8004688:	e006      	b.n	8004698 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800468a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800468e:	461a      	mov	r2, r3
 8004690:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f917 	bl	80048c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f6ff ac49 	blt.w	8003f3c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3758      	adds	r7, #88	@ 0x58
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d07c      	beq.n	80047c6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	8b7b      	ldrh	r3, [r7, #26]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d306      	bcc.n	800470a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	8b7b      	ldrh	r3, [r7, #26]
 8004702:	1ad2      	subs	r2, r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	619a      	str	r2, [r3, #24]
 8004708:	e002      	b.n	8004710 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d123      	bne.n	8004760 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800472e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004732:	833b      	strh	r3, [r7, #24]
 8004734:	8b3b      	ldrh	r3, [r7, #24]
 8004736:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800473a:	833b      	strh	r3, [r7, #24]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	8b3b      	ldrh	r3, [r7, #24]
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01f      	beq.n	80047aa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004784:	82fb      	strh	r3, [r7, #22]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	8afb      	ldrh	r3, [r7, #22]
 8004796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047aa:	8b7b      	ldrh	r3, [r7, #26]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8085 	beq.w	80048bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6959      	ldr	r1, [r3, #20]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	891a      	ldrh	r2, [r3, #8]
 80047be:	8b7b      	ldrh	r3, [r7, #26]
 80047c0:	f004 f990 	bl	8008ae4 <USB_ReadPMA>
 80047c4:	e07a      	b.n	80048bc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	8b7b      	ldrh	r3, [r7, #26]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d306      	bcc.n	8004804 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	8b7b      	ldrh	r3, [r7, #26]
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	619a      	str	r2, [r3, #24]
 8004802:	e002      	b.n	800480a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d123      	bne.n	800485a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482c:	83fb      	strh	r3, [r7, #30]
 800482e:	8bfb      	ldrh	r3, [r7, #30]
 8004830:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004834:	83fb      	strh	r3, [r7, #30]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	8bfb      	ldrh	r3, [r7, #30]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11f      	bne.n	80048a4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	83bb      	strh	r3, [r7, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	8bbb      	ldrh	r3, [r7, #28]
 8004890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800489c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048a4:	8b7b      	ldrh	r3, [r7, #26]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6959      	ldr	r1, [r3, #20]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	895a      	ldrh	r2, [r3, #10]
 80048b6:	8b7b      	ldrh	r3, [r7, #26]
 80048b8:	f004 f914 	bl	8008ae4 <USB_ReadPMA>
    }
  }

  return count;
 80048bc:	8b7b      	ldrh	r3, [r7, #26]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b0a4      	sub	sp, #144	@ 0x90
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4613      	mov	r3, r2
 80048d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 81db 	beq.w	8004c96 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004904:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004910:	429a      	cmp	r2, r3
 8004912:	d907      	bls.n	8004924 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800491c:	1ad2      	subs	r2, r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	619a      	str	r2, [r3, #24]
 8004922:	e002      	b.n	800492a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 80b9 	bne.w	8004aa6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d126      	bne.n	800498a <HAL_PCD_EP_DB_Transmit+0xc4>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	4413      	add	r3, r2
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00da      	lsls	r2, r3, #3
 800495a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495c:	4413      	add	r3, r2
 800495e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496e:	b29a      	uxth	r2, r3
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004982:	b29a      	uxth	r2, r3
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e01a      	b.n	80049c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d116      	bne.n	80049c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	4413      	add	r3, r2
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	00da      	lsls	r2, r3, #3
 80049b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b2:	4413      	add	r3, r2
 80049b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	2200      	movs	r2, #0
 80049be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d126      	bne.n	8004a1c <HAL_PCD_EP_DB_Transmit+0x156>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	00da      	lsls	r2, r3, #3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	e017      	b.n	8004a4c <HAL_PCD_EP_DB_Transmit+0x186>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d113      	bne.n	8004a4c <HAL_PCD_EP_DB_Transmit+0x186>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	4413      	add	r3, r2
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	00da      	lsls	r2, r3, #3
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	4413      	add	r3, r2
 8004a40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f005 feef 	bl	800a836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 82fa 	beq.w	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	82fb      	strh	r3, [r7, #22]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	8afb      	ldrh	r3, [r7, #22]
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
 8004aa4:	e2d8      	b.n	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d021      	beq.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f040 82ac 	bne.w	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b08:	441a      	add	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b16:	441a      	add	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a1a      	ldr	r2, [r3, #32]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d30b      	bcc.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b38:	1ad2      	subs	r2, r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	621a      	str	r2, [r3, #32]
 8004b3e:	e017      	b.n	8004b70 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d108      	bne.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004b48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b58:	e00a      	b.n	8004b70 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d165      	bne.n	8004c44 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8c:	4413      	add	r3, r2
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	00da      	lsls	r2, r3, #3
 8004b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b98:	4413      	add	r3, r2
 8004b9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bb6:	d91d      	bls.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	e044      	b.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e035      	b.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_PCD_EP_DB_Transmit+0x366>
 8004c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c28:	3301      	adds	r3, #1
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	e01c      	b.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d118      	bne.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c60:	4413      	add	r3, r2
 8004c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	00da      	lsls	r2, r3, #3
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c7c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	891a      	ldrh	r2, [r3, #8]
 8004c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f003 fee6 	bl	8008a60 <USB_WritePMA>
 8004c94:	e1e0      	b.n	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d307      	bcc.n	8004cda <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	619a      	str	r2, [r3, #24]
 8004cd8:	e002      	b.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 80c0 	bne.w	8004e6a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d126      	bne.n	8004d40 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d06:	4413      	add	r3, r2
 8004d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00da      	lsls	r2, r3, #3
 8004d10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d12:	4413      	add	r3, r2
 8004d14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e01a      	b.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d116      	bne.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5c:	4413      	add	r3, r2
 8004d5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	00da      	lsls	r2, r3, #3
 8004d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d72:	2200      	movs	r2, #0
 8004d74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d12b      	bne.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x516>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d98:	4413      	add	r3, r2
 8004d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00da      	lsls	r2, r3, #3
 8004da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004da4:	4413      	add	r3, r2
 8004da6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004daa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e017      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x546>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d113      	bne.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x546>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df2:	4413      	add	r3, r2
 8004df4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00da      	lsls	r2, r3, #3
 8004dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dfe:	4413      	add	r3, r2
 8004e00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e08:	2200      	movs	r2, #0
 8004e0a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	4619      	mov	r1, r3
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f005 fd0f 	bl	800a836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 811a 	bne.w	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e0f6      	b.n	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d121      	bne.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	f040 80ca 	bne.w	8005058 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ecc:	441a      	add	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004eda:	441a      	add	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d30b      	bcc.n	8004f04 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6a1a      	ldr	r2, [r3, #32]
 8004ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	621a      	str	r2, [r3, #32]
 8004f02:	e017      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004f0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004f1c:	e00a      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d165      	bne.n	800500e <HAL_PCD_EP_DB_Transmit+0x748>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f56:	4413      	add	r3, r2
 8004f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	00da      	lsls	r2, r3, #3
 8004f60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f62:	4413      	add	r3, r2
 8004f64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f80:	d91d      	bls.n	8004fbe <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004f96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e041      	b.n	8005042 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x716>
 8004fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	e032      	b.n	8005042 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_PCD_EP_DB_Transmit+0x730>
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	b29b      	uxth	r3, r3
 8005004:	4313      	orrs	r3, r2
 8005006:	b29a      	uxth	r2, r3
 8005008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	e019      	b.n	8005042 <HAL_PCD_EP_DB_Transmit+0x77c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d115      	bne.n	8005042 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005024:	4413      	add	r3, r2
 8005026:	657b      	str	r3, [r7, #84]	@ 0x54
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	00da      	lsls	r2, r3, #3
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	4413      	add	r3, r2
 8005032:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005036:	653b      	str	r3, [r7, #80]	@ 0x50
 8005038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800503c:	b29a      	uxth	r2, r3
 800503e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005040:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6959      	ldr	r1, [r3, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	895a      	ldrh	r2, [r3, #10]
 800504e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005052:	b29b      	uxth	r3, r3
 8005054:	f003 fd04 	bl	8008a60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005072:	82bb      	strh	r3, [r7, #20]
 8005074:	8abb      	ldrh	r3, [r7, #20]
 8005076:	f083 0310 	eor.w	r3, r3, #16
 800507a:	82bb      	strh	r3, [r7, #20]
 800507c:	8abb      	ldrh	r3, [r7, #20]
 800507e:	f083 0320 	eor.w	r3, r3, #32
 8005082:	82bb      	strh	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	8abb      	ldrh	r3, [r7, #20]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3790      	adds	r7, #144	@ 0x90
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	817b      	strh	r3, [r7, #10]
 80050c0:	4613      	mov	r3, r2
 80050c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050c4:	897b      	ldrh	r3, [r7, #10]
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050d0:	897b      	ldrh	r3, [r7, #10]
 80050d2:	f003 0207 	and.w	r2, r3, #7
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	3310      	adds	r3, #16
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e009      	b.n	80050fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050e8:	897a      	ldrh	r2, [r7, #10]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80050fc:	893b      	ldrh	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	b29a      	uxth	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	80da      	strh	r2, [r3, #6]
 8005110:	e00b      	b.n	800512a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2201      	movs	r2, #1
 8005116:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	b29a      	uxth	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	b29a      	uxth	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800515c:	b29b      	uxth	r3, r3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005170:	b29b      	uxth	r3, r3
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d141      	bne.n	800521e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800519a:	4b4b      	ldr	r3, [pc, #300]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a6:	d131      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a8:	4b47      	ldr	r3, [pc, #284]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ae:	4a46      	ldr	r2, [pc, #280]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b8:	4b43      	ldr	r3, [pc, #268]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051c0:	4a41      	ldr	r2, [pc, #260]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051c8:	4b40      	ldr	r3, [pc, #256]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2232      	movs	r2, #50	@ 0x32
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	4a3f      	ldr	r2, [pc, #252]	@ (80052d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051de:	e002      	b.n	80051e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e6:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d102      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f2      	bne.n	80051e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051fa:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d158      	bne.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e057      	b.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005212:	4a2d      	ldr	r2, [pc, #180]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800521c:	e04d      	b.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005224:	d141      	bne.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005226:	4b28      	ldr	r3, [pc, #160]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005232:	d131      	bne.n	8005298 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005234:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523a:	4a23      	ldr	r2, [pc, #140]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005244:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800524c:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005254:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2232      	movs	r2, #50	@ 0x32
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a1c      	ldr	r2, [pc, #112]	@ (80052d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	0c9b      	lsrs	r3, r3, #18
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800526a:	e002      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3b01      	subs	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d102      	bne.n	8005286 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f2      	bne.n	800526c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d112      	bne.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e011      	b.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052a8:	e007      	b.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052aa:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052b2:	4a05      	ldr	r2, [pc, #20]	@ (80052c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40007000 	.word	0x40007000
 80052cc:	20000000 	.word	0x20000000
 80052d0:	431bde83 	.word	0x431bde83

080052d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052e2:	6093      	str	r3, [r2, #8]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40007000 	.word	0x40007000

080052f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e2fe      	b.n	8005904 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d075      	beq.n	80053fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005312:	4b97      	ldr	r3, [pc, #604]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800531c:	4b94      	ldr	r3, [pc, #592]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d102      	bne.n	8005332 <HAL_RCC_OscConfig+0x3e>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d002      	beq.n	8005338 <HAL_RCC_OscConfig+0x44>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d10b      	bne.n	8005350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	4b8d      	ldr	r3, [pc, #564]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05b      	beq.n	80053fc <HAL_RCC_OscConfig+0x108>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d157      	bne.n	80053fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e2d9      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005358:	d106      	bne.n	8005368 <HAL_RCC_OscConfig+0x74>
 800535a:	4b85      	ldr	r3, [pc, #532]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a84      	ldr	r2, [pc, #528]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <HAL_RCC_OscConfig+0xb0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0x98>
 8005372:	4b7f      	ldr	r3, [pc, #508]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a7e      	ldr	r2, [pc, #504]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b7c      	ldr	r3, [pc, #496]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7b      	ldr	r2, [pc, #492]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0xb0>
 800538c:	4b78      	ldr	r3, [pc, #480]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a77      	ldr	r2, [pc, #476]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b75      	ldr	r3, [pc, #468]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a74      	ldr	r2, [pc, #464]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800539e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fb fc80 	bl	8000cb0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fb fc7c 	bl	8000cb0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e29e      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0xc0>
 80053d2:	e014      	b.n	80053fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fb fc6c 	bl	8000cb0 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fb fc68 	bl	8000cb0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e28a      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ee:	4b60      	ldr	r3, [pc, #384]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0xe8>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d075      	beq.n	80054f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540a:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005414:	4b56      	ldr	r3, [pc, #344]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d102      	bne.n	800542a <HAL_RCC_OscConfig+0x136>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d002      	beq.n	8005430 <HAL_RCC_OscConfig+0x13c>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d11f      	bne.n	8005470 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005430:	4b4f      	ldr	r3, [pc, #316]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_OscConfig+0x154>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e25d      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b49      	ldr	r3, [pc, #292]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	4946      	ldr	r1, [pc, #280]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800545c:	4b45      	ldr	r3, [pc, #276]	@ (8005574 <HAL_RCC_OscConfig+0x280>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f7fb fbd9 	bl	8000c18 <HAL_InitTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d043      	beq.n	80054f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e249      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d023      	beq.n	80054c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005478:	4b3d      	ldr	r3, [pc, #244]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3c      	ldr	r2, [pc, #240]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800547e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fb fc14 	bl	8000cb0 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548c:	f7fb fc10 	bl	8000cb0 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e232      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800549e:	4b34      	ldr	r3, [pc, #208]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054aa:	4b31      	ldr	r3, [pc, #196]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	061b      	lsls	r3, r3, #24
 80054b8:	492d      	ldr	r1, [pc, #180]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	604b      	str	r3, [r1, #4]
 80054be:	e01a      	b.n	80054f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fb fbf0 	bl	8000cb0 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d4:	f7fb fbec 	bl	8000cb0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e20e      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e6:	4b22      	ldr	r3, [pc, #136]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x1e0>
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d041      	beq.n	8005586 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01c      	beq.n	8005544 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800550a:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800550c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005510:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551a:	f7fb fbc9 	bl	8000cb0 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005522:	f7fb fbc5 	bl	8000cb0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e1e7      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ef      	beq.n	8005522 <HAL_RCC_OscConfig+0x22e>
 8005542:	e020      	b.n	8005586 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005544:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 8005546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554a:	4a09      	ldr	r2, [pc, #36]	@ (8005570 <HAL_RCC_OscConfig+0x27c>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fb fbac 	bl	8000cb0 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800555a:	e00d      	b.n	8005578 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555c:	f7fb fba8 	bl	8000cb0 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d906      	bls.n	8005578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1ca      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
 8005574:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005578:	4b8c      	ldr	r3, [pc, #560]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ea      	bne.n	800555c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80a6 	beq.w	80056e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005598:	4b84      	ldr	r3, [pc, #528]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2b4>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x2b6>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4b7f      	ldr	r3, [pc, #508]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ba:	4b7c      	ldr	r3, [pc, #496]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055c6:	2301      	movs	r3, #1
 80055c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ca:	4b79      	ldr	r3, [pc, #484]	@ (80057b0 <HAL_RCC_OscConfig+0x4bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d118      	bne.n	8005608 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d6:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCC_OscConfig+0x4bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a75      	ldr	r2, [pc, #468]	@ (80057b0 <HAL_RCC_OscConfig+0x4bc>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e2:	f7fb fb65 	bl	8000cb0 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ea:	f7fb fb61 	bl	8000cb0 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e183      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fc:	4b6c      	ldr	r3, [pc, #432]	@ (80057b0 <HAL_RCC_OscConfig+0x4bc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d108      	bne.n	8005622 <HAL_RCC_OscConfig+0x32e>
 8005610:	4b66      	ldr	r3, [pc, #408]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	4a65      	ldr	r2, [pc, #404]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005620:	e024      	b.n	800566c <HAL_RCC_OscConfig+0x378>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d110      	bne.n	800564c <HAL_RCC_OscConfig+0x358>
 800562a:	4b60      	ldr	r3, [pc, #384]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005630:	4a5e      	ldr	r2, [pc, #376]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005632:	f043 0304 	orr.w	r3, r3, #4
 8005636:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800563a:	4b5c      	ldr	r3, [pc, #368]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005640:	4a5a      	ldr	r2, [pc, #360]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800564a:	e00f      	b.n	800566c <HAL_RCC_OscConfig+0x378>
 800564c:	4b57      	ldr	r3, [pc, #348]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005652:	4a56      	ldr	r2, [pc, #344]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800565c:	4b53      	ldr	r3, [pc, #332]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005662:	4a52      	ldr	r2, [pc, #328]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d016      	beq.n	80056a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fb fb1c 	bl	8000cb0 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fb fb18 	bl	8000cb0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e138      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005692:	4b46      	ldr	r3, [pc, #280]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ed      	beq.n	800567c <HAL_RCC_OscConfig+0x388>
 80056a0:	e015      	b.n	80056ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fb fb05 	bl	8000cb0 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fb fb01 	bl	8000cb0 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e121      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ed      	bne.n	80056aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d4:	4b35      	ldr	r3, [pc, #212]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d8:	4a34      	ldr	r2, [pc, #208]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d03c      	beq.n	8005766 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01c      	beq.n	800572e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f4:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056fa:	4a2c      	ldr	r2, [pc, #176]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fb fad4 	bl	8000cb0 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570c:	f7fb fad0 	bl	8000cb0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0f2      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800571e:	4b23      	ldr	r3, [pc, #140]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ef      	beq.n	800570c <HAL_RCC_OscConfig+0x418>
 800572c:	e01b      	b.n	8005766 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800572e:	4b1f      	ldr	r3, [pc, #124]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005730:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005734:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fb fab7 	bl	8000cb0 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005746:	f7fb fab3 	bl	8000cb0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0d5      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1ef      	bne.n	8005746 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80c9 	beq.w	8005902 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005770:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b0c      	cmp	r3, #12
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d15e      	bne.n	8005844 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a08      	ldr	r2, [pc, #32]	@ (80057ac <HAL_RCC_OscConfig+0x4b8>)
 800578c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fb fa8d 	bl	8000cb0 <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005798:	e00c      	b.n	80057b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579a:	f7fb fa89 	bl	8000cb0 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d905      	bls.n	80057b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0ab      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b4:	4b55      	ldr	r3, [pc, #340]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ec      	bne.n	800579a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c0:	4b52      	ldr	r3, [pc, #328]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4b52      	ldr	r3, [pc, #328]	@ (8005910 <HAL_RCC_OscConfig+0x61c>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6a11      	ldr	r1, [r2, #32]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0112      	lsls	r2, r2, #4
 80057d4:	4311      	orrs	r1, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80057da:	0212      	lsls	r2, r2, #8
 80057dc:	4311      	orrs	r1, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057e2:	0852      	lsrs	r2, r2, #1
 80057e4:	3a01      	subs	r2, #1
 80057e6:	0552      	lsls	r2, r2, #21
 80057e8:	4311      	orrs	r1, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057ee:	0852      	lsrs	r2, r2, #1
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0652      	lsls	r2, r2, #25
 80057f4:	4311      	orrs	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057fa:	06d2      	lsls	r2, r2, #27
 80057fc:	430a      	orrs	r2, r1
 80057fe:	4943      	ldr	r1, [pc, #268]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005800:	4313      	orrs	r3, r2
 8005802:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b41      	ldr	r3, [pc, #260]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a40      	ldr	r2, [pc, #256]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 800580a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800580e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005810:	4b3e      	ldr	r3, [pc, #248]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a3d      	ldr	r2, [pc, #244]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800581a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fb fa48 	bl	8000cb0 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fb fa44 	bl	8000cb0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e066      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005836:	4b35      	ldr	r3, [pc, #212]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x530>
 8005842:	e05e      	b.n	8005902 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005844:	4b31      	ldr	r3, [pc, #196]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a30      	ldr	r2, [pc, #192]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 800584a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800584e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fb fa2e 	bl	8000cb0 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fb fa2a 	bl	8000cb0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e04c      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586a:	4b28      	ldr	r3, [pc, #160]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005876:	4b25      	ldr	r3, [pc, #148]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	4924      	ldr	r1, [pc, #144]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <HAL_RCC_OscConfig+0x620>)
 800587e:	4013      	ands	r3, r2
 8005880:	60cb      	str	r3, [r1, #12]
 8005882:	e03e      	b.n	8005902 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e039      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005890:	4b1e      	ldr	r3, [pc, #120]	@ (800590c <HAL_RCC_OscConfig+0x618>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f003 0203 	and.w	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d12c      	bne.n	80058fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	3b01      	subs	r3, #1
 80058b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d123      	bne.n	80058fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d11b      	bne.n	80058fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d113      	bne.n	80058fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	3b01      	subs	r3, #1
 80058e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	3b01      	subs	r3, #1
 80058f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000
 8005910:	019f800c 	.word	0x019f800c
 8005914:	feeefffc 	.word	0xfeeefffc

08005918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e11e      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005930:	4b91      	ldr	r3, [pc, #580]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d910      	bls.n	8005960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b8e      	ldr	r3, [pc, #568]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 020f 	bic.w	r2, r3, #15
 8005946:	498c      	ldr	r1, [pc, #560]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	4b8a      	ldr	r3, [pc, #552]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e106      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d073      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d129      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005974:	4b81      	ldr	r3, [pc, #516]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0f4      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005984:	f000 f972 	bl	8005c6c <RCC_GetSysClockFreqFromPLLSource>
 8005988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4a7c      	ldr	r2, [pc, #496]	@ (8005b80 <HAL_RCC_ClockConfig+0x268>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d93f      	bls.n	8005a12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005992:	4b7a      	ldr	r3, [pc, #488]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d033      	beq.n	8005a12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d12f      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059b2:	4b72      	ldr	r3, [pc, #456]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ba:	4a70      	ldr	r2, [pc, #448]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 80059bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e024      	b.n	8005a12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059d0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0c6      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e0:	4b66      	ldr	r3, [pc, #408]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0be      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059f0:	f000 f8ce 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 80059f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a61      	ldr	r2, [pc, #388]	@ (8005b80 <HAL_RCC_ClockConfig+0x268>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d909      	bls.n	8005a12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059fe:	4b5f      	ldr	r3, [pc, #380]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a06:	4a5d      	ldr	r2, [pc, #372]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a0e:	2380      	movs	r3, #128	@ 0x80
 8005a10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a12:	4b5a      	ldr	r3, [pc, #360]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4957      	ldr	r1, [pc, #348]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fb f944 	bl	8000cb0 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7fb f940 	bl	8000cb0 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e095      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	4b4e      	ldr	r3, [pc, #312]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 020c 	and.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1eb      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a6c:	4b43      	ldr	r3, [pc, #268]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a42      	ldr	r2, [pc, #264]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a84:	4b3d      	ldr	r3, [pc, #244]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a94:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4936      	ldr	r1, [pc, #216]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b80      	cmp	r3, #128	@ 0x80
 8005aac:	d105      	bne.n	8005aba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005aae:	4b33      	ldr	r3, [pc, #204]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4a32      	ldr	r2, [pc, #200]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aba:	4b2f      	ldr	r3, [pc, #188]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d21d      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 020f 	bic.w	r2, r3, #15
 8005ad0:	4929      	ldr	r1, [pc, #164]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ad8:	f7fb f8ea 	bl	8000cb0 <HAL_GetTick>
 8005adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae0:	f7fb f8e6 	bl	8000cb0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e03b      	b.n	8005b6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <HAL_RCC_ClockConfig+0x260>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1ed      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b10:	4b1a      	ldr	r3, [pc, #104]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4917      	ldr	r1, [pc, #92]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2e:	4b13      	ldr	r3, [pc, #76]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	490f      	ldr	r1, [pc, #60]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b42:	f000 f825 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8005b46:	4602      	mov	r2, r0
 8005b48:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	490c      	ldr	r1, [pc, #48]	@ (8005b84 <HAL_RCC_ClockConfig+0x26c>)
 8005b54:	5ccb      	ldrb	r3, [r1, r3]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b62:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fb f856 	bl	8000c18 <HAL_InitTick>
 8005b6c:	4603      	mov	r3, r0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40022000 	.word	0x40022000
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	04c4b400 	.word	0x04c4b400
 8005b84:	0800ae24 	.word	0x0800ae24
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	20000004 	.word	0x20000004

08005b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b96:	4b2c      	ldr	r3, [pc, #176]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e047      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ba8:	4b27      	ldr	r3, [pc, #156]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d102      	bne.n	8005bba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bb4:	4b26      	ldr	r3, [pc, #152]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	e03e      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bba:	4b23      	ldr	r3, [pc, #140]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b0c      	cmp	r3, #12
 8005bc4:	d136      	bne.n	8005c34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bc6:	4b20      	ldr	r3, [pc, #128]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d10c      	bne.n	8005bfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005be4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	4a16      	ldr	r2, [pc, #88]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bee:	68d2      	ldr	r2, [r2, #12]
 8005bf0:	0a12      	lsrs	r2, r2, #8
 8005bf2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	617b      	str	r3, [r7, #20]
      break;
 8005bfc:	e00c      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bfe:	4a13      	ldr	r2, [pc, #76]	@ (8005c4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c08:	68d2      	ldr	r2, [r2, #12]
 8005c0a:	0a12      	lsrs	r2, r2, #8
 8005c0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
      break;
 8005c16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	0e5b      	lsrs	r3, r3, #25
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	3301      	adds	r3, #1
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e001      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c38:	693b      	ldr	r3, [r7, #16]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	007a1200 	.word	0x007a1200

08005c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000000 	.word	0x20000000

08005c6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c72:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d10c      	bne.n	8005caa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c90:	4a17      	ldr	r2, [pc, #92]	@ (8005cf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c9a:	68d2      	ldr	r2, [r2, #12]
 8005c9c:	0a12      	lsrs	r2, r2, #8
 8005c9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	617b      	str	r3, [r7, #20]
    break;
 8005ca8:	e00c      	b.n	8005cc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005caa:	4a12      	ldr	r2, [pc, #72]	@ (8005cf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005cec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	0a12      	lsrs	r2, r2, #8
 8005cb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cbc:	fb02 f303 	mul.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
    break;
 8005cc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cc4:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0e5b      	lsrs	r3, r3, #25
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cde:	687b      	ldr	r3, [r7, #4]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	007a1200 	.word	0x007a1200
 8005cf4:	00f42400 	.word	0x00f42400

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d00:	2300      	movs	r3, #0
 8005d02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d04:	2300      	movs	r3, #0
 8005d06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8098 	beq.w	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d16:	2300      	movs	r3, #0
 8005d18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d1a:	4b43      	ldr	r3, [pc, #268]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d26:	4b40      	ldr	r3, [pc, #256]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d32:	4b3d      	ldr	r3, [pc, #244]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	60bb      	str	r3, [r7, #8]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d42:	4b3a      	ldr	r3, [pc, #232]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a39      	ldr	r2, [pc, #228]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d4e:	f7fa ffaf 	bl	8000cb0 <HAL_GetTick>
 8005d52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d54:	e009      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d56:	f7fa ffab 	bl	8000cb0 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d902      	bls.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	74fb      	strb	r3, [r7, #19]
        break;
 8005d68:	e005      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d6a:	4b30      	ldr	r3, [pc, #192]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ef      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d159      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01e      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d019      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d98:	4b23      	ldr	r3, [pc, #140]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da4:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005db4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dba:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dc4:	4a18      	ldr	r2, [pc, #96]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fa ff6b 	bl	8000cb0 <HAL_GetTick>
 8005dda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ddc:	e00b      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fa ff67 	bl	8000cb0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d902      	bls.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	74fb      	strb	r3, [r7, #19]
            break;
 8005df4:	e006      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ec      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0a:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	4903      	ldr	r1, [pc, #12]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e22:	7cfb      	ldrb	r3, [r7, #19]
 8005e24:	74bb      	strb	r3, [r7, #18]
 8005e26:	e005      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7cfb      	ldrb	r3, [r7, #19]
 8005e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e34:	7c7b      	ldrb	r3, [r7, #17]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d105      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3a:	4ba6      	ldr	r3, [pc, #664]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3e:	4aa5      	ldr	r2, [pc, #660]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e52:	4ba0      	ldr	r3, [pc, #640]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e58:	f023 0203 	bic.w	r2, r3, #3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	499c      	ldr	r1, [pc, #624]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e74:	4b97      	ldr	r3, [pc, #604]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7a:	f023 020c 	bic.w	r2, r3, #12
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4994      	ldr	r1, [pc, #592]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e96:	4b8f      	ldr	r3, [pc, #572]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	498b      	ldr	r1, [pc, #556]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005eb8:	4b86      	ldr	r3, [pc, #536]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	4983      	ldr	r1, [pc, #524]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eda:	4b7e      	ldr	r3, [pc, #504]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	497a      	ldr	r1, [pc, #488]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005efc:	4b75      	ldr	r3, [pc, #468]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	4972      	ldr	r1, [pc, #456]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4969      	ldr	r1, [pc, #420]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f40:	4b64      	ldr	r3, [pc, #400]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	4961      	ldr	r1, [pc, #388]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f62:	4b5c      	ldr	r3, [pc, #368]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	4958      	ldr	r1, [pc, #352]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d015      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f84:	4b53      	ldr	r3, [pc, #332]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f92:	4950      	ldr	r1, [pc, #320]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fbc:	4b45      	ldr	r3, [pc, #276]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	4942      	ldr	r1, [pc, #264]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fe6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ff4:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	4934      	ldr	r1, [pc, #208]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006012:	d105      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006014:	4b2f      	ldr	r3, [pc, #188]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4a2e      	ldr	r2, [pc, #184]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d015      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800602c:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006032:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603a:	4926      	ldr	r1, [pc, #152]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800604a:	d105      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800604c:	4b21      	ldr	r3, [pc, #132]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a20      	ldr	r2, [pc, #128]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006056:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d015      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006072:	4918      	ldr	r1, [pc, #96]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006082:	d105      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a12      	ldr	r2, [pc, #72]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800609c:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060aa:	490a      	ldr	r1, [pc, #40]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ba:	d105      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060bc:	4b05      	ldr	r3, [pc, #20]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a04      	ldr	r2, [pc, #16]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e049      	b.n	800617e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fa fcbe 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f000 f898 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	d001      	beq.n	80061a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e042      	b.n	8006226 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a21      	ldr	r2, [pc, #132]	@ (8006234 <HAL_TIM_Base_Start+0xac>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d018      	beq.n	80061e4 <HAL_TIM_Base_Start+0x5c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ba:	d013      	beq.n	80061e4 <HAL_TIM_Base_Start+0x5c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006238 <HAL_TIM_Base_Start+0xb0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <HAL_TIM_Base_Start+0x5c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	@ (800623c <HAL_TIM_Base_Start+0xb4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d009      	beq.n	80061e4 <HAL_TIM_Base_Start+0x5c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006240 <HAL_TIM_Base_Start+0xb8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_TIM_Base_Start+0x5c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <HAL_TIM_Base_Start+0xbc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d115      	bne.n	8006210 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	4b17      	ldr	r3, [pc, #92]	@ (8006248 <HAL_TIM_Base_Start+0xc0>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d015      	beq.n	8006222 <HAL_TIM_Base_Start+0x9a>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061fc:	d011      	beq.n	8006222 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0201 	orr.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620e:	e008      	b.n	8006222 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e000      	b.n	8006224 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40013400 	.word	0x40013400
 8006244:	40014000 	.word	0x40014000
 8006248:	00010007 	.word	0x00010007

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a42      	ldr	r2, [pc, #264]	@ (8006368 <TIM_Base_SetConfig+0x11c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x38>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x38>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3f      	ldr	r2, [pc, #252]	@ (800636c <TIM_Base_SetConfig+0x120>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x38>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3e      	ldr	r2, [pc, #248]	@ (8006370 <TIM_Base_SetConfig+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x38>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3d      	ldr	r2, [pc, #244]	@ (8006374 <TIM_Base_SetConfig+0x128>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a33      	ldr	r2, [pc, #204]	@ (8006368 <TIM_Base_SetConfig+0x11c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01b      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a4:	d017      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a30      	ldr	r2, [pc, #192]	@ (800636c <TIM_Base_SetConfig+0x120>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006370 <TIM_Base_SetConfig+0x124>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00f      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006374 <TIM_Base_SetConfig+0x128>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00b      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006378 <TIM_Base_SetConfig+0x12c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2c      	ldr	r2, [pc, #176]	@ (800637c <TIM_Base_SetConfig+0x130>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_Base_SetConfig+0x8a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006380 <TIM_Base_SetConfig+0x134>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d108      	bne.n	80062e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	@ (8006368 <TIM_Base_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00f      	beq.n	8006334 <TIM_Base_SetConfig+0xe8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a17      	ldr	r2, [pc, #92]	@ (8006374 <TIM_Base_SetConfig+0x128>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00b      	beq.n	8006334 <TIM_Base_SetConfig+0xe8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a16      	ldr	r2, [pc, #88]	@ (8006378 <TIM_Base_SetConfig+0x12c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <TIM_Base_SetConfig+0xe8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a15      	ldr	r2, [pc, #84]	@ (800637c <TIM_Base_SetConfig+0x130>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0xe8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a14      	ldr	r2, [pc, #80]	@ (8006380 <TIM_Base_SetConfig+0x134>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]
  }
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40013400 	.word	0x40013400
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e065      	b.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006412:	d013      	beq.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a18      	ldr	r2, [pc, #96]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a17      	ldr	r2, [pc, #92]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a12      	ldr	r2, [pc, #72]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a13      	ldr	r2, [pc, #76]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10c      	bne.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4313      	orrs	r3, r2
 800644c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40013400 	.word	0x40013400
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40014000 	.word	0x40014000

08006488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006498:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800649c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4013      	ands	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	1d3b      	adds	r3, r7, #4
 80064f6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006528:	b480      	push	{r7}
 800652a:	b09d      	sub	sp, #116	@ 0x74
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d81f      	bhi.n	800659a <USB_ActivateEndpoint+0x72>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <USB_ActivateEndpoint+0x38>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006571 	.word	0x08006571
 8006564:	0800658d 	.word	0x0800658d
 8006568:	080065a3 	.word	0x080065a3
 800656c:	0800657f 	.word	0x0800657f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006570:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006578:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800657c:	e012      	b.n	80065a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800657e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006582:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006586:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800658a:	e00b      	b.n	80065a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800658c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006594:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006598:	e004      	b.n	80065a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065a0:	e000      	b.n	80065a4 <USB_ActivateEndpoint+0x7c>
      break;
 80065a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	b21a      	sxth	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b21b      	sxth	r3, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b21b      	sxth	r3, r3
 80065ea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80065fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660c:	b29b      	uxth	r3, r3
 800660e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8178 	bne.w	800690a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8084 	beq.w	800672c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	4413      	add	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	00da      	lsls	r2, r3, #3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	b29b      	uxth	r3, r3
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	827b      	strh	r3, [r7, #18]
 8006666:	8a7b      	ldrh	r3, [r7, #18]
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <USB_ActivateEndpoint+0x180>
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	823b      	strh	r3, [r7, #16]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	8a3b      	ldrh	r3, [r7, #16]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d020      	beq.n	80066f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c6:	81bb      	strh	r3, [r7, #12]
 80066c8:	89bb      	ldrh	r3, [r7, #12]
 80066ca:	f083 0320 	eor.w	r3, r3, #32
 80066ce:	81bb      	strh	r3, [r7, #12]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	89bb      	ldrh	r3, [r7, #12]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
 80066f0:	e2d5      	b.n	8006c9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006708:	81fb      	strh	r3, [r7, #14]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	89fb      	ldrh	r3, [r7, #14]
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
 800672a:	e2b8      	b.n	8006c9e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	4413      	add	r3, r2
 800673e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00da      	lsls	r2, r3, #3
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	4413      	add	r3, r2
 800674a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	4413      	add	r3, r2
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	00da      	lsls	r2, r3, #3
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	4413      	add	r3, r2
 800677e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800678e:	b29a      	uxth	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b3e      	cmp	r3, #62	@ 0x3e
 800679a:	d91d      	bls.n	80067d8 <USB_ActivateEndpoint+0x2b0>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <USB_ActivateEndpoint+0x28e>
 80067b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067b2:	3b01      	subs	r3, #1
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067be:	b29b      	uxth	r3, r3
 80067c0:	029b      	lsls	r3, r3, #10
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	4313      	orrs	r3, r2
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e026      	b.n	8006826 <USB_ActivateEndpoint+0x2fe>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <USB_ActivateEndpoint+0x2ce>
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e017      	b.n	8006826 <USB_ActivateEndpoint+0x2fe>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <USB_ActivateEndpoint+0x2e8>
 800680a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800680c:	3301      	adds	r3, #1
 800680e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29a      	uxth	r2, r3
 8006816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29b      	uxth	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006834:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01b      	beq.n	8006876 <USB_ActivateEndpoint+0x34e>
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006854:	843b      	strh	r3, [r7, #32]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	8c3b      	ldrh	r3, [r7, #32]
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800686e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d124      	bne.n	80068c8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006894:	83bb      	strh	r3, [r7, #28]
 8006896:	8bbb      	ldrh	r3, [r7, #28]
 8006898:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800689c:	83bb      	strh	r3, [r7, #28]
 800689e:	8bbb      	ldrh	r3, [r7, #28]
 80068a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068a4:	83bb      	strh	r3, [r7, #28]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	441a      	add	r2, r3
 80068b0:	8bbb      	ldrh	r3, [r7, #28]
 80068b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	8013      	strh	r3, [r2, #0]
 80068c6:	e1ea      	b.n	8006c9e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068de:	83fb      	strh	r3, [r7, #30]
 80068e0:	8bfb      	ldrh	r3, [r7, #30]
 80068e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068e6:	83fb      	strh	r3, [r7, #30]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	8bfb      	ldrh	r3, [r7, #30]
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]
 8006908:	e1c9      	b.n	8006c9e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	78db      	ldrb	r3, [r3, #3]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d11e      	bne.n	8006950 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006966:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800699c:	4413      	add	r3, r2
 800699e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	891b      	ldrh	r3, [r3, #8]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d0:	4413      	add	r3, r2
 80069d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	00da      	lsls	r2, r3, #3
 80069da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	895b      	ldrh	r3, [r3, #10]
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 8093 	bne.w	8006b24 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01b      	beq.n	8006a52 <USB_ActivateEndpoint+0x52a>
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01b      	beq.n	8006aa2 <USB_ActivateEndpoint+0x57a>
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a80:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006aba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006abc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ac0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006ac2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ac4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ac8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]
 8006b22:	e0bc      	b.n	8006c9e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01d      	beq.n	8006b7c <USB_ActivateEndpoint+0x654>
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006b8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01d      	beq.n	8006bd4 <USB_ActivateEndpoint+0x6ac>
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	78db      	ldrb	r3, [r3, #3]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d024      	beq.n	8006c26 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006bf6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bfa:	f083 0320 	eor.w	r3, r3, #32
 8006bfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	8013      	strh	r3, [r2, #0]
 8006c24:	e01d      	b.n	8006c62 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c78:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c9e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3774      	adds	r7, #116	@ 0x74
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop

08006cb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b08d      	sub	sp, #52	@ 0x34
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	7b1b      	ldrb	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808e 	bne.w	8006de0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d044      	beq.n	8006d56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	81bb      	strh	r3, [r7, #12]
 8006cda:	89bb      	ldrh	r3, [r7, #12]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01b      	beq.n	8006d1c <USB_DeactivateEndpoint+0x6c>
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfa:	817b      	strh	r3, [r7, #10]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	897b      	ldrh	r3, [r7, #10]
 8006d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d32:	813b      	strh	r3, [r7, #8]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e192      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	827b      	strh	r3, [r7, #18]
 8006d64:	8a7b      	ldrh	r3, [r7, #18]
 8006d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_DeactivateEndpoint+0xf6>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	823b      	strh	r3, [r7, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	8a3b      	ldrh	r3, [r7, #16]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbc:	81fb      	strh	r3, [r7, #14]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	89fb      	ldrh	r3, [r7, #14]
 8006dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	8013      	strh	r3, [r2, #0]
 8006dde:	e14d      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 80a5 	bne.w	8006f34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	843b      	strh	r3, [r7, #32]
 8006df8:	8c3b      	ldrh	r3, [r7, #32]
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <USB_DeactivateEndpoint+0x18a>
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e18:	83fb      	strh	r3, [r7, #30]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8bfb      	ldrh	r3, [r7, #30]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	83bb      	strh	r3, [r7, #28]
 8006e48:	8bbb      	ldrh	r3, [r7, #28]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <USB_DeactivateEndpoint+0x1da>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e68:	837b      	strh	r3, [r7, #26]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8b7b      	ldrh	r3, [r7, #26]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea0:	833b      	strh	r3, [r7, #24]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8b3b      	ldrh	r3, [r7, #24]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed8:	82fb      	strh	r3, [r7, #22]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f10:	82bb      	strh	r3, [r7, #20]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	8abb      	ldrh	r3, [r7, #20]
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
 8006f32:	e0a3      	b.n	800707c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <USB_DeactivateEndpoint+0x2d4>
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f62:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006f92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01b      	beq.n	8006fd4 <USB_DeactivateEndpoint+0x324>
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007022:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3734      	adds	r7, #52	@ 0x34
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b0c2      	sub	sp, #264	@ 0x108
 800708e:	af00      	add	r7, sp, #0
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007098:	6018      	str	r0, [r3, #0]
 800709a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 86b7 	bne.w	8007e24 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d908      	bls.n	80070e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80070e2:	e007      	b.n	80070f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	7b1b      	ldrb	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13a      	bne.n	800717a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6959      	ldr	r1, [r3, #20]
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	88da      	ldrh	r2, [r3, #6]
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	b29b      	uxth	r3, r3
 8007122:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007126:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	f001 fc98 	bl	8008a60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800714a:	b29b      	uxth	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4413      	add	r3, r2
 8007166:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	f000 be1f 	b.w	8007db8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	78db      	ldrb	r3, [r3, #3]
 8007186:	2b02      	cmp	r3, #2
 8007188:	f040 8462 	bne.w	8007a50 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	f240 83df 	bls.w	8007968 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80071d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80071f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80071fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007202:	b29b      	uxth	r3, r3
 8007204:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 81c7 	beq.w	80075da <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800724c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	633b      	str	r3, [r7, #48]	@ 0x30
 8007258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d177      	bne.n	8007358 <USB_EPStartXfer+0x2ce>
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007288:	4413      	add	r3, r2
 800728a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800728c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00da      	lsls	r2, r3, #3
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	4413      	add	r3, r2
 800729e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ba:	d921      	bls.n	8007300 <USB_EPStartXfer+0x276>
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <USB_EPStartXfer+0x252>
 80072d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072d6:	3b01      	subs	r3, #1
 80072d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	e050      	b.n	80073a2 <USB_EPStartXfer+0x318>
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <USB_EPStartXfer+0x294>
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b29a      	uxth	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e041      	b.n	80073a2 <USB_EPStartXfer+0x318>
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <USB_EPStartXfer+0x2b4>
 8007334:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007338:	3301      	adds	r3, #1
 800733a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007348:	b29b      	uxth	r3, r3
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	b29b      	uxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e024      	b.n	80073a2 <USB_EPStartXfer+0x318>
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d11c      	bne.n	80073a2 <USB_EPStartXfer+0x318>
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737c:	4413      	add	r3, r2
 800737e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	4413      	add	r3, r2
 8007392:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739c:	b29a      	uxth	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	895b      	ldrh	r3, [r3, #10]
 80073ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6959      	ldr	r1, [r3, #20]
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073d0:	6800      	ldr	r0, [r0, #0]
 80073d2:	f001 fb45 	bl	8008a60 <USB_WritePMA>
            ep->xfer_buff += len;
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	441a      	add	r2, r3
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	429a      	cmp	r2, r3
 800740e:	d90f      	bls.n	8007430 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	621a      	str	r2, [r3, #32]
 800742e:	e00e      	b.n	800744e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d177      	bne.n	800754e <USB_EPStartXfer+0x4c4>
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007478:	b29b      	uxth	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4413      	add	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	00da      	lsls	r2, r3, #3
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	4413      	add	r3, r2
 8007494:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80074b0:	d921      	bls.n	80074f6 <USB_EPStartXfer+0x46c>
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <USB_EPStartXfer+0x448>
 80074c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074dc:	b29b      	uxth	r3, r3
 80074de:	029b      	lsls	r3, r3, #10
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	4313      	orrs	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e056      	b.n	80075a4 <USB_EPStartXfer+0x51a>
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <USB_EPStartXfer+0x48a>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750c:	b29a      	uxth	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	e047      	b.n	80075a4 <USB_EPStartXfer+0x51a>
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <USB_EPStartXfer+0x4aa>
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752e:	3301      	adds	r3, #1
 8007530:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	e02a      	b.n	80075a4 <USB_EPStartXfer+0x51a>
 800754e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d122      	bne.n	80075a4 <USB_EPStartXfer+0x51a>
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	623b      	str	r3, [r7, #32]
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	4413      	add	r3, r2
 8007580:	623b      	str	r3, [r7, #32]
 8007582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	00da      	lsls	r2, r3, #3
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	4413      	add	r3, r2
 8007594:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759e:	b29a      	uxth	r2, r3
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	891b      	ldrh	r3, [r3, #8]
 80075b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6959      	ldr	r1, [r3, #20]
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075d2:	6800      	ldr	r0, [r0, #0]
 80075d4:	f001 fa44 	bl	8008a60 <USB_WritePMA>
 80075d8:	e3ee      	b.n	8007db8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d177      	bne.n	80076da <USB_EPStartXfer+0x650>
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800760a:	4413      	add	r3, r2
 800760c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800760e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	00da      	lsls	r2, r3, #3
 800761c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800761e:	4413      	add	r3, r2
 8007620:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007624:	647b      	str	r3, [r7, #68]	@ 0x44
 8007626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007630:	b29a      	uxth	r2, r3
 8007632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763a:	2b3e      	cmp	r3, #62	@ 0x3e
 800763c:	d921      	bls.n	8007682 <USB_EPStartXfer+0x5f8>
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <USB_EPStartXfer+0x5d4>
 8007654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007658:	3b01      	subs	r3, #1
 800765a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800765e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29a      	uxth	r2, r3
 8007664:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007668:	b29b      	uxth	r3, r3
 800766a:	029b      	lsls	r3, r3, #10
 800766c:	b29b      	uxth	r3, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	b29b      	uxth	r3, r3
 8007672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767a:	b29a      	uxth	r2, r3
 800767c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e056      	b.n	8007730 <USB_EPStartXfer+0x6a6>
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <USB_EPStartXfer+0x616>
 800768a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007698:	b29a      	uxth	r2, r3
 800769a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e047      	b.n	8007730 <USB_EPStartXfer+0x6a6>
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <USB_EPStartXfer+0x636>
 80076b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ba:	3301      	adds	r3, #1
 80076bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4313      	orrs	r3, r2
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d6:	801a      	strh	r2, [r3, #0]
 80076d8:	e02a      	b.n	8007730 <USB_EPStartXfer+0x6a6>
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d122      	bne.n	8007730 <USB_EPStartXfer+0x6a6>
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770a:	4413      	add	r3, r2
 800770c:	653b      	str	r3, [r7, #80]	@ 0x50
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	00da      	lsls	r2, r3, #3
 800771c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800771e:	4413      	add	r3, r2
 8007720:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	b29a      	uxth	r2, r3
 800772c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6959      	ldr	r1, [r3, #20]
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	b29b      	uxth	r3, r3
 8007752:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007756:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800775a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	f001 f97e 	bl	8008a60 <USB_WritePMA>
            ep->xfer_buff += len;
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	441a      	add	r2, r3
 8007776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	d90f      	bls.n	80077be <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800779e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	621a      	str	r2, [r3, #32]
 80077bc:	e00e      	b.n	80077dc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80077ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2200      	movs	r2, #0
 80077da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d177      	bne.n	80078e8 <USB_EPStartXfer+0x85e>
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	4413      	add	r3, r2
 800781a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00da      	lsls	r2, r3, #3
 800782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782c:	4413      	add	r3, r2
 800782e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007832:	637b      	str	r3, [r7, #52]	@ 0x34
 8007834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783e:	b29a      	uxth	r2, r3
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007848:	2b3e      	cmp	r3, #62	@ 0x3e
 800784a:	d921      	bls.n	8007890 <USB_EPStartXfer+0x806>
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <USB_EPStartXfer+0x7e2>
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007866:	3b01      	subs	r3, #1
 8007868:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800786c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e050      	b.n	8007932 <USB_EPStartXfer+0x8a8>
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <USB_EPStartXfer+0x824>
 8007898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e041      	b.n	8007932 <USB_EPStartXfer+0x8a8>
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <USB_EPStartXfer+0x844>
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	3301      	adds	r3, #1
 80078ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e024      	b.n	8007932 <USB_EPStartXfer+0x8a8>
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d11c      	bne.n	8007932 <USB_EPStartXfer+0x8a8>
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800790c:	4413      	add	r3, r2
 800790e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	00da      	lsls	r2, r3, #3
 800791e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007920:	4413      	add	r3, r2
 8007922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	b29a      	uxth	r2, r3
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	895b      	ldrh	r3, [r3, #10]
 800793e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	b29b      	uxth	r3, r3
 8007954:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007958:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800795c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f001 f87d 	bl	8008a60 <USB_WritePMA>
 8007966:	e227      	b.n	8007db8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800799a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	441a      	add	r2, r3
 80079bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f4:	4413      	add	r3, r2
 80079f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	00da      	lsls	r2, r3, #3
 8007a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a08:	4413      	add	r3, r2
 8007a0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	891b      	ldrh	r3, [r3, #8]
 8007a26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6959      	ldr	r1, [r3, #20]
 8007a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	f001 f809 	bl	8008a60 <USB_WritePMA>
 8007a4e:	e1b3      	b.n	8007db8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	1ad2      	subs	r2, r2, r3
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80c6 	beq.w	8007c22 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d177      	bne.n	8007ba2 <USB_EPStartXfer+0xb18>
 8007ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ad2:	4413      	add	r3, r2
 8007ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007aec:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007afc:	801a      	strh	r2, [r3, #0]
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b02:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b04:	d921      	bls.n	8007b4a <USB_EPStartXfer+0xac0>
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <USB_EPStartXfer+0xa9c>
 8007b1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b20:	3b01      	subs	r3, #1
 8007b22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	029b      	lsls	r3, r3, #10
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	e050      	b.n	8007bec <USB_EPStartXfer+0xb62>
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <USB_EPStartXfer+0xade>
 8007b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e041      	b.n	8007bec <USB_EPStartXfer+0xb62>
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <USB_EPStartXfer+0xafe>
 8007b7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b82:	3301      	adds	r3, #1
 8007b84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	029b      	lsls	r3, r3, #10
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e024      	b.n	8007bec <USB_EPStartXfer+0xb62>
 8007ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d11c      	bne.n	8007bec <USB_EPStartXfer+0xb62>
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bc6:	4413      	add	r3, r2
 8007bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	00da      	lsls	r2, r3, #3
 8007bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bda:	4413      	add	r3, r2
 8007bdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	895b      	ldrh	r3, [r3, #10]
 8007bf8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6959      	ldr	r1, [r3, #20]
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	f000 ff20 	bl	8008a60 <USB_WritePMA>
 8007c20:	e0ca      	b.n	8007db8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d177      	bne.n	8007d22 <USB_EPStartXfer+0xc98>
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c52:	4413      	add	r3, r2
 8007c54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	00da      	lsls	r2, r3, #3
 8007c64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c84:	d921      	bls.n	8007cca <USB_EPStartXfer+0xc40>
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <USB_EPStartXfer+0xc1c>
 8007c9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	e05c      	b.n	8007d84 <USB_EPStartXfer+0xcfa>
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <USB_EPStartXfer+0xc5e>
 8007cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	e04d      	b.n	8007d84 <USB_EPStartXfer+0xcfa>
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	085b      	lsrs	r3, r3, #1
 8007cee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <USB_EPStartXfer+0xc7e>
 8007cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d02:	3301      	adds	r3, #1
 8007d04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	e030      	b.n	8007d84 <USB_EPStartXfer+0xcfa>
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d128      	bne.n	8007d84 <USB_EPStartXfer+0xcfa>
 8007d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d56:	4413      	add	r3, r2
 8007d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	00da      	lsls	r2, r3, #3
 8007d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d6e:	4413      	add	r3, r2
 8007d70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	891b      	ldrh	r3, [r3, #8]
 8007d90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6959      	ldr	r1, [r3, #20]
 8007da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007daa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007db2:	6800      	ldr	r0, [r0, #0]
 8007db4:	f000 fe54 	bl	8008a60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dde:	817b      	strh	r3, [r7, #10]
 8007de0:	897b      	ldrh	r3, [r7, #10]
 8007de2:	f083 0310 	eor.w	r3, r3, #16
 8007de6:	817b      	strh	r3, [r7, #10]
 8007de8:	897b      	ldrh	r3, [r7, #10]
 8007dea:	f083 0320 	eor.w	r3, r3, #32
 8007dee:	817b      	strh	r3, [r7, #10]
 8007df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	897b      	ldrh	r3, [r7, #10]
 8007e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	8013      	strh	r3, [r2, #0]
 8007e20:	f000 bcde 	b.w	80087e0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	7b1b      	ldrb	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 80bb 	bne.w	8007fac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d917      	bls.n	8007e82 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	619a      	str	r2, [r3, #24]
 8007e80:	e00e      	b.n	8007ea0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	00da      	lsls	r2, r3, #3
 8007ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f00:	d924      	bls.n	8007f4c <USB_EPStartXfer+0xec2>
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <USB_EPStartXfer+0xe98>
 8007f18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	029b      	lsls	r3, r3, #10
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	f000 bc10 	b.w	800876c <USB_EPStartXfer+0x16e2>
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10c      	bne.n	8007f6e <USB_EPStartXfer+0xee4>
 8007f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	e3fe      	b.n	800876c <USB_EPStartXfer+0x16e2>
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <USB_EPStartXfer+0xf04>
 8007f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f88:	3301      	adds	r3, #1
 8007f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	029b      	lsls	r3, r3, #10
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fa8:	801a      	strh	r2, [r3, #0]
 8007faa:	e3df      	b.n	800876c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	78db      	ldrb	r3, [r3, #3]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	f040 8218 	bne.w	80083ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f040 809d 	bne.w	800810a <USB_EPStartXfer+0x1080>
 8007fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	00da      	lsls	r2, r3, #3
 8008008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800800c:	4413      	add	r3, r2
 800800e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008012:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b3e      	cmp	r3, #62	@ 0x3e
 8008038:	d92b      	bls.n	8008092 <USB_EPStartXfer+0x1008>
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800804c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	2b00      	cmp	r3, #0
 800805e:	d104      	bne.n	800806a <USB_EPStartXfer+0xfe0>
 8008060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008064:	3b01      	subs	r3, #1
 8008066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800806a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29a      	uxth	r2, r3
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008088:	b29a      	uxth	r2, r3
 800808a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	e070      	b.n	8008174 <USB_EPStartXfer+0x10ea>
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10c      	bne.n	80080bc <USB_EPStartXfer+0x1032>
 80080a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e05b      	b.n	8008174 <USB_EPStartXfer+0x10ea>
 80080bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	085b      	lsrs	r3, r3, #1
 80080ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <USB_EPStartXfer+0x1062>
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e6:	3301      	adds	r3, #1
 80080e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4313      	orrs	r3, r2
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e034      	b.n	8008174 <USB_EPStartXfer+0x10ea>
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d12c      	bne.n	8008174 <USB_EPStartXfer+0x10ea>
 800811a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008136:	b29b      	uxth	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800813e:	4413      	add	r3, r2
 8008140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	00da      	lsls	r2, r3, #3
 8008152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008156:	4413      	add	r3, r2
 8008158:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800815c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 809d 	bne.w	80082ce <USB_EPStartXfer+0x1244>
 8008194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081b8:	4413      	add	r3, r2
 80081ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	00da      	lsls	r2, r3, #3
 80081cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80081fc:	d92b      	bls.n	8008256 <USB_EPStartXfer+0x11cc>
 80081fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <USB_EPStartXfer+0x11a4>
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008228:	3b01      	subs	r3, #1
 800822a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800822e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800823a:	b29b      	uxth	r3, r3
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	b29b      	uxth	r3, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	e069      	b.n	800832a <USB_EPStartXfer+0x12a0>
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10c      	bne.n	8008280 <USB_EPStartXfer+0x11f6>
 8008266:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	e054      	b.n	800832a <USB_EPStartXfer+0x12a0>
 8008280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	085b      	lsrs	r3, r3, #1
 800828e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d004      	beq.n	80082b0 <USB_EPStartXfer+0x1226>
 80082a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082aa:	3301      	adds	r3, #1
 80082ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082bc:	b29b      	uxth	r3, r3
 80082be:	029b      	lsls	r3, r3, #10
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4313      	orrs	r3, r2
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	e02d      	b.n	800832a <USB_EPStartXfer+0x12a0>
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d125      	bne.n	800832a <USB_EPStartXfer+0x12a0>
 80082de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082f4:	4413      	add	r3, r2
 80082f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	00da      	lsls	r2, r3, #3
 8008308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800830c:	4413      	add	r3, r2
 800830e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	b29a      	uxth	r2, r3
 8008324:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008328:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800832a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8218 	beq.w	800876c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800833c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800835c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <USB_EPStartXfer+0x12ea>
 8008368:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10d      	bne.n	8008390 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008374:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 81f5 	bne.w	800876c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008382:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 81ee 	bne.w	800876c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	441a      	add	r2, r3
 80083d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80083d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8013      	strh	r3, [r2, #0]
 80083ec:	e1be      	b.n	800876c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	78db      	ldrb	r3, [r3, #3]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	f040 81b4 	bne.w	8008768 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	429a      	cmp	r2, r3
 800841a:	d917      	bls.n	800844c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800842c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843c:	1ad2      	subs	r2, r2, r3
 800843e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	619a      	str	r2, [r3, #24]
 800844a:	e00e      	b.n	800846a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2200      	movs	r2, #0
 8008468:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 8085 	bne.w	8008586 <USB_EPStartXfer+0x14fc>
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008498:	b29b      	uxth	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084a0:	4413      	add	r3, r2
 80084a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	00da      	lsls	r2, r3, #3
 80084b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084b8:	4413      	add	r3, r2
 80084ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084da:	2b3e      	cmp	r3, #62	@ 0x3e
 80084dc:	d923      	bls.n	8008526 <USB_EPStartXfer+0x149c>
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <USB_EPStartXfer+0x1474>
 80084f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084f8:	3b01      	subs	r3, #1
 80084fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800850a:	b29b      	uxth	r3, r3
 800850c:	029b      	lsls	r3, r3, #10
 800850e:	b29b      	uxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e060      	b.n	80085e8 <USB_EPStartXfer+0x155e>
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10c      	bne.n	8008548 <USB_EPStartXfer+0x14be>
 800852e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	e04f      	b.n	80085e8 <USB_EPStartXfer+0x155e>
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USB_EPStartXfer+0x14de>
 800855e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008562:	3301      	adds	r3, #1
 8008564:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29a      	uxth	r2, r3
 8008570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008574:	b29b      	uxth	r3, r3
 8008576:	029b      	lsls	r3, r3, #10
 8008578:	b29b      	uxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b29a      	uxth	r2, r3
 800857e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008582:	801a      	strh	r2, [r3, #0]
 8008584:	e030      	b.n	80085e8 <USB_EPStartXfer+0x155e>
 8008586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d128      	bne.n	80085e8 <USB_EPStartXfer+0x155e>
 8008596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085ba:	4413      	add	r3, r2
 80085bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	00da      	lsls	r2, r3, #3
 80085ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085d2:	4413      	add	r3, r2
 80085d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 8085 	bne.w	8008712 <USB_EPStartXfer+0x1688>
 8008608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	00da      	lsls	r2, r3, #3
 8008640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008644:	4413      	add	r3, r2
 8008646:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800864a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800864e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008666:	2b3e      	cmp	r3, #62	@ 0x3e
 8008668:	d923      	bls.n	80086b2 <USB_EPStartXfer+0x1628>
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <USB_EPStartXfer+0x1600>
 8008680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008684:	3b01      	subs	r3, #1
 8008686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800868a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008696:	b29b      	uxth	r3, r3
 8008698:	029b      	lsls	r3, r3, #10
 800869a:	b29b      	uxth	r3, r3
 800869c:	4313      	orrs	r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e05c      	b.n	800876c <USB_EPStartXfer+0x16e2>
 80086b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10c      	bne.n	80086d4 <USB_EPStartXfer+0x164a>
 80086ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	e04b      	b.n	800876c <USB_EPStartXfer+0x16e2>
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d004      	beq.n	80086f4 <USB_EPStartXfer+0x166a>
 80086ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ee:	3301      	adds	r3, #1
 80086f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008700:	b29b      	uxth	r3, r3
 8008702:	029b      	lsls	r3, r3, #10
 8008704:	b29b      	uxth	r3, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	b29a      	uxth	r2, r3
 800870a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	e02c      	b.n	800876c <USB_EPStartXfer+0x16e2>
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d124      	bne.n	800876c <USB_EPStartXfer+0x16e2>
 8008722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008738:	4413      	add	r3, r2
 800873a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800873e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00da      	lsls	r2, r3, #3
 800874c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008750:	4413      	add	r3, r2
 8008752:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008756:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800875a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875e:	b29a      	uxth	r2, r3
 8008760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	e001      	b.n	800876c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e03a      	b.n	80087e2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800878e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008792:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008796:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800879a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800879e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087dc:	b29b      	uxth	r3, r3
 80087de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	785b      	ldrb	r3, [r3, #1]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d020      	beq.n	8008840 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008814:	81bb      	strh	r3, [r7, #12]
 8008816:	89bb      	ldrh	r3, [r7, #12]
 8008818:	f083 0310 	eor.w	r3, r3, #16
 800881c:	81bb      	strh	r3, [r7, #12]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	441a      	add	r2, r3
 8008828:	89bb      	ldrh	r3, [r7, #12]
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]
 800883e:	e01f      	b.n	8008880 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008856:	81fb      	strh	r3, [r7, #14]
 8008858:	89fb      	ldrh	r3, [r7, #14]
 800885a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800885e:	81fb      	strh	r3, [r7, #14]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	441a      	add	r2, r3
 800886a:	89fb      	ldrh	r3, [r7, #14]
 800886c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887c:	b29b      	uxth	r3, r3
 800887e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800888e:	b480      	push	{r7}
 8008890:	b087      	sub	sp, #28
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	7b1b      	ldrb	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f040 809d 	bne.w	80089dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d04c      	beq.n	8008944 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	823b      	strh	r3, [r7, #16]
 80088b8:	8a3b      	ldrh	r3, [r7, #16]
 80088ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01b      	beq.n	80088fa <USB_EPClearStall+0x6c>
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d8:	81fb      	strh	r3, [r7, #14]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	78db      	ldrb	r3, [r3, #3]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d06c      	beq.n	80089dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008918:	81bb      	strh	r3, [r7, #12]
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	f083 0320 	eor.w	r3, r3, #32
 8008920:	81bb      	strh	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	89bb      	ldrh	r3, [r7, #12]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
 8008942:	e04b      	b.n	80089dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	82fb      	strh	r3, [r7, #22]
 8008952:	8afb      	ldrh	r3, [r7, #22]
 8008954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01b      	beq.n	8008994 <USB_EPClearStall+0x106>
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800896e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008972:	82bb      	strh	r3, [r7, #20]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	441a      	add	r2, r3
 800897e:	8abb      	ldrh	r3, [r7, #20]
 8008980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800898c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008990:	b29b      	uxth	r3, r3
 8008992:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089aa:	827b      	strh	r3, [r7, #18]
 80089ac:	8a7b      	ldrh	r3, [r7, #18]
 80089ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089b2:	827b      	strh	r3, [r7, #18]
 80089b4:	8a7b      	ldrh	r3, [r7, #18]
 80089b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089ba:	827b      	strh	r3, [r7, #18]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	8a7b      	ldrh	r3, [r7, #18]
 80089c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2280      	movs	r2, #128	@ 0x80
 8008a00:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a52:	68fb      	ldr	r3, [r7, #12]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b08b      	sub	sp, #44	@ 0x2c
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	460b      	mov	r3, r1
 8008a70:	80fb      	strh	r3, [r7, #6]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a76:	88bb      	ldrh	r3, [r7, #4]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a96:	e01b      	b.n	8008ad0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	b21a      	sxth	r2, r3
 8008aa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	8a7a      	ldrh	r2, [r7, #18]
 8008ab6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	3302      	adds	r3, #2
 8008abc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	3b01      	subs	r3, #1
 8008ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e0      	bne.n	8008a98 <USB_WritePMA+0x38>
  }
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	372c      	adds	r7, #44	@ 0x2c
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b08b      	sub	sp, #44	@ 0x2c
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	460b      	mov	r3, r1
 8008af4:	80fb      	strh	r3, [r7, #6]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008afa:	88bb      	ldrh	r3, [r7, #4]
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1a:	e018      	b.n	8008b4e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	3302      	adds	r3, #2
 8008b28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	3301      	adds	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e3      	bne.n	8008b1c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b54:	88bb      	ldrh	r3, [r7, #4]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	701a      	strb	r2, [r3, #0]
  }
}
 8008b70:	bf00      	nop
 8008b72:	372c      	adds	r7, #44	@ 0x2c
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b8c:	f002 f8a4 	bl	800acd8 <USBD_static_malloc>
 8008b90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d105      	bne.n	8008ba4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e066      	b.n	8008c72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7c1b      	ldrb	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d119      	bne.n	8008be8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bb8:	2202      	movs	r2, #2
 8008bba:	2181      	movs	r1, #129	@ 0x81
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 ff32 	bl	800aa26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bcc:	2202      	movs	r2, #2
 8008bce:	2101      	movs	r1, #1
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 ff28 	bl	800aa26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008be6:	e016      	b.n	8008c16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008be8:	2340      	movs	r3, #64	@ 0x40
 8008bea:	2202      	movs	r2, #2
 8008bec:	2181      	movs	r1, #129	@ 0x81
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 ff19 	bl	800aa26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bfa:	2340      	movs	r3, #64	@ 0x40
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	2101      	movs	r1, #1
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 ff10 	bl	800aa26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2210      	movs	r2, #16
 8008c12:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c16:	2308      	movs	r3, #8
 8008c18:	2203      	movs	r2, #3
 8008c1a:	2182      	movs	r1, #130	@ 0x82
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 ff02 	bl	800aa26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7c1b      	ldrb	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c56:	2101      	movs	r1, #1
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 ffd3 	bl	800ac04 <USBD_LL_PrepareReceive>
 8008c5e:	e007      	b.n	8008c70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c66:	2340      	movs	r3, #64	@ 0x40
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 ffca 	bl	800ac04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c86:	2181      	movs	r1, #129	@ 0x81
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fef2 	bl	800aa72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 feeb 	bl	800aa72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ca4:	2182      	movs	r1, #130	@ 0x82
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fee3 	bl	800aa72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 f80c 	bl	800acf4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e0af      	b.n	8008e78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d03f      	beq.n	8008da4 <USBD_CDC_Setup+0xb4>
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	f040 809f 	bne.w	8008e68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d02e      	beq.n	8008d90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	b25b      	sxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	da16      	bge.n	8008d6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008d48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	88d2      	ldrh	r2, [r2, #6]
 8008d4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	88db      	ldrh	r3, [r3, #6]
 8008d54:	2b07      	cmp	r3, #7
 8008d56:	bf28      	it	cs
 8008d58:	2307      	movcs	r3, #7
 8008d5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	89fa      	ldrh	r2, [r7, #14]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fa9d 	bl	800a2a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d68:	e085      	b.n	8008e76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785a      	ldrb	r2, [r3, #1]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	88db      	ldrh	r3, [r3, #6]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008d80:	6939      	ldr	r1, [r7, #16]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	88db      	ldrh	r3, [r3, #6]
 8008d86:	461a      	mov	r2, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fab6 	bl	800a2fa <USBD_CtlPrepareRx>
      break;
 8008d8e:	e072      	b.n	8008e76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	7850      	ldrb	r0, [r2, #1]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	4798      	blx	r3
      break;
 8008da2:	e068      	b.n	8008e76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b0b      	cmp	r3, #11
 8008daa:	d852      	bhi.n	8008e52 <USBD_CDC_Setup+0x162>
 8008dac:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <USBD_CDC_Setup+0xc4>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e61 	.word	0x08008e61
 8008dbc:	08008e53 	.word	0x08008e53
 8008dc0:	08008e53 	.word	0x08008e53
 8008dc4:	08008e53 	.word	0x08008e53
 8008dc8:	08008e53 	.word	0x08008e53
 8008dcc:	08008e53 	.word	0x08008e53
 8008dd0:	08008e53 	.word	0x08008e53
 8008dd4:	08008e53 	.word	0x08008e53
 8008dd8:	08008e53 	.word	0x08008e53
 8008ddc:	08008e0f 	.word	0x08008e0f
 8008de0:	08008e39 	.word	0x08008e39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d107      	bne.n	8008e00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008df0:	f107 030a 	add.w	r3, r7, #10
 8008df4:	2202      	movs	r2, #2
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fa52 	bl	800a2a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dfe:	e032      	b.n	8008e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f9dc 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0c:	e02b      	b.n	8008e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d107      	bne.n	8008e2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e1a:	f107 030d 	add.w	r3, r7, #13
 8008e1e:	2201      	movs	r2, #1
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fa3d 	bl	800a2a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e28:	e01d      	b.n	8008e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f9c7 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	75fb      	strb	r3, [r7, #23]
          break;
 8008e36:	e016      	b.n	8008e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d00f      	beq.n	8008e64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f9ba 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e50:	e008      	b.n	8008e64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f9b3 	bl	800a1c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5e:	e002      	b.n	8008e66 <USBD_CDC_Setup+0x176>
          break;
 8008e60:	bf00      	nop
 8008e62:	e008      	b.n	8008e76 <USBD_CDC_Setup+0x186>
          break;
 8008e64:	bf00      	nop
      }
      break;
 8008e66:	e006      	b.n	8008e76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 f9a8 	bl	800a1c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e04f      	b.n	8008f42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3318      	adds	r3, #24
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d029      	beq.n	8008f14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	3318      	adds	r3, #24
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	78f9      	ldrb	r1, [r7, #3]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	4403      	add	r3, r0
 8008ee0:	3320      	adds	r3, #32
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ee8:	fb01 f303 	mul.w	r3, r1, r3
 8008eec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3318      	adds	r3, #24
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f06:	78f9      	ldrb	r1, [r7, #3]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fe58 	bl	800abc2 <USBD_LL_Transmit>
 8008f12:	e015      	b.n	8008f40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e015      	b.n	8008f98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fe68 	bl	800ac46 <USBD_LL_GetRxDataSize>
 8008f76:	4602      	mov	r2, r0
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f92:	4611      	mov	r1, r2
 8008f94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e01a      	b.n	8008ff0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d014      	beq.n	8008fee <USBD_CDC_EP0_RxReady+0x4e>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fca:	2bff      	cmp	r3, #255	@ 0xff
 8008fcc:	d00f      	beq.n	8008fee <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008fdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fe4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	22ff      	movs	r2, #255	@ 0xff
 8008fea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2243      	movs	r2, #67	@ 0x43
 8009004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	@ (8009014 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000094 	.word	0x20000094

08009018 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2243      	movs	r2, #67	@ 0x43
 8009024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009026:	4b03      	ldr	r3, [pc, #12]	@ (8009034 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000050 	.word	0x20000050

08009038 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2243      	movs	r2, #67	@ 0x43
 8009044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009046:	4b03      	ldr	r3, [pc, #12]	@ (8009054 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	200000d8 	.word	0x200000d8

08009058 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	220a      	movs	r2, #10
 8009064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009066:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	2000000c 	.word	0x2000000c

08009078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	e004      	b.n	8009096 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b087      	sub	sp, #28
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80090bc:	2303      	movs	r3, #3
 80090be:	e008      	b.n	80090d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e004      	b.n	8009104 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800911e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800912a:	2303      	movs	r3, #3
 800912c:	e016      	b.n	800915c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7c1b      	ldrb	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800913c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 fd5e 	bl	800ac04 <USBD_LL_PrepareReceive>
 8009148:	e007      	b.n	800915a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009150:	2340      	movs	r3, #64	@ 0x40
 8009152:	2101      	movs	r1, #1
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fd55 	bl	800ac04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e01f      	b.n	80091bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	79fa      	ldrb	r2, [r7, #7]
 80091ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f001 fbbd 	bl	800a930 <USBD_LL_Init>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
 80091da:	e016      	b.n	800920a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f8:	f107 020e 	add.w	r2, r7, #14
 80091fc:	4610      	mov	r0, r2
 80091fe:	4798      	blx	r3
 8009200:	4602      	mov	r2, r0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fbe8 	bl	800a9f0 <USBD_LL_Start>
 8009220:	4603      	mov	r3, r0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800924c:	2303      	movs	r3, #3
 800924e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
 800926a:	4603      	mov	r3, r0
 800926c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	4611      	mov	r1, r2
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
  }

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 ff46 	bl	800a14c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80092ce:	461a      	mov	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d01a      	beq.n	800931a <USBD_LL_SetupStage+0x72>
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d822      	bhi.n	800932e <USBD_LL_SetupStage+0x86>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <USBD_LL_SetupStage+0x4a>
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d00a      	beq.n	8009306 <USBD_LL_SetupStage+0x5e>
 80092f0:	e01d      	b.n	800932e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f9ee 	bl	80096dc <USBD_StdDevReq>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]
      break;
 8009304:	e020      	b.n	8009348 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fa52 	bl	80097b8 <USBD_StdItfReq>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
      break;
 8009318:	e016      	b.n	8009348 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa91 	bl	800984a <USBD_StdEPReq>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
      break;
 800932c:	e00c      	b.n	8009348 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009334:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009338:	b2db      	uxtb	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 fbb7 	bl	800aab0 <USBD_LL_StallEP>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
      break;
 8009346:	bf00      	nop
  }

  return ret;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	460b      	mov	r3, r1
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d138      	bne.n	80093d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800936c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009374:	2b03      	cmp	r3, #3
 8009376:	d14a      	bne.n	800940e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d913      	bls.n	80093ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	1ad2      	subs	r2, r2, r3
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	4293      	cmp	r3, r2
 800939c:	bf28      	it	cs
 800939e:	4613      	movcs	r3, r2
 80093a0:	461a      	mov	r2, r3
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 ffc5 	bl	800a334 <USBD_CtlContinueRx>
 80093aa:	e030      	b.n	800940e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d10b      	bne.n	80093d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 ffc0 	bl	800a356 <USBD_CtlSendStatus>
 80093d6:	e01a      	b.n	800940e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d114      	bne.n	800940e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	7afa      	ldrb	r2, [r7, #11]
 80093fa:	4611      	mov	r1, r2
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	4798      	blx	r3
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	e000      	b.n	8009410 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	460b      	mov	r3, r1
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d16b      	bne.n	8009504 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3314      	adds	r3, #20
 8009430:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009438:	2b02      	cmp	r3, #2
 800943a:	d156      	bne.n	80094ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	429a      	cmp	r2, r3
 8009446:	d914      	bls.n	8009472 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	1ad2      	subs	r2, r2, r3
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	461a      	mov	r2, r3
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 ff3a 	bl	800a2d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f001 fbca 	bl	800ac04 <USBD_LL_PrepareReceive>
 8009470:	e03b      	b.n	80094ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	d11c      	bne.n	80094b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009486:	429a      	cmp	r2, r3
 8009488:	d316      	bcc.n	80094b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009494:	429a      	cmp	r2, r3
 8009496:	d20f      	bcs.n	80094b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009498:	2200      	movs	r2, #0
 800949a:	2100      	movs	r1, #0
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 ff1b 	bl	800a2d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094aa:	2300      	movs	r3, #0
 80094ac:	2200      	movs	r2, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f001 fba7 	bl	800ac04 <USBD_LL_PrepareReceive>
 80094b6:	e018      	b.n	80094ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d10b      	bne.n	80094dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094dc:	2180      	movs	r1, #128	@ 0x80
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f001 fae6 	bl	800aab0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 ff49 	bl	800a37c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d122      	bne.n	800953a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff fe98 	bl	800922a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009502:	e01a      	b.n	800953a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b03      	cmp	r3, #3
 800950e:	d114      	bne.n	800953a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00e      	beq.n	800953a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	7afa      	ldrb	r2, [r7, #11]
 8009526:	4611      	mov	r1, r2
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	4798      	blx	r3
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	e000      	b.n	800953c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e02f      	b.n	80095d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00f      	beq.n	80095a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6852      	ldr	r2, [r2, #4]
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	4611      	mov	r1, r2
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095a2:	2340      	movs	r3, #64	@ 0x40
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 fa3c 	bl	800aa26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2240      	movs	r2, #64	@ 0x40
 80095ba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095be:	2340      	movs	r3, #64	@ 0x40
 80095c0:	2200      	movs	r2, #0
 80095c2:	2180      	movs	r1, #128	@ 0x80
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fa2e 	bl	800aa26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2240      	movs	r2, #64	@ 0x40
 80095d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960e:	b2da      	uxtb	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b04      	cmp	r3, #4
 800963e:	d106      	bne.n	800964e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009646:	b2da      	uxtb	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800966e:	2303      	movs	r3, #3
 8009670:	e012      	b.n	8009698 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d10b      	bne.n	8009696 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	3301      	adds	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096be:	8a3b      	ldrh	r3, [r7, #16]
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	b21a      	sxth	r2, r3
 80096c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b21b      	sxth	r3, r3
 80096cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096ce:	89fb      	ldrh	r3, [r7, #14]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096f2:	2b40      	cmp	r3, #64	@ 0x40
 80096f4:	d005      	beq.n	8009702 <USBD_StdDevReq+0x26>
 80096f6:	2b40      	cmp	r3, #64	@ 0x40
 80096f8:	d853      	bhi.n	80097a2 <USBD_StdDevReq+0xc6>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <USBD_StdDevReq+0x3a>
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d14f      	bne.n	80097a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
      break;
 8009714:	e04a      	b.n	80097ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b09      	cmp	r3, #9
 800971c:	d83b      	bhi.n	8009796 <USBD_StdDevReq+0xba>
 800971e:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <USBD_StdDevReq+0x48>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009779 	.word	0x08009779
 8009728:	0800978d 	.word	0x0800978d
 800972c:	08009797 	.word	0x08009797
 8009730:	08009783 	.word	0x08009783
 8009734:	08009797 	.word	0x08009797
 8009738:	08009757 	.word	0x08009757
 800973c:	0800974d 	.word	0x0800974d
 8009740:	08009797 	.word	0x08009797
 8009744:	0800976f 	.word	0x0800976f
 8009748:	08009761 	.word	0x08009761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f9de 	bl	8009b10 <USBD_GetDescriptor>
          break;
 8009754:	e024      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fb6d 	bl	8009e38 <USBD_SetAddress>
          break;
 800975e:	e01f      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fbac 	bl	8009ec0 <USBD_SetConfig>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
          break;
 800976c:	e018      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fc4b 	bl	800a00c <USBD_GetConfig>
          break;
 8009776:	e013      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fc7c 	bl	800a078 <USBD_GetStatus>
          break;
 8009780:	e00e      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fcab 	bl	800a0e0 <USBD_SetFeature>
          break;
 800978a:	e009      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fcba 	bl	800a108 <USBD_ClrFeature>
          break;
 8009794:	e004      	b.n	80097a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fd11 	bl	800a1c0 <USBD_CtlError>
          break;
 800979e:	bf00      	nop
      }
      break;
 80097a0:	e004      	b.n	80097ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fd0b 	bl	800a1c0 <USBD_CtlError>
      break;
 80097aa:	bf00      	nop
  }

  return ret;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop

080097b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097ce:	2b40      	cmp	r3, #64	@ 0x40
 80097d0:	d005      	beq.n	80097de <USBD_StdItfReq+0x26>
 80097d2:	2b40      	cmp	r3, #64	@ 0x40
 80097d4:	d82f      	bhi.n	8009836 <USBD_StdItfReq+0x7e>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <USBD_StdItfReq+0x26>
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d12b      	bne.n	8009836 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d81d      	bhi.n	8009828 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	889b      	ldrh	r3, [r3, #4]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d813      	bhi.n	800981e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	88db      	ldrh	r3, [r3, #6]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d110      	bne.n	8009832 <USBD_StdItfReq+0x7a>
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10d      	bne.n	8009832 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fd9d 	bl	800a356 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800981c:	e009      	b.n	8009832 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fccd 	bl	800a1c0 <USBD_CtlError>
          break;
 8009826:	e004      	b.n	8009832 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fcc8 	bl	800a1c0 <USBD_CtlError>
          break;
 8009830:	e000      	b.n	8009834 <USBD_StdItfReq+0x7c>
          break;
 8009832:	bf00      	nop
      }
      break;
 8009834:	e004      	b.n	8009840 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fcc1 	bl	800a1c0 <USBD_CtlError>
      break;
 800983e:	bf00      	nop
  }

  return ret;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	889b      	ldrh	r3, [r3, #4]
 800985c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009866:	2b40      	cmp	r3, #64	@ 0x40
 8009868:	d007      	beq.n	800987a <USBD_StdEPReq+0x30>
 800986a:	2b40      	cmp	r3, #64	@ 0x40
 800986c:	f200 8145 	bhi.w	8009afa <USBD_StdEPReq+0x2b0>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00c      	beq.n	800988e <USBD_StdEPReq+0x44>
 8009874:	2b20      	cmp	r3, #32
 8009876:	f040 8140 	bne.w	8009afa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
      break;
 800988c:	e13a      	b.n	8009b04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	2b03      	cmp	r3, #3
 8009894:	d007      	beq.n	80098a6 <USBD_StdEPReq+0x5c>
 8009896:	2b03      	cmp	r3, #3
 8009898:	f300 8129 	bgt.w	8009aee <USBD_StdEPReq+0x2a4>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d07f      	beq.n	80099a0 <USBD_StdEPReq+0x156>
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d03c      	beq.n	800991e <USBD_StdEPReq+0xd4>
 80098a4:	e123      	b.n	8009aee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d002      	beq.n	80098b8 <USBD_StdEPReq+0x6e>
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d016      	beq.n	80098e4 <USBD_StdEPReq+0x9a>
 80098b6:	e02c      	b.n	8009912 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00d      	beq.n	80098da <USBD_StdEPReq+0x90>
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b80      	cmp	r3, #128	@ 0x80
 80098c2:	d00a      	beq.n	80098da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 f8f1 	bl	800aab0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ce:	2180      	movs	r1, #128	@ 0x80
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f8ed 	bl	800aab0 <USBD_LL_StallEP>
 80098d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098d8:	e020      	b.n	800991c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fc6f 	bl	800a1c0 <USBD_CtlError>
              break;
 80098e2:	e01b      	b.n	800991c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	885b      	ldrh	r3, [r3, #2]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10e      	bne.n	800990a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <USBD_StdEPReq+0xc0>
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b80      	cmp	r3, #128	@ 0x80
 80098f6:	d008      	beq.n	800990a <USBD_StdEPReq+0xc0>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	88db      	ldrh	r3, [r3, #6]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 f8d3 	bl	800aab0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fd23 	bl	800a356 <USBD_CtlSendStatus>

              break;
 8009910:	e004      	b.n	800991c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc53 	bl	800a1c0 <USBD_CtlError>
              break;
 800991a:	bf00      	nop
          }
          break;
 800991c:	e0ec      	b.n	8009af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d002      	beq.n	8009930 <USBD_StdEPReq+0xe6>
 800992a:	2b03      	cmp	r3, #3
 800992c:	d016      	beq.n	800995c <USBD_StdEPReq+0x112>
 800992e:	e030      	b.n	8009992 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00d      	beq.n	8009952 <USBD_StdEPReq+0x108>
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	2b80      	cmp	r3, #128	@ 0x80
 800993a:	d00a      	beq.n	8009952 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f8b5 	bl	800aab0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009946:	2180      	movs	r1, #128	@ 0x80
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 f8b1 	bl	800aab0 <USBD_LL_StallEP>
 800994e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009950:	e025      	b.n	800999e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fc33 	bl	800a1c0 <USBD_CtlError>
              break;
 800995a:	e020      	b.n	800999e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	885b      	ldrh	r3, [r3, #2]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d11b      	bne.n	800999c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f8bb 	bl	800aaee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fcec 	bl	800a356 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	4798      	blx	r3
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009990:	e004      	b.n	800999c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc13 	bl	800a1c0 <USBD_CtlError>
              break;
 800999a:	e000      	b.n	800999e <USBD_StdEPReq+0x154>
              break;
 800999c:	bf00      	nop
          }
          break;
 800999e:	e0ab      	b.n	8009af8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d002      	beq.n	80099b2 <USBD_StdEPReq+0x168>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d032      	beq.n	8009a16 <USBD_StdEPReq+0x1cc>
 80099b0:	e097      	b.n	8009ae2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <USBD_StdEPReq+0x17e>
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	2b80      	cmp	r3, #128	@ 0x80
 80099bc:	d004      	beq.n	80099c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fbfd 	bl	800a1c0 <USBD_CtlError>
                break;
 80099c6:	e091      	b.n	8009aec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	da0b      	bge.n	80099e8 <USBD_StdEPReq+0x19e>
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	3310      	adds	r3, #16
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	3304      	adds	r3, #4
 80099e6:	e00b      	b.n	8009a00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fc47 	bl	800a2a2 <USBD_CtlSendData>
              break;
 8009a14:	e06a      	b.n	8009aec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da11      	bge.n	8009a42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	f003 020f 	and.w	r2, r3, #15
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	440b      	add	r3, r1
 8009a30:	3324      	adds	r3, #36	@ 0x24
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d117      	bne.n	8009a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fbc0 	bl	800a1c0 <USBD_CtlError>
                  break;
 8009a40:	e054      	b.n	8009aec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	f003 020f 	and.w	r2, r3, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fbad 	bl	800a1c0 <USBD_CtlError>
                  break;
 8009a66:	e041      	b.n	8009aec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da0b      	bge.n	8009a88 <USBD_StdEPReq+0x23e>
 8009a70:	7bbb      	ldrb	r3, [r7, #14]
 8009a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	3310      	adds	r3, #16
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	3304      	adds	r3, #4
 8009a86:	e00b      	b.n	8009aa0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <USBD_StdEPReq+0x264>
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b80      	cmp	r3, #128	@ 0x80
 8009aac:	d103      	bne.n	8009ab6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e00e      	b.n	8009ad4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f836 	bl	800ab2c <USBD_LL_IsStallEP>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	e002      	b.n	8009ad4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fbe1 	bl	800a2a2 <USBD_CtlSendData>
              break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fb6b 	bl	800a1c0 <USBD_CtlError>
              break;
 8009aea:	bf00      	nop
          }
          break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fb65 	bl	800a1c0 <USBD_CtlError>
          break;
 8009af6:	bf00      	nop
      }
      break;
 8009af8:	e004      	b.n	8009b04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb5f 	bl	800a1c0 <USBD_CtlError>
      break;
 8009b02:	bf00      	nop
  }

  return ret;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	885b      	ldrh	r3, [r3, #2]
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b0e      	cmp	r3, #14
 8009b32:	f200 8152 	bhi.w	8009dda <USBD_GetDescriptor+0x2ca>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <USBD_GetDescriptor+0x2c>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009bad 	.word	0x08009bad
 8009b40:	08009bc5 	.word	0x08009bc5
 8009b44:	08009c05 	.word	0x08009c05
 8009b48:	08009ddb 	.word	0x08009ddb
 8009b4c:	08009ddb 	.word	0x08009ddb
 8009b50:	08009d7b 	.word	0x08009d7b
 8009b54:	08009da7 	.word	0x08009da7
 8009b58:	08009ddb 	.word	0x08009ddb
 8009b5c:	08009ddb 	.word	0x08009ddb
 8009b60:	08009ddb 	.word	0x08009ddb
 8009b64:	08009ddb 	.word	0x08009ddb
 8009b68:	08009ddb 	.word	0x08009ddb
 8009b6c:	08009ddb 	.word	0x08009ddb
 8009b70:	08009ddb 	.word	0x08009ddb
 8009b74:	08009b79 	.word	0x08009b79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7c12      	ldrb	r2, [r2, #16]
 8009b90:	f107 0108 	add.w	r1, r7, #8
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
 8009b98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b9a:	e126      	b.n	8009dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fb0e 	bl	800a1c0 <USBD_CtlError>
        err++;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	72fb      	strb	r3, [r7, #11]
      break;
 8009baa:	e11e      	b.n	8009dea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
      break;
 8009bc2:	e112      	b.n	8009dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7c1b      	ldrb	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd4:	f107 0208 	add.w	r2, r7, #8
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4798      	blx	r3
 8009bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	2202      	movs	r2, #2
 8009be4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009be6:	e100      	b.n	8009dea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	f107 0208 	add.w	r2, r7, #8
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	2202      	movs	r2, #2
 8009c00:	701a      	strb	r2, [r3, #0]
      break;
 8009c02:	e0f2      	b.n	8009dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	885b      	ldrh	r3, [r3, #2]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	f200 80ac 	bhi.w	8009d68 <USBD_GetDescriptor+0x258>
 8009c10:	a201      	add	r2, pc, #4	@ (adr r2, 8009c18 <USBD_GetDescriptor+0x108>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c65 	.word	0x08009c65
 8009c20:	08009c99 	.word	0x08009c99
 8009c24:	08009ccd 	.word	0x08009ccd
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009d35 	.word	0x08009d35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00b      	beq.n	8009c54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	7c12      	ldrb	r2, [r2, #16]
 8009c48:	f107 0108 	add.w	r1, r7, #8
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
 8009c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c52:	e091      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fab2 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	72fb      	strb	r3, [r7, #11]
          break;
 8009c62:	e089      	b.n	8009d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e077      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa98 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e06f      	b.n	8009d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e05d      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa7e 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e055      	b.n	8009d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e043      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa64 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e03b      	b.n	8009d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e029      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa4a 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e021      	b.n	8009d78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e00f      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa30 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e007      	b.n	8009d78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa28 	bl	800a1c0 <USBD_CtlError>
          err++;
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	3301      	adds	r3, #1
 8009d74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009d76:	bf00      	nop
      }
      break;
 8009d78:	e037      	b.n	8009dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7c1b      	ldrb	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d8a:	f107 0208 	add.w	r2, r7, #8
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4798      	blx	r3
 8009d92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d94:	e029      	b.n	8009dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fa11 	bl	800a1c0 <USBD_CtlError>
        err++;
 8009d9e:	7afb      	ldrb	r3, [r7, #11]
 8009da0:	3301      	adds	r3, #1
 8009da2:	72fb      	strb	r3, [r7, #11]
      break;
 8009da4:	e021      	b.n	8009dea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10d      	bne.n	8009dca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db6:	f107 0208 	add.w	r2, r7, #8
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4798      	blx	r3
 8009dbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	2207      	movs	r2, #7
 8009dc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc8:	e00f      	b.n	8009dea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9f7 	bl	800a1c0 <USBD_CtlError>
        err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	e007      	b.n	8009dea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f9ef 	bl	800a1c0 <USBD_CtlError>
      err++;
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	3301      	adds	r3, #1
 8009de6:	72fb      	strb	r3, [r7, #11]
      break;
 8009de8:	bf00      	nop
  }

  if (err != 0U)
 8009dea:	7afb      	ldrb	r3, [r7, #11]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11e      	bne.n	8009e2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d016      	beq.n	8009e26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009df8:	893b      	ldrh	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00e      	beq.n	8009e1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	88da      	ldrh	r2, [r3, #6]
 8009e02:	893b      	ldrh	r3, [r7, #8]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	bf28      	it	cs
 8009e08:	4613      	movcs	r3, r2
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e0e:	893b      	ldrh	r3, [r7, #8]
 8009e10:	461a      	mov	r2, r3
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fa44 	bl	800a2a2 <USBD_CtlSendData>
 8009e1a:	e009      	b.n	8009e30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f9ce 	bl	800a1c0 <USBD_CtlError>
 8009e24:	e004      	b.n	8009e30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa95 	bl	800a356 <USBD_CtlSendStatus>
 8009e2c:	e000      	b.n	8009e30 <USBD_GetDescriptor+0x320>
    return;
 8009e2e:	bf00      	nop
  }
}
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop

08009e38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	889b      	ldrh	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d131      	bne.n	8009eae <USBD_SetAddress+0x76>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	88db      	ldrh	r3, [r3, #6]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d12d      	bne.n	8009eae <USBD_SetAddress+0x76>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e58:	d829      	bhi.n	8009eae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	885b      	ldrh	r3, [r3, #2]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d104      	bne.n	8009e7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f9a3 	bl	800a1c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7a:	e01d      	b.n	8009eb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7bfa      	ldrb	r2, [r7, #15]
 8009e80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fe7b 	bl	800ab84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa61 	bl	800a356 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d004      	beq.n	8009ea4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea2:	e009      	b.n	8009eb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eac:	e004      	b.n	8009eb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f985 	bl	800a1c0 <USBD_CtlError>
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	885b      	ldrh	r3, [r3, #2]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	4b4c      	ldr	r3, [pc, #304]	@ (800a008 <USBD_SetConfig+0x148>)
 8009ed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed8:	4b4b      	ldr	r3, [pc, #300]	@ (800a008 <USBD_SetConfig+0x148>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d905      	bls.n	8009eec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f96c 	bl	800a1c0 <USBD_CtlError>
    return USBD_FAIL;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e088      	b.n	8009ffe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d002      	beq.n	8009efe <USBD_SetConfig+0x3e>
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d025      	beq.n	8009f48 <USBD_SetConfig+0x88>
 8009efc:	e071      	b.n	8009fe2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009efe:	4b42      	ldr	r3, [pc, #264]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01c      	beq.n	8009f40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009f06:	4b40      	ldr	r3, [pc, #256]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f10:	4b3d      	ldr	r3, [pc, #244]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff f992 	bl	8009240 <USBD_SetClassConfig>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d004      	beq.n	8009f30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f949 	bl	800a1c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f2e:	e065      	b.n	8009ffc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa10 	bl	800a356 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2203      	movs	r2, #3
 8009f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009f3e:	e05d      	b.n	8009ffc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fa08 	bl	800a356 <USBD_CtlSendStatus>
      break;
 8009f46:	e059      	b.n	8009ffc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f48:	4b2f      	ldr	r3, [pc, #188]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d112      	bne.n	8009f76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009f58:	4b2b      	ldr	r3, [pc, #172]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f62:	4b29      	ldr	r3, [pc, #164]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff f985 	bl	8009278 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f9f1 	bl	800a356 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f74:	e042      	b.n	8009ffc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009f76:	4b24      	ldr	r3, [pc, #144]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d02a      	beq.n	8009fda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff f973 	bl	8009278 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f92:	4b1d      	ldr	r3, [pc, #116]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	@ (800a008 <USBD_SetConfig+0x148>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff f94c 	bl	8009240 <USBD_SetClassConfig>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00f      	beq.n	8009fd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f903 	bl	800a1c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff f958 	bl	8009278 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009fd0:	e014      	b.n	8009ffc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f9bf 	bl	800a356 <USBD_CtlSendStatus>
      break;
 8009fd8:	e010      	b.n	8009ffc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f9bb 	bl	800a356 <USBD_CtlSendStatus>
      break;
 8009fe0:	e00c      	b.n	8009ffc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f8eb 	bl	800a1c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fea:	4b07      	ldr	r3, [pc, #28]	@ (800a008 <USBD_SetConfig+0x148>)
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff f941 	bl	8009278 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffa:	bf00      	nop
  }

  return ret;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	2000046c 	.word	0x2000046c

0800a00c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88db      	ldrh	r3, [r3, #6]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d004      	beq.n	800a028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8cd 	bl	800a1c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a026:	e023      	b.n	800a070 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	dc02      	bgt.n	800a03a <USBD_GetConfig+0x2e>
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc03      	bgt.n	800a040 <USBD_GetConfig+0x34>
 800a038:	e015      	b.n	800a066 <USBD_GetConfig+0x5a>
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d00b      	beq.n	800a056 <USBD_GetConfig+0x4a>
 800a03e:	e012      	b.n	800a066 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3308      	adds	r3, #8
 800a04a:	2201      	movs	r2, #1
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f927 	bl	800a2a2 <USBD_CtlSendData>
        break;
 800a054:	e00c      	b.n	800a070 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3304      	adds	r3, #4
 800a05a:	2201      	movs	r2, #1
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f91f 	bl	800a2a2 <USBD_CtlSendData>
        break;
 800a064:	e004      	b.n	800a070 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f8a9 	bl	800a1c0 <USBD_CtlError>
        break;
 800a06e:	bf00      	nop
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d81e      	bhi.n	800a0ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d004      	beq.n	800a0a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f890 	bl	800a1c0 <USBD_CtlError>
        break;
 800a0a0:	e01a      	b.n	800a0d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d005      	beq.n	800a0be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f043 0202 	orr.w	r2, r3, #2
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f8eb 	bl	800a2a2 <USBD_CtlSendData>
      break;
 800a0cc:	e004      	b.n	800a0d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f875 	bl	800a1c0 <USBD_CtlError>
      break;
 800a0d6:	bf00      	nop
  }
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d106      	bne.n	800a100 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f92b 	bl	800a356 <USBD_CtlSendStatus>
  }
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d80b      	bhi.n	800a138 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	885b      	ldrh	r3, [r3, #2]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d10c      	bne.n	800a142 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f910 	bl	800a356 <USBD_CtlSendStatus>
      }
      break;
 800a136:	e004      	b.n	800a142 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f840 	bl	800a1c0 <USBD_CtlError>
      break;
 800a140:	e000      	b.n	800a144 <USBD_ClrFeature+0x3c>
      break;
 800a142:	bf00      	nop
  }
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	781a      	ldrb	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3301      	adds	r3, #1
 800a174:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7ff fa92 	bl	80096a0 <SWAPBYTE>
 800a17c:	4603      	mov	r3, r0
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3301      	adds	r3, #1
 800a188:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff fa85 	bl	80096a0 <SWAPBYTE>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fa78 	bl	80096a0 <SWAPBYTE>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	80da      	strh	r2, [r3, #6]
}
 800a1b8:	bf00      	nop
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ca:	2180      	movs	r1, #128	@ 0x80
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc6f 	bl	800aab0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fc6b 	bl	800aab0 <USBD_LL_StallEP>
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b086      	sub	sp, #24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d036      	beq.n	800a266 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a1fc:	6938      	ldr	r0, [r7, #16]
 800a1fe:	f000 f836 	bl	800a26e <USBD_GetLen>
 800a202:	4603      	mov	r3, r0
 800a204:	3301      	adds	r3, #1
 800a206:	b29b      	uxth	r3, r3
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	4413      	add	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	7812      	ldrb	r2, [r2, #0]
 800a21a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	3301      	adds	r3, #1
 800a220:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4413      	add	r3, r2
 800a228:	2203      	movs	r2, #3
 800a22a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	3301      	adds	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a232:	e013      	b.n	800a25c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	4413      	add	r3, r2
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3301      	adds	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
    idx++;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	3301      	adds	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
    idx++;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	3301      	adds	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e7      	bne.n	800a234 <USBD_GetString+0x52>
 800a264:	e000      	b.n	800a268 <USBD_GetString+0x86>
    return;
 800a266:	bf00      	nop
  }
}
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a26e:	b480      	push	{r7}
 800a270:	b085      	sub	sp, #20
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a27e:	e005      	b.n	800a28c <USBD_GetLen+0x1e>
  {
    len++;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	3301      	adds	r3, #1
 800a284:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	3301      	adds	r3, #1
 800a28a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f5      	bne.n	800a280 <USBD_GetLen+0x12>
  }

  return len;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fc7a 	bl	800abc2 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fc69 	bl	800abc2 <USBD_LL_Transmit>

  return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2203      	movs	r2, #3
 800a30a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	2100      	movs	r1, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fc6d 	bl	800ac04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fc5c 	bl	800ac04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2204      	movs	r2, #4
 800a362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a366:	2300      	movs	r3, #0
 800a368:	2200      	movs	r2, #0
 800a36a:	2100      	movs	r1, #0
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fc28 	bl	800abc2 <USBD_LL_Transmit>

  return USBD_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2205      	movs	r2, #5
 800a388:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a38c:	2300      	movs	r3, #0
 800a38e:	2200      	movs	r2, #0
 800a390:	2100      	movs	r1, #0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fc36 	bl	800ac04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	4912      	ldr	r1, [pc, #72]	@ (800a3f4 <MX_USB_Device_Init+0x50>)
 800a3ac:	4812      	ldr	r0, [pc, #72]	@ (800a3f8 <MX_USB_Device_Init+0x54>)
 800a3ae:	f7fe fed9 	bl	8009164 <USBD_Init>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a3b8:	f7f6 f9c0 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a3bc:	490f      	ldr	r1, [pc, #60]	@ (800a3fc <MX_USB_Device_Init+0x58>)
 800a3be:	480e      	ldr	r0, [pc, #56]	@ (800a3f8 <MX_USB_Device_Init+0x54>)
 800a3c0:	f7fe ff00 	bl	80091c4 <USBD_RegisterClass>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a3ca:	f7f6 f9b7 	bl	800073c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a3ce:	490c      	ldr	r1, [pc, #48]	@ (800a400 <MX_USB_Device_Init+0x5c>)
 800a3d0:	4809      	ldr	r0, [pc, #36]	@ (800a3f8 <MX_USB_Device_Init+0x54>)
 800a3d2:	f7fe fe51 	bl	8009078 <USBD_CDC_RegisterInterface>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a3dc:	f7f6 f9ae 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a3e0:	4805      	ldr	r0, [pc, #20]	@ (800a3f8 <MX_USB_Device_Init+0x54>)
 800a3e2:	f7fe ff16 	bl	8009212 <USBD_Start>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a3ec:	f7f6 f9a6 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a3f0:	bf00      	nop
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20000130 	.word	0x20000130
 800a3f8:	20000470 	.word	0x20000470
 800a3fc:	20000018 	.word	0x20000018
 800a400:	2000011c 	.word	0x2000011c

0800a404 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a408:	2200      	movs	r2, #0
 800a40a:	4905      	ldr	r1, [pc, #20]	@ (800a420 <CDC_Init_FS+0x1c>)
 800a40c:	4805      	ldr	r0, [pc, #20]	@ (800a424 <CDC_Init_FS+0x20>)
 800a40e:	f7fe fe48 	bl	80090a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a412:	4905      	ldr	r1, [pc, #20]	@ (800a428 <CDC_Init_FS+0x24>)
 800a414:	4803      	ldr	r0, [pc, #12]	@ (800a424 <CDC_Init_FS+0x20>)
 800a416:	f7fe fe62 	bl	80090de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a41a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	20000b40 	.word	0x20000b40
 800a424:	20000470 	.word	0x20000470
 800a428:	20000740 	.word	0x20000740

0800a42c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a42c:	b480      	push	{r7}
 800a42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a430:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a432:	4618      	mov	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
 800a448:	4613      	mov	r3, r2
 800a44a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2b23      	cmp	r3, #35	@ 0x23
 800a450:	d84a      	bhi.n	800a4e8 <CDC_Control_FS+0xac>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <CDC_Control_FS+0x1c>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4e9 	.word	0x0800a4e9
 800a45c:	0800a4e9 	.word	0x0800a4e9
 800a460:	0800a4e9 	.word	0x0800a4e9
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a4e9 	.word	0x0800a4e9
 800a46c:	0800a4e9 	.word	0x0800a4e9
 800a470:	0800a4e9 	.word	0x0800a4e9
 800a474:	0800a4e9 	.word	0x0800a4e9
 800a478:	0800a4e9 	.word	0x0800a4e9
 800a47c:	0800a4e9 	.word	0x0800a4e9
 800a480:	0800a4e9 	.word	0x0800a4e9
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a4e9 	.word	0x0800a4e9
 800a48c:	0800a4e9 	.word	0x0800a4e9
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4e9 	.word	0x0800a4e9
 800a498:	0800a4e9 	.word	0x0800a4e9
 800a49c:	0800a4e9 	.word	0x0800a4e9
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4e9 	.word	0x0800a4e9
 800a4ac:	0800a4e9 	.word	0x0800a4e9
 800a4b0:	0800a4e9 	.word	0x0800a4e9
 800a4b4:	0800a4e9 	.word	0x0800a4e9
 800a4b8:	0800a4e9 	.word	0x0800a4e9
 800a4bc:	0800a4e9 	.word	0x0800a4e9
 800a4c0:	0800a4e9 	.word	0x0800a4e9
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4e9 	.word	0x0800a4e9
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a4e9 	.word	0x0800a4e9
 800a4e0:	0800a4e9 	.word	0x0800a4e9
 800a4e4:	0800a4e9 	.word	0x0800a4e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4e8:	bf00      	nop
  }

  return (USBD_OK);
 800a4ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	4805      	ldr	r0, [pc, #20]	@ (800a51c <CDC_Receive_FS+0x24>)
 800a506:	f7fe fdea 	bl	80090de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a50a:	4804      	ldr	r0, [pc, #16]	@ (800a51c <CDC_Receive_FS+0x24>)
 800a50c:	f7fe fe00 	bl	8009110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000470 	.word	0x20000470

0800a520 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a536:	4618      	mov	r0, r3
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
	...

0800a544 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2212      	movs	r2, #18
 800a554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a556:	4b03      	ldr	r3, [pc, #12]	@ (800a564 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	20000150 	.word	0x20000150

0800a568 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2204      	movs	r2, #4
 800a578:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a57a:	4b03      	ldr	r3, [pc, #12]	@ (800a588 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20000164 	.word	0x20000164

0800a58c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	6039      	str	r1, [r7, #0]
 800a596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d105      	bne.n	800a5aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	4907      	ldr	r1, [pc, #28]	@ (800a5c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a5a2:	4808      	ldr	r0, [pc, #32]	@ (800a5c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a5a4:	f7ff fe1d 	bl	800a1e2 <USBD_GetString>
 800a5a8:	e004      	b.n	800a5b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	4904      	ldr	r1, [pc, #16]	@ (800a5c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a5ae:	4805      	ldr	r0, [pc, #20]	@ (800a5c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a5b0:	f7ff fe17 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5b4:	4b02      	ldr	r3, [pc, #8]	@ (800a5c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000f40 	.word	0x20000f40
 800a5c4:	0800addc 	.word	0x0800addc

0800a5c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	6039      	str	r1, [r7, #0]
 800a5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	4904      	ldr	r1, [pc, #16]	@ (800a5e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a5d8:	4804      	ldr	r0, [pc, #16]	@ (800a5ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a5da:	f7ff fe02 	bl	800a1e2 <USBD_GetString>
  return USBD_StrDesc;
 800a5de:	4b02      	ldr	r3, [pc, #8]	@ (800a5e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	20000f40 	.word	0x20000f40
 800a5ec:	0800adf4 	.word	0x0800adf4

0800a5f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	6039      	str	r1, [r7, #0]
 800a5fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	221a      	movs	r2, #26
 800a600:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a602:	f000 f843 	bl	800a68c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a606:	4b02      	ldr	r3, [pc, #8]	@ (800a610 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20000168 	.word	0x20000168

0800a614 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	6039      	str	r1, [r7, #0]
 800a61e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d105      	bne.n	800a632 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4907      	ldr	r1, [pc, #28]	@ (800a648 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a62a:	4808      	ldr	r0, [pc, #32]	@ (800a64c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a62c:	f7ff fdd9 	bl	800a1e2 <USBD_GetString>
 800a630:	e004      	b.n	800a63c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	4904      	ldr	r1, [pc, #16]	@ (800a648 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a636:	4805      	ldr	r0, [pc, #20]	@ (800a64c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a638:	f7ff fdd3 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a63c:	4b02      	ldr	r3, [pc, #8]	@ (800a648 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000f40 	.word	0x20000f40
 800a64c:	0800ae08 	.word	0x0800ae08

0800a650 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d105      	bne.n	800a66e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4907      	ldr	r1, [pc, #28]	@ (800a684 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a666:	4808      	ldr	r0, [pc, #32]	@ (800a688 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a668:	f7ff fdbb 	bl	800a1e2 <USBD_GetString>
 800a66c:	e004      	b.n	800a678 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4904      	ldr	r1, [pc, #16]	@ (800a684 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a672:	4805      	ldr	r0, [pc, #20]	@ (800a688 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a674:	f7ff fdb5 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a678:	4b02      	ldr	r3, [pc, #8]	@ (800a684 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000f40 	.word	0x20000f40
 800a688:	0800ae14 	.word	0x0800ae14

0800a68c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a692:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d0 <Get_SerialNum+0x44>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a698:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d4 <Get_SerialNum+0x48>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a69e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <Get_SerialNum+0x4c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6b2:	2208      	movs	r2, #8
 800a6b4:	4909      	ldr	r1, [pc, #36]	@ (800a6dc <Get_SerialNum+0x50>)
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f814 	bl	800a6e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6bc:	2204      	movs	r2, #4
 800a6be:	4908      	ldr	r1, [pc, #32]	@ (800a6e0 <Get_SerialNum+0x54>)
 800a6c0:	68b8      	ldr	r0, [r7, #8]
 800a6c2:	f000 f80f 	bl	800a6e4 <IntToUnicode>
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	1fff7590 	.word	0x1fff7590
 800a6d4:	1fff7594 	.word	0x1fff7594
 800a6d8:	1fff7598 	.word	0x1fff7598
 800a6dc:	2000016a 	.word	0x2000016a
 800a6e0:	2000017a 	.word	0x2000017a

0800a6e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75fb      	strb	r3, [r7, #23]
 800a6fa:	e027      	b.n	800a74c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	0f1b      	lsrs	r3, r3, #28
 800a700:	2b09      	cmp	r3, #9
 800a702:	d80b      	bhi.n	800a71c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	0f1b      	lsrs	r3, r3, #28
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	4619      	mov	r1, r3
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	440b      	add	r3, r1
 800a714:	3230      	adds	r2, #48	@ 0x30
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	e00a      	b.n	800a732 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	0f1b      	lsrs	r3, r3, #28
 800a720:	b2da      	uxtb	r2, r3
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4619      	mov	r1, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	440b      	add	r3, r1
 800a72c:	3237      	adds	r2, #55	@ 0x37
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a738:	7dfb      	ldrb	r3, [r7, #23]
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	3301      	adds	r3, #1
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	4413      	add	r3, r2
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	3301      	adds	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
 800a74c:	7dfa      	ldrb	r2, [r7, #23]
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	429a      	cmp	r2, r3
 800a752:	d3d3      	bcc.n	800a6fc <IntToUnicode+0x18>
  }
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b094      	sub	sp, #80	@ 0x50
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	2244      	movs	r2, #68	@ 0x44
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f000 faf9 	bl	800ad6c <memset>
  if(pcdHandle->Instance==USB)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a15      	ldr	r2, [pc, #84]	@ (800a7d4 <HAL_PCD_MspInit+0x70>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d122      	bne.n	800a7ca <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a788:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a78a:	2300      	movs	r3, #0
 800a78c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a78e:	f107 030c 	add.w	r3, r7, #12
 800a792:	4618      	mov	r0, r3
 800a794:	f7fb fab0 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a79e:	f7f5 ffcd 	bl	800073c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d8 <HAL_PCD_MspInit+0x74>)
 800a7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d8 <HAL_PCD_MspInit+0x74>)
 800a7a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a7ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d8 <HAL_PCD_MspInit+0x74>)
 800a7b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7b6:	60bb      	str	r3, [r7, #8]
 800a7b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	2014      	movs	r0, #20
 800a7c0:	f7f7 fd45 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a7c4:	2014      	movs	r0, #20
 800a7c6:	f7f7 fd5c 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7ca:	bf00      	nop
 800a7cc:	3750      	adds	r7, #80	@ 0x50
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40005c00 	.word	0x40005c00
 800a7d8:	40021000 	.word	0x40021000

0800a7dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fd58 	bl	80092a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	440b      	add	r3, r1
 800a820:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	4619      	mov	r1, r3
 800a82a:	f7fe fd92 	bl	8009352 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	460b      	mov	r3, r1
 800a840:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	440b      	add	r3, r1
 800a856:	3324      	adds	r3, #36	@ 0x24
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	4619      	mov	r1, r3
 800a85e:	f7fe fddb 	bl	8009418 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe feef 	bl	800965c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a88e:	2301      	movs	r3, #1
 800a890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	795b      	ldrb	r3, [r3, #5]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d001      	beq.n	800a89e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a89a:	f7f5 ff4f 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8a4:	7bfa      	ldrb	r2, [r7, #15]
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe fe99 	bl	80095e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fe45 	bl	8009544 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fe94 	bl	8009600 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7a5b      	ldrb	r3, [r3, #9]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8e0:	4b04      	ldr	r3, [pc, #16]	@ (800a8f4 <HAL_PCD_SuspendCallback+0x30>)
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	4a03      	ldr	r2, [pc, #12]	@ (800a8f4 <HAL_PCD_SuspendCallback+0x30>)
 800a8e6:	f043 0306 	orr.w	r3, r3, #6
 800a8ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	e000ed00 	.word	0xe000ed00

0800a8f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	7a5b      	ldrb	r3, [r3, #9]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d007      	beq.n	800a918 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a908:	4b08      	ldr	r3, [pc, #32]	@ (800a92c <HAL_PCD_ResumeCallback+0x34>)
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	4a07      	ldr	r2, [pc, #28]	@ (800a92c <HAL_PCD_ResumeCallback+0x34>)
 800a90e:	f023 0306 	bic.w	r3, r3, #6
 800a912:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a914:	f000 f9f8 	bl	800ad08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fe84 	bl	800962c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed00 	.word	0xe000ed00

0800a930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a938:	4a2b      	ldr	r2, [pc, #172]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a29      	ldr	r2, [pc, #164]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a944:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a948:	4b27      	ldr	r3, [pc, #156]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a94a:	4a28      	ldr	r2, [pc, #160]	@ (800a9ec <USBD_LL_Init+0xbc>)
 800a94c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a94e:	4b26      	ldr	r3, [pc, #152]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a950:	2208      	movs	r2, #8
 800a952:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a954:	4b24      	ldr	r3, [pc, #144]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a956:	2202      	movs	r2, #2
 800a958:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a95a:	4b23      	ldr	r3, [pc, #140]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a95c:	2202      	movs	r2, #2
 800a95e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a960:	4b21      	ldr	r3, [pc, #132]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a962:	2200      	movs	r2, #0
 800a964:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a966:	4b20      	ldr	r3, [pc, #128]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a968:	2200      	movs	r2, #0
 800a96a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a96c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a96e:	2200      	movs	r2, #0
 800a970:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a972:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a974:	2200      	movs	r2, #0
 800a976:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a978:	481b      	ldr	r0, [pc, #108]	@ (800a9e8 <USBD_LL_Init+0xb8>)
 800a97a:	f7f8 fed4 	bl	8003726 <HAL_PCD_Init>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a984:	f7f5 feda 	bl	800073c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a98e:	2318      	movs	r3, #24
 800a990:	2200      	movs	r2, #0
 800a992:	2100      	movs	r1, #0
 800a994:	f7fa fb8d 	bl	80050b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a99e:	2358      	movs	r3, #88	@ 0x58
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2180      	movs	r1, #128	@ 0x80
 800a9a4:	f7fa fb85 	bl	80050b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a9ae:	23c0      	movs	r3, #192	@ 0xc0
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2181      	movs	r1, #129	@ 0x81
 800a9b4:	f7fa fb7d 	bl	80050b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a9be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	f7fa fb74 	bl	80050b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a9d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2182      	movs	r1, #130	@ 0x82
 800a9d8:	f7fa fb6b 	bl	80050b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20001140 	.word	0x20001140
 800a9ec:	40005c00 	.word	0x40005c00

0800a9f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7f8 ff5b 	bl	80038c2 <HAL_PCD_Start>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 f97e 	bl	800ad14 <USBD_Get_USB_Status>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	461a      	mov	r2, r3
 800aa34:	4603      	mov	r3, r0
 800aa36:	70fb      	strb	r3, [r7, #3]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70bb      	strb	r3, [r7, #2]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aa4e:	78bb      	ldrb	r3, [r7, #2]
 800aa50:	883a      	ldrh	r2, [r7, #0]
 800aa52:	78f9      	ldrb	r1, [r7, #3]
 800aa54:	f7f9 f8a2 	bl	8003b9c <HAL_PCD_EP_Open>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f958 	bl	800ad14 <USBD_Get_USB_Status>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aa8c:	78fa      	ldrb	r2, [r7, #3]
 800aa8e:	4611      	mov	r1, r2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f9 f8e0 	bl	8003c56 <HAL_PCD_EP_Close>
 800aa96:	4603      	mov	r3, r0
 800aa98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 f939 	bl	800ad14 <USBD_Get_USB_Status>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aaca:	78fa      	ldrb	r2, [r7, #3]
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f9 f989 	bl	8003de6 <HAL_PCD_EP_SetStall>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 f91a 	bl	800ad14 <USBD_Get_USB_Status>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f9 f9bc 	bl	8003e8a <HAL_PCD_EP_ClrStall>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 f8fb 	bl	800ad14 <USBD_Get_USB_Status>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da0b      	bge.n	800ab60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	4613      	mov	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	440b      	add	r3, r1
 800ab5a:	3312      	adds	r3, #18
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	e00b      	b.n	800ab78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	440b      	add	r3, r1
 800ab72:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ab76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7f8 ffd6 	bl	8003b54 <HAL_PCD_SetAddress>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f8b0 	bl	800ad14 <USBD_Get_USB_Status>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
 800abce:	460b      	mov	r3, r1
 800abd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800abe0:	7af9      	ldrb	r1, [r7, #11]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	f7f9 f8c7 	bl	8003d78 <HAL_PCD_EP_Transmit>
 800abea:	4603      	mov	r3, r0
 800abec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f88f 	bl	800ad14 <USBD_Get_USB_Status>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abfa:	7dbb      	ldrb	r3, [r7, #22]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3718      	adds	r7, #24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	460b      	mov	r3, r1
 800ac12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ac22:	7af9      	ldrb	r1, [r7, #11]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	f7f9 f85d 	bl	8003ce6 <HAL_PCD_EP_Receive>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 f86e 	bl	800ad14 <USBD_Get_USB_Status>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3718      	adds	r7, #24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7f9 f873 	bl	8003d48 <HAL_PCD_EP_GetRxCount>
 800ac62:	4603      	mov	r3, r0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <HAL_PCDEx_LPM_Callback+0x18>
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d013      	beq.n	800acaa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ac82:	e023      	b.n	800accc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7a5b      	ldrb	r3, [r3, #9]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ac8c:	f000 f83c 	bl	800ad08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac90:	4b10      	ldr	r3, [pc, #64]	@ (800acd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	4a0f      	ldr	r2, [pc, #60]	@ (800acd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ac96:	f023 0306 	bic.w	r3, r3, #6
 800ac9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fcc2 	bl	800962c <USBD_LL_Resume>
    break;
 800aca8:	e010      	b.n	800accc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fca5 	bl	8009600 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7a5b      	ldrb	r3, [r3, #9]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acbe:	4b05      	ldr	r3, [pc, #20]	@ (800acd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	4a04      	ldr	r2, [pc, #16]	@ (800acd4 <HAL_PCDEx_LPM_Callback+0x68>)
 800acc4:	f043 0306 	orr.w	r3, r3, #6
 800acc8:	6113      	str	r3, [r2, #16]
    break;
 800acca:	bf00      	nop
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	e000ed00 	.word	0xe000ed00

0800acd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ace0:	4b03      	ldr	r3, [pc, #12]	@ (800acf0 <USBD_static_malloc+0x18>)
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	2000141c 	.word	0x2000141c

0800acf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ad0c:	f7f5 fad0 	bl	80002b0 <SystemClock_Config>
}
 800ad10:	bf00      	nop
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d817      	bhi.n	800ad58 <USBD_Get_USB_Status+0x44>
 800ad28:	a201      	add	r2, pc, #4	@ (adr r2, 800ad30 <USBD_Get_USB_Status+0x1c>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad47 	.word	0x0800ad47
 800ad38:	0800ad4d 	.word	0x0800ad4d
 800ad3c:	0800ad53 	.word	0x0800ad53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
    break;
 800ad44:	e00b      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad46:	2303      	movs	r3, #3
 800ad48:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4a:	e008      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad50:	e005      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad52:	2303      	movs	r3, #3
 800ad54:	73fb      	strb	r3, [r7, #15]
    break;
 800ad56:	e002      	b.n	800ad5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5c:	bf00      	nop
  }
  return usb_status;
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <memset>:
 800ad6c:	4402      	add	r2, r0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d100      	bne.n	800ad76 <memset+0xa>
 800ad74:	4770      	bx	lr
 800ad76:	f803 1b01 	strb.w	r1, [r3], #1
 800ad7a:	e7f9      	b.n	800ad70 <memset+0x4>

0800ad7c <__libc_init_array>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4d0d      	ldr	r5, [pc, #52]	@ (800adb4 <__libc_init_array+0x38>)
 800ad80:	4c0d      	ldr	r4, [pc, #52]	@ (800adb8 <__libc_init_array+0x3c>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	2600      	movs	r6, #0
 800ad88:	42a6      	cmp	r6, r4
 800ad8a:	d109      	bne.n	800ada0 <__libc_init_array+0x24>
 800ad8c:	4d0b      	ldr	r5, [pc, #44]	@ (800adbc <__libc_init_array+0x40>)
 800ad8e:	4c0c      	ldr	r4, [pc, #48]	@ (800adc0 <__libc_init_array+0x44>)
 800ad90:	f000 f818 	bl	800adc4 <_init>
 800ad94:	1b64      	subs	r4, r4, r5
 800ad96:	10a4      	asrs	r4, r4, #2
 800ad98:	2600      	movs	r6, #0
 800ad9a:	42a6      	cmp	r6, r4
 800ad9c:	d105      	bne.n	800adaa <__libc_init_array+0x2e>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada4:	4798      	blx	r3
 800ada6:	3601      	adds	r6, #1
 800ada8:	e7ee      	b.n	800ad88 <__libc_init_array+0xc>
 800adaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800adae:	4798      	blx	r3
 800adb0:	3601      	adds	r6, #1
 800adb2:	e7f2      	b.n	800ad9a <__libc_init_array+0x1e>
 800adb4:	0800ae34 	.word	0x0800ae34
 800adb8:	0800ae34 	.word	0x0800ae34
 800adbc:	0800ae34 	.word	0x0800ae34
 800adc0:	0800ae38 	.word	0x0800ae38

0800adc4 <_init>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	bf00      	nop
 800adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adca:	bc08      	pop	{r3}
 800adcc:	469e      	mov	lr, r3
 800adce:	4770      	bx	lr

0800add0 <_fini>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	bf00      	nop
 800add4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add6:	bc08      	pop	{r3}
 800add8:	469e      	mov	lr, r3
 800adda:	4770      	bx	lr
