
ADC with DMA and TimerTriggered Conversions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004800  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080049f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  2000000c  080049fc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002170  080049fc  00006170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001362b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a89  00000000  00000000  00019667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0001c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f03  00000000  00000000  0001d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9cf  00000000  00000000  0001e37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bac  00000000  00000000  0003dd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5910  00000000  00000000  000528f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  0012824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0012d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049c0 	.word	0x080049c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080049c0 	.word	0x080049c0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc2a 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f837 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9d5 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f9a1 	bl	8000570 <MX_DMA_Init>
  MX_ADC2_Init();
 800022e:	f000 f87b 	bl	8000328 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000232:	f000 f967 	bl	8000504 <MX_TIM6_Init>
  MX_DAC3_Init();
 8000236:	f000 f8df 	bl	80003f8 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 800023a:	f000 f917 	bl	800046c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800023e:	f000 f93b 	bl	80004b8 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */

HAL_OPAMP_Start(&hopamp1);
 8000242:	480d      	ldr	r0, [pc, #52]	@ (8000278 <main+0x60>)
 8000244:	f003 f9e0 	bl	8003608 <HAL_OPAMP_Start>
HAL_OPAMP_Start(&hopamp3);
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <main+0x64>)
 800024a:	f003 f9dd 	bl	8003608 <HAL_OPAMP_Start>

HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 800024e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000252:	490b      	ldr	r1, [pc, #44]	@ (8000280 <main+0x68>)
 8000254:	480b      	ldr	r0, [pc, #44]	@ (8000284 <main+0x6c>)
 8000256:	f001 f88f 	bl	8001378 <HAL_ADC_Start_DMA>
//HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, DAC_BUFFER, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800025a:	2300      	movs	r3, #0
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <main+0x70>)
 8000264:	2100      	movs	r1, #0
 8000266:	4809      	ldr	r0, [pc, #36]	@ (800028c <main+0x74>)
 8000268:	f002 f9d6 	bl	8002618 <HAL_DAC_Start_DMA>
HAL_TIM_Base_Start(&htim6);
 800026c:	4808      	ldr	r0, [pc, #32]	@ (8000290 <main+0x78>)
 800026e:	f004 f9fb 	bl	8004668 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	bf00      	nop
 8000274:	e7fd      	b.n	8000272 <main+0x5a>
 8000276:	bf00      	nop
 8000278:	20000168 	.word	0x20000168
 800027c:	200001a4 	.word	0x200001a4
 8000280:	2000022c 	.word	0x2000022c
 8000284:	20000028 	.word	0x20000028
 8000288:	200011cc 	.word	0x200011cc
 800028c:	200000f4 	.word	0x200000f4
 8000290:	200001e0 	.word	0x200001e0

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b094      	sub	sp, #80	@ 0x50
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2238      	movs	r2, #56	@ 0x38
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fb60 	bl	8004968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f003 f9d8 	bl	800366c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002bc:	2301      	movs	r3, #1
 80002be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	2303      	movs	r3, #3
 80002cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002d2:	2355      	movs	r3, #85	@ 0x55
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002da:	2302      	movs	r3, #2
 80002dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fa74 	bl	80037d4 <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002f2:	f000 f9d7 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	2303      	movs	r3, #3
 80002fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2104      	movs	r1, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fd72 	bl	8003df8 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031a:	f000 f9c3 	bl	80006a4 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	463b      	mov	r3, r7
 8000330:	2220      	movs	r2, #32
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f004 fb17 	bl	8004968 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800033a:	4b2c      	ldr	r3, [pc, #176]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800033c:	4a2c      	ldr	r2, [pc, #176]	@ (80003f0 <MX_ADC2_Init+0xc8>)
 800033e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000340:	4b2a      	ldr	r3, [pc, #168]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000342:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b28      	ldr	r3, [pc, #160]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b27      	ldr	r3, [pc, #156]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000354:	4b25      	ldr	r3, [pc, #148]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035a:	4b24      	ldr	r3, [pc, #144]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000360:	4b22      	ldr	r3, [pc, #136]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000362:	2204      	movs	r2, #4
 8000364:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000366:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000372:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000374:	2201      	movs	r2, #1
 8000376:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b1c      	ldr	r3, [pc, #112]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000382:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800038a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800038e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <MX_ADC2_Init+0xc4>)
 8000392:	2201      	movs	r2, #1
 8000394:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_ADC2_Init+0xc4>)
 800039a:	2200      	movs	r2, #0
 800039c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800039e:	4b13      	ldr	r3, [pc, #76]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a6:	4811      	ldr	r0, [pc, #68]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003a8:	f000 fe62 	bl	8001070 <HAL_ADC_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80003b2:	f000 f977 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_ADC2_Init+0xcc>)
 80003b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ba:	2306      	movs	r3, #6
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c2:	237f      	movs	r3, #127	@ 0x7f
 80003c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c6:	2304      	movs	r3, #4
 80003c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	@ (80003ec <MX_ADC2_Init+0xc4>)
 80003d4:	f001 fab2 	bl	800193c <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80003de:	f000 f961 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028
 80003f0:	50000100 	.word	0x50000100
 80003f4:	cb8c0000 	.word	0xcb8c0000

080003f8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08c      	sub	sp, #48	@ 0x30
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2230      	movs	r2, #48	@ 0x30
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f004 faaf 	bl	8004968 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_DAC3_Init+0x6c>)
 800040c:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <MX_DAC3_Init+0x70>)
 800040e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000410:	4814      	ldr	r0, [pc, #80]	@ (8000464 <MX_DAC3_Init+0x6c>)
 8000412:	f002 f8de 	bl	80025d2 <HAL_DAC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 800041c:	f000 f942 	bl	80006a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000420:	2302      	movs	r3, #2
 8000422:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000430:	231e      	movs	r3, #30
 8000432:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800043c:	2302      	movs	r3, #2
 800043e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <MX_DAC3_Init+0x6c>)
 800044c:	f002 f9d6 	bl	80027fc <HAL_DAC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000456:	f000 f925 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3730      	adds	r7, #48	@ 0x30
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000f4 	.word	0x200000f4
 8000468:	50001000 	.word	0x50001000

0800046c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000472:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <MX_OPAMP1_Init+0x48>)
 8000474:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800047e:	2260      	movs	r2, #96	@ 0x60
 8000480:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000484:	220c      	movs	r2, #12
 8000486:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800048a:	2200      	movs	r2, #0
 800048c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 8000496:	2200      	movs	r2, #0
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_OPAMP1_Init+0x44>)
 800049c:	f002 ffe4 	bl	8003468 <HAL_OPAMP_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80004a6:	f000 f8fd 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000168 	.word	0x20000168
 80004b4:	40010300 	.word	0x40010300

080004b8 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004be:	4a10      	ldr	r2, [pc, #64]	@ (8000500 <MX_OPAMP3_Init+0x48>)
 80004c0:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004ca:	2260      	movs	r2, #96	@ 0x60
 80004cc:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004d0:	2208      	movs	r2, #8
 80004d2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <MX_OPAMP3_Init+0x44>)
 80004e8:	f002 ffbe 	bl	8003468 <HAL_OPAMP_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80004f2:	f000 f8d7 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200001a4 	.word	0x200001a4
 8000500:	40010308 	.word	0x40010308

08000504 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_TIM6_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17-1;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_TIM6_Init+0x64>)
 800051c:	2210      	movs	r2, #16
 800051e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000528:	2204      	movs	r2, #4
 800052a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_TIM6_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000534:	f004 f840 	bl	80045b8 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800053e:	f000 f8b1 	bl	80006a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000542:	2320      	movs	r3, #32
 8000544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_TIM6_Init+0x64>)
 8000550:	f004 f988 	bl	8004864 <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800055a:	f000 f8a3 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200001e0 	.word	0x200001e0
 800056c:	40001000 	.word	0x40001000

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_DMA_Init+0x60>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6493      	str	r3, [r2, #72]	@ 0x48
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000592:	4a0f      	ldr	r2, [pc, #60]	@ (80005d0 <MX_DMA_Init+0x60>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6493      	str	r3, [r2, #72]	@ 0x48
 800059a:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <MX_DMA_Init+0x60>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200b      	movs	r0, #11
 80005ac:	f001 ffdd 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b0:	200b      	movs	r0, #11
 80005b2:	f001 fff4 	bl	800259e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200c      	movs	r0, #12
 80005bc:	f001 ffd5 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005c0:	200c      	movs	r0, #12
 80005c2:	f001 ffec 	bl	800259e <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <MX_GPIO_Init+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x44>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */


 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < BUFFER_SIZE_HALF; i++) 			{		DAC_BUFFER[i] = ADC_BUFFER[i];	}
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00a      	b.n	8000640 <HAL_ADC_ConvHalfCpltCallback+0x24>
 800062a:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000632:	490a      	ldr	r1, [pc, #40]	@ (800065c <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000646:	d3f0      	bcc.n	800062a <HAL_ADC_ConvHalfCpltCallback+0xe>





}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	2000022c 	.word	0x2000022c
 800065c:	200011cc 	.word	0x200011cc

08000660 <HAL_ADC_ConvCpltCallback>:


 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++) {		DAC_BUFFER[i] = ADC_BUFFER[i];	}
 8000668:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e00a      	b.n	8000686 <HAL_ADC_ConvCpltCallback+0x26>
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	4909      	ldr	r1, [pc, #36]	@ (80006a0 <HAL_ADC_ConvCpltCallback+0x40>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800068c:	d3f0      	bcc.n	8000670 <HAL_ADC_ConvCpltCallback+0x10>



}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	2000022c 	.word	0x2000022c
 80006a0:	200011cc 	.word	0x200011cc

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_MspInit+0x54>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <HAL_MspInit+0x54>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_MspInit+0x54>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_MspInit+0x54>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <HAL_MspInit+0x54>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_MspInit+0x54>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fa36 	bl	8000b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80006ec:	f000 fa5c 	bl	8000ba8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fa45 	bl	8000b80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006f6:	f003 f85d 	bl	80037b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2244      	movs	r2, #68	@ 0x44
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 f925 	bl	8004968 <memset>
  if(hadc->Instance==ADC2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <HAL_ADC_MspInit+0xc8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d14e      	bne.n	80007c6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800072c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800072e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fd4d 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000744:	f7ff ffae 	bl	80006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <HAL_ADC_MspInit+0xcc>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000762:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <HAL_ADC_MspInit+0xd4>)
 8000764:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000768:	2224      	movs	r2, #36	@ 0x24
 800076a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800078c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000790:	2220      	movs	r2, #32
 8000792:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 800079c:	f002 fa70 	bl	8002c80 <HAL_DMA_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 80007a6:	f7ff ff7d 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 80007ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <HAL_ADC_MspInit+0xd0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2012      	movs	r0, #18
 80007bc:	f001 fed5 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007c0:	2012      	movs	r0, #18
 80007c2:	f001 feec 	bl	800259e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	50000100 	.word	0x50000100
 80007d4:	40021000 	.word	0x40021000
 80007d8:	20000094 	.word	0x20000094
 80007dc:	40020008 	.word	0x40020008

080007e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <HAL_DAC_MspInit+0x8c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d137      	bne.n	8000862 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_DAC_MspInit+0x90>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800080c:	4a1a      	ldr	r2, [pc, #104]	@ (8000878 <HAL_DAC_MspInit+0x98>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000812:	2266      	movs	r2, #102	@ 0x66
 8000814:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000818:	2210      	movs	r2, #16
 800081a:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082e:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000836:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800083a:	2220      	movs	r2, #32
 800083c:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000840:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000844:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 8000848:	f002 fa1a 	bl	8002c80 <HAL_DMA_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_DAC_MspInit+0x76>
    {
      Error_Handler();
 8000852:	f7ff ff27 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <HAL_DAC_MspInit+0x94>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	50001000 	.word	0x50001000
 8000870:	40021000 	.word	0x40021000
 8000874:	20000108 	.word	0x20000108
 8000878:	4002001c 	.word	0x4002001c

0800087c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <HAL_OPAMP_MspInit+0x9c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d119      	bne.n	80008d2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ba:	2303      	movs	r3, #3
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f002 fc4a 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80008d0:	e01d      	b.n	800090e <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <HAL_OPAMP_MspInit+0xa4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d118      	bne.n	800090e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <HAL_OPAMP_MspInit+0xa0>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f002 fc2b 	bl	8003164 <HAL_GPIO_Init>
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	@ 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40010300 	.word	0x40010300
 800091c:	40021000 	.word	0x40021000
 8000920:	40010308 	.word	0x40010308

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <HAL_TIM_Base_MspInit+0x38>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10b      	bne.n	800094e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f8af 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <DMA1_Channel1_IRQHandler+0x10>)
 80009ca:	f002 fa7c 	bl	8002ec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000094 	.word	0x20000094

080009d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <DMA1_Channel2_IRQHandler+0x10>)
 80009de:	f002 fa72 	bl	8002ec6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000108 	.word	0x20000108

080009ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <ADC1_2_IRQHandler+0x10>)
 80009f2:	f000 fd75 	bl	80014e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000028 	.word	0x20000028

08000a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f003 ff91 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fbdf 	bl	8000218 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	20002170 	.word	0x20002170

08000a74 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <COMP1_2_3_IRQHandler>

08000a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f001 fd67 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_InitTick>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e001      	b.n	8000a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a98:	f7ff fe0a 	bl	80006b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_InitTick+0x68>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d022      	beq.n	8000b02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_InitTick+0x6c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_InitTick+0x68>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fd72 	bl	80025ba <HAL_SYSTICK_Config>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10f      	bne.n	8000afc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d809      	bhi.n	8000af6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aea:	f001 fd3e 	bl	800256a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <HAL_InitTick+0x70>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e004      	b.n	8000b06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <HAL_IncTick+0x1c>)
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	2000216c 	.word	0x2000216c
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000216c 	.word	0x2000216c

08000b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000b68:	4904      	ldr	r1, [pc, #16]	@ (8000b7c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	600b      	str	r3, [r1, #0]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40010030 	.word	0x40010030

08000b80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 0202 	bic.w	r2, r3, #2
 8000b90:	4904      	ldr	r1, [pc, #16]	@ (8000ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40010030 	.word	0x40010030

08000ba8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000bba:	f7ff ffc1 	bl	8000b40 <HAL_GetTick>
 8000bbe:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000bc0:	e008      	b.n	8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000bc2:	f7ff ffbd 	bl	8000b40 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d901      	bls.n	8000bd4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e006      	b.n	8000be2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40010030 	.word	0x40010030

08000bf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	609a      	str	r2, [r3, #8]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3360      	adds	r3, #96	@ 0x60
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <LL_ADC_SetOffset+0x44>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	4313      	orrs	r3, r2
 8000c88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c90:	bf00      	nop
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	03fff000 	.word	0x03fff000

08000ca0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3360      	adds	r3, #96	@ 0x60
 8000cae:	461a      	mov	r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3360      	adds	r3, #96	@ 0x60
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000cf6:	bf00      	nop
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b087      	sub	sp, #28
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3360      	adds	r3, #96	@ 0x60
 8000d12:	461a      	mov	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3360      	adds	r3, #96	@ 0x60
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	615a      	str	r2, [r3, #20]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3330      	adds	r3, #48	@ 0x30
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	4413      	add	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	211f      	movs	r1, #31
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	401a      	ands	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0e9b      	lsrs	r3, r3, #26
 8000df2:	f003 011f 	and.w	r1, r3, #31
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	431a      	orrs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3314      	adds	r3, #20
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	0e5b      	lsrs	r3, r3, #25
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	4413      	add	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	0d1b      	lsrs	r3, r3, #20
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	2107      	movs	r1, #7
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	0d1b      	lsrs	r3, r3, #20
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	401a      	ands	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0318 	and.w	r3, r3, #24
 8000eb2:	4908      	ldr	r1, [pc, #32]	@ (8000ed4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000eb4:	40d9      	lsrs	r1, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	400b      	ands	r3, r1
 8000eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	0007ffff 	.word	0x0007ffff

08000ed8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6093      	str	r3, [r2, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f48:	d101      	bne.n	8000f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f98:	d101      	bne.n	8000f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_IsEnabled+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_IsEnabled+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800100a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800100e:	f043 0204 	orr.w	r2, r3, #4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b04      	cmp	r3, #4
 8001034:	d101      	bne.n	800103a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b08      	cmp	r3, #8
 800105a:	d101      	bne.n	8001060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e167      	b.n	800135a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001094:	2b00      	cmp	r3, #0
 8001096:	d109      	bne.n	80010ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fb35 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff3f 	bl	8000f34 <LL_ADC_IsDeepPowerDownEnabled>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff25 	bl	8000f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff5a 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d115      	bne.n	8001102 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff3e 	bl	8000f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001364 <HAL_ADC_Init+0x2f4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	099b      	lsrs	r3, r3, #6
 80010e6:	4aa0      	ldr	r2, [pc, #640]	@ (8001368 <HAL_ADC_Init+0x2f8>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	099b      	lsrs	r3, r3, #6
 80010ee:	3301      	adds	r3, #1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff3c 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001116:	f043 0210 	orr.w	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff75 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 8100 	bne.w	8001348 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80fc 	bne.w	8001348 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001154:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001158:	f043 0202 	orr.w	r2, r3, #2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <LL_ADC_IsEnabled>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001174:	f7ff ff2e 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001178:	4604      	mov	r4, r0
 800117a:	487c      	ldr	r0, [pc, #496]	@ (800136c <HAL_ADC_Init+0x2fc>)
 800117c:	f7ff ff2a 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001180:	4603      	mov	r3, r0
 8001182:	4323      	orrs	r3, r4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4619      	mov	r1, r3
 800118e:	4878      	ldr	r0, [pc, #480]	@ (8001370 <HAL_ADC_Init+0x300>)
 8001190:	f7ff fd2e 	bl	8000bf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7f5b      	ldrb	r3, [r3, #29]
 8001198:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800119e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d106      	bne.n	80011d0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c6:	3b01      	subs	r3, #1
 80011c8:	045b      	lsls	r3, r3, #17
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	4b60      	ldr	r3, [pc, #384]	@ (8001374 <HAL_ADC_Init+0x304>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff14 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 8001220:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d16d      	bne.n	8001304 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d16a      	bne.n	8001304 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001232:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800123a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800124a:	f023 0302 	bic.w	r3, r3, #2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	430b      	orrs	r3, r1
 8001256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800126e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001278:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800127c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6911      	ldr	r1, [r2, #16]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	430b      	orrs	r3, r1
 800128a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800128e:	e013      	b.n	80012b8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800129e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d118      	bne.n	80012f4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012d8:	4311      	orrs	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012e4:	430a      	orrs	r2, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	e007      	b.n	8001304 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10c      	bne.n	8001326 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f023 010f 	bic.w	r1, r3, #15
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	@ 0x30
 8001324:	e007      	b.n	8001336 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 020f 	bic.w	r2, r2, #15
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001346:	e007      	b.n	8001358 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134c:	f043 0210 	orr.w	r2, r3, #16
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001358:	7ffb      	ldrb	r3, [r7, #31]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	053e2d63 	.word	0x053e2d63
 800136c:	50000100 	.word	0x50000100
 8001370:	50000300 	.word	0x50000300
 8001374:	fff04007 	.word	0xfff04007

08001378 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001384:	4851      	ldr	r0, [pc, #324]	@ (80014cc <HAL_ADC_Start_DMA+0x154>)
 8001386:	f7ff fda7 	bl	8000ed8 <LL_ADC_GetMultimode>
 800138a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe46 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 808f 	bne.w	80014bc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Start_DMA+0x34>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e08a      	b.n	80014c2 <HAL_ADC_Start_DMA+0x14a>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d002      	beq.n	80013c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	d173      	bne.n	80014ae <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 fea8 	bl	800211c <ADC_Enable>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d166      	bne.n	80014a4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a38      	ldr	r2, [pc, #224]	@ (80014d0 <HAL_ADC_Start_DMA+0x158>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d002      	beq.n	80013fa <HAL_ADC_Start_DMA+0x82>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e001      	b.n	80013fe <HAL_ADC_Start_DMA+0x86>
 80013fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	4293      	cmp	r3, r2
 8001404:	d002      	beq.n	800140c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001428:	f023 0206 	bic.w	r2, r3, #6
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001430:	e002      	b.n	8001438 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143c:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <HAL_ADC_Start_DMA+0x15c>)
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <HAL_ADC_Start_DMA+0x160>)
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144c:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_ADC_Start_DMA+0x164>)
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	221c      	movs	r2, #28
 8001456:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0210 	orr.w	r2, r2, #16
 800146e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3340      	adds	r3, #64	@ 0x40
 800148a:	4619      	mov	r1, r3
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f001 fc9e 	bl	8002dd0 <HAL_DMA_Start_IT>
 8001494:	4603      	mov	r3, r0
 8001496:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdac 	bl	8000ffa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80014a2:	e00d      	b.n	80014c0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80014ac:	e008      	b.n	80014c0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80014ba:	e001      	b.n	80014c0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	50000300 	.word	0x50000300
 80014d0:	50000100 	.word	0x50000100
 80014d4:	08002229 	.word	0x08002229
 80014d8:	08002301 	.word	0x08002301
 80014dc:	0800231d 	.word	0x0800231d

080014e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014fc:	4883      	ldr	r0, [pc, #524]	@ (800170c <HAL_ADC_IRQHandler+0x22c>)
 80014fe:	f7ff fceb 	bl	8000ed8 <LL_ADC_GetMultimode>
 8001502:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d017      	beq.n	800153e <HAL_ADC_IRQHandler+0x5e>
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d012      	beq.n	800153e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001528:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 ff35 	bl	80023a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_ADC_IRQHandler+0x72>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8085 	beq.w	8001668 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d07f      	beq.n	8001668 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc05 	bl	8000d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d064      	beq.n	800165a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a5e      	ldr	r2, [pc, #376]	@ (8001710 <HAL_ADC_IRQHandler+0x230>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d002      	beq.n	80015a0 <HAL_ADC_IRQHandler+0xc0>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e001      	b.n	80015a4 <HAL_ADC_IRQHandler+0xc4>
 80015a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d008      	beq.n	80015be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d002      	beq.n	80015be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d104      	bne.n	80015c8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	e00d      	b.n	80015e4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a50      	ldr	r2, [pc, #320]	@ (8001710 <HAL_ADC_IRQHandler+0x230>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d002      	beq.n	80015d8 <HAL_ADC_IRQHandler+0xf8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	e001      	b.n	80015dc <HAL_ADC_IRQHandler+0xfc>
 80015d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d135      	bne.n	800165a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d12e      	bne.n	800165a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd0e 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11a      	bne.n	8001642 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020c 	bic.w	r2, r2, #12
 800161a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d112      	bne.n	800165a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001640:	e00b      	b.n	800165a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff f800 	bl	8000660 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	220c      	movs	r2, #12
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_ADC_IRQHandler+0x19c>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 809e 	beq.w	80017c4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8098 	beq.w	80017c4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fbae 	bl	8000e12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80016b6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb69 	bl	8000d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016c2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_ADC_IRQHandler+0x230>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d002      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x1f4>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	e001      	b.n	80016d8 <HAL_ADC_IRQHandler+0x1f8>
 80016d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	4293      	cmp	r3, r2
 80016de:	d008      	beq.n	80016f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d002      	beq.n	80016f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d104      	bne.n	80016fc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	e011      	b.n	8001720 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a03      	ldr	r2, [pc, #12]	@ (8001710 <HAL_ADC_IRQHandler+0x230>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d006      	beq.n	8001714 <HAL_ADC_IRQHandler+0x234>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e005      	b.n	8001718 <HAL_ADC_IRQHandler+0x238>
 800170c:	50000300 	.word	0x50000300
 8001710:	50000100 	.word	0x50000100
 8001714:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001718:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d047      	beq.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_ADC_IRQHandler+0x260>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03f      	beq.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800173c:	2b00      	cmp	r3, #0
 800173e:	d13a      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174a:	2b40      	cmp	r3, #64	@ 0x40
 800174c:	d133      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d12e      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc73 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d11a      	bne.n	800179e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001776:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d112      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800179c:	e00b      	b.n	80017b6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a2:	f043 0210 	orr.w	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fdca 	bl	8002350 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2260      	movs	r2, #96	@ 0x60
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d011      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x312>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f895 	bl	8001914 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <HAL_ADC_IRQHandler+0x342>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fdb0 	bl	8002378 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001828:	2b00      	cmp	r3, #0
 800182a:	d012      	beq.n	8001852 <HAL_ADC_IRQHandler+0x372>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fda2 	bl	800238c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d036      	beq.n	80018ca <HAL_ADC_IRQHandler+0x3ea>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d031      	beq.n	80018ca <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
 8001872:	e014      	b.n	800189e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800187a:	4825      	ldr	r0, [pc, #148]	@ (8001910 <HAL_ADC_IRQHandler+0x430>)
 800187c:	f7ff fb3a 	bl	8000ef4 <LL_ADC_GetMultiDMATransfer>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
 800188a:	e008      	b.n	800189e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10e      	bne.n	80018c2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b4:	f043 0202 	orr.w	r2, r3, #2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f833 	bl	8001928 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2210      	movs	r2, #16
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d018      	beq.n	8001906 <HAL_ADC_IRQHandler+0x426>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d013      	beq.n	8001906 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	f043 0208 	orr.w	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fd2f 	bl	8002364 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	50000300 	.word	0x50000300

08001914 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0b6      	sub	sp, #216	@ 0xd8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_ConfigChannel+0x22>
 800195a:	2302      	movs	r3, #2
 800195c:	e3c8      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x7b4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb59 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 83ad 	bne.w	80020d2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	f7ff fa18 	bl	8000dba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb47 	bl	8001022 <LL_ADC_REG_IsConversionOngoing>
 8001994:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb53 	bl	8001048 <LL_ADC_INJ_IsConversionOngoing>
 80019a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 81d9 	bne.w	8001d62 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 81d4 	bne.w	8001d62 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019c2:	d10f      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff fa32 	bl	8000e38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f9c6 	bl	8000d6e <LL_ADC_SetSamplingTimeCommonConfig>
 80019e2:	e00e      	b.n	8001a02 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	461a      	mov	r2, r3
 80019f2:	f7ff fa21 	bl	8000e38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f9b6 	bl	8000d6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d022      	beq.n	8001a6a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6919      	ldr	r1, [r3, #16]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a34:	f7ff f910 	bl	8000c58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6919      	ldr	r1, [r3, #16]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f7ff f95c 	bl	8000d02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x124>
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x126>
 8001a60:	2300      	movs	r3, #0
 8001a62:	461a      	mov	r2, r3
 8001a64:	f7ff f968 	bl	8000d38 <LL_ADC_SetOffsetSaturation>
 8001a68:	e17b      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f915 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x15a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f90a 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	e01e      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x198>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f8ff 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1b0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	e018      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1e2>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001b10:	2320      	movs	r3, #32
 8001b12:	e004      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8ce 	bl	8000ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8b2 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x220>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f8a7 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	0e9b      	lsrs	r3, r3, #26
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	e01e      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x25e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f89c 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e004      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x276>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	e018      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x2a8>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e004      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f86b 	bl	8000ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f84f 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10a      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x2e6>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f844 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	e01e      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x324>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2102      	movs	r1, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f839 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x33c>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	e016      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x36a>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e004      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f80a 	bl	8000ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe ffee 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x3a8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2103      	movs	r1, #3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ffe3 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 021f 	and.w	r2, r3, #31
 8001ce2:	e017      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x3d8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2103      	movs	r1, #3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ffd8 	bl	8000ca0 <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001cfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x3f0>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	e011      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x414>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe ffb5 	bl	8000ccc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f934 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 8140 	bne.w	8001ff4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f7ff f885 	bl	8000e90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a8f      	ldr	r2, [pc, #572]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x68c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	f040 8131 	bne.w	8001ff4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10b      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x47e>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	bf94      	ite	ls
 8001db2:	2301      	movls	r3, #1
 8001db4:	2300      	movhi	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e019      	b.n	8001dee <HAL_ADC_ConfigChannel+0x4b2>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dca:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001dcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e003      	b.n	8001dde <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d079      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x4d2>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	3301      	adds	r3, #1
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e0c:	e015      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x4fe>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x51e>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	e017      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x54e>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	ea42 0103 	orr.w	r1, r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x574>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x5a6>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e003      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 021f 	and.w	r2, r3, #31
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	e081      	b.n	8001fea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d107      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x5c6>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	3301      	adds	r3, #1
 8001efa:	069b      	lsls	r3, r3, #26
 8001efc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f00:	e015      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x5f2>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e003      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	069b      	lsls	r3, r3, #26
 8001f2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x612>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	e017      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x642>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x66e>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 021f 	and.w	r2, r3, #31
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b1e      	subs	r3, #30
 8001fa2:	051b      	lsls	r3, r3, #20
 8001fa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fa8:	e01e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x6ac>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	613b      	str	r3, [r7, #16]
  return result;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d104      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e006      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x698>
 8001fc6:	bf00      	nop
 8001fc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 021f 	and.w	r2, r3, #31
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	051b      	lsls	r3, r3, #20
 8001fe4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe ff22 	bl	8000e38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d071      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002000:	483e      	ldr	r0, [pc, #248]	@ (80020fc <HAL_ADC_ConfigChannel+0x7c0>)
 8002002:	f7fe fe1b 	bl	8000c3c <LL_ADC_GetCommonPathInternalCh>
 8002006:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a3c      	ldr	r2, [pc, #240]	@ (8002100 <HAL_ADC_ConfigChannel+0x7c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_ADC_ConfigChannel+0x6e2>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3a      	ldr	r2, [pc, #232]	@ (8002104 <HAL_ADC_ConfigChannel+0x7c8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d127      	bne.n	800206e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800201e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002032:	d157      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800203c:	4619      	mov	r1, r3
 800203e:	482f      	ldr	r0, [pc, #188]	@ (80020fc <HAL_ADC_ConfigChannel+0x7c0>)
 8002040:	f7fe fde9 	bl	8000c16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002044:	4b30      	ldr	r3, [pc, #192]	@ (8002108 <HAL_ADC_ConfigChannel+0x7cc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	4a30      	ldr	r2, [pc, #192]	@ (800210c <HAL_ADC_ConfigChannel+0x7d0>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800205e:	e002      	b.n	8002066 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800206c:	e03a      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a27      	ldr	r2, [pc, #156]	@ (8002110 <HAL_ADC_ConfigChannel+0x7d4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d113      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800207c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a22      	ldr	r2, [pc, #136]	@ (8002114 <HAL_ADC_ConfigChannel+0x7d8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02a      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002096:	4619      	mov	r1, r3
 8002098:	4818      	ldr	r0, [pc, #96]	@ (80020fc <HAL_ADC_ConfigChannel+0x7c0>)
 800209a:	f7fe fdbc 	bl	8000c16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800209e:	e021      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_ADC_ConfigChannel+0x7dc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11c      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <HAL_ADC_ConfigChannel+0x7d8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d011      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020c8:	4619      	mov	r1, r3
 80020ca:	480c      	ldr	r0, [pc, #48]	@ (80020fc <HAL_ADC_ConfigChannel+0x7c0>)
 80020cc:	f7fe fda3 	bl	8000c16 <LL_ADC_SetCommonPathInternalCh>
 80020d0:	e008      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80020ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	37d8      	adds	r7, #216	@ 0xd8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	80080000 	.word	0x80080000
 80020fc:	50000300 	.word	0x50000300
 8002100:	c3210000 	.word	0xc3210000
 8002104:	90c00010 	.word	0x90c00010
 8002108:	20000000 	.word	0x20000000
 800210c:	053e2d63 	.word	0x053e2d63
 8002110:	c7520000 	.word	0xc7520000
 8002114:	50000100 	.word	0x50000100
 8002118:	cb840000 	.word	0xcb840000

0800211c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ff51 	bl	8000fd4 <LL_ADC_IsEnabled>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d169      	bne.n	800220c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <ADC_Enable+0xfc>)
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e055      	b.n	800220e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff20 	bl	8000fac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800216c:	482b      	ldr	r0, [pc, #172]	@ (800221c <ADC_Enable+0x100>)
 800216e:	f7fe fd65 	bl	8000c3c <LL_ADC_GetCommonPathInternalCh>
 8002172:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800217c:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <ADC_Enable+0x104>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	4a28      	ldr	r2, [pc, #160]	@ (8002224 <ADC_Enable+0x108>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002196:	e002      	b.n	800219e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3b01      	subs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fccc 	bl	8000b40 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021aa:	e028      	b.n	80021fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe ff0f 	bl	8000fd4 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fef3 	bl	8000fac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7fe fcbb 	bl	8000b40 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d914      	bls.n	80021fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d00d      	beq.n	80021fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d1cf      	bne.n	80021ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	8000003f 	.word	0x8000003f
 800221c:	50000300 	.word	0x50000300
 8002220:	20000000 	.word	0x20000000
 8002224:	053e2d63 	.word	0x053e2d63

08002228 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800223e:	2b00      	cmp	r3, #0
 8002240:	d14b      	bne.n	80022da <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d021      	beq.n	80022a0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fd97 	bl	8000d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d032      	beq.n	80022d2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d12b      	bne.n	80022d2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11f      	bne.n	80022d2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800229e:	e018      	b.n	80022d2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d111      	bne.n	80022d2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7fe f9c4 	bl	8000660 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022d8:	e00e      	b.n	80022f8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff fb1e 	bl	8001928 <HAL_ADC_ErrorCallback>
}
 80022ec:	e004      	b.n	80022f8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7fe f984 	bl	800061c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233a:	f043 0204 	orr.w	r2, r3, #4
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff faf0 	bl	8001928 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	@ (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff29 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff40 	bl	80023fc <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff90 	bl	80024a8 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff5f 	bl	8002454 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff33 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa4 	bl	8002510 <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e014      	b.n	800260e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	791b      	ldrb	r3, [r3, #4]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe f8f3 	bl	80007e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b2      	b.n	8002796 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_DAC_Start_DMA+0x24>
 8002638:	2302      	movs	r3, #2
 800263a:	e0ac      	b.n	8002796 <HAL_DAC_Start_DMA+0x17e>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2202      	movs	r2, #2
 8002646:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d129      	bne.n	80026a2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4a53      	ldr	r2, [pc, #332]	@ (80027a0 <HAL_DAC_Start_DMA+0x188>)
 8002654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_DAC_Start_DMA+0x18c>)
 800265c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a51      	ldr	r2, [pc, #324]	@ (80027a8 <HAL_DAC_Start_DMA+0x190>)
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002674:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DAC_Start_DMA+0x6c>
 800267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267e:	2b04      	cmp	r3, #4
 8002680:	d005      	beq.n	800268e <HAL_DAC_Start_DMA+0x76>
 8002682:	e009      	b.n	8002698 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3308      	adds	r3, #8
 800268a:	61bb      	str	r3, [r7, #24]
        break;
 800268c:	e033      	b.n	80026f6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e02e      	b.n	80026f6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3310      	adds	r3, #16
 800269e:	61bb      	str	r3, [r7, #24]
        break;
 80026a0:	e029      	b.n	80026f6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a41      	ldr	r2, [pc, #260]	@ (80027ac <HAL_DAC_Start_DMA+0x194>)
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a40      	ldr	r2, [pc, #256]	@ (80027b0 <HAL_DAC_Start_DMA+0x198>)
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4a3f      	ldr	r2, [pc, #252]	@ (80027b4 <HAL_DAC_Start_DMA+0x19c>)
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DAC_Start_DMA+0xc0>
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d005      	beq.n	80026e2 <HAL_DAC_Start_DMA+0xca>
 80026d6:	e009      	b.n	80026ec <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	61bb      	str	r3, [r7, #24]
        break;
 80026e0:	e009      	b.n	80026f6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3318      	adds	r3, #24
 80026e8:	61bb      	str	r3, [r7, #24]
        break;
 80026ea:	e004      	b.n	80026f6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	331c      	adds	r3, #28
 80026f2:	61bb      	str	r3, [r7, #24]
        break;
 80026f4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800270a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f000 fb5b 	bl	8002dd0 <HAL_DMA_Start_IT>
 800271a:	4603      	mov	r3, r0
 800271c:	77fb      	strb	r3, [r7, #31]
 800271e:	e010      	b.n	8002742 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800272e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68d8      	ldr	r0, [r3, #12]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f000 fb49 	bl	8002dd0 <HAL_DMA_Start_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11c      	bne.n	8002788 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2201      	movs	r2, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_DAC_Start_DMA+0x1a0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <HAL_DAC_Start_DMA+0x1a4>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002778:	e002      	b.n	8002780 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3b01      	subs	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <HAL_DAC_Start_DMA+0x162>
 8002786:	e005      	b.n	8002794 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002794:	7ffb      	ldrb	r3, [r7, #31]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	08002b6d 	.word	0x08002b6d
 80027a4:	08002b8f 	.word	0x08002b8f
 80027a8:	08002bab 	.word	0x08002bab
 80027ac:	08002c15 	.word	0x08002c15
 80027b0:	08002c37 	.word	0x08002c37
 80027b4:	08002c53 	.word	0x08002c53
 80027b8:	20000000 	.word	0x20000000
 80027bc:	053e2d63 	.word	0x053e2d63

080027c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_DAC_ConfigChannel+0x1c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e19e      	b.n	8002b5a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	795b      	ldrb	r3, [r3, #5]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_DAC_ConfigChannel+0x2c>
 8002824:	2302      	movs	r3, #2
 8002826:	e198      	b.n	8002b5a <HAL_DAC_ConfigChannel+0x35e>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2202      	movs	r2, #2
 8002832:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d17a      	bne.n	8002932 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800283c:	f7fe f980 	bl	8000b40 <HAL_GetTick>
 8002840:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d13d      	bne.n	80028c4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002848:	e018      	b.n	800287c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800284a:	f7fe f979 	bl	8000b40 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d911      	bls.n	800287c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f043 0208 	orr.w	r2, r3, #8
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2203      	movs	r2, #3
 8002876:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e16e      	b.n	8002b5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1df      	bne.n	800284a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
 8002894:	e020      	b.n	80028d8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002896:	f7fe f953 	bl	8000b40 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d90f      	bls.n	80028c4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da0a      	bge.n	80028c4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f043 0208 	orr.w	r2, r3, #8
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2203      	movs	r2, #3
 80028be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e14a      	b.n	8002b5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dbe3      	blt.n	8002896 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	ea02 0103 	and.w	r1, r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	21ff      	movs	r1, #255	@ 0xff
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	ea02 0103 	and.w	r1, r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d11d      	bne.n	8002976 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	221f      	movs	r2, #31
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	4013      	ands	r3, r2
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296a:	4313      	orrs	r3, r2
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2207      	movs	r2, #7
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298e:	4013      	ands	r3, r2
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e00f      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d102      	bne.n	80029ae <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	e008      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80029b6:	2301      	movs	r3, #1
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	e001      	b.n	80029c0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	6a3a      	ldr	r2, [r7, #32]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4013      	ands	r3, r2
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_DAC_ConfigChannel+0x1f8>
 80029ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029f2:	e000      	b.n	80029f6 <HAL_DAC_ConfigChannel+0x1fa>
 80029f4:	2300      	movs	r3, #0
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4013      	ands	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	795b      	ldrb	r3, [r3, #5]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_DAC_ConfigChannel+0x224>
 8002a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a1e:	e000      	b.n	8002a22 <HAL_DAC_ConfigChannel+0x226>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d114      	bne.n	8002a62 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a38:	f001 fb7c 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8002a3c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4a48      	ldr	r2, [pc, #288]	@ (8002b64 <HAL_DAC_ConfigChannel+0x368>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d904      	bls.n	8002a50 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4e:	e00f      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4a45      	ldr	r2, [pc, #276]	@ (8002b68 <HAL_DAC_ConfigChannel+0x36c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d90a      	bls.n	8002a6e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	e006      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e000      	b.n	8002a70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002a6e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	4313      	orrs	r3, r2
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	22c0      	movs	r2, #192	@ 0xc0
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	ea02 0103 	and.w	r1, r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3728      	adds	r7, #40	@ 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	09896800 	.word	0x09896800
 8002b68:	04c4b400 	.word	0x04c4b400

08002b6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fe20 	bl	80027c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	711a      	strb	r2, [r3, #4]
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff fe19 	bl	80027d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fe0f 	bl	80027e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	711a      	strb	r2, [r3, #4]
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff ffd8 	bl	8002bd8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	711a      	strb	r2, [r3, #4]
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff ffd1 	bl	8002bec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ffc7 	bl	8002c00 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	711a      	strb	r2, [r3, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08d      	b.n	8002dae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b47      	ldr	r3, [pc, #284]	@ (8002db8 <HAL_DMA_Init+0x138>)
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d80f      	bhi.n	8002cbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b45      	ldr	r3, [pc, #276]	@ (8002dbc <HAL_DMA_Init+0x13c>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a45      	ldr	r2, [pc, #276]	@ (8002dc0 <HAL_DMA_Init+0x140>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <HAL_DMA_Init+0x144>)
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cbc:	e00e      	b.n	8002cdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <HAL_DMA_Init+0x148>)
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8002dc0 <HAL_DMA_Init+0x140>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dcc <HAL_DMA_Init+0x14c>)
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9b6 	bl	80030a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3c:	d102      	bne.n	8002d44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <HAL_DMA_Init+0x104>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d80c      	bhi.n	8002d84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9d6 	bl	800311c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e008      	b.n	8002d96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40020407 	.word	0x40020407
 8002dbc:	bffdfff8 	.word	0xbffdfff8
 8002dc0:	cccccccd 	.word	0xcccccccd
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	bffdfbf8 	.word	0xbffdfbf8
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DMA_Start_IT+0x20>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e066      	b.n	8002ebe <HAL_DMA_Start_IT+0xee>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d155      	bne.n	8002eb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f8fb 	bl	8003024 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 020e 	orr.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 020a 	orr.w	r2, r2, #10
 8002e66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d026      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x7a>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d021      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0204 	bic.w	r2, r2, #4
 8002f18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2104      	movs	r1, #4
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d071      	beq.n	800301a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f3e:	e06c      	b.n	800301a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2202      	movs	r2, #2
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02e      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d029      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10b      	bne.n	8002f84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 020a 	bic.w	r2, r2, #10
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	2102      	movs	r1, #2
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d038      	beq.n	800301a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fb0:	e033      	b.n	800301a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2208      	movs	r2, #8
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02a      	beq.n	800301c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d025      	beq.n	800301c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 020e 	bic.w	r2, r2, #14
 8002fde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800301a:	bf00      	nop
 800301c:	bf00      	nop
}
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800303a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f003 021f 	and.w	r2, r3, #31
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d108      	bne.n	8003084 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003082:	e007      	b.n	8003094 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d802      	bhi.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80030b4:	4b15      	ldr	r3, [pc, #84]	@ (800310c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e001      	b.n	80030be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3b08      	subs	r3, #8
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40020407 	.word	0x40020407
 800310c:	40020800 	.word	0x40020800
 8003110:	40020820 	.word	0x40020820
 8003114:	cccccccd 	.word	0xcccccccd
 8003118:	40020880 	.word	0x40020880

0800311c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800313e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	1000823f 	.word	0x1000823f
 8003160:	40020940 	.word	0x40020940

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003172:	e15a      	b.n	800342a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 814c 	beq.w	8003424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0201 	and.w	r2, r3, #1
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	6939      	ldr	r1, [r7, #16]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003448 <HAL_GPIO_Init+0x2e4>)
 80032da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003448 <HAL_GPIO_Init+0x2e4>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80032e4:	4b58      	ldr	r3, [pc, #352]	@ (8003448 <HAL_GPIO_Init+0x2e4>)
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f0:	4a56      	ldr	r2, [pc, #344]	@ (800344c <HAL_GPIO_Init+0x2e8>)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800331a:	d01f      	beq.n	800335c <HAL_GPIO_Init+0x1f8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a4c      	ldr	r2, [pc, #304]	@ (8003450 <HAL_GPIO_Init+0x2ec>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d019      	beq.n	8003358 <HAL_GPIO_Init+0x1f4>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <HAL_GPIO_Init+0x2f0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_GPIO_Init+0x1f0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a4a      	ldr	r2, [pc, #296]	@ (8003458 <HAL_GPIO_Init+0x2f4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00d      	beq.n	8003350 <HAL_GPIO_Init+0x1ec>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a49      	ldr	r2, [pc, #292]	@ (800345c <HAL_GPIO_Init+0x2f8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d007      	beq.n	800334c <HAL_GPIO_Init+0x1e8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a48      	ldr	r2, [pc, #288]	@ (8003460 <HAL_GPIO_Init+0x2fc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_GPIO_Init+0x1e4>
 8003344:	2305      	movs	r3, #5
 8003346:	e00a      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 8003348:	2306      	movs	r3, #6
 800334a:	e008      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 800334c:	2304      	movs	r3, #4
 800334e:	e006      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 8003350:	2303      	movs	r3, #3
 8003352:	e004      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 8003354:	2302      	movs	r3, #2
 8003356:	e002      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_GPIO_Init+0x1fa>
 800335c:	2300      	movs	r3, #0
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	f002 0203 	and.w	r2, r2, #3
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	4093      	lsls	r3, r2
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336e:	4937      	ldr	r1, [pc, #220]	@ (800344c <HAL_GPIO_Init+0x2e8>)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800337c:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <HAL_GPIO_Init+0x300>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a0:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ca:	4a26      	ldr	r2, [pc, #152]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033d0:	4b24      	ldr	r3, [pc, #144]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_GPIO_Init+0x300>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800341e:	4a11      	ldr	r2, [pc, #68]	@ (8003464 <HAL_GPIO_Init+0x300>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f ae9d 	bne.w	8003174 <HAL_GPIO_Init+0x10>
  }
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	48000400 	.word	0x48000400
 8003454:	48000800 	.word	0x48000800
 8003458:	48000c00 	.word	0x48000c00
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0bb      	b.n	80035f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b05      	cmp	r3, #5
 8003488:	d101      	bne.n	800348e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0b3      	b.n	80035f6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d101      	bne.n	800349e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0ab      	b.n	80035f6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b58      	ldr	r3, [pc, #352]	@ (8003600 <HAL_OPAMP_Init+0x198>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	4a57      	ldr	r2, [pc, #348]	@ (8003600 <HAL_OPAMP_Init+0x198>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80034aa:	4b55      	ldr	r3, [pc, #340]	@ (8003600 <HAL_OPAMP_Init+0x198>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd f9d6 	bl	800087c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d003      	beq.n	80034e0 <HAL_OPAMP_Init+0x78>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b60      	cmp	r3, #96	@ 0x60
 80034de:	d133      	bne.n	8003548 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0110 	bic.w	r1, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <HAL_OPAMP_Init+0x19c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6851      	ldr	r1, [r2, #4]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	430a      	orrs	r2, r1
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	7d09      	ldrb	r1, [r1, #20]
 8003514:	2901      	cmp	r1, #1
 8003516:	d102      	bne.n	800351e <HAL_OPAMP_Init+0xb6>
 8003518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800351c:	e000      	b.n	8003520 <HAL_OPAMP_Init+0xb8>
 800351e:	2100      	movs	r1, #0
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003532:	04d2      	lsls	r2, r2, #19
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800353a:	0612      	lsls	r2, r2, #24
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	430b      	orrs	r3, r1
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e035      	b.n	80035b4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 0110 	bic.w	r1, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <HAL_OPAMP_Init+0x19c>)
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6851      	ldr	r1, [r2, #4]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68d2      	ldr	r2, [r2, #12]
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6912      	ldr	r2, [r2, #16]
 800357c:	430a      	orrs	r2, r1
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	7d09      	ldrb	r1, [r1, #20]
 8003582:	2901      	cmp	r1, #1
 8003584:	d102      	bne.n	800358c <HAL_OPAMP_Init+0x124>
 8003586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800358a:	e000      	b.n	800358e <HAL_OPAMP_Init+0x126>
 800358c:	2100      	movs	r1, #0
 800358e:	4311      	orrs	r1, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003594:	4311      	orrs	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035a0:	04d2      	lsls	r2, r2, #19
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035a8:	0612      	lsls	r2, r2, #24
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db10      	blt.n	80035e0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	e0003e11 	.word	0xe0003e11

08003608 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e01d      	b.n	800365c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b05      	cmp	r3, #5
 800362a:	d102      	bne.n	8003632 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e014      	b.n	800365c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10c      	bne.n	8003658 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003656:	e001      	b.n	800365c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d141      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800367a:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d131      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003688:	4b47      	ldr	r3, [pc, #284]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800368e:	4a46      	ldr	r2, [pc, #280]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003698:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036a0:	4a41      	ldr	r2, [pc, #260]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a8:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2232      	movs	r2, #50	@ 0x32
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	0c9b      	lsrs	r3, r3, #18
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036be:	e002      	b.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d2:	d102      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f2      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036da:	4b33      	ldr	r3, [pc, #204]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d158      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e057      	b.n	800379c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ec:	4b2e      	ldr	r3, [pc, #184]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f2:	4a2d      	ldr	r2, [pc, #180]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036fc:	e04d      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003704:	d141      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003706:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003712:	d131      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003714:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800371a:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003724:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800372c:	4a1e      	ldr	r2, [pc, #120]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003734:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2232      	movs	r2, #50	@ 0x32
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	0c9b      	lsrs	r3, r3, #18
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800374a:	e002      	b.n	8003752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3b01      	subs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003752:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375e:	d102      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f2      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003772:	d112      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e011      	b.n	800379c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003778:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003788:	e007      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003792:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40007000 	.word	0x40007000
 80037ac:	20000000 	.word	0x20000000
 80037b0:	431bde83 	.word	0x431bde83

080037b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037b8:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a04      	ldr	r2, [pc, #16]	@ (80037d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c2:	6093      	str	r3, [r2, #8]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40007000 	.word	0x40007000

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e2fe      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d075      	beq.n	80038de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b97      	ldr	r3, [pc, #604]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037fc:	4b94      	ldr	r3, [pc, #592]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d102      	bne.n	8003812 <HAL_RCC_OscConfig+0x3e>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d002      	beq.n	8003818 <HAL_RCC_OscConfig+0x44>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d10b      	bne.n	8003830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	4b8d      	ldr	r3, [pc, #564]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d05b      	beq.n	80038dc <HAL_RCC_OscConfig+0x108>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d157      	bne.n	80038dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e2d9      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d106      	bne.n	8003848 <HAL_RCC_OscConfig+0x74>
 800383a:	4b85      	ldr	r3, [pc, #532]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a84      	ldr	r2, [pc, #528]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e01d      	b.n	8003884 <HAL_RCC_OscConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x98>
 8003852:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7e      	ldr	r2, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7b      	ldr	r2, [pc, #492]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0xb0>
 800386c:	4b78      	ldr	r3, [pc, #480]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a77      	ldr	r2, [pc, #476]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b75      	ldr	r3, [pc, #468]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a74      	ldr	r2, [pc, #464]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd f958 	bl	8000b40 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd f954 	bl	8000b40 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	@ 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e29e      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0xc0>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd f944 	bl	8000b40 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fd f940 	bl	8000b40 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	@ 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e28a      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ce:	4b60      	ldr	r3, [pc, #384]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0xe8>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ea:	4b59      	ldr	r3, [pc, #356]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	4b56      	ldr	r3, [pc, #344]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x136>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d002      	beq.n	8003910 <HAL_RCC_OscConfig+0x13c>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11f      	bne.n	8003950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003910:	4b4f      	ldr	r3, [pc, #316]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_OscConfig+0x154>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e25d      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b49      	ldr	r3, [pc, #292]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	4946      	ldr	r1, [pc, #280]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800393c:	4b45      	ldr	r3, [pc, #276]	@ (8003a54 <HAL_RCC_OscConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd f8b1 	bl	8000aa8 <HAL_InitTick>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d043      	beq.n	80039d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e249      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd f8ec 	bl	8000b40 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396c:	f7fd f8e8 	bl	8000b40 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e232      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397e:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b31      	ldr	r3, [pc, #196]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	492d      	ldr	r1, [pc, #180]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
 800399e:	e01a      	b.n	80039d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd f8c8 	bl	8000b40 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fd f8c4 	bl	8000b40 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e20e      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c6:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x1e0>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d041      	beq.n	8003a66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01c      	beq.n	8003a24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ea:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f0:	4a17      	ldr	r2, [pc, #92]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fd f8a1 	bl	8000b40 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fd f89d 	bl	8000b40 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e1e7      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a14:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ef      	beq.n	8003a02 <HAL_RCC_OscConfig+0x22e>
 8003a22:	e020      	b.n	8003a66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a24:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	4a09      	ldr	r2, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd f884 	bl	8000b40 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fd f880 	bl	8000b40 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d906      	bls.n	8003a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1ca      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a58:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ea      	bne.n	8003a3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a6 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a78:	4b84      	ldr	r3, [pc, #528]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2b4>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x2b6>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	4a7e      	ldr	r2, [pc, #504]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	4b79      	ldr	r3, [pc, #484]	@ (8003c90 <HAL_RCC_OscConfig+0x4bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab6:	4b76      	ldr	r3, [pc, #472]	@ (8003c90 <HAL_RCC_OscConfig+0x4bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a75      	ldr	r2, [pc, #468]	@ (8003c90 <HAL_RCC_OscConfig+0x4bc>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fd f83d 	bl	8000b40 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fd f839 	bl	8000b40 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e183      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c90 <HAL_RCC_OscConfig+0x4bc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d108      	bne.n	8003b02 <HAL_RCC_OscConfig+0x32e>
 8003af0:	4b66      	ldr	r3, [pc, #408]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	4a65      	ldr	r2, [pc, #404]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b00:	e024      	b.n	8003b4c <HAL_RCC_OscConfig+0x378>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d110      	bne.n	8003b2c <HAL_RCC_OscConfig+0x358>
 8003b0a:	4b60      	ldr	r3, [pc, #384]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	4a5a      	ldr	r2, [pc, #360]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_OscConfig+0x378>
 8003b2c:	4b57      	ldr	r3, [pc, #348]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	4a56      	ldr	r2, [pc, #344]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b3c:	4b53      	ldr	r3, [pc, #332]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b42:	4a52      	ldr	r2, [pc, #328]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fc fff4 	bl	8000b40 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fc fff0 	bl	8000b40 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e138      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	4b46      	ldr	r3, [pc, #280]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ed      	beq.n	8003b5c <HAL_RCC_OscConfig+0x388>
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fc ffdd 	bl	8000b40 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fc ffd9 	bl	8000b40 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e121      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ed      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bae:	7ffb      	ldrb	r3, [r7, #31]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb4:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	4a34      	ldr	r2, [pc, #208]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d03c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fc ffac 	bl	8000b40 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bec:	f7fc ffa8 	bl	8000b40 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0f2      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bfe:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <HAL_RCC_OscConfig+0x418>
 8003c0c:	e01b      	b.n	8003c46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c14:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fc ff8f 	bl	8000b40 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c26:	f7fc ff8b 	bl	8000b40 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0d5      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ef      	bne.n	8003c26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80c9 	beq.w	8003de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	f000 8083 	beq.w	8003d64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d15e      	bne.n	8003d24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <HAL_RCC_OscConfig+0x4b8>)
 8003c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fc ff65 	bl	8000b40 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	e00c      	b.n	8003c94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fc ff61 	bl	8000b40 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d905      	bls.n	8003c94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0ab      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	4b55      	ldr	r3, [pc, #340]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ec      	bne.n	8003c7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca0:	4b52      	ldr	r3, [pc, #328]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	4b52      	ldr	r3, [pc, #328]	@ (8003df0 <HAL_RCC_OscConfig+0x61c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6a11      	ldr	r1, [r2, #32]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cba:	0212      	lsls	r2, r2, #8
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0552      	lsls	r2, r2, #21
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cce:	0852      	lsrs	r2, r2, #1
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0652      	lsls	r2, r2, #25
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cda:	06d2      	lsls	r2, r2, #27
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	4943      	ldr	r1, [pc, #268]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce4:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a40      	ldr	r2, [pc, #256]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fc ff20 	bl	8000b40 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fc ff1c 	bl	8000b40 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e066      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b35      	ldr	r3, [pc, #212]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x530>
 8003d22:	e05e      	b.n	8003de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d24:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a30      	ldr	r2, [pc, #192]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fc ff06 	bl	8000b40 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fc ff02 	bl	8000b40 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04c      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4a:	4b28      	ldr	r3, [pc, #160]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d56:	4b25      	ldr	r3, [pc, #148]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4924      	ldr	r1, [pc, #144]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d5c:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <HAL_RCC_OscConfig+0x620>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
 8003d62:	e03e      	b.n	8003de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e039      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d70:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <HAL_RCC_OscConfig+0x618>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d12c      	bne.n	8003dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d123      	bne.n	8003dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d11b      	bne.n	8003dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d113      	bne.n	8003dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	019f800c 	.word	0x019f800c
 8003df4:	feeefffc 	.word	0xfeeefffc

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e11e      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b91      	ldr	r3, [pc, #580]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d910      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	498c      	ldr	r1, [pc, #560]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e106      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d073      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d129      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e54:	4b81      	ldr	r3, [pc, #516]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0f4      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e64:	f000 f972 	bl	800414c <RCC_GetSysClockFreqFromPLLSource>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8004060 <HAL_RCC_ClockConfig+0x268>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d93f      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e72:	4b7a      	ldr	r3, [pc, #488]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d033      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d12f      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e92:	4b72      	ldr	r3, [pc, #456]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e9a:	4a70      	ldr	r2, [pc, #448]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e024      	b.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0c6      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	4b66      	ldr	r3, [pc, #408]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0be      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ed0:	f000 f8ce 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a61      	ldr	r2, [pc, #388]	@ (8004060 <HAL_RCC_ClockConfig+0x268>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d909      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ede:	4b5f      	ldr	r3, [pc, #380]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ee6:	4a5d      	ldr	r2, [pc, #372]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f023 0203 	bic.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4957      	ldr	r1, [pc, #348]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fc fe1c 	bl	8000b40 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fc fe18 	bl	8000b40 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e095      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	4b4e      	ldr	r3, [pc, #312]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 020c 	and.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d1eb      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f4c:	4b43      	ldr	r3, [pc, #268]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a42      	ldr	r2, [pc, #264]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f64:	4b3d      	ldr	r3, [pc, #244]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b39      	ldr	r3, [pc, #228]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4936      	ldr	r1, [pc, #216]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f8e:	4b33      	ldr	r3, [pc, #204]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4a32      	ldr	r2, [pc, #200]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d21d      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 020f 	bic.w	r2, r3, #15
 8003fb0:	4929      	ldr	r1, [pc, #164]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc fdc2 	bl	8000b40 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fc fdbe 	bl	8000b40 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e03b      	b.n	800404e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	@ (8004058 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1ed      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4917      	ldr	r1, [pc, #92]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400e:	4b13      	ldr	r3, [pc, #76]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	490f      	ldr	r1, [pc, #60]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004022:	f000 f825 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_RCC_ClockConfig+0x264>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	490c      	ldr	r1, [pc, #48]	@ (8004064 <HAL_RCC_ClockConfig+0x26c>)
 8004034:	5ccb      	ldrb	r3, [r1, r3]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <HAL_RCC_ClockConfig+0x270>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004042:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <HAL_RCC_ClockConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc fd2e 	bl	8000aa8 <HAL_InitTick>
 800404c:	4603      	mov	r3, r0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40022000 	.word	0x40022000
 800405c:	40021000 	.word	0x40021000
 8004060:	04c4b400 	.word	0x04c4b400
 8004064:	080049d8 	.word	0x080049d8
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004076:	4b2c      	ldr	r3, [pc, #176]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b04      	cmp	r3, #4
 8004080:	d102      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004082:	4b2a      	ldr	r3, [pc, #168]	@ (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e047      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d102      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004094:	4b26      	ldr	r3, [pc, #152]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e03e      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800409a:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d136      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	3301      	adds	r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ce:	68d2      	ldr	r2, [r2, #12]
 80040d0:	0a12      	lsrs	r2, r2, #8
 80040d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	617b      	str	r3, [r7, #20]
      break;
 80040dc:	e00c      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	0a12      	lsrs	r2, r2, #8
 80040ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
      break;
 80040f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	0e5b      	lsrs	r3, r3, #25
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	e001      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004118:	693b      	ldr	r3, [r7, #16]
}
 800411a:	4618      	mov	r0, r3
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	00f42400 	.word	0x00f42400
 8004130:	007a1200 	.word	0x007a1200

08004134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000

0800414c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d10c      	bne.n	800418a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004170:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	4a14      	ldr	r2, [pc, #80]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	0a12      	lsrs	r2, r2, #8
 800417e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
    break;
 8004188:	e00c      	b.n	80041a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4a0e      	ldr	r2, [pc, #56]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	0a12      	lsrs	r2, r2, #8
 8004198:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    break;
 80041a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0e5b      	lsrs	r3, r3, #25
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e0:	2300      	movs	r3, #0
 80041e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e4:	2300      	movs	r3, #0
 80041e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8098 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b43      	ldr	r3, [pc, #268]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b40      	ldr	r3, [pc, #256]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a3f      	ldr	r2, [pc, #252]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
 8004212:	4b3d      	ldr	r3, [pc, #244]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004222:	4b3a      	ldr	r3, [pc, #232]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a39      	ldr	r2, [pc, #228]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422e:	f7fc fc87 	bl	8000b40 <HAL_GetTick>
 8004232:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004234:	e009      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fc fc83 	bl	8000b40 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
        break;
 8004248:	e005      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424a:	4b30      	ldr	r3, [pc, #192]	@ (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d159      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425c:	4b2a      	ldr	r3, [pc, #168]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004266:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d019      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004284:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a1f      	ldr	r2, [pc, #124]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a4:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fc fc43 	bl	8000b40 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e00b      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fc fc3f 	bl	8000b40 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d902      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	74fb      	strb	r3, [r7, #19]
            break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ec      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	4b07      	ldr	r3, [pc, #28]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004314:	7c7b      	ldrb	r3, [r7, #17]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4ba6      	ldr	r3, [pc, #664]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	4aa5      	ldr	r2, [pc, #660]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004332:	4ba0      	ldr	r3, [pc, #640]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	499c      	ldr	r1, [pc, #624]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004354:	4b97      	ldr	r3, [pc, #604]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4994      	ldr	r1, [pc, #592]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004376:	4b8f      	ldr	r3, [pc, #572]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	498b      	ldr	r1, [pc, #556]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004398:	4b86      	ldr	r3, [pc, #536]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4983      	ldr	r1, [pc, #524]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ba:	4b7e      	ldr	r3, [pc, #504]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	497a      	ldr	r1, [pc, #488]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043dc:	4b75      	ldr	r3, [pc, #468]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	4972      	ldr	r1, [pc, #456]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fe:	4b6d      	ldr	r3, [pc, #436]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4969      	ldr	r1, [pc, #420]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004420:	4b64      	ldr	r3, [pc, #400]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4961      	ldr	r1, [pc, #388]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004442:	4b5c      	ldr	r3, [pc, #368]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	4958      	ldr	r1, [pc, #352]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004464:	4b53      	ldr	r3, [pc, #332]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004472:	4950      	ldr	r1, [pc, #320]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b4b      	ldr	r3, [pc, #300]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a4a      	ldr	r2, [pc, #296]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800449c:	4b45      	ldr	r3, [pc, #276]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	4942      	ldr	r1, [pc, #264]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ba:	d105      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b3d      	ldr	r3, [pc, #244]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a3c      	ldr	r2, [pc, #240]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044d4:	4b37      	ldr	r3, [pc, #220]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	4934      	ldr	r1, [pc, #208]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a2e      	ldr	r2, [pc, #184]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450c:	4b29      	ldr	r3, [pc, #164]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451a:	4926      	ldr	r1, [pc, #152]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b21      	ldr	r3, [pc, #132]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a20      	ldr	r2, [pc, #128]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004536:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004544:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	4918      	ldr	r1, [pc, #96]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800457c:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004582:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	490a      	ldr	r1, [pc, #40]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a04      	ldr	r2, [pc, #16]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e049      	b.n	800465e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc f9a0 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 f898 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d001      	beq.n	8004680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e042      	b.n	8004706 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a21      	ldr	r2, [pc, #132]	@ (8004714 <HAL_TIM_Base_Start+0xac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d018      	beq.n	80046c4 <HAL_TIM_Base_Start+0x5c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469a:	d013      	beq.n	80046c4 <HAL_TIM_Base_Start+0x5c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <HAL_TIM_Base_Start+0xb0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00e      	beq.n	80046c4 <HAL_TIM_Base_Start+0x5c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <HAL_TIM_Base_Start+0xb4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_TIM_Base_Start+0x5c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <HAL_TIM_Base_Start+0xb8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_TIM_Base_Start+0x5c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_TIM_Base_Start+0xbc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d115      	bne.n	80046f0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <HAL_TIM_Base_Start+0xc0>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d015      	beq.n	8004702 <HAL_TIM_Base_Start+0x9a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046dc:	d011      	beq.n	8004702 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	e008      	b.n	8004702 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e000      	b.n	8004704 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40013400 	.word	0x40013400
 8004724:	40014000 	.word	0x40014000
 8004728:	00010007 	.word	0x00010007

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a42      	ldr	r2, [pc, #264]	@ (8004848 <TIM_Base_SetConfig+0x11c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00f      	beq.n	8004764 <TIM_Base_SetConfig+0x38>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <TIM_Base_SetConfig+0x120>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3e      	ldr	r2, [pc, #248]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3d      	ldr	r2, [pc, #244]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <TIM_Base_SetConfig+0x11c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01b      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d017      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a30      	ldr	r2, [pc, #192]	@ (800484c <TIM_Base_SetConfig+0x120>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2f      	ldr	r2, [pc, #188]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00f      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <TIM_Base_SetConfig+0x12c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <TIM_Base_SetConfig+0x134>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d108      	bne.n	80047c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <TIM_Base_SetConfig+0x11c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_Base_SetConfig+0xe8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a17      	ldr	r2, [pc, #92]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_Base_SetConfig+0xe8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a16      	ldr	r2, [pc, #88]	@ (8004858 <TIM_Base_SetConfig+0x12c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_Base_SetConfig+0xe8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a15      	ldr	r2, [pc, #84]	@ (800485c <TIM_Base_SetConfig+0x130>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0xe8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a14      	ldr	r2, [pc, #80]	@ (8004860 <TIM_Base_SetConfig+0x134>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d105      	bne.n	800483a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]
  }
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40013400 	.word	0x40013400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800

08004864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004878:	2302      	movs	r3, #2
 800487a:	e065      	b.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d108      	bne.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d018      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f2:	d013      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00e      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a12      	ldr	r2, [pc, #72]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a13      	ldr	r2, [pc, #76]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10c      	bne.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4313      	orrs	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40014000 	.word	0x40014000

08004968 <memset>:
 8004968:	4402      	add	r2, r0
 800496a:	4603      	mov	r3, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	d100      	bne.n	8004972 <memset+0xa>
 8004970:	4770      	bx	lr
 8004972:	f803 1b01 	strb.w	r1, [r3], #1
 8004976:	e7f9      	b.n	800496c <memset+0x4>

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	@ (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	@ (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	@ (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	@ (80049bc <__libc_init_array+0x44>)
 800498c:	f000 f818 	bl	80049c0 <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	080049e8 	.word	0x080049e8
 80049b4:	080049e8 	.word	0x080049e8
 80049b8:	080049e8 	.word	0x080049e8
 80049bc:	080049ec 	.word	0x080049ec

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
